/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Box3D = __webpack_require__(1);

	var _Box3D2 = _interopRequireDefault(_Box3D);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Box3D2.default;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _RuntimeEvents = __webpack_require__(4);

	var _RuntimeEvents2 = _interopRequireDefault(_RuntimeEvents);

	var _Engine = __webpack_require__(5);

	var _Engine2 = _interopRequireDefault(_Engine);

	var _EffectComposer = __webpack_require__(62);

	var _EffectComposer2 = _interopRequireDefault(_EffectComposer);

	var _BloomPass = __webpack_require__(63);

	var _BloomPass2 = _interopRequireDefault(_BloomPass);

	var _BokehPass = __webpack_require__(64);

	var _BokehPass2 = _interopRequireDefault(_BokehPass);

	var _DotScreenPass = __webpack_require__(65);

	var _DotScreenPass2 = _interopRequireDefault(_DotScreenPass);

	var _FilmPass = __webpack_require__(66);

	var _FilmPass2 = _interopRequireDefault(_FilmPass);

	var _MaskPass = __webpack_require__(67);

	var _MaskPass2 = _interopRequireDefault(_MaskPass);

	var _RenderPass = __webpack_require__(68);

	var _RenderPass2 = _interopRequireDefault(_RenderPass);

	var _SavePass = __webpack_require__(69);

	var _SavePass2 = _interopRequireDefault(_SavePass);

	var _ShaderPass = __webpack_require__(70);

	var _ShaderPass2 = _interopRequireDefault(_ShaderPass);

	var _TexturePass = __webpack_require__(109);

	var _TexturePass2 = _interopRequireDefault(_TexturePass);

	var _AdaptiveToneMappingPass = __webpack_require__(110);

	var _AdaptiveToneMappingPass2 = _interopRequireDefault(_AdaptiveToneMappingPass);

	var _AnimationAsset = __webpack_require__(111);

	var _AnimationAsset2 = _interopRequireDefault(_AnimationAsset);

	var _ApplicationAsset = __webpack_require__(112);

	var _ApplicationAsset2 = _interopRequireDefault(_ApplicationAsset);

	var _AudioAsset = __webpack_require__(113);

	var _AudioAsset2 = _interopRequireDefault(_AudioAsset);

	var _DocumentAsset = __webpack_require__(114);

	var _DocumentAsset2 = _interopRequireDefault(_DocumentAsset);

	var _MaterialAsset = __webpack_require__(17);

	var _MaterialAsset2 = _interopRequireDefault(_MaterialAsset);

	var _MeshGeometryAsset = __webpack_require__(119);

	var _MeshGeometryAsset2 = _interopRequireDefault(_MeshGeometryAsset);

	var _PrimitiveGeometryAsset = __webpack_require__(121);

	var _PrimitiveGeometryAsset2 = _interopRequireDefault(_PrimitiveGeometryAsset);

	var _PrefabAsset = __webpack_require__(122);

	var _PrefabAsset2 = _interopRequireDefault(_PrefabAsset);

	var _RenderTexture2DAsset = __webpack_require__(123);

	var _RenderTexture2DAsset2 = _interopRequireDefault(_RenderTexture2DAsset);

	var _RenderTextureCubeAsset = __webpack_require__(124);

	var _RenderTextureCubeAsset2 = _interopRequireDefault(_RenderTextureCubeAsset);

	var _SceneAsset = __webpack_require__(125);

	var _SceneAsset2 = _interopRequireDefault(_SceneAsset);

	var _ShaderAsset = __webpack_require__(126);

	var _ShaderAsset2 = _interopRequireDefault(_ShaderAsset);

	var _ScriptAsset = __webpack_require__(132);

	var _ScriptAsset2 = _interopRequireDefault(_ScriptAsset);

	var _Texture2DAsset = __webpack_require__(134);

	var _Texture2DAsset2 = _interopRequireDefault(_Texture2DAsset);

	var _TextureCubeAsset = __webpack_require__(135);

	var _TextureCubeAsset2 = _interopRequireDefault(_TextureCubeAsset);

	var _TextureVideoAsset = __webpack_require__(136);

	var _TextureVideoAsset2 = _interopRequireDefault(_TextureVideoAsset);

	var _Box3DObject = __webpack_require__(137);

	var _Box3DObject2 = _interopRequireDefault(_Box3DObject);

	var _CameraObject = __webpack_require__(138);

	var _CameraObject2 = _interopRequireDefault(_CameraObject);

	var _LightObject = __webpack_require__(139);

	var _LightObject2 = _interopRequireDefault(_LightObject);

	var _SkinnedMeshObject = __webpack_require__(140);

	var _SkinnedMeshObject2 = _interopRequireDefault(_SkinnedMeshObject);

	var _StaticMeshObject = __webpack_require__(142);

	var _StaticMeshObject2 = _interopRequireDefault(_StaticMeshObject);

	var _ModelObject = __webpack_require__(143);

	var _ModelObject2 = _interopRequireDefault(_ModelObject);

	var _APIUtilities = __webpack_require__(133);

	var _APIUtilities2 = _interopRequireDefault(_APIUtilities);

	var _DOMUtilities = __webpack_require__(144);

	var _DOMUtilities2 = _interopRequireDefault(_DOMUtilities);

	var _JSONLoader = __webpack_require__(115);

	var _JSONLoader2 = _interopRequireDefault(_JSONLoader);

	var _DevResourceLoader = __webpack_require__(145);

	var _DevResourceLoader2 = _interopRequireDefault(_DevResourceLoader);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Box3D = window.Box3D || {};
	var applicationContexts = {};
	var _isMobile = /iphone|ipad|ipod|android|blackberry|bb10|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase());
	var _isIOS = /iphone|ipad|ipod/i.test(navigator.userAgent.toLowerCase());
	var _isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
	var _isMac = /mac/i.test(navigator.userAgent.toLowerCase());
	var _isLinux = /linux/i.test(navigator.userAgent.toLowerCase());
	var _isUnix = /x11/i.test(navigator.userAgent.toLowerCase());
	var _isWindows = /windows/i.test(navigator.userAgent.toLowerCase());
	var _isChrome = /chrome/i.test(navigator.userAgent.toLowerCase());
	var _isFirefox = /firefox/i.test(navigator.userAgent.toLowerCase());
	var _isSafari = /safari/i.test(navigator.userAgent.toLowerCase());
	var _isOpera = /opera/i.test(navigator.userAgent.toLowerCase());
	var _isEdge = /edge/i.test(navigator.userAgent.toLowerCase());

	_lodash2.default.extend(Box3D, {

	  getBrowser: function getBrowser() {
	    var ua = navigator.userAgent,
	        tem,
	        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [],
	        EdgeM = ua.match(/(edge(?=\/))\/?\s*(\d+)/i) || [];
	    if (EdgeM.length) {
	      M = EdgeM;
	    }
	    if (/trident/i.test(M[1])) {
	      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
	      return 'IE ' + (tem[1] || '');
	    }
	    if (M[1] === 'Chrome') {
	      tem = ua.match(/\bOPR\/(\d+)/);
	      if (tem != null) return 'Opera ' + tem[1];
	    }
	    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
	    if ((tem = ua.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
	    return M.join(' ');
	  },

	  isMobile: function isMobile() {
	    return _isMobile;
	  },

	  isIOS: function isIOS() {
	    return _isIOS;
	  },

	  isAndroid: function isAndroid() {
	    return _isAndroid;
	  },

	  isMac: function isMac() {
	    return _isMac;
	  },

	  isLinux: function isLinux() {
	    return _isLinux;
	  },

	  isUnix: function isUnix() {
	    return _isUnix;
	  },

	  isWindows: function isWindows() {
	    return _isWindows;
	  },

	  isChrome: function isChrome() {
	    return _isChrome;
	  },

	  isFirefox: function isFirefox() {
	    return _isFirefox;
	  },

	  isSafari: function isSafari() {
	    return _isSafari;
	  },

	  isOpera: function isOpera() {
	    return _isOpera;
	  },

	  isIE: function isIE() {
	    var isIE = /ie/i.test(Box3D.getBrowser().toLowerCase());
	    return isIE;
	  },

	  isIE11: function isIE11() {
	    var isIE11 = /ie 11/i.test(Box3D.getBrowser().toLowerCase());
	    return isIE11;
	  },

	  isEdge: function isEdge() {
	    return _isEdge;
	  },

	  // Box3D.defaultPaths = Box3D.defaultPaths || {
	  //     apiBaseUrl: window.verold && window.verold.apiBaseUrl || '',
	  //     glAssetsBaseUrl: window.verold && window.verold.glAssetsBaseUrl || '',
	  //     assetsBaseUrl: window.verold && window.verold.assetsBaseUrl || '',
	  //     staticBaseUrls: window.verold && window.verold.staticBaseUrls || {
	  //         js: '',
	  //         css: '',
	  //         images: ''
	  //     }
	  // };

	  globalEvents: new _RuntimeEvents2.default(),

	  getApplicationContext: function getApplicationContext(name) {
	    if (!applicationContexts[name]) {
	      applicationContexts[name] = {};
	    }

	    return applicationContexts[name];
	  },

	  browserCaps: function () {
	    var webGLContext;

	    try {
	      webGLContext = window.WebGLRenderingContext ? document.createElement('canvas').getContext('experimental-webgl') : null;
	    } catch (e) {
	      // nothing
	    }
	    var webGLEnabled = !!webGLContext;
	    var floatingPointTexturesEnabeled = webGLEnabled ? !!webGLContext.getExtension('OES_texture_float') : false;
	    var vertexTexturesEnabeled = webGLEnabled ? !!(webGLContext.getParameter(webGLContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS) !== 0) : false;

	    webGLContext = null;

	    return {
	      isWebGLEnabled: function isWebGLEnabled() {
	        return webGLEnabled;
	      },

	      isFloatingPointTexturesEnabeled: function isFloatingPointTexturesEnabeled() {
	        return floatingPointTexturesEnabeled;
	      },

	      isVertexTexturesEnabeled: function isVertexTexturesEnabeled() {
	        return vertexTexturesEnabeled;
	      }
	    };
	  }()
	});

	// Assets

	// Objects

	// Utilities

	Box3D.Engine = _Engine2.default;

	Box3D.EffectComposer = _EffectComposer2.default;
	Box3D.BloomPass = _BloomPass2.default;
	Box3D.BokehPass = _BokehPass2.default;
	Box3D.DotScreenPass = _DotScreenPass2.default;
	Box3D.FilmPass = _FilmPass2.default;
	Box3D.MaskPass = _MaskPass2.default;
	Box3D.RenderPass = _RenderPass2.default;
	Box3D.SavePass = _SavePass2.default;
	Box3D.ShaderPass = _ShaderPass2.default;
	Box3D.TexturePass = _TexturePass2.default;
	Box3D.AdaptiveToneMappingPass = _AdaptiveToneMappingPass2.default;

	Box3D.AnimationAsset = _AnimationAsset2.default;
	Box3D.ApplicationAsset = _ApplicationAsset2.default;
	Box3D.AudioAsset = _AudioAsset2.default;
	Box3D.DocumentAsset = _DocumentAsset2.default;
	Box3D.MaterialAsset = _MaterialAsset2.default;
	Box3D.MeshGeometryAsset = _MeshGeometryAsset2.default;
	Box3D.PrimitiveGeometryAsset = _PrimitiveGeometryAsset2.default;
	Box3D.PrefabAsset = _PrefabAsset2.default;
	Box3D.RenderTexture2DAsset = _RenderTexture2DAsset2.default;
	Box3D.RenderTextureCubeAsset = _RenderTextureCubeAsset2.default;
	Box3D.SceneAsset = _SceneAsset2.default;
	Box3D.ShaderAsset = _ShaderAsset2.default;
	Box3D.ScriptAsset = _ScriptAsset2.default;
	Box3D.Texture2DAsset = _Texture2DAsset2.default;
	Box3D.TextureCubeAsset = _TextureCubeAsset2.default;
	Box3D.TextureVideoAsset = _TextureVideoAsset2.default;

	Box3D.Box3DObject = _Box3DObject2.default;
	Box3D.CameraObject = _CameraObject2.default;
	Box3D.LightObject = _LightObject2.default;
	Box3D.SkinnedMeshObject = _SkinnedMeshObject2.default;
	Box3D.StaticMeshObject = _StaticMeshObject2.default;
	Box3D.ModelObject = _ModelObject2.default;

	Box3D.APIUtilities = _APIUtilities2.default;
	Box3D.DOMUtilities = _DOMUtilities2.default;
	Box3D.JSONLoader = _JSONLoader2.default;
	Box3D.DevResourceLoader = _DevResourceLoader2.default;

	exports.default = Box3D;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);

	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;

	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);

	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;

	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);

	      view.set(new Uint8Array(buffer));
	      return result;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;

	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;

	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }

	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;

	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;

	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);

	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);

	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };

	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)(module), (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var RuntimeEvents = function () {
	  function RuntimeEvents() {
	    _classCallCheck(this, RuntimeEvents);
	  }

	  /**
	   * Bind an event to a `callback` function.
	   * @method on
	   * @public
	   * @param  {String}   name     The name of the event
	   * @param  {Function} callback The function to call when the event occurs.
	   * @param  {Object}   context  The context in which the callback will be called.
	   */

	  _createClass(RuntimeEvents, [{
	    key: 'on',
	    value: function on(name, callback, context) {
	      this._events = this._events || {};
	      var events = this._events[name] || (this._events[name] = []);
	      events.push({ callback: callback, context: context, ctx: context || this });
	      return this;
	    }

	    /**
	     * Bind an event to only be triggered a single time. After the first time the callback
	     * is invoked, it will be removed.
	     * @method once
	     * @public
	     * @param  {String}   name     The name of the event
	     * @param  {Function} callback The function to call when the event occurs.
	     * @param  {Object}   context  The context in which the callback will be called.
	     */

	  }, {
	    key: 'once',
	    value: function once(name, callback, context) {
	      if (!_lodash2.default.isFunction(callback)) {
	        return;
	      }
	      var self = this;
	      var once = _lodash2.default.once(function () {
	        self.off(name, once);
	        callback.apply(this, arguments);
	      });
	      once._callback = callback;
	      return this.on(name, once, context);
	    }

	    /**
	     * Remove one or many callbacks. If `context` is null, removes all
	     * callbacks with that function. If `callback` is null, removes all
	     * callbacks for the event. If `name` is null, removes all bound
	     * callbacks for all events.
	     * @method off
	     * @public
	     * @param  {String}   name     The name of the event
	     * @param  {Function} callback The function to call when the event occurs.
	     * @param  {Object}   context  The context in which the callback will be called.
	     */

	  }, {
	    key: 'off',
	    value: function off(name, callback, context) {
	      var retain, ev, events, names, i, l, j, k;
	      if (!name && !callback && !context) {
	        this._events = void 0;
	        return this;
	      }
	      names = name ? [name] : _lodash2.default.keys(this._events);
	      for (i = 0, l = names.length; i < l; i++) {
	        name = names[i];
	        events = this._events[name];
	        if (events) {
	          this._events[name] = retain = [];
	          if (callback || context) {
	            for (j = 0, k = events.length; j < k; j++) {
	              ev = events[j];
	              if (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) {
	                retain.push(ev);
	              }
	            }
	          }
	          if (!retain.length) delete this._events[name];
	        }
	      }

	      return this;
	    }

	    /**
	     * Trigger one or many events, firing all bound callbacks. Callbacks are
	     * passed the same arguments as `trigger` is, apart from the event name
	     * (unless you're listening on `"all"`, which will cause your callback to
	     * receive the true name of the event as the first argument).
	     * @method trigger
	     * @public
	     * @param  {String} name The name of the event
	     */

	  }, {
	    key: 'trigger',
	    value: function trigger(name) {
	      if (!this._events) return this;
	      var args = [];
	      for (var i = 1; i < arguments.length; i++) {
	        args[i - 1] = arguments[i];
	      }

	      var events = this._events[name];
	      var allEvents = this._events.all;
	      if (events) triggerEvents(events, args);
	      args.unshift(name);
	      if (allEvents) triggerEvents(allEvents, args);
	      return this;
	    }

	    /**
	     * Tell this object to stop listening to either specific events ... or
	     * to every object it's currently listening to.
	     * @method stopListening
	     * @public
	     * @param  {[type]}   obj      The object that the event is bound to
	     * @param  {String}   name     The name of the event
	     * @param  {Function} callback The function to call when the event occurs.
	     */

	  }, {
	    key: 'stopListening',
	    value: function stopListening(obj, name, callback) {
	      var listeningTo = this._listeningTo;
	      if (!listeningTo) return this;
	      var remove = !name && !callback;
	      if (!callback && (typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') callback = this;
	      if (obj) (listeningTo = {})[obj._listenId] = obj;
	      for (var id in listeningTo) {
	        obj = listeningTo[id];
	        obj.off(name, callback, this);
	        if (remove || _lodash2.default.isEmpty(obj._events)) delete this._listeningTo[id];
	      }
	      return this;
	    }

	    /**
	     * Returns true if someone is listening to the specified event on this object.
	     * @method isEventBound
	     * @public
	     * @param  {String}  name The name of the event.
	     * @return {Boolean}      True if the event has a listener already. False otherwise.
	     */

	  }, {
	    key: 'isEventBound',
	    value: function isEventBound(name) {
	      return this._events[name] ? true : false;
	    }
	  }]);

	  return RuntimeEvents;
	}();

	var triggerEvents = function triggerEvents(events, args) {
	  var ev,
	      i = -1,
	      l = events.length,
	      a1 = args[0],
	      a2 = args[1],
	      a3 = args[2];
	  switch (args.length) {
	    case 0:
	      while (++i < l) {
	        (ev = events[i]).callback.call(ev.ctx);
	      }return;
	    case 1:
	      while (++i < l) {
	        (ev = events[i]).callback.call(ev.ctx, a1);
	      }return;
	    case 2:
	      while (++i < l) {
	        (ev = events[i]).callback.call(ev.ctx, a1, a2);
	      }return;
	    case 3:
	      while (++i < l) {
	        (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
	      }return;
	    default:
	      while (++i < l) {
	        (ev = events[i]).callback.apply(ev.ctx, args);
	      }return;
	  }
	};

	var listenMethods = { listenTo: 'on', listenToOnce: 'once' };

	// Inversion-of-control versions of `on` and `once`. Tell *this* object to
	// listen to an event in another object ... keeping track of what it's
	// listening to.
	_lodash2.default.each(listenMethods, function (implementation, method) {
	  RuntimeEvents.prototype[method] = function (obj, name, callback) {
	    var listeningTo = this._listeningTo || (this._listeningTo = {});
	    var id = obj._listenId || (obj._listenId = _lodash2.default.uniqueId('l'));
	    listeningTo[id] = obj;
	    if (!callback && (typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') callback = this;
	    obj[implementation](name, callback, this);
	    return this;
	  };
	});

	window.Box3D = window.Box3D || {};
	exports.default = RuntimeEvents;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _uuid = __webpack_require__(9);

	var _uuid2 = _interopRequireDefault(_uuid);

	var _RuntimeEvents2 = __webpack_require__(4);

	var _RuntimeEvents3 = _interopRequireDefault(_RuntimeEvents2);

	var _EntityDispatcher = __webpack_require__(10);

	var _EntityDispatcher2 = _interopRequireDefault(_EntityDispatcher);

	var _AssetRegistry = __webpack_require__(11);

	var _AssetRegistry2 = _interopRequireDefault(_AssetRegistry);

	var _raf = __webpack_require__(59);

	var _raf2 = _interopRequireDefault(_raf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	// requstAnimationFrame polyfill only used in cases where native version is not
	// available.

	function getElement(obj) {
	  var els = undefined;
	  if (obj && obj.jquery) {
	    return obj.get(0);
	  } else if (_lodash2.default.isString(obj)) {
	    els = document.querySelectorAll(obj);

	    return els.length && els[0];
	  } else {
	    return obj;
	  }
	}

	/* global Box3D */

	/**
	 * This is the Box3D Engine object.
	 * @class Engine
	 * @param {Object} properties Engine properties
	 * @constructor
	 */

	var Engine = function (_RuntimeEvents) {
	  _inherits(Engine, _RuntimeEvents);

	  function Engine(properties) {
	    _classCallCheck(this, Engine);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Engine).call(this));

	    if (!Math.log2) {
	      Math.log2 = function (val) {
	        return Math.log(val) / Math.LN2;
	      };
	    }
	    if (!Math.log10) {
	      Math.log10 = function (val) {
	        return Math.log(val) / Math.LN10;
	      };
	    }

	    properties = properties || {};

	    _this.global = properties.global || window;
	    _this.engineName = 'Unnamed Instance of Box3D Engine';
	    _this.applicationName = properties.applicationName || (0, _uuid2.default)();

	    _this.isEditor = properties.isEditor ? true : false;
	    _this.assetRegistry = undefined;
	    _this.renderOnDemand = false;
	    _this.needsRender = true;

	    _this.audioContext = undefined;

	    _this.activeCamera = null;
	    _this.container = undefined;

	    _this.globalEvents = undefined;
	    _this.caps = {};
	    _this.entities = {};
	    _this.initTimeoutId = undefined;
	    return _this;
	  }

	  /**
	   * Initialize the engine with the provided properties.
	   * @method initialize
	   * @param {Object} properties The engine properties
	   * @param {Object} properties.resourceLoader Used to load resources like
	   * geometry, textures and animation.
	   * @param {String} [properties.engineName] The name of the engine.
	   * @param {HTMLElement|jQuery|String} properties.container The container
	   * for the canvas element. If a string is passed, it is assumed to be a
	   * jQuery selector string.
	   * @param {HTMLCanvasElement|jQuery|String} [properties.canvas] The
	   * element that the engine will draw into. If a string is passed, it is
	   * assumed to be a jQuery selector string. If no canvas is supplied, a new
	   * one will be created and added to the container.
	   * @param {EntityDispatcher} [properties.entityDispatcher] Used for
	   * synchronizing entities when multiple engines are used. If no entity
	   * dispatcher is supplied, a new one will be created.
	   * @param {Object} [properties.componentSettings]
	   * @param {Boolean} [properties.componentSettings.enabled] Enable or
	   * disable components (default is enabled).
	   * @param {Array} [properties.entities] An initial list of entities to be
	   * added to the engine.
	   * @param {RuntimeEvents} [properties.globalEvents] Used to trigger and
	   * listen to global events.
	   * @param {Function} [callback] Called when initialization is complete.
	   */

	  _createClass(Engine, [{
	    key: 'initialize',
	    value: function initialize(properties, callback) {
	      _log2.default.info('Engine Initialization');

	      // Get and validate global events.
	      function initGlobalEvents(done) {
	        this.globalEvents = properties && properties.globalEvents || window.Box3D && window.Box3D.globalEvents;

	        if (!this.globalEvents) {
	          return done(new Error('No global event system supplied or found'));
	        }

	        done();
	      }

	      // Initialize the container.
	      function initContainer(done) {
	        this.container = this.container || getElement(properties.container);

	        if (!properties.canvas && this.container) {
	          properties.canvas = document.createElement('canvas');
	          this.container.appendChild(properties.canvas);
	          this.canvasCreatedByEngine = true;
	        }

	        done();
	      }

	      // Validate the canvas.
	      function initCanvas(done) {
	        this.canvas = getElement(properties.canvas);

	        if (!(this.canvas instanceof HTMLCanvasElement)) {
	          return done(new Error('Failed to create canvas element'));
	        }

	        done();
	      }

	      // Validate the resource loader.
	      function initResourceLoader(done) {
	        this.resourceLoader = properties.resourceLoader;

	        if (!this.resourceLoader) {
	          return done(new Error('No resource loader passed to Engine'));
	        }

	        done();
	      }

	      // Initialize member letiables.
	      function initState(done) {
	        this.engineName = properties.engineName || this.engineName;
	        this.clock = new _three2.default.Clock();
	        this.elapsedSinceRender = 0.0;
	        this.frameDelta = 0;
	        this.updateTime = 0;
	        this.renderTime = 0;
	        this.frameDeltaAgregate = 0;
	        this.frameCount = 0;
	        this.lastFrameDelta = this.getTimeNow();
	        this.avgFrameTime = 0;
	        this.currentFrame = 0.0;
	        this.paused = false;
	        this.documentVisible = true;
	        this.state = 'initializing';

	        // Initialize the entity dispatcher.
	        this.entityDispatcher = properties.entityDispatcher || new _EntityDispatcher2.default();

	        this.entityDispatcher.addEngine(this);

	        done();
	      }

	      function initAssetRegistry(done) {
	        this.assetRegistry = new _AssetRegistry2.default();
	        this.assetRegistry.initialize(this);
	        done();
	      }

	      function initEntities(done) {
	        var existingEntities = this.entityDispatcher.getEntityDescriptors(),
	            entities = [];

	        entities.push.apply(entities, properties.entities || []);
	        entities.push.apply(entities, existingEntities);

	        this.addEntities(entities).then(function () {
	          done();
	        }).catch(done);
	      }

	      function initListeners(done) {
	        var _this2 = this;

	        this.onResize = function () {
	          _this2.trigger('resize');
	          _this2.needsRender = true;
	        };

	        this.onBlur = function () {
	          _this2.trigger('blur');
	        };

	        this.onFocus = function () {
	          _this2.trigger('focus');
	        };

	        this.onVisibilityChange = function () {
	          var hidden = document.hidden || document.mozHidden || document.msHidden || document.webkitHidden;

	          if (_this2.documentVisible && hidden) {
	            _this2.documentVisible = false;
	          } else if (!_this2.documentVisible) {
	            _this2.elapsedSinceRender = 0.0;
	            _this2.frameDelta = 0;
	            _this2.updateTime = 0;

	            // Reset delta calculations.
	            _this2.lastFrameDelta = _this2.getTimeNow();
	            _this2.documentVisible = true;
	          }
	        };

	        window.addEventListener('blur', this.onBlur);
	        window.addEventListener('focus', this.onFocus);
	        window.addEventListener('resize', this.onResize);
	        document.addEventListener('visibilitychange', this.onVisibilityChange);

	        done();
	      }

	      function initFinish(done) {
	        // Add the engine to "window" to help with debugging.
	        window[this.engineName] = this;

	        // Run the update loop once.
	        this.update(0);

	        // Setup event handlers.
	        this.on('update', this.onUpdate, this);
	        this.globalEvents.on('requestBox3DEngine', this.onRequestEngine, this);

	        this.state = 'initialized';
	        this.trigger('resize');

	        done();
	      }

	      // Run each initialize task.
	      // We run each task inside setTimeout() to reduce blockage of the main
	      // thread. Tasks are chained together using promises.
	      var promise = Promise.resolve(); // Empty promise to start our chain

	      [initGlobalEvents, initContainer, initCanvas, initResourceLoader, initState, initAssetRegistry, initEntities, initListeners, initFinish].forEach(function (initFunction) {
	        var _this3 = this;

	        var nextPromise = new Promise(function (resolve, reject) {
	          _this3.initTimeoutId = setTimeout(function () {
	            initFunction.bind(_this3)(function (err) {
	              if (err) {
	                return reject(err);
	              }

	              resolve();
	            });
	          }, 0.1);
	        });

	        promise = promise.then(function () {
	          return nextPromise;
	        });
	      }, this);

	      return promise.then(function () {
	        callback();
	      }, callback).catch(callback);
	    }

	    /**
	     * Uninitialize the engine
	     * @method uninitialize
	     */

	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      delete window[this.engineName];

	      if (this.initTimeoutId) {
	        clearTimeout(this.initTimeoutId);
	      }

	      if (this._baseRenderer && this._baseRenderer.shutdown) {
	        this._baseRenderer.shutdown();
	      }

	      //destroy the resource loader and abort all requests
	      this.resourceLoader.destroy();

	      // Remove event listeners.
	      window.removeEventListener('blur', this.onBlur);
	      window.removeEventListener('focus', this.onFocus);
	      window.removeEventListener('resize', this.onResize);
	      document.removeEventListener('visibilitychange', this.onVisibilityChange);

	      this.onBlur = undefined;
	      this.onFocus = undefined;
	      this.onResize = undefined;
	      this.onVisibilityChange = undefined;

	      this.trigger('shutdown');
	      this.state = 'uninitializing';
	      this.off('update', this.onUpdate, this);

	      this.entities = {};
	      this.globalEvents.off('requestBox3DEngine', this.onRequestEngine, this);

	      _raf2.default.cancel(this.animationRequestID);

	      if (this.canvasCreatedByEngine) {
	        this.canvas.parentNode.removeChild(this.canvas);
	      }

	      _log2.default.info(this.engineName + ' - Uninitializing engine.');

	      if (this.assetRegistry) {
	        this.assetRegistry.uninitialize();
	      }

	      if (this.entityDispatcher) {
	        this.entityDispatcher.removeEngine(this);
	      }

	      this.clock = undefined;
	      this.assetRegistry = null;
	      this.canvas = undefined;
	      this.container = undefined;
	      this.activeCamera = undefined;
	      this._threeRenderer = undefined;
	      this._baseRenderer = undefined;
	      this.engineName = undefined;
	      this.resourceLoader = undefined;
	      this.entityDispatcher = undefined;
	      this.state = 'uninitialized';
	    }

	    /**
	     * Return the name of the engine
	     * @return {String} The name of this engine.
	     */

	  }, {
	    key: 'getName',
	    value: function getName() {
	      return this.engineName;
	    }

	    /**
	     * Register all entities in the given collection into the runtime.
	     * @public
	     * @param {Object} collection The entity collection
	     * @return {Promise} A promise that resolves with an array of entities
	     * that were added to the engine.
	     */

	  }, {
	    key: 'addEntities',
	    value: function addEntities(entityArray) {
	      return this.entityDispatcher.addEntities(entityArray);
	    }

	    /**
	     * Load the entities given by an array of entity ID's.
	     * @method loadEntities
	     * @public
	     * @param  {Array}   entityArray And array of entity ID's or an array of entities
	     * @param  {Function} callback    Called when all of the given entities are completely loaded
	     * @param {String} loadEvent The name of the loading event to listen for on each entity.
	     * Default is 'load'.
	     */

	  }, {
	    key: 'loadEntities',
	    value: function loadEntities(entityArray, callback, loadEvent) {
	      var _this4 = this;

	      loadEvent = loadEvent || 'load';
	      Promise.all(entityArray.map(function (id) {
	        if (_lodash2.default.isObject(id)) {
	          id = id.id;
	        }
	        return new Promise(function (resolve, reject) {
	          var entity = _this4.getEntityById(id);
	          if (entity) {
	            entity.when(loadEvent, function () {
	              resolve();
	            });
	            // let fn;
	            // switch(loadEvent) {
	            //   case 'loadBase':
	            //     fn = entity.isBaseLoaded;
	            //     break;
	            //   case 'loadChildren':
	            //     fn = entity.isChildrenLoaded;
	            //     break;
	            //   case 'loadDependencies':
	            //     fn = entity.isDependenciesLoaded;
	            //     break;
	            //   case 'loadComponents':
	            //     fn = entity.isComponentsLoaded;
	            //     break;
	            // }
	            // if (fn && !fn.call(entity)) {
	            //   entity.load();
	            // }
	            if (!entity.isLoaded()) {
	              entity.load();
	            }
	          } else {
	            reject(new Error('Entity can\'t be found.'));
	          }
	        });
	      })).then(function () {
	        if (_lodash2.default.isFunction(callback)) {
	          callback.call(_this4);
	        }
	      }).catch(function (err) {
	        if (_lodash2.default.isFunction(callback)) {
	          _log2.default.error('loadEntities error: ' + err);
	          callback.call(_this4, err);
	        }
	      });
	    }

	    /**
	     * Returns the current active application.
	     * @method getApplication
	     * @return {Asset} The application asset
	     */

	  }, {
	    key: 'getApplication',
	    value: function getApplication() {
	      var assets = this.assetRegistry.Applications.getAssets();
	      for (var appId in assets) {
	        if (assets[appId].isBaseLoaded()) {
	          return assets[appId];
	        }
	      }
	    }

	    /**
	     * Return the rendering component currently assigned to the engine.
	     * @return {Object} The rendering component.
	     */

	  }, {
	    key: 'getRenderer',
	    value: function getRenderer() {
	      return this._baseRenderer;
	    }

	    /**
	     * Assign a new component that will serve as the main renderer in this engine.
	     * This renderer can be accessed from any other component via the component.getRenderer()
	     * call or from the engine with the same call.
	     * @param {Object} newRenderer The renderer component.
	     */

	  }, {
	    key: 'setRenderer',
	    value: function setRenderer(newRenderer) {
	      if (this._baseRenderer && _lodash2.default.isFunction(this._baseRenderer.shutdown)) {
	        this._baseRenderer.shutdown();
	      }
	      this._baseRenderer = newRenderer;
	      this._threeRenderer = newRenderer.threeRenderer;
	    }
	  }, {
	    key: 'getThreeRenderer',
	    value: function getThreeRenderer() {
	      return this._baseRenderer.threeRenderer;
	    }

	    /**
	     * Given the name of a GPU device capability (e.g. MAX_VERTEX_TEXTURE_IMAGE_UNITS ),
	     * return the current system's value for this capability.
	     * @param  {String} cap The capability name
	     * @return {Integer}     The value of the capability
	     */

	  }, {
	    key: 'getGPUCapability',
	    value: function getGPUCapability(cap) {
	      return this._baseRenderer.caps[cap];
	    }
	  }, {
	    key: 'supportsCompressedTextureS3TC',
	    value: function supportsCompressedTextureS3TC() {
	      return this._baseRenderer.caps.compressedTextureFormats['S3TC'];
	    }
	  }, {
	    key: 'supportsCompressedTexturePVRTC',
	    value: function supportsCompressedTexturePVRTC() {
	      return this._baseRenderer.caps.compressedTextureFormats['S3TC'];
	    }
	  }, {
	    key: 'supportsCompressedTextureATC',
	    value: function supportsCompressedTextureATC() {
	      return this._baseRenderer.caps.compressedTextureFormats['S3TC'];
	    }

	    /**
	     * Returns the entity with the provided Id. This includes ALL entities,
	     * both assets and objects
	     * @method getEntityById
	     * @param  {String} entityId The ID of the entity.
	     * @return {Object} The entity or null if not found.
	     */

	  }, {
	    key: 'getEntityById',
	    value: function getEntityById(entityId) {

	      if (this.entities[entityId]) {
	        return this.entities[entityId];
	      }
	      return null;
	    }

	    /**
	     * @method getAudioContext
	     * @return {AudioContext}
	     */

	  }, {
	    key: 'getAudioContext',
	    value: function getAudioContext() {

	      if (!this.audioContext) {
	        //moved this from engine startup to here this stops the engine
	        //from going down if too many audio contexts have been created
	        //as a bonus, it's only created when it's needed
	        var audioContext = window.AudioContext || window.webkitAudioContext;
	        if (audioContext) {
	          this.audioContext = new audioContext();
	          if (!this.audioContext) {
	            _log2.default.warn(this.engineName + ' - Failed to create Web Audio API context');
	          }
	        }
	      }

	      return this.audioContext;
	    }
	  }, {
	    key: 'onRequestEngine',
	    value: function onRequestEngine() {
	      this.globalEvents.trigger('sendBox3DEngine', this);
	    }

	    /**
	     * Pause the engine
	     * @method pause
	     */

	  }, {
	    key: 'pause',
	    value: function pause() {
	      if (!this.paused) {
	        this.paused = true;
	        this.clock.stop();
	        _raf2.default.cancel(this.animationRequestID);
	        _log2.default.info(this.engineName + ' engine has been paused.');
	      }
	    }

	    /**
	     * Unpause the engine
	     * @method unpause
	     */

	  }, {
	    key: 'unpause',
	    value: function unpause() {
	      if (this.paused) {
	        this.paused = false;
	        this.elapsedSinceRender = 0.0;
	        this.frameDelta = 0;
	        this.updateTime = 0;
	        this.lastFrameDelta = this.getTimeNow();
	        this.clock.start();
	        _log2.default.info(this.engineName + ' engine has been unpaused.');
	        this.update();
	      }
	    }
	  }, {
	    key: 'onUpdate',
	    value: function onUpdate(delta) {
	      if (this.assetRegistry) {
	        this.assetRegistry.update(delta);
	      }
	    }
	  }, {
	    key: 'setCurrentApp',
	    value: function setCurrentApp(appId) {
	      var app = this.assetRegistry.Applications.getAssetById(appId);
	      if (app) {
	        if (this.currentApplication) {
	          _log2.default.warn('Already an application running in this engine. Stop it before starting the ' + app.getName() + ' application.');
	          this.currentApplication.unload();
	        }
	        this.currentApplication = app;
	      }
	    }
	  }, {
	    key: 'getTimeNow',
	    value: function getTimeNow() {
	      return (!!window.performance && !!window.performance.now ? window.performance.now() : Date.now()) * 0.001;
	    }
	  }, {
	    key: 'getApplicationContext',
	    value: function getApplicationContext() {
	      return Box3D.getApplicationContext(this.applicationName);
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      var _this5 = this;

	      // Remember to put visible check.
	      if (this.paused) {
	        return;
	      }

	      this.animationRequestID = (0, _raf2.default)(function () {
	        _this5.update();
	      });

	      if (!this.documentVisible) {
	        return;
	      }

	      this.frameCount++;

	      this.frameDelta = this.getTimeNow() - this.lastFrameDelta;
	      this.lastFrameDelta = this.getTimeNow();

	      this.frameDeltaAgregate += this.frameDelta;
	      this.avgFrameTime = this.frameDeltaAgregate / this.frameCount;

	      this.trigger('preUpdate', this.frameDelta);
	      this.trigger('update', this.frameDelta);
	      this.trigger('postUpdate', this.frameDelta);

	      if (!this.renderOnDemand || this.needsRender) {
	        this.needsRender = false;
	        this.trigger('preRender', this.frameDelta);
	        this.trigger('render', this.frameDelta);
	        this.trigger('renderGroup1', this.frameDelta);
	        this.trigger('renderGroup2', this.frameDelta);
	        this.trigger('renderGroup3', this.frameDelta);
	        this.trigger('renderGroup4', this.frameDelta);
	        this.trigger('renderGroup5', this.frameDelta);
	        this.trigger('renderGroup6', this.frameDelta);
	        this.trigger('renderGroup7', this.frameDelta);
	        this.trigger('renderGroup8', this.frameDelta);
	        this.trigger('renderGroup9', this.frameDelta);
	        this.trigger('renderGroup10', this.frameDelta);
	        this.trigger('postRender', this.frameDelta);
	      }
	    }
	  }]);

	  return Engine;
	}(_RuntimeEvents3.default);

	window.Box3D = window.Box3D || {};
	window.Box3D.Engine = Engine;

	exports.default = Engine;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _loglevel = __webpack_require__(7);

	var _loglevel2 = _interopRequireDefault(_loglevel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Box3D = window.Box3D = window.Box3D || {};

	Box3D.log = _loglevel2.default;

	module.exports = _loglevel2.default;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! loglevel - v1.3.1 - https://github.com/pimterry/loglevel - (c) 2015 Tim Perry - licensed MIT */
	(function (root, definition) {
	    if (typeof module === 'object' && module.exports && "function" === 'function') {
	        module.exports = definition();
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        root.log = definition();
	    }
	}(this, function () {
	    var self = {};
	    var noop = function() {};
	    var undefinedType = "undefined";

	    function realMethod(methodName) {
	        if (typeof console === undefinedType) {
	            return false; // We can't build a real method without a console to log to
	        } else if (console[methodName] !== undefined) {
	            return bindMethod(console, methodName);
	        } else if (console.log !== undefined) {
	            return bindMethod(console, 'log');
	        } else {
	            return noop;
	        }
	    }

	    function bindMethod(obj, methodName) {
	        var method = obj[methodName];
	        if (typeof method.bind === 'function') {
	            return method.bind(obj);
	        } else {
	            try {
	                return Function.prototype.bind.call(method, obj);
	            } catch (e) {
	                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
	                return function() {
	                    return Function.prototype.apply.apply(method, [obj, arguments]);
	                };
	            }
	        }
	    }

	    function enableLoggingWhenConsoleArrives(methodName, level) {
	        return function () {
	            if (typeof console !== undefinedType) {
	                replaceLoggingMethods(level);
	                self[methodName].apply(self, arguments);
	            }
	        };
	    }

	    var logMethods = [
	        "trace",
	        "debug",
	        "info",
	        "warn",
	        "error"
	    ];

	    function replaceLoggingMethods(level) {
	        for (var i = 0; i < logMethods.length; i++) {
	            var methodName = logMethods[i];
	            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);
	        }
	    }

	    function persistLevelIfPossible(levelNum) {
	        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

	        // Use localStorage if available
	        try {
	            window.localStorage['loglevel'] = levelName;
	            return;
	        } catch (ignore) {}

	        // Use session cookie as fallback
	        try {
	            window.document.cookie = "loglevel=" + levelName + ";";
	        } catch (ignore) {}
	    }

	    function loadPersistedLevel() {
	        var storedLevel;

	        try {
	            storedLevel = window.localStorage['loglevel'];
	        } catch (ignore) {}

	        if (typeof storedLevel === undefinedType) {
	            try {
	                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];
	            } catch (ignore) {}
	        }

	        if (self.levels[storedLevel] === undefined) {
	            storedLevel = "WARN";
	        }

	        self.setLevel(self.levels[storedLevel], false);
	    }

	    /*
	     *
	     * Public API
	     *
	     */

	    self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
	        "ERROR": 4, "SILENT": 5};

	    self.methodFactory = function (methodName, level) {
	        return realMethod(methodName) ||
	               enableLoggingWhenConsoleArrives(methodName, level);
	    };

	    self.setLevel = function (level, persist) {
	        if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
	            level = self.levels[level.toUpperCase()];
	        }
	        if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
	            if (persist !== false) {  // defaults to true
	                persistLevelIfPossible(level);
	            }
	            replaceLoggingMethods(level);
	            if (typeof console === undefinedType && level < self.levels.SILENT) {
	                return "No console available for logging";
	            }
	        } else {
	            throw "log.setLevel() called with invalid level: " + level;
	        }
	    };

	    self.enableAll = function(persist) {
	        self.setLevel(self.levels.TRACE, persist);
	    };

	    self.disableAll = function(persist) {
	        self.setLevel(self.levels.SILENT, persist);
	    };

	    // Grab the current global log variable in case of overwrite
	    var _log = (typeof window !== undefinedType) ? window.log : undefined;
	    self.noConflict = function() {
	        if (typeof window !== undefinedType &&
	               window.log === self) {
	            window.log = _log;
	        }

	        return self;
	    };

	    loadPersistedLevel();
	    return self;
	}));


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// The MIT License

	// Copyright © 2010-2015 three.js authors

	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:

	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.

	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE.
	// File:src/Three.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var THREE = { REVISION: '74dev' };

	//

	if ( true ) {

		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (THREE), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {

		module.exports = THREE;

	}


	// polyfills

	if ( self.requestAnimationFrame === undefined || self.cancelAnimationFrame === undefined ) {

		// Missing in Android stock browser.

		( function () {

			var lastTime = 0;
			var vendors = [ 'ms', 'moz', 'webkit', 'o' ];

			for ( var x = 0; x < vendors.length && ! self.requestAnimationFrame; ++ x ) {

				self.requestAnimationFrame = self[ vendors[ x ] + 'RequestAnimationFrame' ];
				self.cancelAnimationFrame = self[ vendors[ x ] + 'CancelAnimationFrame' ] || self[ vendors[ x ] + 'CancelRequestAnimationFrame' ];

			}

			if ( self.requestAnimationFrame === undefined && self.setTimeout !== undefined ) {

				self.requestAnimationFrame = function ( callback ) {

					var currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );
					var id = self.setTimeout( function () {

						callback( currTime + timeToCall );

					}, timeToCall );
					lastTime = currTime + timeToCall;
					return id;

				};

			}

			if ( self.cancelAnimationFrame === undefined && self.clearTimeout !== undefined ) {

				self.cancelAnimationFrame = function ( id ) {

					self.clearTimeout( id );

				};

			}

		} )();

	}

	//

	if ( self.performance === undefined ) {

		self.performance = {};

	}

	if ( self.performance.now === undefined ) {

		( function () {

			var start = Date.now();

			self.performance.now = function () {

				return Date.now() - start;

			}

		} )();

	}

	//

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( Function.prototype.name === undefined && Object.defineProperty !== undefined ) {

		// Missing in IE9-11.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		Object.defineProperty( Object, 'assign', {

			writable: true,
			configurable: true,

			value: function ( target ) {

				'use strict';

				if ( target === undefined || target === null ) {

					throw new TypeError( "Cannot convert first argument to object" );

				}

				var to = Object( target );

				for ( var i = 1, n = arguments.length; i !== n; ++ i ) {

					var nextSource = arguments[ i ];

					if ( nextSource === undefined || nextSource === null ) continue;

					nextSource = Object( nextSource );

					var keysArray = Object.keys( nextSource );

					for ( var nextIndex = 0, len = keysArray.length; nextIndex !== len; ++ nextIndex ) {

						var nextKey = keysArray[ nextIndex ];
						var desc = Object.getOwnPropertyDescriptor( nextSource, nextKey );

						if ( desc !== undefined && desc.enumerable ) {

							to[ nextKey ] = nextSource[ nextKey ];

						}

					}

				}

				return to;

			}

		} );

	}

	// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button

	THREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };

	// GL STATE CONSTANTS

	THREE.CullFaceNone = 0;
	THREE.CullFaceBack = 1;
	THREE.CullFaceFront = 2;
	THREE.CullFaceFrontBack = 3;

	THREE.FrontFaceDirectionCW = 0;
	THREE.FrontFaceDirectionCCW = 1;

	// SHADOWING TYPES

	THREE.BasicShadowMap = 0;
	THREE.PCFShadowMap = 1;
	THREE.PCFSoftShadowMap = 2;

	// MATERIAL CONSTANTS

	// side

	THREE.FrontSide = 0;
	THREE.BackSide = 1;
	THREE.DoubleSide = 2;

	// shading

	THREE.FlatShading = 1;
	THREE.SmoothShading = 2;

	// colors

	THREE.NoColors = 0;
	THREE.FaceColors = 1;
	THREE.VertexColors = 2;

	// blending modes

	THREE.NoBlending = 0;
	THREE.NormalBlending = 1;
	THREE.AdditiveBlending = 2;
	THREE.SubtractiveBlending = 3;
	THREE.MultiplyBlending = 4;
	THREE.CustomBlending = 5;

	// custom blending equations
	// (numbers start from 100 not to clash with other
	// mappings to OpenGL constants defined in Texture.js)

	THREE.AddEquation = 100;
	THREE.SubtractEquation = 101;
	THREE.ReverseSubtractEquation = 102;
	THREE.MinEquation = 103;
	THREE.MaxEquation = 104;

	// custom blending destination factors

	THREE.ZeroFactor = 200;
	THREE.OneFactor = 201;
	THREE.SrcColorFactor = 202;
	THREE.OneMinusSrcColorFactor = 203;
	THREE.SrcAlphaFactor = 204;
	THREE.OneMinusSrcAlphaFactor = 205;
	THREE.DstAlphaFactor = 206;
	THREE.OneMinusDstAlphaFactor = 207;

	// custom blending source factors

	//THREE.ZeroFactor = 200;
	//THREE.OneFactor = 201;
	//THREE.SrcAlphaFactor = 204;
	//THREE.OneMinusSrcAlphaFactor = 205;
	//THREE.DstAlphaFactor = 206;
	//THREE.OneMinusDstAlphaFactor = 207;
	THREE.DstColorFactor = 208;
	THREE.OneMinusDstColorFactor = 209;
	THREE.SrcAlphaSaturateFactor = 210;

	// depth modes

	THREE.NeverDepth = 0;
	THREE.AlwaysDepth = 1;
	THREE.LessDepth = 2;
	THREE.LessEqualDepth = 3;
	THREE.EqualDepth = 4;
	THREE.GreaterEqualDepth = 5;
	THREE.GreaterDepth = 6;
	THREE.NotEqualDepth = 7;


	// TEXTURE CONSTANTS

	THREE.MultiplyOperation = 0;
	THREE.MixOperation = 1;
	THREE.AddOperation = 2;

	// Mapping modes

	THREE.UVMapping = 300;

	THREE.CubeReflectionMapping = 301;
	THREE.CubeRefractionMapping = 302;

	THREE.EquirectangularReflectionMapping = 303;
	THREE.EquirectangularRefractionMapping = 304;

	THREE.SphericalReflectionMapping = 305;

	// Wrapping modes

	THREE.RepeatWrapping = 1000;
	THREE.ClampToEdgeWrapping = 1001;
	THREE.MirroredRepeatWrapping = 1002;

	// Filters

	THREE.NearestFilter = 1003;
	THREE.NearestMipMapNearestFilter = 1004;
	THREE.NearestMipMapLinearFilter = 1005;
	THREE.LinearFilter = 1006;
	THREE.LinearMipMapNearestFilter = 1007;
	THREE.LinearMipMapLinearFilter = 1008;

	// Data types

	THREE.UnsignedByteType = 1009;
	THREE.ByteType = 1010;
	THREE.ShortType = 1011;
	THREE.UnsignedShortType = 1012;
	THREE.IntType = 1013;
	THREE.UnsignedIntType = 1014;
	THREE.FloatType = 1015;
	THREE.HalfFloatType = 1025;

	// Pixel types

	//THREE.UnsignedByteType = 1009;
	THREE.UnsignedShort4444Type = 1016;
	THREE.UnsignedShort5551Type = 1017;
	THREE.UnsignedShort565Type = 1018;

	// Pixel formats

	THREE.AlphaFormat = 1019;
	THREE.RGBFormat = 1020;
	THREE.RGBAFormat = 1021;
	THREE.LuminanceFormat = 1022;
	THREE.LuminanceAlphaFormat = 1023;
	// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders
	THREE.RGBEFormat = THREE.RGBAFormat; //1024;

	// DDS / ST3C Compressed texture formats

	THREE.RGB_S3TC_DXT1_Format = 2001;
	THREE.RGBA_S3TC_DXT1_Format = 2002;
	THREE.RGBA_S3TC_DXT3_Format = 2003;
	THREE.RGBA_S3TC_DXT5_Format = 2004;


	// PVRTC compressed texture formats

	THREE.RGB_PVRTC_4BPPV1_Format = 2100;
	THREE.RGB_PVRTC_2BPPV1_Format = 2101;
	THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
	THREE.RGBA_PVRTC_2BPPV1_Format = 2103;

	// Loop styles for AnimationAction

	THREE.LoopOnce = 2200;
	THREE.LoopRepeat = 2201;
	THREE.LoopPingPong = 2202;

	// Interpolation

	THREE.InterpolateDiscrete = 2300;
	THREE.InterpolateLinear = 2301;
	THREE.InterpolateSmooth = 2302;

	// Interpolant ending modes

	THREE.ZeroCurvatureEnding = 2400;
	THREE.ZeroSlopeEnding = 2401;
	THREE.WrapAroundEnding = 2402;

	// Triangle Draw modes

	THREE.TrianglesDrawMode = 0;
	THREE.TriangleStripDrawMode = 1;
	THREE.TriangleFanDrawMode = 2;

	// File:src/math/Color.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Color = function ( color ) {

		if ( arguments.length === 3 ) {

			return this.fromArray( arguments );

		}

		return this.set( color );

	};

	THREE.Color.prototype = {

		constructor: THREE.Color,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( value instanceof THREE.Color ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function () {

			function hue2rgb( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			}

			return function ( h, s, l ) {

				// h,s,l ranges are in 0.0 - 1.0
				h = THREE.Math.euclideanModulo( h, 1 );
				s = THREE.Math.clamp( s, 0, 1 );
				l = THREE.Math.clamp( l, 0, 1 );

				if ( s === 0 ) {

					this.r = this.g = this.b = l;

				} else {

					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;

					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );

				}

				return this;

			};

		}(),

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				// color keywords
				var hex = THREE.ColorKeywords[ style ];

				if ( hex !== undefined ) {

					// red
					this.setHex( hex );

				} else {

					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );

				}

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function () {

			var r = this.r, g = this.g, b = this.b;

			this.r = r * r;
			this.g = g * g;
			this.b = b * b;

			return this;

		},

		convertLinearToGamma: function () {

			this.r = Math.sqrt( this.r );
			this.g = Math.sqrt( this.g );
			this.b = Math.sqrt( this.b );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( optionalTarget ) {

			// h,s,l ranges are in 0.0 - 1.0

			var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			hsl.h = hue;
			hsl.s = saturation;
			hsl.l = lightness;

			return hsl;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function ( h, s, l ) {

			var hsl = this.getHSL();

			hsl.h += h; hsl.s += s; hsl.l += l;

			this.setHSL( hsl.h, hsl.s, hsl.l );

			return this;

		},

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		}

	};

	THREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	// File:src/math/Quaternion.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	THREE.Quaternion = function ( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	};

	THREE.Quaternion.prototype = {

		constructor: THREE.Quaternion,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get w () {

			return this._w;

		},

		set w ( value ) {

			this._w = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this.onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( euler instanceof THREE.Euler === false ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var c1 = Math.cos( euler._x / 2 );
			var c2 = Math.cos( euler._y / 2 );
			var c3 = Math.cos( euler._z / 2 );
			var s1 = Math.sin( euler._x / 2 );
			var s2 = Math.sin( euler._y / 2 );
			var s3 = Math.sin( euler._z / 2 );

			var order = euler.order;

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this.onChangeCallback();

			return this;

		},

		setFromUnitVectors: function () {

			// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

			// assumes direction vectors vFrom and vTo are normalized

			var v1, r;

			var EPS = 0.000001;

			return function ( vFrom, vTo ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				r = vFrom.dot( vTo ) + 1;

				if ( r < EPS ) {

					r = 0;

					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

						v1.set( - vFrom.y, vFrom.x, 0 );

					} else {

						v1.set( 0, - vFrom.z, vFrom.y );

					}

				} else {

					v1.crossVectors( vFrom, vTo );

				}

				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;

				this.normalize();

				return this;

			};

		}(),

		inverse: function () {

			this.conjugate().normalize();

			return this;

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this.onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this.onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this.onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

			if ( Math.abs( sinHalfTheta ) < 0.001 ) {

				this._w = 0.5 * ( w + this._w );
				this._x = 0.5 * ( x + this._x );
				this._y = 0.5 * ( y + this._y );
				this._z = 0.5 * ( z + this._z );

				return this;

			}

			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this.onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	Object.assign( THREE.Quaternion, {

		slerp: function( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function(
				dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	// File:src/math/Vector2.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.Vector2 = function ( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	};

	THREE.Vector2.prototype = {

		constructor: THREE.Vector2,

		get width() {

			return this.x;

		},

		set width( value ) {

			this.x = value;

		},

		get height() {

			return this.y;

		},

		set height( value ) {

			this.y = value;

		},

		//

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;

			} else {

				this.x = 0;
				this.y = 0;

			}

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new THREE.Vector2();
					max = new THREE.Vector2();

				}

				min.set( minVal, minVal );
				max.set( maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

			return this;

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		lengthManhattan: function() {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			return this;

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	};

	// File:src/math/Vector3.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author *kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Vector3 = function ( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	};

	THREE.Vector3.prototype = {

		constructor: THREE.Vector3,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;

			}

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function () {

			var quaternion;

			return function applyEuler( euler ) {

				if ( euler instanceof THREE.Euler === false ) {

					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

				}

				if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

				this.applyQuaternion( quaternion.setFromEuler( euler ) );

				return this;

			};

		}(),

		applyAxisAngle: function () {

			var quaternion;

			return function applyAxisAngle( axis, angle ) {

				if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

				this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

				return this;

			};

		}(),

		applyMatrix3: function ( m ) {

			var x = this.x;
			var y = this.y;
			var z = this.z;

			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyMatrix4: function ( m ) {

			// input: THREE.Matrix4 affine matrix

			var x = this.x, y = this.y, z = this.z;

			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];

			return this;

		},

		applyProjection: function ( m ) {

			// input: THREE.Matrix4 projection matrix

			var x = this.x, y = this.y, z = this.z;

			var e = m.elements;
			var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x;
			var y = this.y;
			var z = this.z;

			var qx = q.x;
			var qy = q.y;
			var qz = q.z;
			var qw = q.w;

			// calculate quat * vector

			var ix =  qw * x + qy * z - qz * y;
			var iy =  qw * y + qz * x - qx * z;
			var iz =  qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function () {

			var matrix;

			return function project( camera ) {

				if ( matrix === undefined ) matrix = new THREE.Matrix4();

				matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
				return this.applyProjection( matrix );

			};

		}(),

		unproject: function () {

			var matrix;

			return function unproject( camera ) {

				if ( matrix === undefined ) matrix = new THREE.Matrix4();

				matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
				return this.applyProjection( matrix );

			};

		}(),

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;

			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			this.normalize();

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new THREE.Vector3();
					max = new THREE.Vector3();

				}

				min.set( minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

			return this;

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			return this;

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			var x = this.x, y = this.y, z = this.z;

			this.x = y * v.z - z * v.y;
			this.y = z * v.x - x * v.z;
			this.z = x * v.y - y * v.x;

			return this;

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function () {

			var v1, dot;

			return function projectOnVector( vector ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				v1.copy( vector ).normalize();

				dot = this.dot( v1 );

				return this.copy( v1 ).multiplyScalar( dot );

			};

		}(),

		projectOnPlane: function () {

			var v1;

			return function projectOnPlane( planeNormal ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				v1.copy( this ).projectOnVector( planeNormal );

				return this.sub( v1 );

			}

		}(),

		reflect: function () {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			var v1;

			return function reflect( normal ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

			}

		}(),

		angleTo: function ( v ) {

			var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

			// clamp, to handle numerical problems

			return Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x;
			var dy = this.y - v.y;
			var dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		setFromMatrixPosition: function ( m ) {

			this.x = m.elements[ 12 ];
			this.y = m.elements[ 13 ];
			this.z = m.elements[ 14 ];

			return this;

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[ 2 ] ).length();
			var sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[ 6 ] ).length();
			var sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( index, matrix ) {

			var offset = index * 4;

			var me = matrix.elements;

			this.x = me[ offset ];
			this.y = me[ offset + 1 ];
			this.z = me[ offset + 2 ];

			return this;

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];

			return this;

		}

	};

	// File:src/math/Vector4.js

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Vector4 = function ( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	};

	THREE.Vector4.prototype = {

		constructor: THREE.Vector4,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;
				this.w = 0;

			}

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x;
			var y = this.y;
			var z = this.z;
			var w = this.w;

			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				 this.x = 1;
				 this.y = 0;
				 this.z = 0;

			} else {

				 this.x = q.x / s;
				 this.y = q.y / s;
				 this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon )
			   && ( Math.abs( m13 - m31 ) < epsilon )
			   && ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 )
				   && ( Math.abs( m13 + m31 ) < epsilon2 )
				   && ( Math.abs( m23 + m32 ) < epsilon2 )
				   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )
							  + ( m13 - m31 ) * ( m13 - m31 )
							  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new THREE.Vector4();
					max = new THREE.Vector4();

				}

				min.set( minVal, minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			return this;

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];
			this.w = attribute.array[ index + 3 ];

			return this;

		}

	};

	// File:src/math/Euler.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	THREE.Euler = function ( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || THREE.Euler.DefaultOrder;

	};

	THREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	THREE.Euler.DefaultOrder = 'XYZ';

	THREE.Euler.prototype = {

		constructor: THREE.Euler,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get order () {

			return this._order;

		},

		set order ( value ) {

			this._order = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order);

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = THREE.Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.99999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.99999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )

			}

			this._order = order;

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromQuaternion: function () {

			var matrix;

			return function ( q, order, update ) {

				if ( matrix === undefined ) matrix = new THREE.Matrix4();
				matrix.makeRotationFromQuaternion( q );
				this.setFromRotationMatrix( matrix, order, update );

				return this;

			};

		}(),

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function () {

			// WARNING: this discards revolution information -bhouston

			var q = new THREE.Quaternion();

			return function ( newOrder ) {

				q.setFromEuler( this );
				this.setFromQuaternion( q, newOrder );

			};

		}(),

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new THREE.Vector3( this._x, this._y, this._z );

			}

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	// File:src/math/Line3.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Line3 = function ( start, end ) {

		this.start = ( start !== undefined ) ? start : new THREE.Vector3();
		this.end = ( end !== undefined ) ? end : new THREE.Vector3();

	};

	THREE.Line3.prototype = {

		constructor: THREE.Line3,

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		center: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function () {

			var startP = new THREE.Vector3();
			var startEnd = new THREE.Vector3();

			return function ( point, clampToLine ) {

				startP.subVectors( point, this.start );
				startEnd.subVectors( this.end, this.start );

				var startEnd2 = startEnd.dot( startEnd );
				var startEnd_startP = startEnd.dot( startP );

				var t = startEnd_startP / startEnd2;

				if ( clampToLine ) {

					t = THREE.Math.clamp( t, 0, 1 );

				}

				return t;

			};

		}(),

		closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			var result = optionalTarget || new THREE.Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	};

	// File:src/math/Box2.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Box2 = function ( min, max ) {

		this.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );
		this.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );

	};

	THREE.Box2.prototype = {

		constructor: THREE.Box2,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] )

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new THREE.Vector2();

			return function ( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		empty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		center: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector2();
			return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		size: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector2();
			return result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
			     point.y < this.min.y || point.y > this.max.y ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new THREE.Vector2();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
			     box.max.y < this.min.y || box.min.y > this.max.y ) {

				return false;

			}

			return true;

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector2();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new THREE.Vector2();

			return function ( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	// File:src/math/Box3.js

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Box3 = function ( min, max ) {

		this.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );
		this.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );

	};

	THREE.Box3.prototype = {

		constructor: THREE.Box3,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new THREE.Vector3();

			return function ( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		setFromObject: function () {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			var box;

			return function ( object ) {

				if ( box === undefined ) box = new THREE.Box3();

				var scope = this;

				this.makeEmpty();

				object.updateMatrixWorld( true );

				object.traverse( function ( node ) {

					var geometry = node.geometry;

					if ( geometry !== undefined ) {

						if ( geometry.boundingBox === null ) {

							geometry.computeBoundingBox();

						}

						box.copy( geometry.boundingBox );
						box.applyMatrix4( node.matrixWorld );
						scope.union( box );

					}

				} );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		empty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		center: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		size: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
					 point.y < this.min.y || point.y > this.max.y ||
					 point.z < this.min.z || point.z > this.max.z ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
				 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
				 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new THREE.Vector3();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
					 box.max.y < this.min.y || box.min.y > this.max.y ||
					 box.max.z < this.min.z || box.min.z > this.max.z ) {

				return false;

			}

			return true;

		},

		intersectsSphere: ( function () {

			var closestPoint;

			return function intersectsSphere( sphere ) {

				if ( closestPoint === undefined ) closestPoint = new THREE.Vector3();

				// Find the point on the AABB closest to the sphere center.
				this.clampPoint( sphere.center, closestPoint );

				// If that point is inside the sphere, the AABB and sphere intersect.
				return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

			};

		} )(),

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= plane.constant && max >= plane.constant );

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new THREE.Vector3();

			return function ( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		getBoundingSphere: function () {

			var v1 = new THREE.Vector3();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Sphere();

				result.center = this.center();
				result.radius = this.size( v1 ).length() * 0.5;

				return result;

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function () {

			var points = [
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3()
			];

			return function ( matrix ) {

				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

				this.makeEmpty();
				this.setFromPoints( points );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	// File:src/math/Matrix3.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	THREE.Matrix3 = function () {

		this.elements = new Float32Array( [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	};

	THREE.Matrix3.prototype = {

		constructor: THREE.Matrix3,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 3 ] = n12; te[ 6 ] = n13;
			te[ 1 ] = n21; te[ 4 ] = n22; te[ 7 ] = n23;
			te[ 2 ] = n31; te[ 5 ] = n32; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 3 ], me[ 6 ],
				me[ 1 ], me[ 4 ], me[ 7 ],
				me[ 2 ], me[ 5 ], me[ 8 ]

			);

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function ( array, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix3( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix3( this );

					buffer.setXYZ( v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			// input: THREE.Matrix4
			// ( based on http://code.google.com/p/webgl-mjs/ )

			var me = matrix.elements;
			var te = this.elements;

			te[ 0 ] =   me[ 10 ] * me[ 5 ] - me[ 6 ] * me[ 9 ];
			te[ 1 ] = - me[ 10 ] * me[ 1 ] + me[ 2 ] * me[ 9 ];
			te[ 2 ] =   me[ 6 ] * me[ 1 ] - me[ 2 ] * me[ 5 ];
			te[ 3 ] = - me[ 10 ] * me[ 4 ] + me[ 6 ] * me[ 8 ];
			te[ 4 ] =   me[ 10 ] * me[ 0 ] - me[ 2 ] * me[ 8 ];
			te[ 5 ] = - me[ 6 ] * me[ 0 ] + me[ 2 ] * me[ 4 ];
			te[ 6 ] =   me[ 9 ] * me[ 4 ] - me[ 5 ] * me[ 8 ];
			te[ 7 ] = - me[ 9 ] * me[ 0 ] + me[ 1 ] * me[ 8 ];
			te[ 8 ] =   me[ 5 ] * me[ 0 ] - me[ 1 ] * me[ 4 ];

			var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];

			// no inverse

			if ( det === 0 ) {

				var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate || false ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				this.identity();

				return this;

			}

			this.multiplyScalar( 1.0 / det );

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ]  = te[ 8 ];

			return array;

		},

		getNormalMatrix: function ( m ) {

			// input: THREE.Matrix4

			this.getInverse( m ).transpose();

			return this;

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		fromArray: function ( array ) {

			this.elements.set( array );

			return this;

		},

		toArray: function () {

			var te = this.elements;

			return [
				te[ 0 ], te[ 1 ], te[ 2 ],
				te[ 3 ], te[ 4 ], te[ 5 ],
				te[ 6 ], te[ 7 ], te[ 8 ]
			];

		}

	};

	// File:src/math/Matrix4.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Matrix4 = function () {

		this.elements = new Float32Array( [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	};

	THREE.Matrix4.prototype = {

		constructor: THREE.Matrix4,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new THREE.Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			this.elements.set( m.elements );

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			var te = this.elements;

			xAxis.set( te[ 0 ], te[ 1 ], te[ 2 ] );
			yAxis.set( te[ 4 ], te[ 5 ], te[ 6 ] );
			zAxis.set( te[ 8 ], te[ 9 ], te[ 10 ] );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0,       0,       0,       1
			);

			return this;

		},

		extractRotation: function () {

			var v1;

			return function ( m ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				var te = this.elements;
				var me = m.elements;

				var scaleX = 1 / v1.set( me[ 0 ], me[ 1 ], me[ 2 ] ).length();
				var scaleY = 1 / v1.set( me[ 4 ], me[ 5 ], me[ 6 ] ).length();
				var scaleZ = 1 / v1.set( me[ 8 ], me[ 9 ], me[ 10 ] ).length();

				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;

				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;

				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;

				return this;

			};

		}(),

		makeRotationFromEuler: function ( euler ) {

			if ( euler instanceof THREE.Euler === false ) {

				console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			var te = this.elements;

			var x = q.x, y = q.y, z = q.z, w = q.w;
			var x2 = x + x, y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			te[ 0 ] = 1 - ( yy + zz );
			te[ 4 ] = xy - wz;
			te[ 8 ] = xz + wy;

			te[ 1 ] = xy + wz;
			te[ 5 ] = 1 - ( xx + zz );
			te[ 9 ] = yz - wx;

			te[ 2 ] = xz - wy;
			te[ 6 ] = yz + wx;
			te[ 10 ] = 1 - ( xx + yy );

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		lookAt: function () {

			var x, y, z;

			return function ( eye, target, up ) {

				if ( x === undefined ) x = new THREE.Vector3();
				if ( y === undefined ) y = new THREE.Vector3();
				if ( z === undefined ) z = new THREE.Vector3();

				var te = this.elements;

				z.subVectors( eye, target ).normalize();

				if ( z.lengthSq() === 0 ) {

					z.z = 1;

				}

				x.crossVectors( up, z ).normalize();

				if ( x.lengthSq() === 0 ) {

					z.x += 0.0001;
					x.crossVectors( up, z ).normalize();

				}

				y.crossVectors( z, x );


				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

				return this;

			};

		}(),

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyToArray: function ( a, b, r ) {

			var te = this.elements;

			this.multiplyMatrices( a, b );

			r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
			r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
			r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
			r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function ( array, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix4( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix4( this );

					buffer.setXYZ( v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ]  = te[ 8 ];
			array[ offset + 9 ]  = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		},

		getPosition: function () {

			var v1;

			return function () {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

				var te = this.elements;
				return v1.set( te[ 12 ], te[ 13 ], te[ 14 ] );

			};

		}(),

		setPosition: function ( v ) {

			var te = this.elements;

			te[ 12 ] = v.x;
			te[ 13 ] = v.y;
			te[ 14 ] = v.z;

			return this;

		},

		getInverse: function ( m, throwOnInvertible ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements;
			var me = m.elements;

			var n11 = me[ 0 ], n12 = me[ 4 ], n13 = me[ 8 ], n14 = me[ 12 ];
			var n21 = me[ 1 ], n22 = me[ 5 ], n23 = me[ 9 ], n24 = me[ 13 ];
			var n31 = me[ 2 ], n32 = me[ 6 ], n33 = me[ 10 ], n34 = me[ 14 ];
			var n41 = me[ 3 ], n42 = me[ 7 ], n43 = me[ 11 ], n44 = me[ 15 ];

			te[ 0 ] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
			te[ 4 ] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
			te[ 8 ] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
			te[ 12 ] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
			te[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
			te[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
			te[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
			te[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
			te[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
			te[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
			te[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
			te[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
			te[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
			te[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
			te[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
			te[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;

			var det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];

			if ( det === 0 ) {

				var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnInvertible || false ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				this.identity();

				return this;

			}

			this.multiplyScalar( 1 / det );

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0,  0, 0,
				0, c, - s, 0,
				0, s,  c, 0,
				0, 0,  0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s,  c, 0, 0,
				0,  0, 1, 0,
				0,  0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			this.makeRotationFromQuaternion( quaternion );
			this.scale( scale );
			this.setPosition( position );

			return this;

		},

		decompose: function () {

			var vector, matrix;

			return function ( position, quaternion, scale ) {

				if ( vector === undefined ) vector = new THREE.Vector3();
				if ( matrix === undefined ) matrix = new THREE.Matrix4();

				var te = this.elements;

				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) {

					sx = - sx;

				}

				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];

				// scale the rotation part

				matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;

				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;

				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;

				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;

				quaternion.setFromRotationMatrix( matrix );

				scale.x = sx;
				scale.y = sy;
				scale.z = sz;

				return this;

			};

		}(),

		makeFrustum: function ( left, right, bottom, top, near, far ) {

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makePerspective: function ( fov, aspect, near, far ) {

			var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );
			var ymin = - ymax;
			var xmin = ymin * aspect;
			var xmax = ymax * aspect;

			return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = right - left;
			var h = top - bottom;
			var p = far - near;

			var x = ( right + left ) / w;
			var y = ( top + bottom ) / h;
			var z = ( far + near ) / p;

			te[ 0 ] = 2 / w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 / h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 / p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array ) {

			this.elements.set( array );

			return this;

		},

		toArray: function () {

			var te = this.elements;

			return [
				te[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],
				te[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],
				te[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],
				te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]
			];

		}

	};

	// File:src/math/Ray.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Ray = function ( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();
		this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();

	};

	THREE.Ray.prototype = {

		constructor: THREE.Ray,

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		recast: function () {

			var v1 = new THREE.Vector3();

			return function ( t ) {

				this.origin.copy( this.at( t, v1 ) );

				return this;

			};

		}(),

		closestPointToPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			result.subVectors( point, this.origin );
			var directionDistance = result.dot( this.direction );

			if ( directionDistance < 0 ) {

				return result.copy( this.origin );

			}

			return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function () {

			var v1 = new THREE.Vector3();

			return function ( point ) {

				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

				// point behind the ray

				if ( directionDistance < 0 ) {

					return this.origin.distanceToSquared( point );

				}

				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

				return v1.distanceToSquared( point );

			};

		}(),

		distanceSqToSegment: function () {

			var segCenter = new THREE.Vector3();
			var segDir = new THREE.Vector3();
			var diff = new THREE.Vector3();

			return function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

				// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment

				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );

				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;

				if ( det > 0 ) {

					// The ray and segment are not parallel.

					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;

					if ( s0 >= 0 ) {

						if ( s1 >= - extDet ) {

							if ( s1 <= extDet ) {

								// region 0
								// Minimum at interior points of ray and segment.

								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

							} else {

								// region 1

								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							// region 5

							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						if ( s1 <= - extDet ) {

							// region 4

							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						} else if ( s1 <= extDet ) {

							// region 3

							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;

						} else {

							// region 2

							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					}

				} else {

					// Ray and segment are parallel.

					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

				if ( optionalPointOnRay ) {

					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

				}

				if ( optionalPointOnSegment ) {

					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

				}

				return sqrDist;

			};

		}(),

		intersectSphere: function () {

			// from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-sphere-intersection/

			var v1 = new THREE.Vector3();

			return function ( sphere, optionalTarget ) {

				v1.subVectors( sphere.center, this.origin );

				var tca = v1.dot( this.direction );

				var d2 = v1.dot( v1 ) - tca * tca;

				var radius2 = sphere.radius * sphere.radius;

				if ( d2 > radius2 ) return null;

				var thc = Math.sqrt( radius2 - d2 );

				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;

				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;

				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) return null;

				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) return this.at( t1, optionalTarget );

				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, optionalTarget );

			}

		}(),

		intersectsSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) <= sphere.radius;

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t :  null;

		},

		intersectPlane: function ( plane, optionalTarget ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, optionalTarget );

		},



		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, optionalTarget ) {

			// http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

		},

		intersectsBox: ( function () {

			var v = new THREE.Vector3();

			return function ( box ) {

				return this.intersectBox( box, v ) !== null;

			};

		} )(),

		intersectTriangle: function () {

			// Compute the offset origin, edges, and normal.
			var diff = new THREE.Vector3();
			var edge1 = new THREE.Vector3();
			var edge2 = new THREE.Vector3();
			var normal = new THREE.Vector3();

			return function ( a, b, c, backfaceCulling, optionalTarget ) {

				// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp

				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );

				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( normal );
				var sign;

				if ( DdN > 0 ) {

					if ( backfaceCulling ) return null;
					sign = 1;

				} else if ( DdN < 0 ) {

					sign = - 1;
					DdN = - DdN;

				} else {

					return null;

				}

				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {

					return null;

				}

				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {

					return null;

				}

				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {

					return null;

				}

				// Line intersects triangle, check if ray does.
				var QdN = - sign * diff.dot( normal );

				// t < 0, no intersection
				if ( QdN < 0 ) {

					return null;

				}

				// Ray intersects triangle.
				return this.at( QdN / DdN, optionalTarget );

			};

		}(),

		applyMatrix4: function ( matrix4 ) {

			this.direction.add( this.origin ).applyMatrix4( matrix4 );
			this.origin.applyMatrix4( matrix4 );
			this.direction.sub( this.origin );
			this.direction.normalize();

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	};

	// File:src/math/Sphere.js

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Sphere = function ( center, radius ) {

		this.center = ( center !== undefined ) ? center : new THREE.Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	};

	THREE.Sphere.prototype = {

		constructor: THREE.Sphere,

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function () {

			var box = new THREE.Box3();

			return function ( points, optionalCenter ) {

				var center = this.center;

				if ( optionalCenter !== undefined ) {

					center.copy( optionalCenter );

				} else {

					box.setFromPoints( points ).center( center );

				}

				var maxRadiusSq = 0;

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

				}

				this.radius = Math.sqrt( maxRadiusSq );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			// We use the following equation to compute the signed distance from
			// the center of the sphere to the plane.
			//
			// distance = q * n - d
			//
			// If this distance is greater than the radius of the sphere,
			// then there is no intersection.

			return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

		},

		clampPoint: function ( point, optionalTarget ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			var result = optionalTarget || new THREE.Vector3();

			result.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				result.sub( this.center ).normalize();
				result.multiplyScalar( this.radius ).add( this.center );

			}

			return result;

		},

		getBoundingBox: function ( optionalTarget ) {

			var box = optionalTarget || new THREE.Box3();

			box.set( this.center, this.center );
			box.expandByScalar( this.radius );

			return box;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	};

	// File:src/math/Frustum.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	THREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new THREE.Plane(),
			( p1 !== undefined ) ? p1 : new THREE.Plane(),
			( p2 !== undefined ) ? p2 : new THREE.Plane(),
			( p3 !== undefined ) ? p3 : new THREE.Plane(),
			( p4 !== undefined ) ? p4 : new THREE.Plane(),
			( p5 !== undefined ) ? p5 : new THREE.Plane()

		];

	};

	THREE.Frustum.prototype = {

		constructor: THREE.Frustum,

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function () {

			var sphere = new THREE.Sphere();

			return function ( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( object.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function () {

			var p1 = new THREE.Vector3(),
				p2 = new THREE.Vector3();

			return function ( box ) {

				var planes = this.planes;

				for ( var i = 0; i < 6 ; i ++ ) {

					var plane = planes[ i ];

					p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
					p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
					p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
					p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

					var d1 = plane.distanceToPoint( p1 );
					var d2 = plane.distanceToPoint( p2 );

					// if both outside plane, no intersection

					if ( d1 < 0 && d2 < 0 ) {

						return false;

					}

				}

				return true;

			};

		}(),


		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	};

	// File:src/math/Plane.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Plane = function ( normal, constant ) {

		this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	};

	THREE.Plane.prototype = {

		constructor: THREE.Plane,

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

			return this;

		},

		setFromCoplanarPoints: function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();

			return function ( a, b, c ) {

				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

				this.setFromNormalAndCoplanarPoint( normal, a );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, optionalTarget ) {

			return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

		},

		orthoPoint: function ( point, optionalTarget ) {

			var perpendicularMagnitude = this.distanceToPoint( point );

			var result = optionalTarget || new THREE.Vector3();
			return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

		},

		intersectLine: function () {

			var v1 = new THREE.Vector3();

			return function ( line, optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				var direction = line.delta( v1 );

				var denominator = this.normal.dot( direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {

						return result.copy( line.start );

					}

					// Unsure if this is the correct method to handle this case.
					return undefined;

				}

				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

				if ( t < 0 || t > 1 ) {

					return undefined;

				}

				return result.copy( direction ).multiplyScalar( t ).add( line.start );

			};

		}(),

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();
			var m1 = new THREE.Matrix3();

			return function ( matrix, optionalNormalMatrix ) {

				// compute new normal based on theory here:
				// http://www.songho.ca/opengl/gl_normaltransform.html
				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
				var newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );

				var newCoplanarPoint = this.coplanarPoint( v2 );
				newCoplanarPoint.applyMatrix4( matrix );

				this.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.constant = this.constant - offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	};

	// File:src/math/Math.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Math = {

		generateUUID: function () {

			// http://www.broofa.com/Tools/Math.uuid.htm

			var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
			var uuid = new Array( 36 );
			var rnd = 0, r;

			return function () {

				for ( var i = 0; i < 36; i ++ ) {

					if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

						uuid[ i ] = '-';

					} else if ( i === 14 ) {

						uuid[ i ] = '4';

					} else {

						if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
						r = rnd & 0xf;
						rnd = rnd >> 4;
						uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

					}

				}

				return uuid.join( '' );

			};

		}(),

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		// Random float from <0, 1> with 16 bits of randomness
		// (standard Math.random() creates repetitive patterns when applied over larger space)

		random16: function () {

			return ( 65280 * Math.random() + 255 * Math.random() ) / 65535;

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function () {

			var degreeToRadiansFactor = Math.PI / 180;

			return function ( degrees ) {

				return degrees * degreeToRadiansFactor;

			};

		}(),

		radToDeg: function () {

			var radianToDegreesFactor = 180 / Math.PI;

			return function ( radians ) {

				return radians * radianToDegreesFactor;

			};

		}(),

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		nearestPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

		},

		nextPowerOfTwo: function ( value ) {

			value --;
			value |= value >> 1;
			value |= value >> 2;
			value |= value >> 4;
			value |= value >> 8;
			value |= value >> 16;
			value ++;

			return value;

		}

	};

	// File:src/math/Spline.js

	/**
	 * Spline from Tween.js, slightly optimized (and trashed)
	 * http://sole.github.com/tween.js/examples/05_spline.html
	 *
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Spline = function ( points ) {

		this.points = points;

		var c = [], v3 = { x: 0, y: 0, z: 0 },
		point, intPoint, weight, w2, w3,
		pa, pb, pc, pd;

		this.initFromArray = function ( a ) {

			this.points = [];

			for ( var i = 0; i < a.length; i ++ ) {

				this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

			}

		};

		this.getPoint = function ( k ) {

			point = ( this.points.length - 1 ) * k;
			intPoint = Math.floor( point );
			weight = point - intPoint;

			c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
			c[ 1 ] = intPoint;
			c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
			c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

			pa = this.points[ c[ 0 ] ];
			pb = this.points[ c[ 1 ] ];
			pc = this.points[ c[ 2 ] ];
			pd = this.points[ c[ 3 ] ];

			w2 = weight * weight;
			w3 = weight * w2;

			v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
			v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
			v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

			return v3;

		};

		this.getControlPointsArray = function () {

			var i, p, l = this.points.length,
				coords = [];

			for ( i = 0; i < l; i ++ ) {

				p = this.points[ i ];
				coords[ i ] = [ p.x, p.y, p.z ];

			}

			return coords;

		};

		// approximate length by summing linear segments

		this.getLength = function ( nSubDivisions ) {

			var i, index, nSamples, position,
				point = 0, intPoint = 0, oldIntPoint = 0,
				oldPosition = new THREE.Vector3(),
				tmpVec = new THREE.Vector3(),
				chunkLengths = [],
				totalLength = 0;

			// first point has 0 length

			chunkLengths[ 0 ] = 0;

			if ( ! nSubDivisions ) nSubDivisions = 100;

			nSamples = this.points.length * nSubDivisions;

			oldPosition.copy( this.points[ 0 ] );

			for ( i = 1; i < nSamples; i ++ ) {

				index = i / nSamples;

				position = this.getPoint( index );
				tmpVec.copy( position );

				totalLength += tmpVec.distanceTo( oldPosition );

				oldPosition.copy( position );

				point = ( this.points.length - 1 ) * index;
				intPoint = Math.floor( point );

				if ( intPoint !== oldIntPoint ) {

					chunkLengths[ intPoint ] = totalLength;
					oldIntPoint = intPoint;

				}

			}

			// last point ends with total length

			chunkLengths[ chunkLengths.length ] = totalLength;

			return { chunks: chunkLengths, total: totalLength };

		};

		this.reparametrizeByArcLength = function ( samplingCoef ) {

			var i, j,
				index, indexCurrent, indexNext,
				realDistance,
				sampling, position,
				newpoints = [],
				tmpVec = new THREE.Vector3(),
				sl = this.getLength();

			newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

			for ( i = 1; i < this.points.length; i ++ ) {

				//tmpVec.copy( this.points[ i - 1 ] );
				//linearDistance = tmpVec.distanceTo( this.points[ i ] );

				realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

				sampling = Math.ceil( samplingCoef * realDistance / sl.total );

				indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
				indexNext = i / ( this.points.length - 1 );

				for ( j = 1; j < sampling - 1; j ++ ) {

					index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

					position = this.getPoint( index );
					newpoints.push( tmpVec.copy( position ).clone() );

				}

				newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

			}

			this.points = newpoints;

		};

		// Catmull-Rom

		function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

			var v0 = ( p2 - p0 ) * 0.5,
				v1 = ( p3 - p1 ) * 0.5;

			return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	};

	// File:src/math/Triangle.js

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Triangle = function ( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new THREE.Vector3();
		this.b = ( b !== undefined ) ? b : new THREE.Vector3();
		this.c = ( c !== undefined ) ? c : new THREE.Vector3();

	};

	THREE.Triangle.normal = function () {

		var v0 = new THREE.Vector3();

		return function ( a, b, c, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}();

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	THREE.Triangle.barycoordFromPoint = function () {

		var v0 = new THREE.Vector3();
		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();

		return function ( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new THREE.Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}();

	THREE.Triangle.containsPoint = function () {

		var v1 = new THREE.Vector3();

		return function ( point, a, b, c ) {

			var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}();

	THREE.Triangle.prototype = {

		constructor: THREE.Triangle,

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		area: function () {

			var v0 = new THREE.Vector3();
			var v1 = new THREE.Vector3();

			return function () {

				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );

				return v0.cross( v1 ).length() * 0.5;

			};

		}(),

		midpoint: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		normal: function ( optionalTarget ) {

			return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );

		},

		plane: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Plane();

			return result.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		barycoordFromPoint: function ( point, optionalTarget ) {

			return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

		},

		containsPoint: function ( point ) {

			return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	};

	// File:src/math/Interpolant.js

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	THREE.Interpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
				resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	};

	THREE.Interpolant.prototype = {

		constructor: THREE.Intepolant,

		evaluate: function( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[   i1   ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {
	//- See http://jsperf.com/comparison-to-undefined/3
	//- slower code:
	//-
	//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ;) {

								if ( t1 === undefined ) {

									if ( t < t0 ) break forward_scan;

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

	//- slower code:
	//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ;) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[   i1   ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function() {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function( i1, t0, t, t1 ) {

			throw new Error( "call to abstract method" );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function( i1, t0, t1 ) {

			// empty

		}

	};

	Object.assign( THREE.Interpolant.prototype, {

		beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
			THREE.Interpolant.prototype.copySampleValue_,

		afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
			THREE.Interpolant.prototype.copySampleValue_

	} );

	// File:src/math/interpolants/CubicInterpolant.js

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	THREE.CubicInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = -0;
		this._offsetPrev = -0;
		this._weightNext = -0;
		this._offsetNext = -0;

	};

	THREE.CubicInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.CubicInterpolant,

		DefaultSettings_: {

			endingStart: 	THREE.ZeroCurvatureEnding,
			endingEnd:		THREE.ZeroCurvatureEnding

		},

		intervalChanged_: function( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case THREE.ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case THREE.WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case THREE.ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case THREE.WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
			var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
			var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
			var sN =       wN   * ppp   -           wN      * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	// File:src/math/interpolants/DiscreteInterpolant.js

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	THREE.DiscreteInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	};

	THREE.DiscreteInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.DiscreteInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	// File:src/math/interpolants/LinearInterpolant.js

	/**
	 * @author tschw
	 */

	THREE.LinearInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	};

	THREE.LinearInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.LinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	// File:src/math/interpolants/QuaternionLinearInterpolant.js

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	THREE.QuaternionLinearInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	};

	THREE.QuaternionLinearInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.QuaternionLinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				THREE.Quaternion.slerpFlat( result, 0,
						values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	// File:src/core/Clock.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Clock = function ( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	};

	THREE.Clock.prototype = {

		constructor: THREE.Clock,

		start: function () {

			this.startTime = self.performance.now();

			this.oldTime = this.startTime;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();

			}

			if ( this.running ) {

				var newTime = self.performance.now();

				diff = 0.001 * ( newTime - this.oldTime );
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	};

	// File:src/core/EventDispatcher.js

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	THREE.EventDispatcher = function () {};

	THREE.EventDispatcher.prototype = {

		constructor: THREE.EventDispatcher,

		apply: function ( object ) {

			object.addEventListener = THREE.EventDispatcher.prototype.addEventListener;
			object.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;
			object.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;
			object.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;

		},

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return false;

			var listeners = this._listeners;

			if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

				return true;

			}

			return false;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = [];
				var length = listenerArray.length;

				for ( var i = 0; i < length; i ++ ) {

					array[ i ] = listenerArray[ i ];

				}

				for ( var i = 0; i < length; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	};

	// File:src/core/Layers.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Layers = function () {

		this.mask = 1;

	};

	THREE.Layers.prototype = {

		constructor: THREE.Layers,

		set: function ( channel ) {

			this.mask = 1 << channel;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel );

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	};

	// File:src/core/Raycaster.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	( function ( THREE ) {

		THREE.Raycaster = function ( origin, direction, near, far ) {

			this.ray = new THREE.Ray( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)

			this.near = near || 0;
			this.far = far || Infinity;

			this.params = {
				Mesh: {},
				Line: {},
				LOD: {},
				Points: { threshold: 1 },
				Sprite: {}
			};

			Object.defineProperties( this.params, {
				PointCloud: {
					get: function () {
						console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
						return this.Points;
					}
				}
			} );

		};

		function ascSort( a, b ) {

			return a.distance - b.distance;

		}

		function intersectObject( object, raycaster, intersects, recursive ) {

			if ( object.visible === false ) return;

			object.raycast( raycaster, intersects );

			if ( recursive === true ) {

				var children = object.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					intersectObject( children[ i ], raycaster, intersects, true );

				}

			}

		}

		//

		THREE.Raycaster.prototype = {

			constructor: THREE.Raycaster,

			linePrecision: 1,

			set: function ( origin, direction ) {

				// direction is assumed to be normalized (for accurate distance calculations)

				this.ray.set( origin, direction );

			},

			setFromCamera: function ( coords, camera ) {

				if ( camera instanceof THREE.PerspectiveCamera ) {

					this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
					this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

				} else if ( camera instanceof THREE.OrthographicCamera ) {

					this.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );
					this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

				} else {

					console.error( 'THREE.Raycaster: Unsupported camera type.' );

				}

			},

			intersectObject: function ( object, recursive ) {

				var intersects = [];

				intersectObject( object, this, intersects, recursive );

				intersects.sort( ascSort );

				return intersects;

			},

			intersectObjects: function ( objects, recursive ) {

				var intersects = [];

				if ( Array.isArray( objects ) === false ) {

					console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
					return intersects;

				}

				for ( var i = 0, l = objects.length; i < l; i ++ ) {

					intersectObject( objects[ i ], this, intersects, recursive );

				}

				intersects.sort( ascSort );

				return intersects;

			}

		};

	}( THREE ) );

	// File:src/core/Object3D.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	THREE.Object3D = function () {

		Object.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = THREE.Object3D.DefaultUp.clone();

		var position = new THREE.Vector3();
		var rotation = new THREE.Euler();
		var quaternion = new THREE.Quaternion();
		var scale = new THREE.Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation.onChange( onRotationChange );
		quaternion.onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				enumerable: true,
				value: position
			},
			rotation: {
				enumerable: true,
				value: rotation
			},
			quaternion: {
				enumerable: true,
				value: quaternion
			},
			scale: {
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new THREE.Matrix4()
			},
			normalMatrix: {
				value: new THREE.Matrix3()
			}
		} );

		this.rotationAutoUpdate = true;

		this.matrix = new THREE.Matrix4();
		this.matrixWorld = new THREE.Matrix4();

		this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new THREE.Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

	};

	THREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );
	THREE.Object3D.DefaultMatrixAutoUpdate = true;

	THREE.Object3D.prototype = {

		constructor: THREE.Object3D,

		applyMatrix: function ( matrix ) {

			this.matrix.multiplyMatrices( matrix, this.matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function () {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			var q1 = new THREE.Quaternion();

			return function ( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.multiply( q1 );

				return this;

			};

		}(),

		rotateX: function () {

			var v1 = new THREE.Vector3( 1, 0, 0 );

			return function ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateY: function () {

			var v1 = new THREE.Vector3( 0, 1, 0 );

			return function ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateZ: function () {

			var v1 = new THREE.Vector3( 0, 0, 1 );

			return function ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		translateOnAxis: function () {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			var v1 = new THREE.Vector3();

			return function ( axis, distance ) {

				v1.copy( axis ).applyQuaternion( this.quaternion );

				this.position.add( v1.multiplyScalar( distance ) );

				return this;

			};

		}(),

		translateX: function () {

			var v1 = new THREE.Vector3( 1, 0, 0 );

			return function ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateY: function () {

			var v1 = new THREE.Vector3( 0, 1, 0 );

			return function ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateZ: function () {

			var v1 = new THREE.Vector3( 0, 0, 1 );

			return function ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function () {

			var m1 = new THREE.Matrix4();

			return function ( vector ) {

				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

			};

		}(),

		lookAt: function () {

			// This routine does not support objects with rotated and/or translated parent(s)

			var m1 = new THREE.Matrix4();

			return function ( vector ) {

				m1.lookAt( vector, this.position, this.up );

				this.quaternion.setFromRotationMatrix( m1 );

			};

		}(),

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( object instanceof THREE.Object3D ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				object.dispatchEvent( { type: 'added' } );

				this.children.push( object );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;

				object.dispatchEvent( { type: 'removed' } );

				this.children.splice( index, 1 );

			}

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			this.updateMatrixWorld( true );

			return result.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function () {

			var position = new THREE.Vector3();
			var scale = new THREE.Vector3();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Quaternion();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, result, scale );

				return result;

			};

		}(),

		getWorldRotation: function () {

			var quaternion = new THREE.Quaternion();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Euler();

				this.getWorldQuaternion( quaternion );

				return result.setFromQuaternion( quaternion, this.rotation.order, false );

			};

		}(),

		getWorldScale: function () {

			var position = new THREE.Vector3();
			var quaternion = new THREE.Quaternion();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, quaternion, result );

				return result;

			};

		}(),

		getWorldDirection: function () {

			var quaternion = new THREE.Quaternion();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				this.getWorldQuaternion( quaternion );

				return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

			};

		}(),

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate === true ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate === true || force === true ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				this.children[ i ].updateMatrixWorld( force );

			}

		},

		toJSON: function ( meta ) {

			var isRootObject = ( meta === undefined );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {}
				};

				output.metadata = {
					version: 4.4,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;

			object.matrix = this.matrix.toArray();

			//

			if ( this.geometry !== undefined ) {

				if ( meta.geometries[ this.geometry.uuid ] === undefined ) {

					meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );

				}

				object.geometry = this.geometry.uuid;

			}

			if ( this.material !== undefined ) {

				if ( meta.materials[ this.material.uuid ] === undefined ) {

					meta.materials[ this.material.uuid ] = this.material.toJSON( meta );

				}

				object.material = this.material.uuid;

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache ( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) recursive = true;

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.rotationAutoUpdate = source.rotationAutoUpdate;

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );

	THREE.Object3DIdCount = 0;

	// File:src/core/Face3.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = color instanceof THREE.Color ? color : new THREE.Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	};

	THREE.Face3.prototype = {

		constructor: THREE.Face3,

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	};

	// File:src/core/Face4.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {

		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new THREE.Face3( a, b, c, normal, color, materialIndex );

	};

	// File:src/core/BufferAttribute.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BufferAttribute = function ( array, itemSize ) {

		this.uuid = THREE.Math.generateUUID();

		this.array = array;
		this.itemSize = itemSize;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	};

	THREE.BufferAttribute.prototype = {

		constructor: THREE.BufferAttribute,

		get count() {

			return this.array.length / this.itemSize;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;

			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new THREE.Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyIndicesArray: function ( indices ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				var index = indices[ i ];

				array[ offset ++ ] = index.a;
				array[ offset ++ ] = index.b;
				array[ offset ++ ] = index.c;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new THREE.Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new THREE.Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new THREE.Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	//

	THREE.Int8Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Int8Array( array ), itemSize );

	};

	THREE.Uint8Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint8Array( array ), itemSize );

	};

	THREE.Uint8ClampedAttribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );

	};

	THREE.Int16Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Int16Array( array ), itemSize );

	};

	THREE.Uint16Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint16Array( array ), itemSize );

	};

	THREE.Int32Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Int32Array( array ), itemSize );

	};

	THREE.Uint32Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint32Array( array ), itemSize );

	};

	THREE.Float32Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Float32Array( array ), itemSize );

	};

	THREE.Float64Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Float64Array( array ), itemSize );

	};


	// Deprecated

	THREE.DynamicBufferAttribute = function ( array, itemSize ) {

		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new THREE.BufferAttribute( array, itemSize ).setDynamic( true );

	};

	// File:src/core/InstancedBufferAttribute.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {

		THREE.BufferAttribute.call( this, array, itemSize );

		this.meshPerAttribute = meshPerAttribute || 1;

	};

	THREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );
	THREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;

	THREE.InstancedBufferAttribute.prototype.copy = function ( source ) {

		THREE.BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	// File:src/core/InterleavedBuffer.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InterleavedBuffer = function ( array, stride ) {

		this.uuid = THREE.Math.generateUUID();

		this.array = array;
		this.stride = stride;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	};

	THREE.InterleavedBuffer.prototype = {

		constructor: THREE.InterleavedBuffer,

		get length () {

			return this.array.length;

		},

		get count () {

			return this.array.length / this.stride;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.stride = source.stride;
			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	// File:src/core/InstancedInterleavedBuffer.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {

		THREE.InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	};

	THREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );
	THREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;

	THREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {

		THREE.InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	// File:src/core/InterleavedBufferAttribute.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {

		this.uuid = THREE.Math.generateUUID();

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

	};


	THREE.InterleavedBufferAttribute.prototype = {

		constructor: THREE.InterleavedBufferAttribute,

		get length() {

			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
			return this.array.length;

		},

		get count() {

			return this.data.count;

		},

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	};

	// File:src/core/Geometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	THREE.Geometry = function () {

		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [ [] ];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.elementsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	};

	THREE.Geometry.prototype = {

		constructor: THREE.Geometry,

		applyMatrix: function ( matrix ) {

			var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new THREE.Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			var vertices = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

			var tempNormals = [];
			var tempUVs = [];
			var tempUVs2 = [];

			for ( var i = 0, j = 0; i < vertices.length; i += 3, j += 2 ) {

				scope.vertices.push( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );

				if ( normals !== undefined ) {

					tempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

				}

				if ( colors !== undefined ) {

					scope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

				}

				if ( uvs !== undefined ) {

					tempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );

				}

				if ( uvs2 !== undefined ) {

					tempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

				}

			}

			function addFace( a, b, c ) {

				var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
				var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

				var face = new THREE.Face3( a, b, c, vertexNormals, vertexColors );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

				}

			};

			if ( indices !== undefined ) {

				var groups = geometry.groups;

				if ( groups.length > 0 ) {

					for ( var i = 0; i < groups.length; i ++ ) {

						var group = groups[ i ];

						var start = group.start;
						var count = group.count;

						for ( var j = start, jl = start + count; j < jl; j += 3 ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ] );

						}

					}

				} else {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				}

			} else {

				for ( var i = 0; i < vertices.length; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.center().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new THREE.Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new THREE.Vector3(), ab = new THREE.Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new THREE.Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new THREE.Vector3(), ab = new THREE.Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new THREE.Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new THREE.Vector3();
						vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeTangents: function () {

			console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

		},

		computeLineDistances: function () {

			var d = 0;
			var vertices = this.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				if ( i > 0 ) {

					d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

				}

				this.lineDistances[ i ] = d;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new THREE.Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new THREE.Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( geometry instanceof THREE.Geometry === false ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ];

			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

			if ( matrix !== undefined ) {

				normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

				vertices1.push( vertexCopy );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

				faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( i = 0, il = uvs2.length; i < il; i ++ ) {

				var uv = uvs2[ i ], uvCopy = [];

				if ( uv === undefined ) {

					continue;

				}

				for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

					uvCopy.push( uv[ j ].clone() );

				}

				uvs1.push( uvCopy );

			}

		},

		mergeMesh: function ( mesh ) {

			if ( mesh instanceof THREE.Mesh === false ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			mesh.matrixAutoUpdate && mesh.updateMatrix();

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				var dupIndex = - 1;

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						dupIndex = n;
						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

			}

			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new THREE.Geometry().copy( this );

		},

		copy: function ( source ) {

			this.vertices = [];
			this.faces = [];
			this.faceVertexUvs = [ [] ];

			var vertices = source.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			var faces = source.faces;

			for ( var i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );

	THREE.GeometryIdCount = 0;

	// File:src/core/DirectGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.DirectGeometry = function () {

		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'DirectGeometry';

		this.indices = [];
		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	};

	THREE.DirectGeometry.prototype = {

		constructor: THREE.DirectGeometry,

		computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,
		computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,

		computeFaceNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );

		},

		computeVertexNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );

		},

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = [];

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = [];

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.DirectGeometry.prototype );

	// File:src/core/BufferGeometry.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BufferGeometry = function () {

		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

	};

	THREE.BufferGeometry.prototype = {

		constructor: THREE.BufferGeometry,

		addIndex: function ( index ) {

			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );

		},

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			this.index = index;

		},

		addAttribute: function ( name, attribute ) {

			if ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				this.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

				return;

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return;

			}

			this.attributes[ name ] = attribute;

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		removeAttribute: function ( name ) {

			delete this.attributes[ name ];

		},

		get drawcalls() {

			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
			return this.groups;

		},

		get offsets() {

			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
			return this.groups;

		},

		addDrawCall: function ( start, count, indexOffset ) {

			if ( indexOffset !== undefined ) {

				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

			}

			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );

		},

		clearDrawCalls: function () {

			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToVector3Array( position.array );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToVector3Array( normal.array );
				normal.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new THREE.Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.center().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( object instanceof THREE.Points || object instanceof THREE.Line ) {

				var positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );
				var colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );

				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );

					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( object instanceof THREE.Mesh ) {

				if ( geometry instanceof THREE.Geometry ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( object instanceof THREE.Mesh ) {

				var direct = geometry.__directGeometry;

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			if ( geometry.verticesNeedUpdate === true ) {

				var attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				var attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				var attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				var attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				var attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			if ( geometry.indices.length > 0 ) {

				var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
				var indices = new TypeArray( geometry.indices.length * 3 );
				this.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );

					array.push( attribute.copyVector3sArray( morphTarget ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			var vector = new THREE.Vector3();

			return function () {

				if ( this.boundingBox === null ) {

					this.boundingBox = new THREE.Box3();

				}

				var positions = this.attributes.position.array;

				if ( positions ) {

					var bb = this.boundingBox;
					bb.makeEmpty();

					for ( var i = 0, il = positions.length; i < il; i += 3 ) {

						vector.fromArray( positions, i );
						bb.expandByPoint( vector );

					}

				}

				if ( positions === undefined || positions.length === 0 ) {

					this.boundingBox.min.set( 0, 0, 0 );
					this.boundingBox.max.set( 0, 0, 0 );

				}

				if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

				}

			};

		}(),

		computeBoundingSphere: function () {

			var box = new THREE.Box3();
			var vector = new THREE.Vector3();

			return function () {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new THREE.Sphere();

				}

				var positions = this.attributes.position.array;

				if ( positions ) {

					box.makeEmpty();

					var center = this.boundingSphere.center;

					for ( var i = 0, il = positions.length; i < il; i += 3 ) {

						vector.fromArray( positions, i );
						box.expandByPoint( vector );

					}

					box.center( center );

					// hoping to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

					var maxRadiusSq = 0;

					for ( var i = 0, il = positions.length; i < il; i += 3 ) {

						vector.fromArray( positions, i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

					}

					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

					if ( isNaN( this.boundingSphere.radius ) ) {

						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

					}

				}

			};

		}(),

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;
			var groups = this.groups;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC,

				pA = new THREE.Vector3(),
				pB = new THREE.Vector3(),
				pC = new THREE.Vector3(),

				cb = new THREE.Vector3(),
				ab = new THREE.Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					if ( groups.length === 0 ) {

						this.addGroup( 0, indices.length );

					}

					for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

						var group = groups[ j ];

						var start = group.start;
						var count = group.count;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;

							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;

							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;

							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;

						}

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		computeTangents: function () {

			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

		},

		computeOffsets: function ( size ) {

			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

		},

		merge: function ( geometry, offset ) {

			if ( geometry instanceof THREE.BufferGeometry === false ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) offset = 0;

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) continue;

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeSize = attribute2.itemSize;

				for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var normals = this.attributes.normal.array;

			var x, y, z, n;

			for ( var i = 0, il = normals.length; i < il; i += 3 ) {

				x = normals[ i ];
				y = normals[ i + 1 ];
				z = normals[ i + 2 ];

				n = 1.0 / Math.sqrt( x * x + y * y + z * z );

				normals[ i ] *= n;
				normals[ i + 1 ] *= n;
				normals[ i + 2 ] *= n;

			}

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				var array = Array.prototype.slice.call( index.array );

				data.data.index = {
					type: index.array.constructor.name,
					array: array
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var array = Array.prototype.slice.call( attribute.array );

				data.data.attributes[ key ] = {
					itemSize: attribute.itemSize,
					type: attribute.array.constructor.name,
					array: array
				};

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new THREE.BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			var attributes = source.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );

			}

			var groups = source.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count );

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );

	THREE.BufferGeometry.MaxIndex = 65535;

	// File:src/core/InstancedBufferGeometry.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InstancedBufferGeometry = function () {

		THREE.BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	};

	THREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;

	THREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {

		this.groups.push( {

			start: start,
			count: count,
			instances: instances

		} );

	};

	THREE.InstancedBufferGeometry.prototype.copy = function ( source ) {

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		var attributes = source.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		var groups = source.groups;

		for ( var i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.instances );

		}

		return this;

	};

	THREE.EventDispatcher.prototype.apply( THREE.InstancedBufferGeometry.prototype );

	// File:src/core/Uniform.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Uniform = function ( type, value ) {

		this.type = type;
		this.value = value;

		this.dynamic = false;

	};

	THREE.Uniform.prototype = {

		constructor: THREE.Uniform,

		onUpdate: function ( callback ) {

			this.dynamic = true;
			this.onUpdateCallback = callback;

			return this;

		}

	};

	// File:src/animation/AnimationClip.js

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	THREE.AnimationClip = function ( name, duration, tracks ) {

		this.name = name || THREE.Math.generateUUID();
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : -1;

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

		// maybe only do these on demand, as doing them here could potentially slow down loading
		// but leaving these here during development as this ensures a lot of testing of these functions
		this.trim();
		this.optimize();

	};

	THREE.AnimationClip.prototype = {

		constructor: THREE.AnimationClip,

		resetDuration: function() {

			var tracks = this.tracks,
				duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max(
						duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

		},

		trim: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		optimize: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		}

	};

	// Static methods:

	Object.assign( THREE.AnimationClip, {

		parse: function( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new THREE.AnimationClip( json.name, json.duration, tracks );

		},


		toJSON: function( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},


		CreateFromMorphTargetSequence: function( name, morphTargetSequence, fps ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
						( i + numMorphTargets - 1 ) % numMorphTargets,
						i,
						( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = THREE.AnimationUtils.getKeyframeOrder( times );
				times = THREE.AnimationUtils.sortedArray( times, 1, order );
				values = THREE.AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
						new THREE.NumberKeyframeTrack(
							'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
							times, values
						).scale( 1.0 / fps ) );
			}

			return new THREE.AnimationClip( name, -1, tracks );

		},

		findByName: function( clipArray, name ) {

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}
			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function( morphTargets, fps ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function( animation, bones, nodeName ) {

			if ( ! animation ) {

				console.error( "  no animation in JSONLoader data" );
				return null;

			}

			var addNonemptyTrack = function(
					trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					THREE.AnimationUtils.flattenJSON(
							animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || -1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length == 0 ) continue;

				// process morph targets in a way exactly compatible
				// with AnimationHandler.init( animation )
				if ( animationKeys[0].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};
					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[k].morphTargets ) {

							for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0;
								m !== animationKeys[k].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[k];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 )

						}

						tracks.push( new THREE.NumberKeyframeTrack(
								'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {
					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
							THREE.VectorKeyframeTrack, boneName + '.position',
							animationKeys, 'pos', tracks );

					addNonemptyTrack(
							THREE.QuaternionKeyframeTrack, boneName + '.quaternion',
							animationKeys, 'rot', tracks );

					addNonemptyTrack(
							THREE.VectorKeyframeTrack, boneName + '.scale',
							animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new THREE.AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );


	// File:src/animation/AnimationMixer.js

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.AnimationMixer = function( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	};

	THREE.AnimationMixer.prototype = {

		constructor: THREE.AnimationMixer,

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,
				clipName = ( typeof clip === 'string' ) ? clip : clip.name,
				clipObject = ( clip !== clipName ) ? clip : null,

				actionsForClip = this._actionsByClip[ clipName ],
				prototypeAction;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				clipObject = prototypeAction._clip;

				if ( clip !== clipName && clip !== clipObject ) {

					throw new Error(
							"Different clips with the same name detected!" );

				}

			}

			// clip must be known when specified via string
			if ( clipObject === null ) return null;

			// allocate all resources required to run it
			var newAction = new THREE.
					AnimationMixer._Action( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipName, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,
				clipName = ( typeof clip === 'string' ) ? clip : clip.name,
				actionsForClip = this._actionsByClip[ clipName ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function() {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				if ( action.enabled ) {

					action._update( time, deltaTime, timeDirection, accuIndex );

				}

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// return this mixer's root target object
		getRoot: function() {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function( clip ) {

			var actions = this._actions,
				clipName = clip.name,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipName ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipName ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipName in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipName ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.AnimationMixer.prototype );

	THREE.AnimationMixer._Action =
			function( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
				endingStart: 	THREE.ZeroCurvatureEnding,
				endingEnd:		THREE.ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants;	// bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null;			// for the memory manager
		this._byClipCacheIndex = null;		// for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = THREE.LoopRepeat;
		this._loopCount = -1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; 		// no. of repetitions when looping

		this.paused = false;				// false -> zero effective time scale
		this.enabled = true;				// true -> zero effective weight

		this.clampWhenFinished 	= false;	// keep feeding the last frame?

		this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

	};

	THREE.AnimationMixer._Action.prototype = {

		constructor: THREE.AnimationMixer._Action,

		// State & Scheduling

		play: function() {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function() {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function() {

			this.paused = false;
			this.enabled = true;

			this.time = 0;			// restart clip
			this._loopCount = -1;	// forget previous loops
			this._startTime = null;	// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function() {

			var start = this._startTime;

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
					this._startTime === null && this._mixer._isActiveAction( this )

		},

		// return true when play has been called
		isScheduled: function() {

			return this._mixer._isActiveAction( this );

		},

		startAt: function( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function() {

			return this._effectiveWeight;

		},

		fadeIn: function( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function( fadeOutAction, duration, warp ) {

			var mixer = this._mixer;

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function() {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the weight stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 :timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function() {

			return this._effectiveTimeScale;

		},

		setDuration: function( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function( duration ) {

			return this.warp( this._currentTimeScale, 0, duration );

		},

		warp: function( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function() {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function() {

			return this._mixer;

		},

		getClip: function() {

			return this._clip;

		},

		getRoot: function() {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function( time, deltaTime, timeDirection, accuIndex ) {
			// called by the mixer

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.pause = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function( deltaTime ) {

			var time = this.time + deltaTime;

			if ( deltaTime === 0 ) return time;

			var duration = this._clip.duration,

				loop = this.loop,
				loopCount = this._loopCount,

				pingPong = false;

			switch ( loop ) {

				case THREE.LoopOnce:
				case THREE.LoopOnceClamp:

					if ( loopCount === -1 ) {

						// just started

						this.loopCount = 0;
						this._setEndings( true, true, false );

					}

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else break;

					// reached the end

					if ( this.clampWhenFinished ) this.pause = true;
					else this.enabled = false;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? -1 : 1
					} );

					break;

				case THREE.LoopPingPong:

					pingPong = true;

				case THREE.LoopRepeat:

					if ( loopCount === -1 ) {

						// just started

						if ( deltaTime > 0 ) {

							loopCount = 0;

							this._setEndings(
									true, this.repetitions === 0, pingPong );

						} else {

							// when looping in reverse direction, the initial
							// transition through zero counts as a repetition,
							// so leave loopCount at -1

							this._setEndings(
									this.repetitions === 0, true, pingPong );

						}

					}

					if ( time >= duration || time < 0 ) {

						// wrap around

						var loopDelta = Math.floor( time / duration ); // signed
						time -= duration * loopDelta;

						loopCount += Math.abs( loopDelta );

						var pending = this.repetitions - loopCount;

						if ( pending < 0 ) {

							// stop (switch state, clamp time, fire event)

							if ( this.clampWhenFinished ) this.paused = true;
							else this.enabled = false;

							time = deltaTime > 0 ? duration : 0;

							this._mixer.dispatchEvent( {
								type: 'finished', action: this,
								direction: deltaTime > 0 ? 1 : -1
							} );

							break;

						} else if ( pending === 0 ) {

							// transition to last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

					if ( loop === THREE.LoopPingPong && ( loopCount & 1 ) === 1 ) {

						// invert time for the "pong round"

						this.time = time;

						return duration - time;

					}

					break;

			}

			this.time = time;

			return time;

		},

		_setEndings: function( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart 	= THREE.ZeroSlopeEnding;
				settings.endingEnd		= THREE.ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ?
							THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;

				} else {

					settings.endingStart = THREE.WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ?
							THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = THREE.WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now; 				values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

			return this;

		}

	};

	// Implementation details:

	Object.assign( THREE.AnimationMixer.prototype, {

		_bindAction: function( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
							_propertyBindings[ i ].binding.parsedPath;

					binding = new THREE.PropertyMixer(
							THREE.PropertyBinding.create( root, trackName, path ),
							track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipName = action._clip.name,
						actionsForClip = this._actionsByClip[ clipName ];

					this._bindAction( action,
							actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipName, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function() {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 		knownActions: Array< _Action >	- used as prototypes
			// 		actionByRoot: _Action			- lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() { return scope._actions.length; },
					get inUse() { return scope._nActiveActions; }
				},
				bindings: {
					get total() { return scope._bindings.length; },
					get inUse() { return scope._nActiveBindings; }
				},
				controlInterpolants: {
					get total() { return scope._controlInterpolants.length; },
					get inUse() { return scope._nActiveControlInterpolants; }
				}

			};

		},

		// Memory management for _Action objects

		_isActiveAction: function( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function( action, clipName, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipName ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipName ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipName = action._clip.name,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipName ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( actions._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipName ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			remove_empty_map: {

				for ( var _ in bindingByName ) break remove_empty_map;

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function() {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new THREE.LinearInterpolant(
						new Float32Array( 2 ), new Float32Array( 2 ),
							1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 )

	} );


	// File:src/animation/AnimationObjectGroup.js

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 * 	-	Add objects you would otherwise pass as 'root' to the
	 * 		constructor or the .clipAction method of AnimationMixer.
	 *
	 * 	-	Instead pass this object as 'root'.
	 *
	 * 	-	You can also add and remove objects later when the mixer
	 * 		is running.
	 *
	 * Note:
	 *
	 *  	Objects of this class appear as one object to the mixer,
	 *  	so cache control of the individual objects must be done
	 *  	on the group.
	 *
	 * Limitation:
	 *
	 * 	- 	The animated properties must be compatible among the
	 * 		all objects in the group.
	 *
	 *  -	A single property can either be controlled through a
	 *  	target group or directly, but not both.
	 *
	 * @author tschw
	 */

	THREE.AnimationObjectGroup = function( var_args ) {

		this.uuid = THREE.Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0;			// threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices;		// for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = [];					// inside: string
		this._parsedPaths = [];				// inside: { we don't care, here }
		this._bindings = []; 				// inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() { return scope._objects.length; },
				get inUse() { return this.total - scope.nCachedObjects_;  }
			},

			get bindingsPerObject() { return scope._bindings.length; }

		};

	};

	THREE.AnimationObjectGroup.prototype = {

		constructor: THREE.AnimationObjectGroup,

		add: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push(
								new THREE.PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					var knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new THREE.PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject) {

					console.error( "Different objects with the same UUID " +
							"detected. Clean the caches or recreate your " +
							"infrastructure when reloading scenes..." );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function( path, parsedPath ) {
			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) return bindings[ index ];

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects,
					n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];

				bindingsForPath[ i ] =
						new THREE.PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function( path ) {
			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	};


	// File:src/animation/AnimationUtils.js

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	THREE.AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function( array, from, to ) {

			if ( THREE.AnimationUtils.isTypedArray( array ) ) {

				return new array.constructor( array.subarray( from, to ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
					! forceClone && array.constructor === type ) return array;

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function( object ) {

			return ArrayBuffer.isView( object ) &&
					! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) return; // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) return; // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {
				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {
				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		}

	};

	// File:src/animation/KeyframeTrack.js

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.KeyframeTrack = function ( name, times, values, interpolation ) {

		if( name === undefined ) throw new Error( "track name is undefined" );

		if( times === undefined || times.length === 0 ) {

			throw new Error( "no keyframes in track named " + name );

		}

		this.name = name;

		this.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

		this.validate();
		this.optimize();

	};

	THREE.KeyframeTrack.prototype = {

		constructor: THREE.KeyframeTrack,

		TimeBufferType: Float32Array,
		ValueBufferType: Float32Array,

		DefaultInterpolation: THREE.InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function( result ) {

			return new THREE.DiscreteInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function( result ) {

			return new THREE.LinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function( result ) {

			return new THREE.CubicInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function( interpolation ) {

			var factoryMethod = undefined;

			switch ( interpolation ) {

				case THREE.InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case THREE.InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case THREE.InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
						this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( message );
				return;

			}

			this.createInterpolant = factoryMethod;

		},

		getInterpolation: function() {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return THREE.InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return THREE.InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return THREE.InterpolateSmooth;

			}

		},

		getValueSize: function() {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function( timeOffset ) {

			if( timeOffset !== 0.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function( timeScale ) {

			if( timeScale !== 1.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function( startTime, endTime ) {

			var times = this.times;
			var nKeys = times.length;

			var firstKeysToRemove = 0;
			for ( var i = 1; i !== nKeys; ++ i ) {

				if ( times[i] <= startTime ) ++ firstKeysToRemove;

			}

			var lastKeysToRemove = 0;
			for ( var i = nKeys - 2; i !== 0; -- i ) {

				if ( times[i] >= endTime ) ++ lastKeysToRemove;
				else break;

			}

			// remove last keys first because it doesn't affect the position of the first keys (the otherway around doesn't work as easily)
			if( ( firstKeysToRemove + lastKeysToRemove ) !== 0 ) {

				var from = firstKeysToRemove;
				var to = nKeys - lastKeysToRemove - firstKeysToRemove;

				this.times = THREE.AnimationUtils.arraySlice( times, from, to );

				var values = this.values;
				var stride = this.getValueSize();
				this.values = THREE.AnimationUtils.arraySlice( values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function() {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( "invalid value size in track", this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if( nKeys === 0 ) {

				console.error( "track is empty", this );
				valid = false;

			}

			var prevTime = null;

			for( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( "time is not a valid number", this, i, currTime );
					valid = false;
					break;

				}

				if( prevTime !== null && prevTime > currTime ) {

					console.error( "out of order keys", this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( THREE.AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( "value is not a valid number", this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function() {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				writeIndex = 1;

			for( var i = 1, n = times.length - 1; i <= n; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					// remove unnecessary keyframes same as their neighbors
					var offset = i * stride,
						offsetP = offset - stride,
						offsetN = offset + stride;

					for ( var j = 0; j !== stride; ++ j ) {

						var value = values[ offset + j ];

						if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

							keep = true;
							break;

						}

					}

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j ) {

							values[ writeOffset + j ] = values[ readOffset + j ];

						}


					}

					++ writeIndex;

				}

			}

			if ( writeIndex !== times.length ) {

				this.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		}

	};

	// Static methods:

	Object.assign( THREE.KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		parse: function( json ) {

			if( json.type === undefined ) {

				throw new Error( "track type undefined, can not parse" );

			}

			var trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );

			if ( json.times === undefined ) {

				console.warn( "legacy JSON format detected, converting" );

				var times = [], values = [];

				THREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

				json.times = times;
				json.values = values;

			}

			// derived classes can define a static parse method
			if ( trackType.parse !== undefined ) {

				return trackType.parse( json );

			} else {

				// by default, we asssume a constructor compatible with the base
				return new trackType(
						json.name, json.times, json.values, json.interpolation );

			}

		},

		toJSON: function( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': THREE.AnimationUtils.convertArray( track.times, Array ),
					'values': THREE.AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		},

		_getTrackTypeForValueTypeName: function( typeName ) {

			switch( typeName.toLowerCase() ) {

				case "scalar":
				case "double":
				case "float":
				case "number":
				case "integer":

					return THREE.NumberKeyframeTrack;

				case "vector":
				case "vector2":
				case "vector3":
				case "vector4":

					return THREE.VectorKeyframeTrack;

				case "color":

					return THREE.ColorKeyframeTrack;

				case "quaternion":

					return THREE.QuaternionKeyframeTrack;

				case "bool":
				case "boolean":

					return THREE.BooleanKeyframeTrack;

				case "string":

					return THREE.StringKeyframeTrack;

			};

			throw new Error( "Unsupported typeName: " + typeName );

		}

	} );

	// File:src/animation/PropertyBinding.js

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.PropertyBinding = function ( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath ||
				THREE.PropertyBinding.parseTrackName( path );

		this.node = THREE.PropertyBinding.findNode(
				rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	};

	THREE.PropertyBinding.prototype = {

		constructor: THREE.PropertyBinding,

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function() {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = THREE.PropertyBinding.findNode(
						this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

	 		// ensure there is a value node
			if ( ! targetObject ) {

				console.error( "  trying to update node for track: " + this.path + " but it wasn't found." );
				return;

			}

			if( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if( ! targetObject.material ) {

							console.error( '  can not bind to material as node does not have a material', this );
							return;

						}

						if( ! targetObject.material.materials ) {

							console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if( ! targetObject.skeleton ) {

							console.error( '  can not bind to bones as node does not have a skeleton', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[i].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( '  can not bind to objectName of node, undefined', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if( targetObject[ objectIndex ] === undefined ) {

						console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( ! nodeProperty ) {

				var nodeName = parsedPath.nodeName;

				console.error( "  trying to update property for track: " + nodeName +
						'.' + propertyName + " but it wasn't found.", targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;
				this.targetObject = targetObject;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;
				this.targetObject = targetObject;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {
				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {
					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
						return;

					}

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[i].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( nodeProperty.length !== undefined ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function() {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	};

	Object.assign( THREE.PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function() {},
		_setValue_unavailable: function() {},

		// initial state of these methods that calls 'bind'
		_getValue_unbound: THREE.PropertyBinding.prototype.getValue,
		_setValue_unbound: THREE.PropertyBinding.prototype.setValue,

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		]

	} );

	THREE.PropertyBinding.Composite =
			function( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath ||
				THREE.PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	};

	THREE.PropertyBinding.Composite.prototype = {

		constructor: THREE.PropertyBinding.Composite,

		getValue: function( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) binding.getValue( array, offset );

		},

		setValue: function( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	};

	THREE.PropertyBinding.create = function( root, path, parsedPath ) {

		if ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {

			return new THREE.PropertyBinding( root, path, parsedPath );

		} else {

			return new THREE.PropertyBinding.Composite( root, path, parsedPath );

		}

	};

	THREE.PropertyBinding.parseTrackName = function( trackName ) {

		// matches strings in the form of:
		//    nodeName.property
		//    nodeName.property[accessor]
		//    nodeName.material.property[accessor]
		//    uuid.property[accessor]
		//    uuid.objectName[objectIndex].propertyName[propertyIndex]
		//    parentName/nodeName.property
		//    parentName/parentName/nodeName.property[index]
		//	  .bone[Armature.DEF_cog].position
		// created and tested via https://regex101.com/#javascript

		var re = /^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_. ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/;
		var matches = re.exec(trackName);

		if( ! matches ) {
			throw new Error( "cannot parse trackName at all: " + trackName );
		}

	    if (matches.index === re.lastIndex) {
	        re.lastIndex++;
	    }

		var results = {
			// directoryName: matches[1], // (tschw) currently unused
			nodeName: matches[3], 	// allowed to be null, specified root node.
			objectName: matches[5],
			objectIndex: matches[7],
			propertyName: matches[9],
			propertyIndex: matches[11]	// allowed to be null, specifies that the whole property is set.
		};

		if( results.propertyName === null || results.propertyName.length === 0 ) {
			throw new Error( "can not parse propertyName from trackName: " + trackName );
		}

		return results;

	};

	THREE.PropertyBinding.findNode = function( root, nodeName ) {

		if( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if( root.skeleton ) {

			var searchSkeleton = function( skeleton ) {

				for( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[i];

					if( bone.name === nodeName ) {

						return bone;

					}
				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if( bone ) {

				return bone;

			}
		}

		// search into node subtree.
		if( root.children ) {

			var searchNodeSubtree = function( children ) {

				for( var i = 0; i < children.length; i ++ ) {

					var childNode = children[i];

					if( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if( result ) return result;

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	}

	// File:src/animation/PropertyMixer.js

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.PropertyMixer = function ( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':			mixFunction = this._slerp;		break;

			case 'string':
			case 'bool':

				bufferType = Array,		mixFunction = this._select;		break;

			default:					mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	};

	THREE.PropertyMixer.prototype = {

		constructor: THREE.PropertyMixer,

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
						buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function() {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function() {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			THREE.Quaternion.slerpFlat( buffer, dstOffset,
					buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	};

	// File:src/animation/tracks/BooleanKeyframeTrack.js

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.BooleanKeyframeTrack = function ( name, times, values ) {

		THREE.KeyframeTrack.call( this, name, times, values );

	};

	THREE.BooleanKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: THREE.IntepolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	// File:src/animation/tracks/NumberKeyframeTrack.js

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.NumberKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.NumberKeyframeTrack,

		ValueTypeName: 'number',

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	// File:src/animation/tracks/QuaternionKeyframeTrack.js

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.QuaternionKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: THREE.InterpolateLinear,

		InterpolantFactoryMethodLinear: function( result ) {

			return new THREE.QuaternionLinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	// File:src/animation/tracks/StringKeyframeTrack.js

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.StringKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: THREE.IntepolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	// File:src/animation/tracks/VectorKeyframeTrack.js

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.VectorKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	// File:src/audio/Audio.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Audio = function ( listener ) {

		THREE.Object3D.call( this );

		this.type = 'Audio';

		this.context = listener.context;
		this.source = this.context.createBufferSource();
		this.source.onended = this.onEnded.bind( this );

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.startTime = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this.filter = null;

	};

	THREE.Audio.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Audio.prototype.constructor = THREE.Audio;

	THREE.Audio.prototype.getOutput = function () {

		return this.gain;

	};

	THREE.Audio.prototype.load = function ( file ) {

		var buffer = new THREE.AudioBuffer( this.context );
		buffer.load( file );

		this.setBuffer( buffer );

		return this;

	};

	THREE.Audio.prototype.setNodeSource = function ( audioNode ) {

		this.hasPlaybackControl = false;
		this.sourceType = 'audioNode';
		this.source = audioNode;
		this.connect();

		return this;

	};

	THREE.Audio.prototype.setBuffer = function ( audioBuffer ) {

		var scope = this;

		audioBuffer.onReady( function( buffer ) {

			scope.source.buffer = buffer;
			scope.sourceType = 'buffer';
			if ( scope.autoplay ) scope.play();

		} );

		return this;

	};

	THREE.Audio.prototype.play = function () {

		if ( this.isPlaying === true ) {

			console.warn( 'THREE.Audio: Audio is already playing.' );
			return;

		}

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		var source = this.context.createBufferSource();

		source.buffer = this.source.buffer;
		source.loop = this.source.loop;
		source.onended = this.source.onended;
		source.start( 0, this.startTime );
		source.playbackRate.value = this.playbackRate;

		this.isPlaying = true;

		this.source = source;

		this.connect();

	};

	THREE.Audio.prototype.pause = function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.startTime = this.context.currentTime;

	};

	THREE.Audio.prototype.stop = function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.startTime = 0;

	};

	THREE.Audio.prototype.connect = function () {

		if ( this.filter !== null ) {

			this.source.connect( this.filter );
			this.filter.connect( this.getOutput() );

		} else {

			this.source.connect( this.getOutput() );

		}

	};

	THREE.Audio.prototype.disconnect = function () {

		if ( this.filter !== null ) {

			this.source.disconnect( this.filter );
			this.filter.disconnect( this.getOutput() );

		} else {

			this.source.disconnect( this.getOutput() );

		}

	};

	THREE.Audio.prototype.getFilter = function () {

		return this.filter;

	};

	THREE.Audio.prototype.setFilter = function ( value ) {

		if ( value === undefined ) value = null;

		if ( this.isPlaying === true ) {

			this.disconnect();
			this.filter = value;
			this.connect();

		} else {

			this.filter = value;

		}

	};

	THREE.Audio.prototype.setPlaybackRate = function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.playbackRate = value;

		if ( this.isPlaying === true ) {

			this.source.playbackRate.value = this.playbackRate;

		}

	};

	THREE.Audio.prototype.getPlaybackRate = function () {

		return this.playbackRate;

	};

	THREE.Audio.prototype.onEnded = function() {

		this.isPlaying = false;

	};

	THREE.Audio.prototype.setLoop = function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.loop = value;

	};

	THREE.Audio.prototype.getLoop = function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return false;

		}

		return this.source.loop;

	};


	THREE.Audio.prototype.setVolume = function ( value ) {

		this.gain.gain.value = value;

	};

	THREE.Audio.prototype.getVolume = function () {

		return this.gain.gain.value;

	};

	// File:src/audio/AudioAnalyser.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AudioAnalyser = function ( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	};

	THREE.AudioAnalyser.prototype = {

		constructor: THREE.AudioAnalyser,

		getData: function () {

			this.analyser.getByteFrequencyData( this.data );
			return this.data;

		}

	};

	// File:src/audio/AudioBuffer.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AudioBuffer = function ( context ) {

		this.context = context;
		this.ready = false;
		this.readyCallbacks = [];

	};

	THREE.AudioBuffer.prototype.load = function ( file ) {

		var scope = this;

		var request = new XMLHttpRequest();
		request.open( 'GET', file, true );
		request.responseType = 'arraybuffer';
		request.onload = function ( e ) {

			scope.context.decodeAudioData( this.response, function ( buffer ) {

				scope.buffer = buffer;
				scope.ready = true;

				for ( var i = 0; i < scope.readyCallbacks.length; i ++ ) {

					scope.readyCallbacks[ i ]( scope.buffer );

				}

				scope.readyCallbacks = [];

			} );

		};
		request.send();

		return this;

	};

	THREE.AudioBuffer.prototype.onReady = function ( callback ) {

		if ( this.ready ) {

			callback( this.buffer );

		} else {

			this.readyCallbacks.push( callback );

		}

	};

	// File:src/audio/PositionalAudio.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.PositionalAudio = function ( listener ) {

		THREE.Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.connect( this.gain );

	};

	THREE.PositionalAudio.prototype = Object.create( THREE.Audio.prototype );
	THREE.PositionalAudio.prototype.constructor = THREE.PositionalAudio;

	THREE.PositionalAudio.prototype.getOutput = function () {

		return this.panner;

	};

	THREE.PositionalAudio.prototype.setRefDistance = function ( value ) {

		this.panner.refDistance = value;

	};

	THREE.PositionalAudio.prototype.getRefDistance = function () {

		return this.panner.refDistance;

	};

	THREE.PositionalAudio.prototype.setRolloffFactor = function ( value ) {

		this.panner.rolloffFactor = value;

	};

	THREE.PositionalAudio.prototype.getRolloffFactor = function () {

		return this.panner.rolloffFactor;

	};

	THREE.PositionalAudio.prototype.setDistanceModel = function ( value ) {

		this.panner.distanceModel = value;

	};

	THREE.PositionalAudio.prototype.getDistanceModel = function () {

		return this.panner.distanceModel;

	};

	THREE.PositionalAudio.prototype.setMaxDistance = function ( value ) {

		this.panner.maxDistance = value;

	};

	THREE.PositionalAudio.prototype.getMaxDistance = function () {

		return this.panner.maxDistance;

	};

	THREE.PositionalAudio.prototype.updateMatrixWorld = ( function () {

		var position = new THREE.Vector3();

		return function updateMatrixWorld( force ) {

			THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

			position.setFromMatrixPosition( this.matrixWorld );

			this.panner.setPosition( position.x, position.y, position.z );

		};

	} )();

	// File:src/audio/AudioListener.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AudioListener = function () {

		THREE.Object3D.call( this );

		this.type = 'AudioListener';

		this.context = new ( window.AudioContext || window.webkitAudioContext )();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

	};

	THREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );
	THREE.AudioListener.prototype.constructor = THREE.AudioListener;

	THREE.AudioListener.prototype.getInput = function () {

		return this.gain;

	};

	THREE.AudioListener.prototype.removeFilter = function ( ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );
			this.gain.connect( this.context.destination );
			this.filter = null;

		}

	};

	THREE.AudioListener.prototype.setFilter = function ( value ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );

		} else {

			this.gain.disconnect( this.context.destination );

		}

		this.filter = value;
		this.gain.connect( this.filter );
		this.filter.connect( this.context.destination );

	};

	THREE.AudioListener.prototype.getFilter = function () {

		return this.filter;

	};

	THREE.AudioListener.prototype.setMasterVolume = function ( value ) {

		this.gain.gain.value = value;

	};

	THREE.AudioListener.prototype.getMasterVolume = function () {

		return this.gain.gain.value;

	};


	THREE.AudioListener.prototype.updateMatrixWorld = ( function () {

		var position = new THREE.Vector3();
		var quaternion = new THREE.Quaternion();
		var scale = new THREE.Vector3();

		var orientation = new THREE.Vector3();

		return function updateMatrixWorld( force ) {

			THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

			var listener = this.context.listener;
			var up = this.up;

			this.matrixWorld.decompose( position, quaternion, scale );

			orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

			listener.setPosition( position.x, position.y, position.z );
			listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

		};

	} )();

	// File:src/cameras/Camera.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.Camera = function () {

		THREE.Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new THREE.Matrix4();
		this.projectionMatrix = new THREE.Matrix4();

	};

	THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Camera.prototype.constructor = THREE.Camera;

	THREE.Camera.prototype.getWorldDirection = function () {

		var quaternion = new THREE.Quaternion();

		return function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}();

	THREE.Camera.prototype.lookAt = function () {

		// This routine does not support cameras with rotated and/or translated parent(s)

		var m1 = new THREE.Matrix4();

		return function ( vector ) {

			m1.lookAt( this.position, vector, this.up );

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}();

	THREE.Camera.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	THREE.Camera.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	};

	// File:src/cameras/CubeCamera.js

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.CubeCamera = function ( near, far, cubeResolution ) {

		THREE.Object3D.call( this );

		this.type = 'CubeCamera';

		var fov = 90, aspect = 1;

		var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );

		this.updateCubeMap = function ( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderTarget.activeCubeFace = 0;
			renderer.render( scene, cameraPX, renderTarget );

			renderTarget.activeCubeFace = 1;
			renderer.render( scene, cameraNX, renderTarget );

			renderTarget.activeCubeFace = 2;
			renderer.render( scene, cameraPY, renderTarget );

			renderTarget.activeCubeFace = 3;
			renderer.render( scene, cameraNY, renderTarget );

			renderTarget.activeCubeFace = 4;
			renderer.render( scene, cameraPZ, renderTarget );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderTarget.activeCubeFace = 5;
			renderer.render( scene, cameraNZ, renderTarget );

			renderer.setRenderTarget( null );

		};

	};

	THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );
	THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;

	// File:src/cameras/OrthographicCamera.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {

		THREE.Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	};

	THREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );
	THREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;

	THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {

		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
		var cx = ( this.right + this.left ) / 2;
		var cy = ( this.top + this.bottom ) / 2;

		this.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );

	};

	THREE.OrthographicCamera.prototype.copy = function ( source ) {

		THREE.Camera.prototype.copy.call( this, source );

		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;

		return this;

	};

	THREE.OrthographicCamera.prototype.toJSON = function ( meta ) {

		var data = THREE.Object3D.prototype.toJSON.call( this, meta );

		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;

		return data;

	};

	// File:src/cameras/PerspectiveCamera.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.PerspectiveCamera = function ( fov, aspect, near, far ) {

		THREE.Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.zoom = 1;

		this.fov = fov !== undefined ? fov : 50;
		this.aspect = aspect !== undefined ? aspect : 1;
		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;

		this.updateProjectionMatrix();

	};

	THREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );
	THREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;


	/**
	 * Uses Focal Length (in mm) to estimate and set FOV
	 * 35mm (full-frame) camera is used if frame size is not specified;
	 * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
	 */

	THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {

		if ( frameHeight === undefined ) frameHeight = 24;

		this.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );
		this.updateProjectionMatrix();

	};


	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   var w = 1920;
	 *   var h = 1080;
	 *   var fullWidth = w * 3;
	 *   var fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */

	THREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {

		this.fullWidth = fullWidth;
		this.fullHeight = fullHeight;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;

		this.updateProjectionMatrix();

	};


	THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {

		var fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );

		if ( this.fullWidth ) {

			var aspect = this.fullWidth / this.fullHeight;
			var top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;
			var bottom = - top;
			var left = aspect * bottom;
			var right = aspect * top;
			var width = Math.abs( right - left );
			var height = Math.abs( top - bottom );

			this.projectionMatrix.makeFrustum(
				left + this.x * width / this.fullWidth,
				left + ( this.x + this.width ) * width / this.fullWidth,
				top - ( this.y + this.height ) * height / this.fullHeight,
				top - this.y * height / this.fullHeight,
				this.near,
				this.far
			);

		} else {

			this.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );

		}

	};

	THREE.PerspectiveCamera.prototype.copy = function ( source ) {

		THREE.Camera.prototype.copy.call( this, source );

		this.fov = source.fov;
		this.aspect = source.aspect;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;

		return this;

	};

	THREE.PerspectiveCamera.prototype.toJSON = function ( meta ) {

		var data = THREE.Object3D.prototype.toJSON.call( this, meta );

		data.object.zoom = this.zoom;
		data.object.fov = this.fov;
		data.object.aspect = this.aspect;
		data.object.near = this.near;
		data.object.far = this.far;

		return data;

	};

	// File:src/lights/Light.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Light = function ( color, intensity ) {

		THREE.Object3D.call( this );

		this.type = 'Light';

		this.color = new THREE.Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	};

	THREE.Light.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Light.prototype.constructor = THREE.Light;

	THREE.Light.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.intensity = source.intensity;

		return this;

	};

	THREE.Light.prototype.toJSON = function ( meta ) {

		var data = THREE.Object3D.prototype.toJSON.call( this, meta );

		data.object.color = this.color.getHex();
		data.object.intensity = this.intensity;

		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

		if ( this.distance !== undefined ) data.object.distance = this.distance;
		if ( this.angle !== undefined ) data.object.angle = this.angle;
		if ( this.decay !== undefined ) data.object.decay = this.decay;
		if ( this.exponent !== undefined ) data.object.exponent = this.exponent;

		return data;

	};

	// File:src/lights/LightShadow.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LightShadow = function ( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.darkness = 1;

		this.mapSize = new THREE.Vector2( 512, 512 );

		this.map = null;
		this.matrix = null;

	};

	THREE.LightShadow.prototype = {

		constructor: THREE.LightShadow,

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.darkness = source.darkness;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	// File:src/lights/AmbientLight.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AmbientLight = function ( color, intensity ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	};

	THREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );
	THREE.AmbientLight.prototype.constructor = THREE.AmbientLight;

	// File:src/lights/DirectionalLight.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.DirectionalLight = function ( color, intensity ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.target = new THREE.Object3D();

		this.shadow = new THREE.LightShadow( new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	};

	THREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );
	THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;

	THREE.DirectionalLight.prototype.copy = function ( source ) {

		THREE.Light.prototype.copy.call( this, source );

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	};

	// File:src/lights/HemisphereLight.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {

		THREE.Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.groundColor = new THREE.Color( groundColor );

	};

	THREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );
	THREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;

	THREE.HemisphereLight.prototype.copy = function ( source ) {

		THREE.Light.prototype.copy.call( this, source );

		this.groundColor.copy( source.groundColor );

		return this;

	};

	// File:src/lights/PointLight.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	THREE.PointLight = function ( color, intensity, distance, decay ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'PointLight';

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );

	};

	THREE.PointLight.prototype = Object.create( THREE.Light.prototype );
	THREE.PointLight.prototype.constructor = THREE.PointLight;

	THREE.PointLight.prototype.copy = function ( source ) {

		THREE.Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.decay = source.decay;

		this.shadow = source.shadow.clone();

		return this;

	};

	// File:src/lights/SpotLight.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.SpotLight = function ( color, intensity, distance, angle, exponent, decay ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.target = new THREE.Object3D();

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.exponent = ( exponent !== undefined ) ? exponent : 10;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );

	};

	THREE.SpotLight.prototype = Object.create( THREE.Light.prototype );
	THREE.SpotLight.prototype.constructor = THREE.SpotLight;

	THREE.SpotLight.prototype.copy = function ( source ) {

		THREE.Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.angle = source.angle;
		this.exponent = source.exponent;
		this.decay = source.decay;

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	};

	// File:src/loaders/Cache.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	// File:src/loaders/Loader.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Loader = function () {

		this.onLoadStart = function () {};
		this.onLoadProgress = function () {};
		this.onLoadComplete = function () {};

	};

	THREE.Loader.prototype = {

		constructor: THREE.Loader,

		crossOrigin: undefined,

		extractUrlBase: function ( url ) {

			var parts = url.split( '/' );

			if ( parts.length === 1 ) return './';

			parts.pop();

			return parts.join( '/' ) + '/';

		},

		initMaterials: function ( materials, texturePath, crossOrigin ) {

			var array = [];

			for ( var i = 0; i < materials.length; ++ i ) {

				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

			}

			return array;

		},

		createMaterial: ( function () {

			var color, textureLoader, materialLoader;

			return function ( m, texturePath, crossOrigin ) {

				if ( color === undefined ) color = new THREE.Color();
				if ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();
				if ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();

				// convert from old material format

				var textures = {};

				function loadTexture( path, repeat, offset, wrap, anisotropy ) {

					var fullPath = texturePath + path;
					var loader = THREE.Loader.Handlers.get( fullPath );

					var texture;

					if ( loader !== null ) {

						texture = loader.load( fullPath );

					} else {

						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );

					}

					if ( repeat !== undefined ) {

						texture.repeat.fromArray( repeat );

						if ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

					}

					if ( offset !== undefined ) {

						texture.offset.fromArray( offset );

					}

					if ( wrap !== undefined ) {

						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;

						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;

					}

					if ( anisotropy !== undefined ) {

						texture.anisotropy = anisotropy;

					}

					var uuid = THREE.Math.generateUUID();

					textures[ uuid ] = texture;

					return uuid;

				}

				//

				var json = {
					uuid: THREE.Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};

				for ( var name in m ) {

					var value = m[ name ];

					switch ( name ) {
						case 'DbgColor':
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = THREE[ value ];
							break;
						case 'colorAmbient':
							console.warn( 'THREE.Loader.createMaterial: colorAmbient is no longer supported' );
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = [ value, value ];
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = THREE.BackSide;
							break;
						case 'doubleSided':
							json.side = THREE.DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'depthTest':
						case 'depthWrite':
						case 'opacity':
						case 'reflectivity':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = THREE.VertexColors;
							if ( value === 'face' ) json.vertexColors = THREE.FaceColors;
							break;
						default:
							console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
							break;
					}

				}

				if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

				if ( json.opacity < 1 ) json.transparent = true;

				materialLoader.setTextures( textures );

				return materialLoader.parse( json );

			};

		} )()

	};

	THREE.Loader.Handlers = {

		handlers: [],

		add: function ( regex, loader ) {

			this.handlers.push( regex, loader );

		},

		get: function ( file ) {

			var handlers = this.handlers;

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader  = handlers[ i + 1 ];

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		}

	};

	// File:src/loaders/XHRLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.XHRLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.XHRLoader.prototype = {

		constructor: THREE.XHRLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.path !== undefined ) url = this.path + url;

			var scope = this;

			var cached = THREE.Cache.get( url );

			if ( cached !== undefined ) {

				if ( onLoad ) {

					setTimeout( function () {

						onLoad( cached );

					}, 0 );

				}

				return cached;

			}

			var request = new XMLHttpRequest();
			request.overrideMimeType( 'text/plain' );
			request.open( 'GET', url, true );

			request.addEventListener( 'load', function ( event ) {

				var response = event.target.response;

				THREE.Cache.add( url, response );

				if ( this.status === 200 && this.readyState === 4 ) {

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				} else {

					if ( onError ) onError( event );

					scope.manager.itemError( url );

				}

			}, false );

			if ( onProgress !== undefined ) {

				request.addEventListener( 'progress', function ( event ) {

					onProgress( event );

				}, false );

			}

			request.addEventListener( 'error', function ( event ) {

				if ( onError ) onError( event );

				scope.manager.itemError( url );

			}, false );

			if ( this.responseType !== undefined ) request.responseType = this.responseType;
			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

			request.send( null );

			scope.manager.itemStart( url );

			return request;

		},

		setPath: function ( value ) {

			this.path = value;

		},

		setResponseType: function ( value ) {

			this.responseType = value;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;

		}

	};

	// File:src/loaders/ImageLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.ImageLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.ImageLoader.prototype = {

		constructor: THREE.ImageLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.path !== undefined ) url = this.path + url;

			var scope = this;

			var cached = THREE.Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				if ( onLoad ) {

					setTimeout( function () {

						onLoad( cached );

						scope.manager.itemEnd( url );

					}, 0 );

				} else {

					scope.manager.itemEnd( url );

				}

				return cached;

			}

			var image = document.createElement( 'img' );

			image.addEventListener( 'load', function ( event ) {

				THREE.Cache.add( url, this );

				if ( onLoad ) onLoad( this );

				scope.manager.itemEnd( url );

			}, false );

			if ( onProgress !== undefined ) {

				image.addEventListener( 'progress', function ( event ) {

					onProgress( event );

				}, false );

			}

			image.addEventListener( 'error', function ( event ) {

				if ( onError ) onError( event );

				scope.manager.itemError( url );

			}, false );

			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

			scope.manager.itemStart( url );

			image.src = url;

			return image;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		setPath: function ( value ) {

			this.path = value;

		}

	};

	// File:src/loaders/JSONLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.JSONLoader = function ( manager ) {

		if ( typeof manager === 'boolean' ) {

			console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
			manager = undefined;

		}

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		this.withCredentials = false;

	};

	THREE.JSONLoader.prototype = {

		constructor: THREE.JSONLoader,

		// Deprecated

		get statusDomElement () {

			if ( this._statusDomElement === undefined ) {

				this._statusDomElement = document.createElement( 'div' );

			}

			console.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );
			return this._statusDomElement;

		},

		load: function( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );

			var loader = new THREE.XHRLoader( this.manager );
			loader.setWithCredentials( this.withCredentials );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.metadata;

				if ( metadata !== undefined ) {

					var type = metadata.type;

					if ( type !== undefined ) {

						if ( type.toLowerCase() === 'object' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
							return;

						}

						if ( type.toLowerCase() === 'scene' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
							return;

						}

					}

				}

				var object = scope.parse( json, texturePath );
				onLoad( object.geometry, object.materials );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		parse: function ( json, texturePath ) {

			var geometry = new THREE.Geometry(),
			scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

			parseModel( scale );

			parseSkin();
			parseMorphing( scale );
			parseAnimations();

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			function parseModel( scale ) {

				function isBitSet( value, position ) {

					return value & ( 1 << position );

				}

				var i, j, fi,

				offset, zLength,

			colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

			vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				nUvLayers = 0;

				if ( json.uvs !== undefined ) {

					// disregard empty arrays

					for ( i = 0; i < json.uvs.length; i ++ ) {

						if ( json.uvs[ i ].length ) nUvLayers ++;

					}

					for ( i = 0; i < nUvLayers; i ++ ) {

						geometry.faceVertexUvs[ i ] = [];

					}

				}

				offset = 0;
				zLength = vertices.length;

				while ( offset < zLength ) {

					vertex = new THREE.Vector3();

					vertex.x = vertices[ offset ++ ] * scale;
					vertex.y = vertices[ offset ++ ] * scale;
					vertex.z = vertices[ offset ++ ] * scale;

					geometry.vertices.push( vertex );

				}

				offset = 0;
				zLength = faces.length;

				while ( offset < zLength ) {

					type = faces[ offset ++ ];


					isQuad              = isBitSet( type, 0 );
					hasMaterial         = isBitSet( type, 1 );
					hasFaceVertexUv     = isBitSet( type, 3 );
					hasFaceNormal       = isBitSet( type, 4 );
					hasFaceVertexNormal = isBitSet( type, 5 );
					hasFaceColor	     = isBitSet( type, 6 );
					hasFaceVertexColor  = isBitSet( type, 7 );

					// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

					if ( isQuad ) {

						faceA = new THREE.Face3();
						faceA.a = faces[ offset ];
						faceA.b = faces[ offset + 1 ];
						faceA.c = faces[ offset + 3 ];

						faceB = new THREE.Face3();
						faceB.a = faces[ offset + 1 ];
						faceB.b = faces[ offset + 2 ];
						faceB.c = faces[ offset + 3 ];

						offset += 4;

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							faceA.materialIndex = materialIndex;
							faceB.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];
								geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

								for ( j = 0; j < 4; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new THREE.Vector2( u, v );

									if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
									if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							faceA.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							faceB.normal.copy( faceA.normal );

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 4; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new THREE.Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);


								if ( i !== 2 ) faceA.vertexNormals.push( normal );
								if ( i !== 0 ) faceB.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							faceA.color.setHex( hex );
							faceB.color.setHex( hex );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 4; i ++ ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
								if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );

							}

						}

						geometry.faces.push( faceA );
						geometry.faces.push( faceB );

					} else {

						face = new THREE.Face3();
						face.a = faces[ offset ++ ];
						face.b = faces[ offset ++ ];
						face.c = faces[ offset ++ ];

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							face.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];

								for ( j = 0; j < 3; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new THREE.Vector2( u, v );

									geometry.faceVertexUvs[ i ][ fi ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							face.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 3; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new THREE.Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								face.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							face.color.setHex( colors[ colorIndex ] );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 3; i ++ ) {

								colorIndex = faces[ offset ++ ];
								face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );

							}

						}

						geometry.faces.push( face );

					}

				}

			};

			function parseSkin() {

				var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

				if ( json.skinWeights ) {

					for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

						var x =                               json.skinWeights[ i ];
						var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
						var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
						var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

						geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );

					}

				}

				if ( json.skinIndices ) {

					for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

						var a =                               json.skinIndices[ i ];
						var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
						var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
						var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

						geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );

					}

				}

				geometry.bones = json.bones;

				if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

					console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
						geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

				}

			};

			function parseMorphing( scale ) {

				if ( json.morphTargets !== undefined ) {

					for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

						geometry.morphTargets[ i ] = {};
						geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
						geometry.morphTargets[ i ].vertices = [];

						var dstVertices = geometry.morphTargets[ i ].vertices;
						var srcVertices = json.morphTargets[ i ].vertices;

						for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

							var vertex = new THREE.Vector3();
							vertex.x = srcVertices[ v ] * scale;
							vertex.y = srcVertices[ v + 1 ] * scale;
							vertex.z = srcVertices[ v + 2 ] * scale;

							dstVertices.push( vertex );

						}

					}

				}

				if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

					console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

					var faces = geometry.faces;
					var morphColors = json.morphColors[ 0 ].colors;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						faces[ i ].color.fromArray( morphColors, i * 3 );

					}

				}

			}

			function parseAnimations() {

				var outputAnimations = [];

				// parse old style Bone/Hierarchy animations
				var animations = [];

				if ( json.animation !== undefined ) {

					animations.push( json.animation );

				}

				if ( json.animations !== undefined ) {

					if ( json.animations.length ) {

						animations = animations.concat( json.animations );

					} else {

						animations.push( json.animations );

					}

				}

				for ( var i = 0; i < animations.length; i ++ ) {

					var clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );
					if ( clip ) outputAnimations.push( clip );

				}

				// parse implicit morph animations
				if ( geometry.morphTargets ) {

					// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
					var morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
					outputAnimations = outputAnimations.concat( morphAnimationClips );

				}

				if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

			};

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		}

	};

	// File:src/loaders/LoadingManager.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LoadingManager = function ( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

	};

	THREE.DefaultLoadingManager = new THREE.LoadingManager();

	// File:src/loaders/BufferGeometryLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BufferGeometryLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.BufferGeometryLoader.prototype = {

		constructor: THREE.BufferGeometryLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = new THREE.BufferGeometry();

			var index = json.data.index;

			if ( index !== undefined ) {

				var typedArray = new self[ index.type ]( index.array );
				geometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new self[ attribute.type ]( attribute.array );

				geometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new THREE.Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );

			}

			return geometry;

		}

	};

	// File:src/loaders/MaterialLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.MaterialLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
		this.textures = {};

	};

	THREE.MaterialLoader.prototype = {

		constructor: THREE.MaterialLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setTextures: function ( value ) {

			this.textures = value;

		},

		getTexture: function ( name ) {

			var textures = this.textures;

			if ( textures[ name ] === undefined ) {

				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

			}

			return textures[ name ];

		},

		parse: function ( json ) {

			var material = new THREE[ json.type ];
			material.uuid = json.uuid;

			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.roughness !== undefined ) material.roughness = json.roughness;
			if ( json.metalness !== undefined ) material.metalness = json.metalness;
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.shading !== undefined ) material.shading = json.shading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;

			// for PointsMaterial
			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

			// maps

			if ( json.map !== undefined ) material.map = this.getTexture( json.map );

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = this.getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

			if ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new THREE.Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

			if ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );
			if ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );

			if ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );
			if ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );

			if ( json.envMap !== undefined ) {

				material.envMap = this.getTexture( json.envMap );
				material.combine = THREE.MultiplyOperation;

			}

			if ( json.reflectivity ) material.reflectivity = json.reflectivity;

			if ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

			if ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

			// MeshFaceMaterial

			if ( json.materials !== undefined ) {

				for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

					material.materials.push( this.parse( json.materials[ i ] ) );

				}

			}

			return material;

		}

	};

	// File:src/loaders/ObjectLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.ObjectLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
		this.texturePath = '';

	};

	THREE.ObjectLoader.prototype = {

		constructor: THREE.ObjectLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.texturePath === '' ) {

				this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

			}

			var scope = this;

			var loader = new THREE.XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				scope.parse( JSON.parse( text ), onLoad );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		parse: function ( json, onLoad ) {

			var geometries = this.parseGeometries( json.geometries );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) onLoad( object );

			} );

			var textures  = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) onLoad( object );

			}

			return object;

		},

		parseGeometries: function ( json ) {

			var geometries = {};

			if ( json !== undefined ) {

				var geometryLoader = new THREE.JSONLoader();
				var bufferGeometryLoader = new THREE.BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new THREE[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new THREE.BoxGeometry(
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleBufferGeometry':

							geometry = new THREE.CircleBufferGeometry(
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CircleGeometry':

							geometry = new THREE.CircleGeometry(
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':

							geometry = new THREE.CylinderGeometry(
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':

							geometry = new THREE.SphereGeometry(
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereBufferGeometry':

							geometry = new THREE.SphereBufferGeometry(
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':

							geometry = new THREE.DodecahedronGeometry(
								data.radius,
								data.detail
							);

							break;

						case 'IcosahedronGeometry':

							geometry = new THREE.IcosahedronGeometry(
								data.radius,
								data.detail
							);

							break;

						case 'OctahedronGeometry':

							geometry = new THREE.OctahedronGeometry(
								data.radius,
								data.detail
							);

							break;

						case 'TetrahedronGeometry':

							geometry = new THREE.TetrahedronGeometry(
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':

							geometry = new THREE.RingGeometry(
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':

							geometry = new THREE.TorusGeometry(
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':

							geometry = new THREE.TorusKnotGeometry(
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.p,
								data.q,
								data.heightScale
							);

							break;

						case 'BufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) geometry.name = data.name;

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var materials = {};

			if ( json !== undefined ) {

				var loader = new THREE.MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var material = loader.parse( json[ i ] );
					materials[ material.uuid ] = material;

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var clip = THREE.AnimationClip.parse( json[ i ] );

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new THREE.LoadingManager( onLoad );

				var loader = new THREE.ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var image = json[ i ];
					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

					images[ image.uuid ] = loadImage( path );

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value ) {

				if ( typeof( value ) === 'number' ) return value;

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return THREE[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture = new THREE.Texture( images[ data.image ] );
					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) texture.name = data.name;
					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );
					if ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );
					if ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );
					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
					if ( Array.isArray( data.wrap ) ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ] );
						texture.wrapT = parseConstant( data.wrap[ 1 ] );

					}

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function () {

			var matrix = new THREE.Matrix4();

			return function ( data, geometries, materials ) {

				var object;

				function getGeometry( name ) {

					if ( geometries[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

					}

					return geometries[ name ];

				}

				function getMaterial( name ) {

					if ( name === undefined ) return undefined;

					if ( materials[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', name );

					}

					return materials[ name ];

				}

				switch ( data.type ) {

					case 'Scene':

						object = new THREE.Scene();

						break;

					case 'PerspectiveCamera':

						object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

						break;

					case 'OrthographicCamera':

						object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

						break;

					case 'AmbientLight':

						object = new THREE.AmbientLight( data.color, data.intensity );

						break;

					case 'DirectionalLight':

						object = new THREE.DirectionalLight( data.color, data.intensity );

						break;

					case 'PointLight':

						object = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );

						break;

					case 'SpotLight':

						object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent, data.decay );

						break;

					case 'HemisphereLight':

						object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );

						break;

					case 'Mesh':

						var geometry = getGeometry( data.geometry );
						var material = getMaterial( data.material );

						if ( geometry.bones && geometry.bones.length > 0 ) {

							object = new THREE.SkinnedMesh( geometry, material );

						} else {

							object = new THREE.Mesh( geometry, material );

						}

						break;

					case 'LOD':

						object = new THREE.LOD();

						break;

					case 'Line':

						object = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

						break;

					case 'PointCloud':
					case 'Points':

						object = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'Sprite':

						object = new THREE.Sprite( getMaterial( data.material ) );

						break;

					case 'Group':

						object = new THREE.Group();

						break;

					default:

						object = new THREE.Object3D();

				}

				object.uuid = data.uuid;

				if ( data.name !== undefined ) object.name = data.name;
				if ( data.matrix !== undefined ) {

					matrix.fromArray( data.matrix );
					matrix.decompose( object.position, object.quaternion, object.scale );

				} else {

					if ( data.position !== undefined ) object.position.fromArray( data.position );
					if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
					if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

				}

				if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
				if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

				if ( data.visible !== undefined ) object.visible = data.visible;
				if ( data.userData !== undefined ) object.userData = data.userData;

				if ( data.children !== undefined ) {

					for ( var child in data.children ) {

						object.add( this.parseObject( data.children[ child ], geometries, materials ) );

					}

				}

				if ( data.type === 'LOD' ) {

					var levels = data.levels;

					for ( var l = 0; l < levels.length; l ++ ) {

						var level = levels[ l ];
						var child = object.getObjectByProperty( 'uuid', level.object );

						if ( child !== undefined ) {

							object.addLevel( child, level.distance );

						}

					}

				}

				return object;

			}

		}()

	};

	// File:src/loaders/TextureLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.TextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.TextureLoader.prototype = {

		constructor: THREE.TextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new THREE.Texture();

			var loader = new THREE.ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );
			loader.load( url, function ( image ) {

				texture.image = image;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		setPath: function ( value ) {

			this.path = value;

		}

	};

	// File:src/loaders/CubeTextureLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CubeTextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.CubeTextureLoader.prototype = {

		constructor: THREE.CubeTextureLoader,

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new THREE.CubeTexture( [] );

			var loader = new THREE.ImageLoader();
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		setPath: function ( value ) {

			this.path = value;

		}

	};

	// File:src/loaders/BinaryTextureLoader.js

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */

	THREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	};

	THREE.BinaryTextureLoader.prototype = {

		constructor: THREE.BinaryTextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new THREE.DataTexture();

			var loader = new THREE.XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );

			loader.load( url, function ( buffer ) {

				var texData = scope._parser( buffer );

				if ( ! texData ) return;

				if ( undefined !== texData.image ) {

					texture.image = texData.image;

				} else if ( undefined !== texData.data ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;
				texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;

				texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;
				texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;

				texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

				if ( undefined !== texData.format ) {

					texture.format = texData.format;

				}
				if ( undefined !== texData.type ) {

					texture.type = texData.type;

				}

				if ( undefined !== texData.mipmaps ) {

					texture.mipmaps = texData.mipmaps;

				}

				if ( 1 === texData.mipmapCount ) {

					texture.minFilter = THREE.LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture, texData );

			}, onProgress, onError );


			return texture;

		}

	};

	// File:src/loaders/CompressedTextureLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */

	THREE.CompressedTextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	};


	THREE.CompressedTextureLoader.prototype = {

		constructor: THREE.CompressedTextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new THREE.CompressedTexture();
			texture.image = images;

			var loader = new THREE.XHRLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							texture.minFilter = THREE.LinearFilter;

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps : [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = THREE.LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}, onProgress, onError );

			}

			return texture;

		},

		setPath: function ( value ) {

			this.path = value;

		}

	};

	// File:src/materials/Material.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Material = function () {

		Object.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.side = THREE.FrontSide;

		this.opacity = 1;
		this.transparent = false;

		this.blending = THREE.NormalBlending;

		this.blendSrc = THREE.SrcAlphaFactor;
		this.blendDst = THREE.OneMinusSrcAlphaFactor;
		this.blendEquation = THREE.AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = THREE.LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.alphaTest = 0;

		this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

		this.visible = true;

		this._needsUpdate = true;

	};

	THREE.Material.prototype = {

		constructor: THREE.Material,

		get needsUpdate () {

			return this._needsUpdate;

		},

		set needsUpdate ( value ) {

			if ( value === true ) this.update();

			this._needsUpdate = value;

		},

		setValues: function ( values ) {

			if ( values === undefined ) return;

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( currentValue instanceof THREE.Color ) {

					currentValue.set( newValue );

				} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {

					currentValue.copy( newValue );

				} else if ( key === 'overdraw' ) {

					// ensure overdraw is backwards-compatible with legacy boolean type
					this[ key ] = Number( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = meta === undefined;

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.4,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.color instanceof THREE.Color ) data.color = this.color.getHex();

			if ( this.roughness !== 0.5 ) data.roughness = this.roughness;
			if ( this.metalness > 0 ) data.metalness = this.metalness;

			if ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();
			if ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;

			if ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;
			if ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
			if ( this.bumpMap instanceof THREE.Texture ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}
			if ( this.normalMap instanceof THREE.Texture ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalScale = this.normalScale.toArray();

			}
			if ( this.displacementMap instanceof THREE.Texture ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}
			if ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

			if ( this.envMap instanceof THREE.Texture ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap

			}

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.vertexColors !== undefined && this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;
			if ( this.shading !== undefined && this.shading !== THREE.SmoothShading ) data.shading = this.shading;
			if ( this.blending !== undefined && this.blending !== THREE.NormalBlending ) data.blending = this.blending;
			if ( this.side !== undefined && this.side !== THREE.FrontSide ) data.side = this.side;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;
			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache ( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.side = source.side;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blending = source.blending;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.alphaTest = source.alphaTest;

			this.overdraw = source.overdraw;

			this.visible = source.visible;

			return this;

		},

		update: function () {

			this.dispatchEvent( { type: 'update' } );

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.Material.prototype );

	THREE.MaterialIdCount = 0;

	// File:src/materials/LineBasicMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round",
	 *
	 *  vertexColors: <bool>
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.LineBasicMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new THREE.Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.fog = true;

		this.setValues( parameters );

	};

	THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;

	THREE.LineBasicMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		this.vertexColors = source.vertexColors;

		this.fog = source.fog;

		return this;

	};

	// File:src/materials/LineDashedMaterial.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.FaceColors / THREE.VertexColors
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.LineDashedMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'LineDashedMaterial';

		this.color = new THREE.Color( 0xffffff );

		this.linewidth = 1;

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.vertexColors = THREE.NoColors;

		this.fog = true;

		this.setValues( parameters );

	};

	THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;

	THREE.LineDashedMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		this.vertexColors = source.vertexColors;

		this.fog = source.fog;

		return this;

	};

	// File:src/materials/MeshBasicMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.MeshBasicMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new THREE.Color( 0xffffff ); // emissive

		this.map = null;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.fog = true;

		this.shading = THREE.SmoothShading;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.skinning = false;
		this.morphTargets = false;

		this.setValues( parameters );

	};

	THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;

	THREE.MeshBasicMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.fog = source.fog;

		this.shading = source.shading;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	// File:src/materials/MeshLambertMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  emissive: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */

	THREE.MeshLambertMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new THREE.Color( 0xffffff ); // diffuse
		this.emissive = new THREE.Color( 0x000000 );

		this.map = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.fog = true;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	};

	THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;

	THREE.MeshLambertMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.emissive.copy( source.emissive );

		this.map = source.map;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.fog = source.fog;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	// File:src/materials/MeshPhongMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  emissive: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */

	THREE.MeshPhongMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new THREE.Color( 0xffffff ); // diffuse
		this.emissive = new THREE.Color( 0x000000 );
		this.specular = new THREE.Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new THREE.Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.fog = true;

		this.shading = THREE.SmoothShading;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	};

	THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;

	THREE.MeshPhongMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.emissive.copy( source.emissive );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissiveMap = source.emissiveMap;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.fog = source.fog;

		this.shading = source.shading;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	// File:src/materials/MeshStandardMaterial.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,

	 *  emissive: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */

	THREE.MeshStandardMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshStandardMaterial';

		this.color = new THREE.Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.emissive = new THREE.Color( 0x000000 );

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new THREE.Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.fog = true;

		this.shading = THREE.SmoothShading;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	};

	THREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;

	THREE.MeshStandardMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.emissive.copy( source.emissive );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissiveMap = source.emissiveMap;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.fog = source.fog;

		this.shading = source.shading;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	// File:src/materials/MeshDepthMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	THREE.MeshDepthMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.morphTargets = false;
		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.setValues( parameters );

	};

	THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;

	THREE.MeshDepthMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	// File:src/materials/MeshNormalMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  shading: THREE.FlatShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	THREE.MeshNormalMaterial = function ( parameters ) {

		THREE.Material.call( this, parameters );

		this.type = 'MeshNormalMaterial';

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.morphTargets = false;

		this.setValues( parameters );

	};

	THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;

	THREE.MeshNormalMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	// File:src/materials/MultiMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.MultiMaterial = function ( materials ) {

		this.uuid = THREE.Math.generateUUID();

		this.type = 'MultiMaterial';

		this.materials = materials instanceof Array ? materials : [];

		this.visible = true;

	};

	THREE.MultiMaterial.prototype = {

		constructor: THREE.MultiMaterial,

		toJSON: function ( meta ) {

			var output = {
				metadata: {
					version: 4.2,
					type: 'material',
					generator: 'MaterialExporter'
				},
				uuid: this.uuid,
				type: this.type,
				materials: []
			};

			var materials = this.materials;

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				var material = materials[ i ].toJSON( meta );
				delete material.metadata;

				output.materials.push( material );

			}

			output.visible = this.visible;

			return output;

		},

		clone: function () {

			var material = new this.constructor();

			for ( var i = 0; i < this.materials.length; i ++ ) {

				material.materials.push( this.materials[ i ].clone() );

			}

			material.visible = this.visible;

			return material;

		}

	};

	// backwards compatibility

	THREE.MeshFaceMaterial = THREE.MultiMaterial;

	// File:src/materials/PointsMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  vertexColors: <bool>,
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.PointsMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new THREE.Color( 0xffffff );

		this.map = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.vertexColors = THREE.NoColors;

		this.fog = true;

		this.setValues( parameters );

	};

	THREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;

	THREE.PointsMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		this.vertexColors = source.vertexColors;

		this.fog = source.fog;

		return this;

	};

	// File:src/materials/ShaderMaterial.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { type: "f", value: 1.0 }, "parameter2": { type: "i" value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */

	THREE.ShaderMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
		this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

		this.shading = THREE.SmoothShading;

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog

		this.lights = false; // set to use scene lights

		this.vertexColors = THREE.NoColors; // set to use "color" attribute stream

		this.skinning = false; // set to use skinning attribute streams

		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	};

	THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;

	THREE.ShaderMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = THREE.UniformsUtils.clone( source.uniforms );

		this.attributes = source.attributes;
		this.defines = source.defines;

		this.shading = source.shading;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.fog = source.fog;

		this.lights = source.lights;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	THREE.ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = THREE.Material.prototype.toJSON.call( this, meta );

		data.uniforms = this.uniforms;
		data.attributes = this.attributes;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		return data;

	};

	// File:src/materials/RawShaderMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.RawShaderMaterial = function ( parameters ) {

		THREE.ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	};

	THREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );
	THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;
	// File:src/materials/SpriteMaterial.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *	uvOffset: new THREE.Vector2(),
	 *	uvScale: new THREE.Vector2(),
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.SpriteMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new THREE.Color( 0xffffff );
		this.map = null;

		this.rotation = 0;

		this.fog = false;

		// set parameters

		this.setValues( parameters );

	};

	THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;

	THREE.SpriteMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.map = source.map;

		this.rotation = source.rotation;

		this.fog = source.fog;

		return this;

	};

	// File:src/textures/Texture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Object.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.sourceFile = '';

		this.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : THREE.RGBAFormat;
		this.type = type !== undefined ? type : THREE.UnsignedByteType;

		this.offset = new THREE.Vector2( 0, 0 );
		this.repeat = new THREE.Vector2( 1, 1 );

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

		this.version = 0;
		this.onUpdate = null;

	};

	THREE.Texture.DEFAULT_IMAGE = undefined;
	THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;

	THREE.Texture.prototype = {

		constructor: THREE.Texture,

		set needsUpdate ( value ) {

			if ( value === true ) this.version ++;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;

			return this;

		},

		toJSON: function ( meta ) {

			if ( meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			function getDataURL( image ) {

				var canvas;

				if ( image.toDataURL !== undefined ) {

					canvas = image;

				} else {

					canvas = document.createElement( 'canvas' );
					canvas.width = image.width;
					canvas.height = image.height;

					canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

				}

				if ( canvas.width > 2048 || canvas.height > 2048 ) {

					return canvas.toDataURL( 'image/jpeg', 0.6 );

				} else {

					return canvas.toDataURL( 'image/png' );

				}

			}

			var output = {
				metadata: {
					version: 4.4,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				wrap: [ this.wrapS, this.wrapT ],

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy
			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = THREE.Math.generateUUID(); // UGH

				}

				if ( meta.images[ image.uuid ] === undefined ) {

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: getDataURL( image )
					};

				}

				output.image = image.uuid;

			}

			meta.textures[ this.uuid ] = output;

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== THREE.UVMapping )  return;

			uv.multiply( this.repeat );
			uv.add( this.offset );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case THREE.RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case THREE.ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case THREE.MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case THREE.RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case THREE.ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case THREE.MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );

	THREE.TextureIdCount = 0;

	// File:src/textures/CanvasTexture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		THREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	};

	THREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;

	// File:src/textures/CubeTexture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		mapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;

		THREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.images = images;
		this.flipY = false;

	};

	THREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;

	THREE.CubeTexture.prototype.copy = function ( source ) {

		THREE.Texture.prototype.copy.call( this, source );

		this.images = source.images;

		return this;

	};
	// File:src/textures/CompressedTexture.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

		THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	};

	THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;

	// File:src/textures/DataTexture.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

		THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { data: data, width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;

		this.flipY = false;
		this.generateMipmaps  = false;

	};

	THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.DataTexture.prototype.constructor = THREE.DataTexture;

	// File:src/textures/VideoTexture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		THREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.generateMipmaps = false;

		var scope = this;

		function update() {

			requestAnimationFrame( update );

			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

				scope.needsUpdate = true;

			}

		}

		update();

	};

	THREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.VideoTexture.prototype.constructor = THREE.VideoTexture;

	// File:src/objects/Group.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Group = function () {

		THREE.Object3D.call( this );

		this.type = 'Group';

	};

	THREE.Group.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Group.prototype.constructor = THREE.Group;
	// File:src/objects/Points.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Points = function ( geometry, material ) {

		THREE.Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
		this.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );

	};

	THREE.Points.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Points.prototype.constructor = THREE.Points;

	THREE.Points.prototype.raycast = ( function () {

		var inverseMatrix = new THREE.Matrix4();
		var ray = new THREE.Ray();

		return function raycast( raycaster, intersects ) {

			var object = this;
			var geometry = object.geometry;
			var threshold = raycaster.params.Points.threshold;

			inverseMatrix.getInverse( this.matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			if ( geometry.boundingBox !== null ) {

				if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

			}

			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localThresholdSq = localThreshold * localThreshold;
			var position = new THREE.Vector3();

			function testPoint( point, index ) {

				var rayPointDistanceSq = ray.distanceSqToPoint( point );

				if ( rayPointDistanceSq < localThresholdSq ) {

					var intersectPoint = ray.closestPointToPoint( point );
					intersectPoint.applyMatrix4( object.matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectPoint );

					if ( distance < raycaster.near || distance > raycaster.far ) return;

					intersects.push( {

						distance: distance,
						distanceToRay: Math.sqrt( rayPointDistanceSq ),
						point: intersectPoint.clone(),
						index: index,
						face: null,
						object: object

					} );

				}

			}

			if ( geometry instanceof THREE.BufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, il = indices.length; i < il; i ++ ) {

						var a = indices[ i ];

						position.fromArray( positions, a * 3 );

						testPoint( position, a );

					}

				} else {

					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

						position.fromArray( positions, i * 3 );

						testPoint( position, i );

					}

				}

			} else {

				var vertices = geometry.vertices;

				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

					testPoint( vertices[ i ], i );

				}

			}

		};

	}() );

	THREE.Points.prototype.clone = function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	};

	// File:src/objects/Line.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Line = function ( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
			return new THREE.LineSegments( geometry, material );

		}

		THREE.Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
		this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );

	};

	THREE.Line.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Line.prototype.constructor = THREE.Line;

	THREE.Line.prototype.raycast = ( function () {

		var inverseMatrix = new THREE.Matrix4();
		var ray = new THREE.Ray();
		var sphere = new THREE.Sphere();

		return function raycast( raycaster, intersects ) {

			var precision = raycaster.linePrecision;
			var precisionSq = precision * precision;

			var geometry = this.geometry;

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			// Checking boundingSphere distance to ray

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( this.matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			inverseMatrix.getInverse( this.matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var vStart = new THREE.Vector3();
			var vEnd = new THREE.Vector3();
			var interSegment = new THREE.Vector3();
			var interRay = new THREE.Vector3();
			var step = this instanceof THREE.LineSegments ? 2 : 1;

			if ( geometry instanceof THREE.BufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;

				if ( index !== null ) {

					var indices = index.array;
					var positions = attributes.position.array;

					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

						var a = indices[ i ];
						var b = indices[ i + 1 ];

						vStart.fromArray( positions, a * 3 );
						vEnd.fromArray( positions, b * 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				} else {

					var positions = attributes.position.array;

					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

						vStart.fromArray( positions, 3 * i );
						vEnd.fromArray( positions, 3 * i + 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			} else if ( geometry instanceof THREE.Geometry ) {

				var vertices = geometry.vertices;
				var nbVertices = vertices.length;

				for ( var i = 0; i < nbVertices - 1; i += step ) {

					var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

					if ( distSq > precisionSq ) continue;

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					var distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			}

		};

	}() );

	THREE.Line.prototype.clone = function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	};

	// DEPRECATED

	THREE.LineStrip = 0;
	THREE.LinePieces = 1;

	// File:src/objects/LineSegments.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LineSegments = function ( geometry, material ) {

		THREE.Line.call( this, geometry, material );

		this.type = 'LineSegments';

	};

	THREE.LineSegments.prototype = Object.create( THREE.Line.prototype );
	THREE.LineSegments.prototype.constructor = THREE.LineSegments;

	// File:src/objects/Mesh.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	THREE.Mesh = function ( geometry, material ) {

		THREE.Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
		this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = THREE.TrianglesDrawMode;

		this.updateMorphTargets();

	};

	THREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Mesh.prototype.constructor = THREE.Mesh;

	THREE.Mesh.prototype.setDrawMode = function ( value ) {

		this.drawMode = value;

	};

	THREE.Mesh.prototype.updateMorphTargets = function () {

		if ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {

			this.morphTargetBase = - 1;
			this.morphTargetInfluences = [];
			this.morphTargetDictionary = {};

			for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {

				this.morphTargetInfluences.push( 0 );
				this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;

			}

		}

	};

	THREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {

		if ( this.morphTargetDictionary[ name ] !== undefined ) {

			return this.morphTargetDictionary[ name ];

		}

		console.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );

		return 0;

	};


	THREE.Mesh.prototype.raycast = ( function () {

		var inverseMatrix = new THREE.Matrix4();
		var ray = new THREE.Ray();
		var sphere = new THREE.Sphere();

		var vA = new THREE.Vector3();
		var vB = new THREE.Vector3();
		var vC = new THREE.Vector3();

		var tempA = new THREE.Vector3();
		var tempB = new THREE.Vector3();
		var tempC = new THREE.Vector3();

		var uvA = new THREE.Vector2();
		var uvB = new THREE.Vector2();
		var uvC = new THREE.Vector2();

		var barycoord = new THREE.Vector3();

		var intersectionPoint = new THREE.Vector3();
		var intersectionPointWorld = new THREE.Vector3();

		function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

			THREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

			uv1.multiplyScalar( barycoord.x );
			uv2.multiplyScalar( barycoord.y );
			uv3.multiplyScalar( barycoord.z );

			uv1.add( uv2 ).add( uv3 );

			return uv1.clone();

		}

		function checkIntersection( object, raycaster, ray, pA, pB, pC, point ){

			var intersect;
			var material = object.material;

			if ( material.side === THREE.BackSide ) {

				intersect = ray.intersectTriangle( pC, pB, pA, true, point );

			} else {

				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );

			}

			if ( intersect === null ) return null;

			intersectionPointWorld.copy( point );
			intersectionPointWorld.applyMatrix4( object.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

			if ( distance < raycaster.near || distance > raycaster.far ) return null;

			return {
				distance: distance,
				point: intersectionPointWorld.clone(),
				object: object
			};

		}

		function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {

			vA.fromArray( positions, a * 3 );
			vB.fromArray( positions, b * 3 );
			vC.fromArray( positions, c * 3 );

			var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

			if ( intersection ) {

				if ( uvs ) {

					uvA.fromArray( uvs, a * 2 );
					uvB.fromArray( uvs, b * 2 );
					uvC.fromArray( uvs, c * 2 );

					intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );

				}

				intersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );
				intersection.faceIndex = a;

			}

			return intersection;

		}

		return function raycast( raycaster, intersects ) {

			var geometry = this.geometry;
			var material = this.material;

			if ( material === undefined ) return;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			var matrixWorld = this.matrixWorld;

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			// Check boundingBox before continuing

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			if ( geometry.boundingBox !== null ) {

				if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

			}

			var uvs, intersection;

			if ( geometry instanceof THREE.BufferGeometry ) {

				var a, b, c;
				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( attributes.uv !== undefined ){

					uvs = attributes.uv.array;

				}

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, l = indices.length; i < l; i += 3 ) {

						a = indices[ i ];
						b = indices[ i + 1 ];
						c = indices[ i + 2 ];

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
							intersects.push( intersection );

						}

					}

				} else {


					for ( var i = 0, l = positions.length; i < l; i += 9 ) {

						a = i / 3;
						b = a + 1;
						c = a + 2;

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

						if ( intersection ) {

							intersection.index = a; // triangle number in positions buffer semantics
							intersects.push( intersection );

						}

					}

				}

			} else if ( geometry instanceof THREE.Geometry ) {

				var fvA, fvB, fvC;
				var isFaceMaterial = material instanceof THREE.MeshFaceMaterial;
				var materials = isFaceMaterial === true ? material.materials : null;

				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
				if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

					var face = faces[ f ];
					var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;

					if ( faceMaterial === undefined ) continue;

					fvA = vertices[ face.a ];
					fvB = vertices[ face.b ];
					fvC = vertices[ face.c ];

					if ( faceMaterial.morphTargets === true ) {

						var morphTargets = geometry.morphTargets;
						var morphInfluences = this.morphTargetInfluences;

						vA.set( 0, 0, 0 );
						vB.set( 0, 0, 0 );
						vC.set( 0, 0, 0 );

						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

							var influence = morphInfluences[ t ];

							if ( influence === 0 ) continue;

							var targets = morphTargets[ t ].vertices;

							vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
							vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
							vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

						}

						vA.add( fvA );
						vB.add( fvB );
						vC.add( fvC );

						fvA = vA;
						fvB = vB;
						fvC = vC;

					}

					intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

					if ( intersection ) {

						if ( uvs ) {

							var uvs_f = uvs[ f ];
							uvA.copy( uvs_f[ 0 ] );
							uvB.copy( uvs_f[ 1 ] );
							uvC.copy( uvs_f[ 2 ] );

							intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

						}

						intersection.face = face;
						intersection.faceIndex = f;
						intersects.push( intersection );

					}

				}

			}

		};

	}() );

	THREE.Mesh.prototype.clone = function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	};

	// File:src/objects/Bone.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	THREE.Bone = function ( skin ) {

		THREE.Object3D.call( this );

		this.type = 'Bone';

		this.skin = skin;

	};

	THREE.Bone.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Bone.prototype.constructor = THREE.Bone;

	THREE.Bone.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		this.skin = source.skin;

		return this;

	};

	// File:src/objects/Skeleton.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	THREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {

		this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

		this.identityMatrix = new THREE.Matrix4();

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );

		// create a bone texture or an array of floats

		if ( this.useVertexTexture ) {

			// layout (1 matrix = 4 pixels)
			//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
			//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
			//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
			//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


			var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
			size = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );
			size = Math.max( size, 4 );

			this.boneTextureWidth = size;
			this.boneTextureHeight = size;

			this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
			this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );

		} else {

			this.boneMatrices = new Float32Array( 16 * this.bones.length );

		}

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					this.boneInverses.push( new THREE.Matrix4() );

				}

			}

		}

	};

	THREE.Skeleton.prototype.calculateInverses = function () {

		this.boneInverses = [];

		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

			var inverse = new THREE.Matrix4();

			if ( this.bones[ b ] ) {

				inverse.getInverse( this.bones[ b ].matrixWorld );

			}

			this.boneInverses.push( inverse );

		}

	};

	THREE.Skeleton.prototype.pose = function () {

		var bone;

		// recover the bind-time world matrices

		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

			bone = this.bones[ b ];

			if ( bone ) {

				bone.matrixWorld.getInverse( this.boneInverses[ b ] );

			}

		}

		// compute the local matrices, positions, rotations and scales

		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

			bone = this.bones[ b ];

			if ( bone ) {

				if ( bone.parent ) {

					bone.matrix.getInverse( bone.parent.matrixWorld );
					bone.matrix.multiply( bone.matrixWorld );

				} else {

					bone.matrix.copy( bone.matrixWorld );

				}

				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

			}

		}

	};

	THREE.Skeleton.prototype.update = ( function () {

		var offsetMatrix = new THREE.Matrix4();

		return function update() {

			// flatten bone matrices to array

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				// compute the offset between the current and the original transform

				var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;

				offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
				offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );

			}

			if ( this.useVertexTexture ) {

				this.boneTexture.needsUpdate = true;

			}

		};

	} )();

	THREE.Skeleton.prototype.clone = function () {

		return new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );

	};

	// File:src/objects/SkinnedMesh.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {

		THREE.Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = "attached";
		this.bindMatrix = new THREE.Matrix4();
		this.bindMatrixInverse = new THREE.Matrix4();

		// init bones

		// TODO: remove bone creation as there is no reason (other than
		// convenience) for THREE.SkinnedMesh to do this.

		var bones = [];

		if ( this.geometry && this.geometry.bones !== undefined ) {

			var bone, gbone;

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				bone = new THREE.Bone( this );
				bones.push( bone );

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

			}

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				if ( gbone.parent !== - 1 && gbone.parent !== null ) {

					bones[ gbone.parent ].add( bones[ b ] );

				} else {

					this.add( bones[ b ] );

				}

			}

		}

		this.normalizeSkinWeights();

		this.updateMatrixWorld( true );
		this.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );

	};


	THREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );
	THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;

	THREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {

		this.skeleton = skeleton;

		if ( bindMatrix === undefined ) {

			this.updateMatrixWorld( true );

			this.skeleton.calculateInverses();

			bindMatrix = this.matrixWorld;

		}

		this.bindMatrix.copy( bindMatrix );
		this.bindMatrixInverse.getInverse( bindMatrix );

	};

	THREE.SkinnedMesh.prototype.pose = function () {

		this.skeleton.pose();

	};

	THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {

		if ( this.geometry instanceof THREE.Geometry ) {

			for ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {

				var sw = this.geometry.skinWeights[ i ];

				var scale = 1.0 / sw.lengthManhattan();

				if ( scale !== Infinity ) {

					sw.multiplyScalar( scale );

				} else {

					sw.set( 1 ); // this will be normalized by the shader anyway

				}

			}

		} else {

			// skinning weights assumed to be normalized for THREE.BufferGeometry

		}

	};

	THREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {

		THREE.Mesh.prototype.updateMatrixWorld.call( this, true );

		if ( this.bindMode === "attached" ) {

			this.bindMatrixInverse.getInverse( this.matrixWorld );

		} else if ( this.bindMode === "detached" ) {

			this.bindMatrixInverse.getInverse( this.bindMatrix );

		} else {

			console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );

		}

	};

	THREE.SkinnedMesh.prototype.clone = function() {

		return new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );

	};

	// File:src/objects/LOD.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LOD = function () {

		THREE.Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			},
			objects: {
				get: function () {

					console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
					return this.levels;

				}
			}
		} );

	};


	THREE.LOD.prototype = Object.create( THREE.Object3D.prototype );
	THREE.LOD.prototype.constructor = THREE.LOD;

	THREE.LOD.prototype.addLevel = function ( object, distance ) {

		if ( distance === undefined ) distance = 0;

		distance = Math.abs( distance );

		var levels = this.levels;

		for ( var l = 0; l < levels.length; l ++ ) {

			if ( distance < levels[ l ].distance ) {

				break;

			}

		}

		levels.splice( l, 0, { distance: distance, object: object } );

		this.add( object );

	};

	THREE.LOD.prototype.getObjectForDistance = function ( distance ) {

		var levels = this.levels;

		for ( var i = 1, l = levels.length; i < l; i ++ ) {

			if ( distance < levels[ i ].distance ) {

				break;

			}

		}

		return levels[ i - 1 ].object;

	};

	THREE.LOD.prototype.raycast = ( function () {

		var matrixPosition = new THREE.Vector3();

		return function raycast( raycaster, intersects ) {

			matrixPosition.setFromMatrixPosition( this.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( matrixPosition );

			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

		};

	}() );

	THREE.LOD.prototype.update = function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();

		return function update( camera ) {

			var levels = this.levels;

			if ( levels.length > 1 ) {

				v1.setFromMatrixPosition( camera.matrixWorld );
				v2.setFromMatrixPosition( this.matrixWorld );

				var distance = v1.distanceTo( v2 );

				levels[ 0 ].object.visible = true;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance >= levels[ i ].distance ) {

						levels[ i - 1 ].object.visible = false;
						levels[ i ].object.visible = true;

					} else {

						break;

					}

				}

				for ( ; i < l; i ++ ) {

					levels[ i ].object.visible = false;

				}

			}

		};

	}();

	THREE.LOD.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source, false );

		var levels = source.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			this.addLevel( level.object.clone(), level.distance );

		}

		return this;

	};

	THREE.LOD.prototype.toJSON = function ( meta ) {

		var data = THREE.Object3D.prototype.toJSON.call( this, meta );

		data.object.levels = [];

		var levels = this.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			data.object.levels.push( {
				object: level.object.uuid,
				distance: level.distance
			} );

		}

		return data;

	};

	// File:src/objects/Sprite.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Sprite = ( function () {

		var indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );
		var vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );
		var uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );

		var geometry = new THREE.BufferGeometry();
		geometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

		return function Sprite( material ) {

			THREE.Object3D.call( this );

			this.type = 'Sprite';

			this.geometry = geometry;
			this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();

		};

	} )();

	THREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Sprite.prototype.constructor = THREE.Sprite;

	THREE.Sprite.prototype.raycast = ( function () {

		var matrixPosition = new THREE.Vector3();

		return function raycast( raycaster, intersects ) {

			matrixPosition.setFromMatrixPosition( this.matrixWorld );

			var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
			var guessSizeSq = this.scale.x * this.scale.y;

			if ( distanceSq > guessSizeSq ) {

				return;

			}

			intersects.push( {

				distance: Math.sqrt( distanceSq ),
				point: this.position,
				face: null,
				object: this

			} );

		};

	}() );

	THREE.Sprite.prototype.clone = function () {

		return new this.constructor( this.material ).copy( this );

	};

	// Backwards compatibility

	THREE.Particle = THREE.Sprite;

	// File:src/objects/LensFlare.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.LensFlare = function ( texture, size, distance, blending, color ) {

		THREE.Object3D.call( this );

		this.lensFlares = [];

		this.positionScreen = new THREE.Vector3();
		this.customUpdateCallback = undefined;

		if ( texture !== undefined ) {

			this.add( texture, size, distance, blending, color );

		}

	};

	THREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );
	THREE.LensFlare.prototype.constructor = THREE.LensFlare;


	/*
	 * Add: adds another flare
	 */

	THREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {

		if ( size === undefined ) size = - 1;
		if ( distance === undefined ) distance = 0;
		if ( opacity === undefined ) opacity = 1;
		if ( color === undefined ) color = new THREE.Color( 0xffffff );
		if ( blending === undefined ) blending = THREE.NormalBlending;

		distance = Math.min( distance, Math.max( 0, distance ) );

		this.lensFlares.push( {
			texture: texture,	// THREE.Texture
			size: size, 		// size in pixels (-1 = use texture.width)
			distance: distance, 	// distance (0-1) from light source (0=at light source)
			x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
			scale: 1, 		// scale
			rotation: 0, 		// rotation
			opacity: opacity,	// opacity
			color: color,		// color
			blending: blending	// blending
		} );

	};

	/*
	 * Update lens flares update positions on all flares based on the screen position
	 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
	 */

	THREE.LensFlare.prototype.updateLensFlares = function () {

		var f, fl = this.lensFlares.length;
		var flare;
		var vecX = - this.positionScreen.x * 2;
		var vecY = - this.positionScreen.y * 2;

		for ( f = 0; f < fl; f ++ ) {

			flare = this.lensFlares[ f ];

			flare.x = this.positionScreen.x + vecX * flare.distance;
			flare.y = this.positionScreen.y + vecY * flare.distance;

			flare.wantedRotation = flare.x * Math.PI * 0.25;
			flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

		}

	};

	THREE.LensFlare.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		this.positionScreen.copy( source.positionScreen );
		this.customUpdateCallback = source.customUpdateCallback;

		for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

			this.lensFlares.push( source.lensFlares[ i ] );

		}

		return this;

	};

	// File:src/scenes/Scene.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Scene = function () {

		THREE.Object3D.call( this );

		this.type = 'Scene';

		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

	};

	THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Scene.prototype.constructor = THREE.Scene;

	THREE.Scene.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	};

	// File:src/scenes/Fog.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Fog = function ( color, near, far ) {

		this.name = '';

		this.color = new THREE.Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	};

	THREE.Fog.prototype.clone = function () {

		return new THREE.Fog( this.color.getHex(), this.near, this.far );

	};

	// File:src/scenes/FogExp2.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.FogExp2 = function ( color, density ) {

		this.name = '';

		this.color = new THREE.Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	};

	THREE.FogExp2.prototype.clone = function () {

		return new THREE.FogExp2( this.color.getHex(), this.density );

	};

	// File:src/renderers/shaders/ShaderChunk.js

	THREE.ShaderChunk = {};

	// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl

	THREE.ShaderChunk[ 'alphamap_fragment'] = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl

	THREE.ShaderChunk[ 'alphamap_pars_fragment'] = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl

	THREE.ShaderChunk[ 'alphatest_fragment'] = "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl

	THREE.ShaderChunk[ 'aomap_fragment'] = "#ifdef USE_AOMAP\n	reflectedLight.indirectDiffuse *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl

	THREE.ShaderChunk[ 'aomap_pars_fragment'] = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl

	THREE.ShaderChunk[ 'begin_vertex'] = "\nvec3 transformed = vec3( position );\n";

	// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl

	THREE.ShaderChunk[ 'beginnormal_vertex'] = "\nvec3 objectNormal = vec3( normal );\n";

	// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl

	THREE.ShaderChunk[ 'bsdfs'] = "float calcLightAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	if ( decayExponent > 0.0 ) {\n	  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n	}\n	return 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = alpha * alpha;\n	float gl = dotNL + pow( a2 + ( 1.0 - a2 ) * dotNL * dotNL, 0.5 );\n	float gv = dotNV + pow( a2 + ( 1.0 - a2 ) * dotNV * dotNV, 0.5 );\n	return 1.0 / ( gl * gv );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = alpha * alpha;\n	float denom = dotNH * dotNH * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / ( denom * denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float alpha = roughness * roughness;\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_Smith( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n	return specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / square( ggxRoughness + 0.0001 ) - 2.0 );\n}";

	// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'bumpmap_pars_fragment'] = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = dFdx( surf_pos );\n		vec3 vSigmaY = dFdy( surf_pos );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl

	THREE.ShaderChunk[ 'color_fragment'] = "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl

	THREE.ShaderChunk[ 'color_pars_fragment'] = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl

	THREE.ShaderChunk[ 'color_pars_vertex'] = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl

	THREE.ShaderChunk[ 'color_vertex'] = "#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/common.glsl

	THREE.ShaderChunk[ 'common'] = "#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat square( const in float x ) { return x*x; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nvec3 inputToLinear( in vec3 a ) {\n	#ifdef GAMMA_INPUT\n		return pow( a, vec3( float( GAMMA_FACTOR ) ) );\n	#else\n		return a;\n	#endif\n}\nvec3 linearToOutput( in vec3 a ) {\n	#ifdef GAMMA_OUTPUT\n		return pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n	#else\n		return a;\n	#endif\n}\n";

	// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl

	THREE.ShaderChunk[ 'defaultnormal_vertex'] = "#ifdef FLIP_SIDED\n	objectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";

	// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl

	THREE.ShaderChunk[ 'displacementmap_vertex'] = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl

	THREE.ShaderChunk[ 'displacementmap_pars_vertex'] = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl

	THREE.ShaderChunk[ 'emissivemap_fragment'] = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = inputToLinear( emissiveColor.rgb );\n	totalEmissiveLight *= emissiveColor.rgb;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl

	THREE.ShaderChunk[ 'emissivemap_pars_fragment'] = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl

	THREE.ShaderChunk[ 'envmap_fragment'] = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef DOUBLE_SIDED\n		float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#else\n		float flipNormal = 1.0;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		vec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#endif\n	envColor.xyz = inputToLinear( envColor.xyz );\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'envmap_pars_fragment'] = "#if defined( USE_ENVMAP ) || defined( STANDARD )\n	uniform float reflectivity;\n	uniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( STANDARD )\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl

	THREE.ShaderChunk[ 'envmap_pars_vertex'] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n	varying vec3 vReflect;\n	uniform float refractionRatio;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl

	THREE.ShaderChunk[ 'envmap_vertex'] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n	vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n	vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	#ifdef ENVMAP_MODE_REFLECTION\n		vReflect = reflect( cameraToVertex, worldNormal );\n	#else\n		vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl

	THREE.ShaderChunk[ 'fog_fragment'] = "#ifdef USE_FOG\n	#ifdef USE_LOGDEPTHBUF_EXT\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n	#else\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n	#endif\n	#ifdef FOG_EXP2\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\n	#endif\n	\n	outgoingLight = mix( outgoingLight, fogColor, fogFactor );\n#endif";

	// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl

	THREE.ShaderChunk[ 'fog_pars_fragment'] = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";

	// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl

	THREE.ShaderChunk[ 'lights_pars'] = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	return PI * ambientLightColor;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n	  vec3 direction;\n	  vec3 color;\n	  int shadow;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	IncidentLight getDirectionalDirectLight( const in DirectionalLight directionalLight, const in GeometricContext geometry ) {\n		IncidentLight directLight;\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		return directLight;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n	  vec3 position;\n	  vec3 color;\n	  float distance;\n	  float decay;\n	  int shadow;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	IncidentLight getPointDirectLight( const in PointLight pointLight, const in GeometricContext geometry ) {\n		IncidentLight directLight;\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= calcLightAttenuation( length( lVector ), pointLight.distance, pointLight.decay );\n		return directLight;\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n	  vec3 position;\n	  vec3 direction;\n	  vec3 color;\n	  float distance;\n	  float decay;\n	  float angleCos;\n	  float exponent;\n	  int shadow;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	IncidentLight getSpotDirectLight( const in SpotLight spotLight, const in GeometricContext geometry ) {\n		IncidentLight directLight;\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float spotEffect = dot( directLight.direction, spotLight.direction );\n		if ( spotEffect > spotLight.angleCos ) {\n			float spotEffect = dot( spotLight.direction, directLight.direction );\n			spotEffect = saturate( pow( saturate( spotEffect ), spotLight.exponent ) );\n			directLight.color = spotLight.color;\n			directLight.color *= ( spotEffect * calcLightAttenuation( length( lVector ), spotLight.distance, spotLight.decay ) );\n		} else {\n			directLight.color = vec3( 0.0 );\n		}\n		return directLight;\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n	  vec3 direction;\n	  vec3 skyColor;\n	  vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		return PI * mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n	}\n#endif\n#if defined( USE_ENVMAP ) && defined( STANDARD )\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		#ifdef DOUBLE_SIDED\n			float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#else\n			float flipNormal = 1.0;\n		#endif\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n		#else\n			vec3 envMapColor = vec3( 0.0 );\n		#endif\n		envMapColor.rgb = inputToLinear( envMapColor.rgb );\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( square( blinnShininessExponent ) + 1.0 );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n		#else\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n		#endif\n		#ifdef DOUBLE_SIDED\n			float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#else\n			float flipNormal = 1.0;\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n			sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n		#endif\n		envMapColor.rgb = inputToLinear( envMapColor.rgb );\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'lightmap_pars_fragment'] = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl

	THREE.ShaderChunk[ 'lights_lambert_vertex'] = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n#endif\n#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		IncidentLight directLight = getPointDirectLight( pointLights[ i ], geometry );\n		float dotNL = dot( geometry.normal, directLight.direction );\n		vec3 directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		IncidentLight directLight = getSpotDirectLight( spotLights[ i ], geometry );\n		float dotNL = dot( geometry.normal, directLight.direction );\n		vec3 directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		IncidentLight directLight = getDirectionalDirectLight( directionalLights[ i ], geometry );\n		float dotNL = dot( geometry.normal, directLight.direction );\n		vec3 directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n	{\n		#if NUM_HEMI_LIGHTS > 0\n			for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n				vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n				#ifdef DOUBLE_SIDED\n					vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n				#endif\n			}\n		#endif\n	}\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl

	THREE.ShaderChunk[ 'lights_phong_fragment'] = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl

	THREE.ShaderChunk[ 'lights_phong_pars_fragment'] = "#ifdef USE_ENVMAP\n	varying vec3 vWorldPosition;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * PI * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl

	THREE.ShaderChunk[ 'lights_phong_pars_vertex'] = "#ifdef USE_ENVMAP\n	varying vec3 vWorldPosition;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl

	THREE.ShaderChunk[ 'lights_phong_vertex'] = "#ifdef USE_ENVMAP\n	vWorldPosition = worldPosition.xyz;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lights_standard_fragment.glsl

	THREE.ShaderChunk[ 'lights_standard_fragment'] = "StandardMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\nmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n";

	// File:src/renderers/shaders/ShaderChunk/lights_standard_pars_fragment.glsl

	THREE.ShaderChunk[ 'lights_standard_pars_fragment'] = "struct StandardMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n};\nvoid RE_Direct_Standard( const in IncidentLight directLight, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * PI * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n}\nvoid RE_IndirectDiffuse_Standard( const in vec3 irradiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Standard( const in vec3 radiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n}\n#define RE_Direct				RE_Direct_Standard\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Standard\n#define RE_IndirectSpecular		RE_IndirectSpecular_Standard\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n";

	// File:src/renderers/shaders/ShaderChunk/lights_template.glsl

	THREE.ShaderChunk[ 'lights_template'] = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		PointLight pointLight = pointLights[ i ];\n		IncidentLight directLight = getPointDirectLight( pointLight, geometry );\n		#ifdef USE_SHADOWMAP\n		if ( pointLight.shadow > - 1 ) {\n			for ( int j = 0; j < NUM_SHADOWS; j ++ ) {\n				if ( j == pointLight.shadow ) {\n					directLight.color *= shadows[ j ];\n				}\n			}\n		}\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		SpotLight spotLight = spotLights[ i ];\n		IncidentLight directLight = getSpotDirectLight( spotLight, geometry );\n		#ifdef USE_SHADOWMAP\n		if ( spotLight.shadow > - 1 ) {\n			for ( int j = 0; j < NUM_SHADOWS; j ++ ) {\n				if ( j == spotLight.shadow ) {\n					directLight.color *= shadows[ j ];\n				}\n			}\n		}\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		DirectionalLight directionalLight = directionalLights[ i ];\n		IncidentLight directLight = getDirectionalDirectLight( directionalLight, geometry );\n		#ifdef USE_SHADOWMAP\n		if ( directionalLight.shadow > - 1 ) {\n			for ( int j = 0; j < NUM_SHADOWS; j ++ ) {\n				if ( j == directionalLight.shadow ) {\n					directLight.color *= shadows[ j ];\n				}\n			}\n		}\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	{\n		vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n		#ifdef USE_LIGHTMAP\n			irradiance += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n		#endif\n		#if ( NUM_HEMI_LIGHTS > 0 )\n			for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n				irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n			}\n		#endif\n		RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	{\n		vec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n		RE_IndirectSpecular( radiance, geometry, material, reflectedLight );\n    }\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/linear_to_gamma_fragment.glsl

	THREE.ShaderChunk[ 'linear_to_gamma_fragment'] = "\n	outgoingLight = linearToOutput( outgoingLight );\n";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl

	THREE.ShaderChunk[ 'logdepthbuf_fragment'] = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl

	THREE.ShaderChunk[ 'logdepthbuf_pars_fragment'] = "#ifdef USE_LOGDEPTHBUF\n	uniform float logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl

	THREE.ShaderChunk[ 'logdepthbuf_pars_vertex'] = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n	uniform float logDepthBufFC;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl

	THREE.ShaderChunk[ 'logdepthbuf_vertex'] = "#ifdef USE_LOGDEPTHBUF\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n	#else\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl

	THREE.ShaderChunk[ 'map_fragment'] = "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor.xyz = inputToLinear( texelColor.xyz );\n	diffuseColor *= texelColor;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl

	THREE.ShaderChunk[ 'map_pars_fragment'] = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl

	THREE.ShaderChunk[ 'map_particle_fragment'] = "#ifdef USE_MAP\n	diffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl

	THREE.ShaderChunk[ 'map_particle_pars_fragment'] = "#ifdef USE_MAP\n	uniform vec4 offsetRepeat;\n	uniform sampler2D map;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl

	THREE.ShaderChunk[ 'metalnessmap_fragment'] = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.r;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'metalnessmap_pars_fragment'] = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl

	THREE.ShaderChunk[ 'morphnormal_vertex'] = "#ifdef USE_MORPHNORMALS\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl

	THREE.ShaderChunk[ 'morphtarget_pars_vertex'] = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif";

	// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl

	THREE.ShaderChunk[ 'morphtarget_vertex'] = "#ifdef USE_MORPHTARGETS\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl

	THREE.ShaderChunk[ 'normal_fragment'] = "#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n	#endif\n#endif\n#ifdef USE_NORMALMAP\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'normalmap_pars_fragment'] = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl

	THREE.ShaderChunk[ 'project_vertex'] = "#ifdef USE_SKINNING\n	vec4 mvPosition = modelViewMatrix * skinned;\n#else\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";

	// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl

	THREE.ShaderChunk[ 'roughnessmap_fragment'] = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.r;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'roughnessmap_pars_fragment'] = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_fragment.glsl

	THREE.ShaderChunk[ 'shadowmap_fragment'] = "vec3 shadowMask = vec3( 1.0 );\n#ifdef USE_SHADOWMAP\n	float shadows[ NUM_SHADOWS ];\n	for ( int i = 0; i < NUM_SHADOWS; i ++ ) {\n		float texelSizeY =  1.0 / shadowMapSize[ i ].y;\n		float shadow = 0.0;\n#ifdef POINT_LIGHT_SHADOWS\n		bool isPointLight = shadowDarkness[ i ] < 0.0;\n		if ( isPointLight ) {\n			float realShadowDarkness = abs( shadowDarkness[ i ] );\n			vec3 lightToPosition = vShadowCoord[ i ].xyz;\n	#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec3 bd3D = normalize( lightToPosition );\n			float dp = length( lightToPosition );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n	#if defined( SHADOWMAP_TYPE_PCF )\n			const float Dr = 1.25;\n	#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			const float Dr = 2.25;\n	#endif\n			float os = Dr *  2.0 * texelSizeY;\n			const vec3 Gsd = vec3( - 1, 0, 1 );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			shadow *= realShadowDarkness * ( 1.0 / 21.0 );\n	#else\n			vec3 bd3D = normalize( lightToPosition );\n			float dp = length( lightToPosition );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n			shadow *= realShadowDarkness;\n	#endif\n		} else {\n#endif\n			float texelSizeX =  1.0 / shadowMapSize[ i ].x;\n			vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n			bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n			bool inFrustum = all( inFrustumVec );\n			bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n			bool frustumTest = all( frustumTestVec );\n			if ( frustumTest ) {\n	#if defined( SHADOWMAP_TYPE_PCF )\n				shadowCoord.z += shadowBias[ i ];\n				const float ShadowDelta = 1.0 / 9.0;\n				float xPixelOffset = texelSizeX;\n				float yPixelOffset = texelSizeY;\n				float dx0 = - 1.25 * xPixelOffset;\n				float dy0 = - 1.25 * yPixelOffset;\n				float dx1 = 1.25 * xPixelOffset;\n				float dy1 = 1.25 * yPixelOffset;\n				float fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n				shadow *= shadowDarkness[ i ];\n	#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n				shadowCoord.z += shadowBias[ i ];\n				float xPixelOffset = texelSizeX;\n				float yPixelOffset = texelSizeY;\n				float dx0 = - 1.0 * xPixelOffset;\n				float dy0 = - 1.0 * yPixelOffset;\n				float dx1 = 1.0 * xPixelOffset;\n				float dy1 = 1.0 * yPixelOffset;\n				mat3 shadowKernel;\n				mat3 depthKernel;\n				depthKernel[ 0 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n				depthKernel[ 0 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n				depthKernel[ 0 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n				depthKernel[ 1 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n				depthKernel[ 1 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n				depthKernel[ 1 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n				depthKernel[ 2 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n				depthKernel[ 2 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n				depthKernel[ 2 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n				vec3 shadowZ = vec3( shadowCoord.z );\n				shadowKernel[ 0 ] = vec3( lessThan( depthKernel[ 0 ], shadowZ ) );\n				shadowKernel[ 0 ] *= vec3( 0.25 );\n				shadowKernel[ 1 ] = vec3( lessThan( depthKernel[ 1 ], shadowZ ) );\n				shadowKernel[ 1 ] *= vec3( 0.25 );\n				shadowKernel[ 2 ] = vec3( lessThan( depthKernel[ 2 ], shadowZ ) );\n				shadowKernel[ 2 ] *= vec3( 0.25 );\n				vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[ i ].xy );\n				shadowKernel[ 0 ] = mix( shadowKernel[ 1 ], shadowKernel[ 0 ], fractionalCoord.x );\n				shadowKernel[ 1 ] = mix( shadowKernel[ 2 ], shadowKernel[ 1 ], fractionalCoord.x );\n				vec4 shadowValues;\n				shadowValues.x = mix( shadowKernel[ 0 ][ 1 ], shadowKernel[ 0 ][ 0 ], fractionalCoord.y );\n				shadowValues.y = mix( shadowKernel[ 0 ][ 2 ], shadowKernel[ 0 ][ 1 ], fractionalCoord.y );\n				shadowValues.z = mix( shadowKernel[ 1 ][ 1 ], shadowKernel[ 1 ][ 0 ], fractionalCoord.y );\n				shadowValues.w = mix( shadowKernel[ 1 ][ 2 ], shadowKernel[ 1 ][ 1 ], fractionalCoord.y );\n				shadow = dot( shadowValues, vec4( 1.0 ) ) * shadowDarkness[ i ];\n	#else\n				shadowCoord.z += shadowBias[ i ];\n				vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n				float fDepth = unpackDepth( rgbaDepth );\n				if ( fDepth < shadowCoord.z )\n					shadow = shadowDarkness[ i ];\n	#endif\n			}\n#ifdef SHADOWMAP_DEBUG\n			if ( inFrustum ) {\n				if ( i == 0 ) {\n					outgoingLight *= vec3( 1.0, 0.5, 0.0 );\n				} else if ( i == 1 ) {\n					outgoingLight *= vec3( 0.0, 1.0, 0.8 );\n				} else {\n					outgoingLight *= vec3( 0.0, 0.5, 1.0 );\n				}\n			}\n#endif\n#ifdef POINT_LIGHT_SHADOWS\n		}\n#endif\n		shadowMask = shadowMask * vec3( 1.0 - shadow );\n		shadows[ i ] = 1.0 - shadow;\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'shadowmap_pars_fragment'] = "#ifdef USE_SHADOWMAP\n	uniform sampler2D shadowMap[ NUM_SHADOWS ];\n	uniform vec2 shadowMapSize[ NUM_SHADOWS ];\n	uniform float shadowDarkness[ NUM_SHADOWS ];\n	uniform float shadowBias[ NUM_SHADOWS ];\n	varying vec4 vShadowCoord[ NUM_SHADOWS ];\n	float unpackDepth( const in vec4 rgba_depth ) {\n		const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n		float depth = dot( rgba_depth, bit_shift );\n		return depth;\n	}\n	#ifdef POINT_LIGHT_SHADOWS\n		void adjustShadowValue1K( const float testDepth, const vec4 textureData, const float bias, inout float shadowValue ) {\n			const vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n			if ( testDepth >= dot( textureData, bitSh ) * 1000.0 + bias )\n				shadowValue += 1.0;\n		}\n		vec2 cubeToUV( vec3 v, float texelSizeY ) {\n			vec3 absV = abs( v );\n			float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n			absV *= scaleToCube;\n			v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n			vec2 planar = v.xy;\n			float almostATexel = 1.5 * texelSizeY;\n			float almostOne = 1.0 - almostATexel;\n			if ( absV.z >= almostOne ) {\n				if ( v.z > 0.0 )\n					planar.x = 4.0 - v.x;\n			} else if ( absV.x >= almostOne ) {\n				float signX = sign( v.x );\n				planar.x = v.z * signX + 2.0 * signX;\n			} else if ( absV.y >= almostOne ) {\n				float signY = sign( v.y );\n				planar.x = v.x + 2.0 * signY + 2.0;\n				planar.y = v.z * signY - 2.0;\n			}\n			return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n		}\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl

	THREE.ShaderChunk[ 'shadowmap_pars_vertex'] = "#ifdef USE_SHADOWMAP\n	uniform float shadowDarkness[ NUM_SHADOWS ];\n	uniform mat4 shadowMatrix[ NUM_SHADOWS ];\n	varying vec4 vShadowCoord[ NUM_SHADOWS ];\n#endif";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl

	THREE.ShaderChunk[ 'shadowmap_vertex'] = "#ifdef USE_SHADOWMAP\n	for ( int i = 0; i < NUM_SHADOWS; i ++ ) {\n			vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n	}\n#endif";

	// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl

	THREE.ShaderChunk[ 'skinbase_vertex'] = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl

	THREE.ShaderChunk[ 'skinning_pars_vertex'] = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform sampler2D boneTexture;\n		uniform int boneTextureWidth;\n		uniform int boneTextureHeight;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureWidth ) );\n			float y = floor( j / float( boneTextureWidth ) );\n			float dx = 1.0 / float( boneTextureWidth );\n			float dy = 1.0 / float( boneTextureHeight );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneGlobalMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneGlobalMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl

	THREE.ShaderChunk[ 'skinning_vertex'] = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	skinned  = bindMatrixInverse * skinned;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl

	THREE.ShaderChunk[ 'skinnormal_vertex'] = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl

	THREE.ShaderChunk[ 'specularmap_fragment'] = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'specularmap_pars_fragment'] = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl

	THREE.ShaderChunk[ 'uv2_pars_fragment'] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl

	THREE.ShaderChunk[ 'uv2_pars_vertex'] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl

	THREE.ShaderChunk[ 'uv2_vertex'] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = uv2;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl

	THREE.ShaderChunk[ 'uv_pars_fragment'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl

	THREE.ShaderChunk[ 'uv_pars_vertex'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl

	THREE.ShaderChunk[ 'uv_vertex'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl

	THREE.ShaderChunk[ 'worldpos_vertex'] = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n	#ifdef USE_SKINNING\n		vec4 worldPosition = modelMatrix * skinned;\n	#else\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n	#endif\n#endif\n";

	// File:src/renderers/shaders/UniformsUtils.js

	/**
	 * Uniform Utilities
	 */

	THREE.UniformsUtils = {

		merge: function ( uniforms ) {

			var merged = {};

			for ( var u = 0; u < uniforms.length; u ++ ) {

				var tmp = this.clone( uniforms[ u ] );

				for ( var p in tmp ) {

					merged[ p ] = tmp[ p ];

				}

			}

			return merged;

		},

		clone: function ( uniforms_src ) {

			var uniforms_dst = {};

			for ( var u in uniforms_src ) {

				uniforms_dst[ u ] = {};

				for ( var p in uniforms_src[ u ] ) {

					var parameter_src = uniforms_src[ u ][ p ];

					if ( parameter_src instanceof THREE.Color ||
						 parameter_src instanceof THREE.Vector2 ||
						 parameter_src instanceof THREE.Vector3 ||
						 parameter_src instanceof THREE.Vector4 ||
						 parameter_src instanceof THREE.Matrix3 ||
						 parameter_src instanceof THREE.Matrix4 ||
						 parameter_src instanceof THREE.Texture ) {

						uniforms_dst[ u ][ p ] = parameter_src.clone();

					} else if ( Array.isArray( parameter_src ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.slice();

					} else {

						uniforms_dst[ u ][ p ] = parameter_src;

					}

				}

			}

			return uniforms_dst;

		}

	};

	// File:src/renderers/shaders/UniformsLib.js

	/**
	 * Uniforms library for shared webgl shaders
	 */

	THREE.UniformsLib = {

		common: {

			"diffuse" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
			"opacity" : { type: "f", value: 1.0 },

			"map" : { type: "t", value: null },
			"offsetRepeat" : { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },

			"specularMap" : { type: "t", value: null },
			"alphaMap" : { type: "t", value: null },

			"envMap" : { type: "t", value: null },
			"flipEnvMap" : { type: "f", value: - 1 },
			"reflectivity" : { type: "f", value: 1.0 },
			"refractionRatio" : { type: "f", value: 0.98 }

		},

		aomap: {

			"aoMap" : { type: "t", value: null },
			"aoMapIntensity" : { type: "f", value: 1 },

		},

		lightmap: {

			"lightMap" : { type: "t", value: null },
			"lightMapIntensity" : { type: "f", value: 1 },

		},

		emissivemap: {

			"emissiveMap" : { type: "t", value: null },

		},

		bumpmap: {

			"bumpMap" : { type: "t", value: null },
			"bumpScale" : { type: "f", value: 1 }

		},

		normalmap: {

			"normalMap" : { type: "t", value: null },
			"normalScale" : { type: "v2", value: new THREE.Vector2( 1, 1 ) }

		},

		displacementmap: {

			"displacementMap" : { type: "t", value: null },
			"displacementScale" : { type: "f", value: 1 },
			"displacementBias" : { type: "f", value: 0 }

		},

		roughnessmap: {

			"roughnessMap" : { type: "t", value: null }

		},

		metalnessmap: {

			"metalnessMap" : { type: "t", value: null }

		},

		fog: {

			"fogDensity" : { type: "f", value: 0.00025 },
			"fogNear" : { type: "f", value: 1 },
			"fogFar" : { type: "f", value: 2000 },
			"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

		},

		lights: {

			"ambientLightColor" : { type: "fv", value: [] },

			"directionalLights" : { type: "sa", value: [], properties: {
				"direction": { type: "v3" },
				"color": { type: "c" },
				"shadow": { type: "i" }
			} },

			"hemisphereLights" : { type: "sa", value: [], properties: {
				"direction": { type: "v3" },
				"skyColor": { type: "c" },
				"groundColor": { type: "c" }
			} },

			"pointLights" : { type: "sa", value: [], properties: {
				"color": { type: "c" },
				"position": { type: "v3" },
				"decay": { type: "f" },
				"distance": { type: "f" },
				"shadow": { type: "i" }
			} },

			"spotLights" : { type: "sa", value: [], properties: {
				"color": { type: "c" },
				"position": { type: "v3" },
				"direction": { type: "v3" },
				"distance": { type: "f" },
				"angleCos": { type: "f" },
				"exponent": { type: "f" },
				"decay": { type: "f" },
				"shadow": { type: "i" }
			} }


		},

		points: {

			"psColor" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
			"opacity" : { type: "f", value: 1.0 },
			"size" : { type: "f", value: 1.0 },
			"scale" : { type: "f", value: 1.0 },
			"map" : { type: "t", value: null },
			"offsetRepeat" : { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },

			"fogDensity" : { type: "f", value: 0.00025 },
			"fogNear" : { type: "f", value: 1 },
			"fogFar" : { type: "f", value: 2000 },
			"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

		},

		shadowmap: {

			"shadowMap": { type: "tv", value: [] },
			"shadowMapSize": { type: "v2v", value: [] },

			"shadowBias" : { type: "fv1", value: [] },
			"shadowDarkness": { type: "fv1", value: [] },

			"shadowMatrix" : { type: "m4v", value: [] }

		}

	};

	// File:src/renderers/shaders/ShaderLib.js

	/**
	 * Webgl Shader Library for three.js
	 *
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */


	THREE.ShaderLib = {

		'basic': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "aomap" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "shadowmap" ]

			] ),

			vertexShader: [

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],

				"	#ifdef USE_ENVMAP",

					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"	#endif",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 diffuse;",
				"uniform float opacity;",

				"#ifndef FLAT_SHADED",

				"	varying vec3 vNormal;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "aomap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec4 diffuseColor = vec4( diffuse, opacity );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],

				"	ReflectedLight reflectedLight;",
				"	reflectedLight.directDiffuse = vec3( 0.0 );",
				"	reflectedLight.directSpecular = vec3( 0.0 );",
				"	reflectedLight.indirectDiffuse = diffuseColor.rgb;",
				"	reflectedLight.indirectSpecular = vec3( 0.0 );",

					THREE.ShaderChunk[ "aomap_fragment" ],
					THREE.ShaderChunk[ "shadowmap_fragment" ],
					"reflectedLight.indirectDiffuse *= shadowMask;",

					"vec3 outgoingLight = reflectedLight.indirectDiffuse;",

					THREE.ShaderChunk[ "envmap_fragment" ],
					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'lambert': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "lights" ],
				THREE.UniformsLib[ "shadowmap" ],

				{
					"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) }
				}

			] ),

			vertexShader: [

				"#define LAMBERT",

				"varying vec3 vLightFront;",

				"#ifdef DOUBLE_SIDED",

				"	varying vec3 vLightBack;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "bsdfs" ],
				THREE.ShaderChunk[ "lights_pars" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],

					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "lights_lambert_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 diffuse;",
				"uniform vec3 emissive;",
				"uniform float opacity;",

				"uniform vec3 ambientLightColor;",

				"varying vec3 vLightFront;",

				"#ifdef DOUBLE_SIDED",

				"	varying vec3 vLightBack;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec3 outgoingLight = vec3( 0.0 );",
				"	vec4 diffuseColor = vec4( diffuse, opacity );",
				"	vec3 totalAmbientLight = PI * ambientLightColor;",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],
					THREE.ShaderChunk[ "shadowmap_fragment" ],

				"	#ifdef DOUBLE_SIDED",

				"		if ( gl_FrontFacing )",
				"			outgoingLight += RECIPROCAL_PI * diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;",
				"		else",
				"			outgoingLight += RECIPROCAL_PI * diffuseColor.rgb * ( vLightBack * shadowMask + totalAmbientLight ) + emissive;",

				"	#else",

				"		outgoingLight += RECIPROCAL_PI * diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;",

				"	#endif",

					THREE.ShaderChunk[ "envmap_fragment" ],

					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'phong': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "aomap" ],
				THREE.UniformsLib[ "lightmap" ],
				THREE.UniformsLib[ "emissivemap" ],
				THREE.UniformsLib[ "bumpmap" ],
				THREE.UniformsLib[ "normalmap" ],
				THREE.UniformsLib[ "displacementmap" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "lights" ],
				THREE.UniformsLib[ "shadowmap" ],

				{
					"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
					"specular" : { type: "c", value: new THREE.Color( 0x111111 ) },
					"shininess": { type: "f", value: 30 }
				}

			] ),

			vertexShader: [

				"#define PHONG",

				"varying vec3 vViewPosition;",

				"#ifndef FLAT_SHADED",

				"	varying vec3 vNormal;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "displacementmap_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "lights_phong_pars_vertex" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],

					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"#ifndef FLAT_SHADED", // Normal computed with derivatives when FLAT_SHADED

				"	vNormal = normalize( transformedNormal );",

				"#endif",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "displacementmap_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"	vViewPosition = - mvPosition.xyz;",

					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "lights_phong_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"#define PHONG",

				"uniform vec3 diffuse;",
				"uniform vec3 emissive;",
				"uniform vec3 specular;",
				"uniform float shininess;",
				"uniform float opacity;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "aomap_pars_fragment" ],
				THREE.ShaderChunk[ "lightmap_pars_fragment" ],
				THREE.ShaderChunk[ "emissivemap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "bsdfs" ],
				THREE.ShaderChunk[ "lights_pars" ],
				THREE.ShaderChunk[ "lights_phong_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
				THREE.ShaderChunk[ "normalmap_pars_fragment" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec4 diffuseColor = vec4( diffuse, opacity );",
				"	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
				"	vec3 totalEmissiveLight = emissive;",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],
					THREE.ShaderChunk[ "normal_fragment" ],
					THREE.ShaderChunk[ "emissivemap_fragment" ],

					THREE.ShaderChunk[ "shadowmap_fragment" ],

					// accumulation
					THREE.ShaderChunk[ "lights_phong_fragment" ],
					THREE.ShaderChunk[ "lights_template" ],
					THREE.ShaderChunk[ "lightmap_fragment" ],

					// modulation
					THREE.ShaderChunk[ "aomap_fragment" ],

					"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;",

					THREE.ShaderChunk[ "envmap_fragment" ],
					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'standard': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "aomap" ],
				THREE.UniformsLib[ "lightmap" ],
				THREE.UniformsLib[ "emissivemap" ],
				THREE.UniformsLib[ "bumpmap" ],
				THREE.UniformsLib[ "normalmap" ],
				THREE.UniformsLib[ "displacementmap" ],
				THREE.UniformsLib[ "roughnessmap" ],
				THREE.UniformsLib[ "metalnessmap" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "lights" ],
				THREE.UniformsLib[ "shadowmap" ],

				{
					"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
					"roughness": { type: "f", value: 0.5 },
					"metalness": { type: "f", value: 0 },
					"envMapIntensity" : { type: "f", value: 1 } // temporary
				}

			] ),

			vertexShader: [

				"#define STANDARD",

				"varying vec3 vViewPosition;",

				"#ifndef FLAT_SHADED",

				"	varying vec3 vNormal;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "displacementmap_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {", // STANDARD

					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],

					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"#ifndef FLAT_SHADED", // Normal computed with derivatives when FLAT_SHADED

				"	vNormal = normalize( transformedNormal );",

				"#endif",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "displacementmap_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"	vViewPosition = - mvPosition.xyz;",

					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"#define STANDARD",

				"uniform vec3 diffuse;",
				"uniform vec3 emissive;",
				"uniform float roughness;",
				"uniform float metalness;",
				"uniform float opacity;",

				"uniform float envMapIntensity;", // temporary

				"varying vec3 vViewPosition;",

				"#ifndef FLAT_SHADED",

				"	varying vec3 vNormal;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "aomap_pars_fragment" ],
				THREE.ShaderChunk[ "lightmap_pars_fragment" ],
				THREE.ShaderChunk[ "emissivemap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "bsdfs" ],
				THREE.ShaderChunk[ "lights_pars" ],
				THREE.ShaderChunk[ "lights_standard_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
				THREE.ShaderChunk[ "normalmap_pars_fragment" ],
				THREE.ShaderChunk[ "roughnessmap_pars_fragment" ],
				THREE.ShaderChunk[ "metalnessmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec4 diffuseColor = vec4( diffuse, opacity );",
				"	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
				"	vec3 totalEmissiveLight = emissive;",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],
					THREE.ShaderChunk[ "roughnessmap_fragment" ],
					THREE.ShaderChunk[ "metalnessmap_fragment" ],
					THREE.ShaderChunk[ "normal_fragment" ],
					THREE.ShaderChunk[ "emissivemap_fragment" ],

					THREE.ShaderChunk[ "shadowmap_fragment" ],

					// accumulation
					THREE.ShaderChunk[ "lights_standard_fragment" ],
					THREE.ShaderChunk[ "lights_template" ],
					THREE.ShaderChunk[ "lightmap_fragment" ],

					// modulation
					THREE.ShaderChunk[ "aomap_fragment" ],

					"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;",

					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'points': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "points" ],
				THREE.UniformsLib[ "shadowmap" ]

			] ),

			vertexShader: [

				"uniform float size;",
				"uniform float scale;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "color_vertex" ],

				"	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",

				"	#ifdef USE_SIZEATTENUATION",
				"		gl_PointSize = size * ( scale / -mvPosition.z );",
				"	#else",
				"		gl_PointSize = size;",
				"	#endif",

				"	gl_Position = projectionMatrix * mvPosition;",

					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 psColor;",
				"uniform float opacity;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "map_particle_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec3 outgoingLight = vec3( 0.0 );",
				"	vec4 diffuseColor = vec4( psColor, opacity );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_particle_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "shadowmap_fragment" ],

				"	outgoingLight = diffuseColor.rgb * shadowMask;",

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'dashed': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "fog" ],

				{
					"scale"    : { type: "f", value: 1 },
					"dashSize" : { type: "f", value: 1 },
					"totalSize": { type: "f", value: 2 }
				}

			] ),

			vertexShader: [

				"uniform float scale;",
				"attribute float lineDistance;",

				"varying float vLineDistance;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "color_vertex" ],

				"	vLineDistance = scale * lineDistance;",

				"	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
				"	gl_Position = projectionMatrix * mvPosition;",

					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 diffuse;",
				"uniform float opacity;",

				"uniform float dashSize;",
				"uniform float totalSize;",

				"varying float vLineDistance;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	if ( mod( vLineDistance, totalSize ) > dashSize ) {",

				"		discard;",

				"	}",

				"	vec3 outgoingLight = vec3( 0.0 );",
				"	vec4 diffuseColor = vec4( diffuse, opacity );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],

				"	outgoingLight = diffuseColor.rgb;", // simple shader

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'depth': {

			uniforms: {

				"mNear": { type: "f", value: 1.0 },
				"mFar" : { type: "f", value: 2000.0 },
				"opacity" : { type: "f", value: 1.0 }

			},

			vertexShader: [

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float mNear;",
				"uniform float mFar;",
				"uniform float opacity;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"	#ifdef USE_LOGDEPTHBUF_EXT",

				"		float depth = gl_FragDepthEXT / gl_FragCoord.w;",

				"	#else",

				"		float depth = gl_FragCoord.z / gl_FragCoord.w;",

				"	#endif",

				"	float color = 1.0 - smoothstep( mNear, mFar, depth );",
				"	gl_FragColor = vec4( vec3( color ), opacity );",

				"}"

			].join( "\n" )

		},

		'normal': {

			uniforms: {

				"opacity" : { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec3 vNormal;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

				"	vNormal = normalize( normalMatrix * normal );",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float opacity;",
				"varying vec3 vNormal;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"}"

			].join( "\n" )

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		'cube': {

			uniforms: { "tCube": { type: "t", value: null },
						"tFlip": { type: "f", value: - 1 } },

			vertexShader: [

				"varying vec3 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

				"	vWorldPosition = transformDirection( position, modelMatrix );",

				"	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform samplerCube tCube;",
				"uniform float tFlip;",

				"varying vec3 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"}"

			].join( "\n" )

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		'equirect': {

			uniforms: { "tEquirect": { type: "t", value: null },
						"tFlip": { type: "f", value: - 1 } },

			vertexShader: [

				"varying vec3 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

				"	vWorldPosition = transformDirection( position, modelMatrix );",

				"	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tEquirect;",
				"uniform float tFlip;",

				"varying vec3 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

					// "	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",
					"vec3 direction = normalize( vWorldPosition );",
					"vec2 sampleUV;",
					"sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );",
					"sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",
					"gl_FragColor = texture2D( tEquirect, sampleUV );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"}"

			].join( "\n" )

		},

		/* Depth encoding into RGBA texture
		 *
		 * based on SpiderGL shadow map example
		 * http://spidergl.org/example.php?id=6
		 *
		 * originally from
		 * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD
		 *
		 * see also
		 * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/
		 */

		'depthRGBA': {

			uniforms: {},

			vertexShader: [

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "skinbase_vertex" ],

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"vec4 pack_depth( const in float depth ) {",

				"	const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
				"	const vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
				"	vec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );", // "	vec4 res = fract( depth * bit_shift );",
				"	res -= res.xxyz * bit_mask;",
				"	return res;",

				"}",

				"void main() {",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"	#ifdef USE_LOGDEPTHBUF_EXT",

				"		gl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );",

				"	#else",

				"		gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );",

				"	#endif",

					//"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );",
					//"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );",
					//"gl_FragData[ 0 ] = pack_depth( z );",
					//"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );",

				"}"

			].join( "\n" )

		},


		'distanceRGBA': {

			uniforms: {

				"lightPos": { type: "v3", value: new THREE.Vector3( 0, 0, 0 ) }

			},

			vertexShader: [

				"varying vec4 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "worldpos_vertex" ],

					"vWorldPosition = worldPosition;",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 lightPos;",
				"varying vec4 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],

				"vec4 pack1K ( float depth ) {",

				"   depth /= 1000.0;",
				"   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
	  			"	const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
	   			"	vec4 res = fract( depth * bitSh );",
	   			"	res -= res.xxyz * bitMsk;",
	   			"	return res; ",

				"}",

				"float unpack1K ( vec4 color ) {",

				"	const vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
				"	return dot( color, bitSh ) * 1000.0;",

				"}",

				"void main () {",

				"	gl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );",

				"}"

			].join( "\n" )

		}

	};

	// File:src/renderers/WebGLRenderer.js

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	THREE.WebGLRenderer = function ( parameters ) {

		console.log( 'THREE.WebGLRenderer', THREE.REVISION );

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_width = _canvas.width,
		_height = _canvas.height,

		pixelRatio = 1,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,

		_clearColor = new THREE.Color( 0x000000 ),
		_clearAlpha = 0;

		var lights = [];

		var opaqueObjects = [];
		var opaqueObjectsLastIndex = - 1;
		var transparentObjects = [];
		var transparentObjectsLastIndex = - 1;

		var morphInfluences = new Float32Array( 8 );


		var sprites = [];
		var lensFlares = [];

		// public properties

		this.domElement = _canvas;
		this.context = null;

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// flags

		this.autoScaleCubemaps = true;

		// internal properties

		var _this = this,

		// internal state cache

		_currentProgram = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',
		_currentCamera = null,

		_usedTextureUnits = 0,

		_viewportX = 0,
		_viewportY = 0,
		_viewportWidth = _canvas.width,
		_viewportHeight = _canvas.height,
		_currentWidth = 0,
		_currentHeight = 0,

		// frustum

		_frustum = new THREE.Frustum(),

		 // camera matrices cache

		_projScreenMatrix = new THREE.Matrix4(),

		_vector3 = new THREE.Vector3(),

		// light arrays cache

		_lights = {

			hash: '',

			ambient: [ 0, 0, 0 ],
			directional: [],
			point: [],
			spot: [],
			hemi: [],

			shadows: [],
			shadowsPointLight: 0

		},

		// info

		_infoMemory = {

			geometries: 0,
			textures: 0

		},

		_infoRender = {

			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

		this.info = {

			render: _infoRender,
			memory: _infoMemory,
			programs: null

		};


		// initialize

		var _gl;

		try {

			var attributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer
			};

			_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw 'Error creating WebGL context with your selected attributes.';

				} else {

					throw 'Error creating WebGL context.';

				}

			}

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error );

		}

		var extensions = new THREE.WebGLExtensions( _gl );

		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'ANGLE_instanced_arrays' );

		if ( extensions.get( 'OES_element_index_uint' ) ) {

			THREE.BufferGeometry.MaxIndex = 4294967296;

		}

		var capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );

		var state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );
		var properties = new THREE.WebGLProperties();
		var objects = new THREE.WebGLObjects( _gl, properties, this.info );
		var programCache = new THREE.WebGLPrograms( this, capabilities );
		var lightCache = new THREE.WebGLLights();

		this.info.programs = programCache.programs;

		var bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );
		var indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

		//

		function glClearColor( r, g, b, a ) {

			if ( _premultipliedAlpha === true ) {

				r *= a; g *= a; b *= a;

			}

			_gl.clearColor( r, g, b, a );

		}

		function setDefaultGLState() {

			state.init();

			_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		}

		function resetGLState() {

			_currentProgram = null;
			_currentCamera = null;

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;

			state.reset();

		}

		setDefaultGLState();

		this.context = _gl;
		this.capabilities = capabilities;
		this.extensions = extensions;
		this.state = state;

		// shadow map

		var shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );

		this.shadowMap = shadowMap;


		// Plugins

		var spritePlugin = new THREE.SpritePlugin( this, sprites );
		var lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			extensions.get( 'WEBGL_lose_context' ).loseContext();

		};

		this.getMaxAnisotropy = ( function () {

			var value;

			return function getMaxAnisotropy() {

				if ( value !== undefined ) return value;

				var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

				if ( extension !== null ) {

					value = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

				} else {

					value = 0;

				}

				return value;

			};

		} )();

		this.getPrecision = function () {

			return capabilities.precision;

		};

		this.getPixelRatio = function () {

			return pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value !== undefined ) pixelRatio = value;

		};

		this.getSize = function () {

			return {
				width: _width,
				height: _height
			};

		};

		this.setSize = function ( width, height, updateStyle ) {

			_width = width;
			_height = height;

			_canvas.width = width * pixelRatio;
			_canvas.height = height * pixelRatio;

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.setViewport = function ( x, y, width, height ) {

			_viewportX = x * pixelRatio;
			_viewportY = y * pixelRatio;

			_viewportWidth = width * pixelRatio;
			_viewportHeight = height * pixelRatio;

			_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );

		};

		this.getViewport = function ( dimensions ) {

			dimensions.x = _viewportX / pixelRatio;
			dimensions.y = _viewportY / pixelRatio;

			dimensions.z = _viewportWidth / pixelRatio;
			dimensions.w = _viewportHeight / pixelRatio;

		};

		this.setScissor = function ( x, y, width, height ) {

			_gl.scissor(
				x * pixelRatio,
				y * pixelRatio,
				width * pixelRatio,
				height * pixelRatio
			);

		};

		this.enableScissorTest = function ( boolean ) {

			state.setScissorTest( boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return _clearColor;

		};

		this.setClearColor = function ( color, alpha ) {

			_clearColor.set( color );

			_clearAlpha = alpha !== undefined ? alpha : 1;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.getClearAlpha = function () {

			return _clearAlpha;

		};

		this.setClearAlpha = function ( alpha ) {

			_clearAlpha = alpha;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
			if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear( bits );

		};

		this.clearColor = function () {

			_gl.clear( _gl.COLOR_BUFFER_BIT );

		};

		this.clearDepth = function () {

			_gl.clear( _gl.DEPTH_BUFFER_BIT );

		};

		this.clearStencil = function () {

			_gl.clear( _gl.STENCIL_BUFFER_BIT );

		};

		this.clearTarget = function ( renderTarget, color, depth, stencil ) {

			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		};

		// Reset

		this.resetGLState = resetGLState;

		this.dispose = function() {

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			resetGLState();
			setDefaultGLState();

			properties.clear();

		};

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			_infoMemory.textures --;


		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			_infoMemory.textures --;

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( texture.image && textureProperties.__image__webglTextureCube ) {

				// cube texture

				_gl.deleteTexture( textureProperties.__image__webglTextureCube );

			} else {

				// 2D texture

				if ( textureProperties.__webglInit === undefined ) return;

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			// remove all webgl properties
			properties.delete( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget || textureProperties.__webglTexture === undefined ) return;

			_gl.deleteTexture( textureProperties.__webglTexture );

			if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					_gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				_gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

			}

			properties.delete( renderTarget.texture );
			properties.delete( renderTarget );

		}

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.delete( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		this.renderBufferImmediate = function ( object, program, material ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

			var attributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

				if ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.shading === THREE.FlatShading ) {

					for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

						var array = object.normalArray;

						var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
						var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
						var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

						array[ i + 0 ] = nx;
						array[ i + 1 ] = ny;
						array[ i + 2 ] = nz;

						array[ i + 3 ] = nx;
						array[ i + 4 ] = ny;
						array[ i + 5 ] = nz;

						array[ i + 6 ] = nx;
						array[ i + 7 ] = ny;
						array[ i + 8 ] = nz;

					}

				}

				_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.normal );

				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasUvs && material.map ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.uv );

				_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.color );

				_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			setMaterial( material );

			var program = setProgram( camera, fog, material, object );

			var updateBuffers = false;
			var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;

			if ( geometryProgram !== _currentGeometryProgram ) {

				_currentGeometryProgram = geometryProgram;
				updateBuffers = true;

			}

			// morph targets

			var morphTargetInfluences = object.morphTargetInfluences;

			if ( morphTargetInfluences !== undefined ) {

				var activeInfluences = [];

				for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

					var influence = morphTargetInfluences[ i ];
					activeInfluences.push( [ influence, i ] );

				}

				activeInfluences.sort( numericalSort );

				if ( activeInfluences.length > 8 ) {

					activeInfluences.length = 8;

				}

				var morphAttributes = geometry.morphAttributes;

				for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

					var influence = activeInfluences[ i ];
					morphInfluences[ i ] = influence[ 0 ];

					if ( influence[ 0 ] !== 0 ) {

						var index = influence[ 1 ];

						if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
						if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );

					} else {

						if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
						if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );

					}

				}

				var uniforms = program.getUniforms();

				if ( uniforms.morphTargetInfluences !== null ) {

					_gl.uniform1fv( uniforms.morphTargetInfluences, morphInfluences );

				}

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;

			if ( material.wireframe === true ) {

				index = objects.getWireframeAttribute( geometry );

			}

			var renderer;

			if ( index !== null ) {

				renderer = indexedBufferRenderer;
				renderer.setIndex( index );

			} else {

				renderer = bufferRenderer;

			}

			if ( updateBuffers ) {

				setupVertexAttributes( material, program, geometry );

				if ( index !== null ) {

					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );

				}

			}

			//

			var dataStart = 0;
			var dataCount = Infinity;

			if ( index !== null ) {

				dataCount = index.count

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start;
			var rangeCount = geometry.drawRange.count;

			var groupStart = group !== null ? group.start : 0;
			var groupCount = group !== null ? group.count : Infinity;

			var drawStart = Math.max( dataStart, rangeStart, groupStart );
			var drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			//

			if ( object instanceof THREE.Mesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * pixelRatio );
					renderer.setMode( _gl.LINES );

				} else {

					switch ( object.drawMode ) {

						case THREE.TrianglesDrawMode:
							renderer.setMode( _gl.TRIANGLES );
							break;

						case THREE.TriangleStripDrawMode:
							renderer.setMode( _gl.TRIANGLE_STRIP );
							break;

						case THREE.TriangleFanDrawMode:
							renderer.setMode( _gl.TRIANGLE_FAN );
							break;

					}

				}


			} else if ( object instanceof THREE.Line ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

				state.setLineWidth( lineWidth * pixelRatio );

				if ( object instanceof THREE.LineSegments ) {

					renderer.setMode( _gl.LINES );

				} else {

					renderer.setMode( _gl.LINE_STRIP );

				}

			} else if ( object instanceof THREE.Points ) {

				renderer.setMode( _gl.POINTS );

			}

			if ( geometry instanceof THREE.InstancedBufferGeometry && geometry.maxInstancedCount > 0 ) {

				renderer.renderInstances( geometry, drawStart, drawCount );

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( material, program, geometry, startIndex ) {

			var extension;

			if ( geometry instanceof THREE.InstancedBufferGeometry ) {

				extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			if ( startIndex === undefined ) startIndex = 0;

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var size = geometryAttribute.itemSize;
						var buffer = objects.getAttributeBuffer( geometryAttribute );

						if ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data instanceof THREE.InstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );

						} else {

							if ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Sorting

		function numericalSort ( a, b ) {

			return b[ 0 ] - a[ 0 ];

		}

		function painterSortStable ( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} else if ( a.material.id !== b.material.id ) {

				return a.material.id - b.material.id;

			} else if ( a.z !== b.z ) {

				return a.z - b.z;

			} else {

				return a.id - b.id;

			}

		}

		function reversePainterSortStable ( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return a.id - b.id;

			}

		}

		// Rendering

		this.render = function ( scene, camera, renderTarget, forceClear ) {

			if ( camera instanceof THREE.Camera === false ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			var fog = scene.fog;

			// reset caching for this frame

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			// update camera matrices and frustum

			if ( camera.parent === null ) camera.updateMatrixWorld();

			camera.matrixWorldInverse.getInverse( camera.matrixWorld );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			lights.length = 0;

			opaqueObjectsLastIndex = - 1;
			transparentObjectsLastIndex = - 1;

			sprites.length = 0;
			lensFlares.length = 0;

			projectObject( scene, camera );

			opaqueObjects.length = opaqueObjectsLastIndex + 1;
			transparentObjects.length = transparentObjectsLastIndex + 1;

			if ( _this.sortObjects === true ) {

				opaqueObjects.sort( painterSortStable );
				transparentObjects.sort( reversePainterSortStable );

			}

			setupLights( lights, camera );

			//

			shadowMap.render( scene, camera );

			//

			_infoRender.calls = 0;
			_infoRender.vertices = 0;
			_infoRender.faces = 0;
			_infoRender.points = 0;

			this.setRenderTarget( renderTarget );

			if ( this.autoClear || forceClear ) {

				this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

			}

			//

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				renderObjects( opaqueObjects, camera, fog, overrideMaterial );
				renderObjects( transparentObjects, camera, fog, overrideMaterial );

			} else {

				// opaque pass (front-to-back order)

				state.setBlending( THREE.NoBlending );
				renderObjects( opaqueObjects, camera, fog );

				// transparent pass (back-to-front order)

				renderObjects( transparentObjects, camera, fog );

			}

			// custom render plugins (post pass)

			spritePlugin.render( scene, camera );
			lensFlarePlugin.render( scene, camera, _currentWidth, _currentHeight );

			// Generate mipmap if we're using any kind of mipmap filtering

			if ( renderTarget ) {

				var texture = renderTarget.texture;

				if ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&
						texture.minFilter !== THREE.NearestFilter &&
						texture.minFilter !== THREE.LinearFilter ) {

					updateRenderTargetMipmap( renderTarget );

				}

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.setDepthTest( true );
			state.setDepthWrite( true );
			state.setColorWrite( true );

			// _gl.finish();

		};

		function pushRenderItem( object, geometry, material, z, group ) {

			var array, index;

			// allocate the next position in the appropriate array

			if ( material.transparent ) {

				array = transparentObjects;
				index = ++ transparentObjectsLastIndex;

			} else {

				array = opaqueObjects;
				index = ++ opaqueObjectsLastIndex;

			}

			// recycle existing render item or grow the array

			var renderItem = array[ index ];

			if ( renderItem !== undefined ) {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.z = _vector3.z;
				renderItem.group = group;

			} else {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					z: _vector3.z,
					group: group
				};

				// assert( index === array.length );
				array.push( renderItem );

			}

		}

		function projectObject( object, camera ) {

			if ( object.visible === false ) return;

			if ( object.layers.test( camera.layers ) ) {

				if ( object instanceof THREE.Light ) {

					lights.push( object );

				} else if ( object instanceof THREE.Sprite ) {

					if ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {

						sprites.push( object );

					}

				} else if ( object instanceof THREE.LensFlare ) {

					lensFlares.push( object );

				} else if ( object instanceof THREE.ImmediateRenderObject ) {

					if ( _this.sortObjects === true ) {

						_vector3.setFromMatrixPosition( object.matrixWorld );
						_vector3.applyProjection( _projScreenMatrix );

					}

					pushRenderItem( object, null, object.material, _vector3.z, null );

				} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {

					if ( object instanceof THREE.SkinnedMesh ) {

						object.skeleton.update();

					}

					if ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {

						var material = object.material;

						if ( material.visible === true ) {

							if ( _this.sortObjects === true ) {

								_vector3.setFromMatrixPosition( object.matrixWorld );
								_vector3.applyProjection( _projScreenMatrix );

							}

							var geometry = objects.update( object );

							if ( material instanceof THREE.MeshFaceMaterial ) {

								var groups = geometry.groups;
								var materials = material.materials;

								for ( var i = 0, l = groups.length; i < l; i ++ ) {

									var group = groups[ i ];
									var groupMaterial = materials[ group.materialIndex ];

									if ( groupMaterial.visible === true ) {

										pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );

									}

								}

							} else {

								pushRenderItem( object, geometry, material, _vector3.z, null );

							}

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera );

			}

		}

		function renderObjects( renderList, camera, fog, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

				if ( object instanceof THREE.ImmediateRenderObject ) {

					setMaterial( material );

					var program = setProgram( camera, fog, material, object );

					_currentGeometryProgram = '';

					object.render( function ( object ) {

						_this.renderBufferImmediate( object, program, material );

					} );

				} else {

					_this.renderBufferDirect( camera, fog, geometry, material, object, group );

				}

			}

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var parameters = programCache.getParameters( material, _lights, fog, object );
			var code = programCache.getProgramCode( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.code !== code ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = THREE.ShaderLib[ parameters.shaderID ];

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: THREE.UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.__webglShader = materialProperties.__webglShader;

				program = programCache.acquireProgram( material, parameters, code );

				materialProperties.program = program;
				material.program = program;

			}

			var attributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( attributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( attributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			materialProperties.uniformsList = [];

			var uniforms = materialProperties.__webglShader.uniforms,
				uniformLocations = materialProperties.program.getUniforms();

			for ( var u in uniforms ) {

				var location = uniformLocations[ u ];

				if ( location ) {

					materialProperties.uniformsList.push( [ materialProperties.__webglShader.uniforms[ u ], location ] );

				}

			}

			if ( material instanceof THREE.MeshPhongMaterial ||
					material instanceof THREE.MeshLambertMaterial ||
					material instanceof THREE.MeshStandardMaterial ||
					material.lights ) {

				// store the light setup it was created for

				materialProperties.lightsHash = _lights.hash;

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = _lights.ambient;
				uniforms.directionalLights.value = _lights.directional;
				uniforms.pointLights.value = _lights.point;
				uniforms.spotLights.value = _lights.spot;
				uniforms.hemisphereLights.value = _lights.hemi;

			}

			// detect dynamic uniforms

			materialProperties.hasDynamicUniforms = false;

			for ( var j = 0, jl = materialProperties.uniformsList.length; j < jl; j ++ ) {

				var uniform = materialProperties.uniformsList[ j ][ 0 ];

				if ( uniform.dynamic === true ) {

					materialProperties.hasDynamicUniforms = true;
					break;

				}

			}

		}

		function setMaterial( material ) {

			setMaterialFaces( material );

			if ( material.transparent === true ) {

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha );

			} else {

				state.setBlending( THREE.NoBlending );

			}

			state.setDepthFunc( material.depthFunc );
			state.setDepthTest( material.depthTest );
			state.setDepthWrite( material.depthWrite );
			state.setColorWrite( material.colorWrite );
			state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		function setMaterialFaces( material ) {

			material.side !== THREE.DoubleSide ? state.enable( _gl.CULL_FACE ) : state.disable( _gl.CULL_FACE );
			state.setFlipSided( material.side === THREE.BackSide );

		}

		function setProgram( camera, fog, material, object ) {

			_usedTextureUnits = 0;

			var materialProperties = properties.get( material );

			if ( materialProperties.program === undefined ) {

				material.needsUpdate = true;

			}

			if ( materialProperties.lightsHash !== undefined &&
				materialProperties.lightsHash !== _lights.hash ) {

				material.needsUpdate = true;

			}

			if ( material.needsUpdate ) {

				initMaterial( material, fog, object );
				material.needsUpdate = false;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.__webglShader.uniforms;

			if ( program.id !== _currentProgram ) {

				_gl.useProgram( program.program );
				_currentProgram = program.id;

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || camera !== _currentCamera ) {

				_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

				if ( capabilities.logarithmicDepthBuffer ) {

					_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}


				if ( camera !== _currentCamera ) {

					_currentCamera = camera;

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material instanceof THREE.ShaderMaterial ||
					 material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshStandardMaterial ||
					 material.envMap ) {

					if ( p_uniforms.cameraPosition !== undefined ) {

						_vector3.setFromMatrixPosition( camera.matrixWorld );
						_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );

					}

				}

				if ( material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshBasicMaterial ||
					 material instanceof THREE.MeshStandardMaterial ||
					 material instanceof THREE.ShaderMaterial ||
					 material.skinning ) {

					if ( p_uniforms.viewMatrix !== undefined ) {

						_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );

					}

				}

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				if ( object.bindMatrix && p_uniforms.bindMatrix !== undefined ) {

					_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );

				}

				if ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== undefined ) {

					_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );

				}

				if ( capabilities.floatVertexTextures && object.skeleton && object.skeleton.useVertexTexture ) {

					if ( p_uniforms.boneTexture !== undefined ) {

						var textureUnit = getTextureUnit();

						_gl.uniform1i( p_uniforms.boneTexture, textureUnit );
						_this.setTexture( object.skeleton.boneTexture, textureUnit );

					}

					if ( p_uniforms.boneTextureWidth !== undefined ) {

						_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );

					}

					if ( p_uniforms.boneTextureHeight !== undefined ) {

						_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );

					}

				} else if ( object.skeleton && object.skeleton.boneMatrices ) {

					if ( p_uniforms.boneGlobalMatrices !== undefined ) {

						_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );

					}

				}

			}

			if ( refreshMaterial ) {

				if ( material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshStandardMaterial ||
					 material.lights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material instanceof THREE.MeshBasicMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshStandardMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				}

				// refresh single material specific uniforms

				if ( material instanceof THREE.LineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

				} else if ( material instanceof THREE.LineDashedMaterial ) {

					refreshUniformsLine( m_uniforms, material );
					refreshUniformsDash( m_uniforms, material );

				} else if ( material instanceof THREE.PointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material instanceof THREE.MeshPhongMaterial ) {

					refreshUniformsPhong( m_uniforms, material );

				} else if ( material instanceof THREE.MeshStandardMaterial ) {

					refreshUniformsStandard( m_uniforms, material );

				} else if ( material instanceof THREE.MeshDepthMaterial ) {

					m_uniforms.mNear.value = camera.near;
					m_uniforms.mFar.value = camera.far;
					m_uniforms.opacity.value = material.opacity;

				} else if ( material instanceof THREE.MeshNormalMaterial ) {

					m_uniforms.opacity.value = material.opacity;

				}

				if ( shadowMap.enabled ) {

					if ( object.receiveShadow && ! material._shadowPass ) {

						refreshUniformsShadow( m_uniforms, camera );

					}

				}

				// load common uniforms

				loadUniformsGeneric( materialProperties.uniformsList );

			}

			loadUniformsMatrices( p_uniforms, object );

			if ( p_uniforms.modelMatrix !== undefined ) {

				_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );

			}

			if ( materialProperties.hasDynamicUniforms === true ) {

				updateDynamicUniforms( materialProperties.uniformsList, object, camera );

			}

			return program;

		}

		function updateDynamicUniforms ( uniforms, object, camera ) {

			var dynamicUniforms = [];

			for ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {

				var uniform = uniforms[ j ][ 0 ];
				var onUpdateCallback = uniform.onUpdateCallback;

				if ( onUpdateCallback !== undefined ) {

					onUpdateCallback.bind( uniform )( object, camera );
					dynamicUniforms.push( uniforms[ j ] );

				}

			}

			loadUniformsGeneric( dynamicUniforms );

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon ( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			uniforms.diffuse.value = material.color;

			if ( material.emissive ) {

				uniforms.emissive.value = material.emissive;

			}

			uniforms.map.value = material.map;
			uniforms.specularMap.value = material.specularMap;
			uniforms.alphaMap.value = material.alphaMap;

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				if ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				var offset = uvScaleMap.offset;
				var repeat = uvScaleMap.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

			uniforms.envMap.value = material.envMap;
			uniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		function refreshUniformsLine ( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash ( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints ( uniforms, material ) {

			uniforms.psColor.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * pixelRatio;
			uniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.

			uniforms.map.value = material.map;

			if ( material.map !== null ) {

				var offset = material.map.offset;
				var repeat = material.map.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

		}

		function refreshUniformsFog ( uniforms, fog ) {

			uniforms.fogColor.value = fog.color;

			if ( fog instanceof THREE.Fog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog instanceof THREE.FogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsPhong ( uniforms, material ) {

			uniforms.specular.value = material.specular;
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsStandard ( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate ( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		function refreshUniformsShadow ( uniforms, camera ) {

			if ( uniforms.shadowMatrix ) {

				var shadows = _lights.shadows;

				for ( var i = 0, l = shadows.length; i < l; i ++ ) {

					var light = shadows[ i ];
					var shadow = light.shadow;

					if ( light instanceof THREE.PointLight ) {

						// for point lights we set the shadow matrix to be a translation-only matrix
						// equal to inverse of the light's position
						_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
						shadow.matrix.identity().setPosition( _vector3 );

						// for point lights we set the sign of the shadowDarkness uniform to be negative
						uniforms.shadowDarkness.value[ i ] = - shadow.darkness;

					} else {

						uniforms.shadowDarkness.value[ i ] = shadow.darkness;

					}

					uniforms.shadowBias.value[ i ] = shadow.bias;
					uniforms.shadowMap.value[ i ] = shadow.map;
					uniforms.shadowMapSize.value[ i ] = shadow.mapSize;
					uniforms.shadowMatrix.value[ i ] = shadow.matrix;

				}

			}

		}

		// Uniforms (load to GPU)

		function loadUniformsMatrices ( uniforms, object ) {

			_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object.modelViewMatrix.elements );

			if ( uniforms.normalMatrix ) {

				_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object.normalMatrix.elements );

			}

		}

		function getTextureUnit() {

			var textureUnit = _usedTextureUnits;

			if ( textureUnit >= capabilities.maxTextures ) {

				console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

			}

			_usedTextureUnits += 1;

			return textureUnit;

		}

		function loadUniformsGeneric ( uniforms ) {

			var texture, textureUnit;

			for ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {

				var uniform = uniforms[ j ][ 0 ];

				// needsUpdate property is not added to all uniforms.
				if ( uniform.needsUpdate === false ) continue;

				var type = uniform.type;
				var value = uniform.value;
				var location = uniforms[ j ][ 1 ];

				switch ( type ) {

					case '1i':
						_gl.uniform1i( location, value );
						break;

					case '1f':
						_gl.uniform1f( location, value );
						break;

					case '2f':
						_gl.uniform2f( location, value[ 0 ], value[ 1 ] );
						break;

					case '3f':
						_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );
						break;

					case '4f':
						_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );
						break;

					case '1iv':
						_gl.uniform1iv( location, value );
						break;

					case '3iv':
						_gl.uniform3iv( location, value );
						break;

					case '1fv':
						_gl.uniform1fv( location, value );
						break;

					case '2fv':
						_gl.uniform2fv( location, value );
						break;

					case '3fv':
						_gl.uniform3fv( location, value );
						break;

					case '4fv':
						_gl.uniform4fv( location, value );
						break;

					case 'Matrix2fv':
						_gl.uniformMatrix2fv( location, false, value );
						break;

					case 'Matrix3fv':
						_gl.uniformMatrix3fv( location, false, value );
						break;

					case 'Matrix4fv':
						_gl.uniformMatrix4fv( location, false, value );
						break;

					//

					case 'i':

						// single integer
						_gl.uniform1i( location, value );

						break;

					case 'f':

						// single float
						_gl.uniform1f( location, value );

						break;

					case 'v2':

						// single THREE.Vector2
						_gl.uniform2f( location, value.x, value.y );

						break;

					case 'v3':

						// single THREE.Vector3
						_gl.uniform3f( location, value.x, value.y, value.z );

						break;

					case 'v4':

						// single THREE.Vector4
						_gl.uniform4f( location, value.x, value.y, value.z, value.w );

						break;

					case 'c':

						// single THREE.Color
						_gl.uniform3f( location, value.r, value.g, value.b );

						break;

					/*
					case 's':

						// TODO: Optimize this.
						for( var propertyName in uniform.properties ) {

							var property = uniform.properties[ propertyName ];
							var locationProperty =  location[ propertyName ];
							var valueProperty = value[ propertyName ];

							switch( property.type ) {
								case 'i':
									_gl.uniform1i( locationProperty, valueProperty );
									break;
								case 'f':
									_gl.uniform1f( locationProperty, valueProperty );
									break;
								case 'v2':
									_gl.uniform2f( locationProperty, valueProperty.x, valueProperty.y );
									break;
								case 'v3':
									_gl.uniform3f( locationProperty, valueProperty.x, valueProperty.y, valueProperty.z );
									break;
								case 'v4':
									_gl.uniform4f( locationProperty, valueProperty.x, valueProperty.y, valueProperty.z, valueProperty.w );
									break;
								case 'c':
									_gl.uniform3f( locationProperty, valueProperty.r, valueProperty.g, valueProperty.b );
									break;
							};

						}

						break;
					*/

					case 'sa':

						// TODO: Optimize this.
						for ( var i = 0; i < value.length; i ++ ) {

							for ( var propertyName in uniform.properties ) {

								var property = uniform.properties[ propertyName ];
								var locationProperty =  location[ i ][ propertyName ];
								var valueProperty = value[ i ][ propertyName ];

								switch ( property.type ) {
									case 'i':
										_gl.uniform1i( locationProperty, valueProperty );
										break;
									case 'f':
										_gl.uniform1f( locationProperty, valueProperty );
										break;
									case 'v2':
										_gl.uniform2f( locationProperty, valueProperty.x, valueProperty.y );
										break;
									case 'v3':
										_gl.uniform3f( locationProperty, valueProperty.x, valueProperty.y, valueProperty.z );
										break;
									case 'v4':
										_gl.uniform4f( locationProperty, valueProperty.x, valueProperty.y, valueProperty.z, valueProperty.w );
										break;
									case 'c':
										_gl.uniform3f( locationProperty, valueProperty.r, valueProperty.g, valueProperty.b );
										break;
								};

							}

						}

						break;

					case 'iv1':

						// flat array of integers (JS or typed array)
						_gl.uniform1iv( location, value );

						break;

					case 'iv':

						// flat array of integers with 3 x N size (JS or typed array)
						_gl.uniform3iv( location, value );

						break;

					case 'fv1':

						// flat array of floats (JS or typed array)
						_gl.uniform1fv( location, value );

						break;

					case 'fv':

						// flat array of floats with 3 x N size (JS or typed array)
						_gl.uniform3fv( location, value );

						break;

					case 'v2v':

						// array of THREE.Vector2

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 2 * value.length );

						}

						for ( var i = 0, i2 = 0, il = value.length; i < il; i ++, i2 += 2 ) {

							uniform._array[ i2 + 0 ] = value[ i ].x;
							uniform._array[ i2 + 1 ] = value[ i ].y;

						}

						_gl.uniform2fv( location, uniform._array );

						break;

					case 'v3v':

						// array of THREE.Vector3

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 3 * value.length );

						}

						for ( var i = 0, i3 = 0, il = value.length; i < il; i ++, i3 += 3 ) {

							uniform._array[ i3 + 0 ] = value[ i ].x;
							uniform._array[ i3 + 1 ] = value[ i ].y;
							uniform._array[ i3 + 2 ] = value[ i ].z;

						}

						_gl.uniform3fv( location, uniform._array );

						break;

					case 'v4v':

						// array of THREE.Vector4

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 4 * value.length );

						}

						for ( var i = 0, i4 = 0, il = value.length; i < il; i ++, i4 += 4 ) {

							uniform._array[ i4 + 0 ] = value[ i ].x;
							uniform._array[ i4 + 1 ] = value[ i ].y;
							uniform._array[ i4 + 2 ] = value[ i ].z;
							uniform._array[ i4 + 3 ] = value[ i ].w;

						}

						_gl.uniform4fv( location, uniform._array );

						break;

					case 'm2':

						// single THREE.Matrix2
						_gl.uniformMatrix2fv( location, false, value.elements );

						break;

					case 'm3':

						// single THREE.Matrix3
						_gl.uniformMatrix3fv( location, false, value.elements );

						break;

					case 'm3v':

						// array of THREE.Matrix3

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 9 * value.length );

						}

						for ( var i = 0, il = value.length; i < il; i ++ ) {

							value[ i ].flattenToArrayOffset( uniform._array, i * 9 );

						}

						_gl.uniformMatrix3fv( location, false, uniform._array );

						break;

					case 'm4':

						// single THREE.Matrix4
						_gl.uniformMatrix4fv( location, false, value.elements );

						break;

					case 'm4v':

						// array of THREE.Matrix4

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 16 * value.length );

						}

						for ( var i = 0, il = value.length; i < il; i ++ ) {

							value[ i ].flattenToArrayOffset( uniform._array, i * 16 );

						}

						_gl.uniformMatrix4fv( location, false, uniform._array );

						break;

					case 't':

						// single THREE.Texture (2d or cube)

						texture = value;
						textureUnit = getTextureUnit();

						_gl.uniform1i( location, textureUnit );

						if ( ! texture ) continue;

						if ( texture instanceof THREE.CubeTexture ||
							 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

							// CompressedTexture can have Array in image :/

							setCubeTexture( texture, textureUnit );

						} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {

							setCubeTextureDynamic( texture.texture, textureUnit );

						} else if ( texture instanceof THREE.WebGLRenderTarget ) {

							_this.setTexture( texture.texture, textureUnit );

						} else {

							_this.setTexture( texture, textureUnit );

						}

						break;

					case 'tv':

						// array of THREE.Texture (2d or cube)

						if ( uniform._array === undefined ) {

							uniform._array = [];

						}

						for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {

							uniform._array[ i ] = getTextureUnit();

						}

						_gl.uniform1iv( location, uniform._array );

						for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {

							texture = uniform.value[ i ];
							textureUnit = uniform._array[ i ];

							if ( ! texture ) continue;

							if ( texture instanceof THREE.CubeTexture ||
								 ( texture.image instanceof Array && texture.image.length === 6 ) ) {

								// CompressedTexture can have Array in image :/

								setCubeTexture( texture, textureUnit );

							} else if ( texture instanceof THREE.WebGLRenderTarget ) {

								_this.setTexture( texture.texture, textureUnit );

							} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {

								setCubeTextureDynamic( texture.texture, textureUnit );

							} else {

								_this.setTexture( texture, textureUnit );

							}

						}

						break;

					default:

						console.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );

				}

			}

		}

		function setupLights ( lights, camera ) {

			var l, ll, light,
			r = 0, g = 0, b = 0,
			color,
			intensity,
			distance,

			viewMatrix = camera.matrixWorldInverse,

			directionalLength = 0,
			pointLength = 0,
			spotLength = 0,
			hemiLength = 0,

			shadowsLength = 0;

			_lights.shadowsPointLight = 0;

			for ( l = 0, ll = lights.length; l < ll; l ++ ) {

				light = lights[ l ];

				color = light.color;
				intensity = light.intensity;
				distance = light.distance;

				if ( light instanceof THREE.AmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light instanceof THREE.DirectionalLight ) {

					var uniforms = lightCache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );

					if ( light.castShadow ) {

						uniforms.shadow = shadowsLength;

						_lights.shadows[ shadowsLength ++ ] = light;

					} else {

						uniforms.shadow = - 1;

					}

					_lights.directional[ directionalLength ++ ] = uniforms;

				} else if ( light instanceof THREE.PointLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					if ( light.castShadow ) {

						uniforms.shadow = shadowsLength;

						_lights.shadows[ shadowsLength ++ ] = light;
						_lights.shadowsPointLight ++;

					} else {

						uniforms.shadow = - 1;

					}

					_lights.point[ pointLength ++ ] = uniforms;

				} else if ( light instanceof THREE.SpotLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.angleCos = Math.cos( light.angle );
					uniforms.exponent = light.exponent;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					if ( light.castShadow ) {

						uniforms.shadow = shadowsLength;

						_lights.shadows[ shadowsLength ++ ] = light;

					} else {

						uniforms.shadow = - 1;

					}

					_lights.spot[ spotLength ++ ] = uniforms;

				} else if ( light instanceof THREE.HemisphereLight ) {

					var uniforms = lightCache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					_lights.hemi[ hemiLength ++ ] = uniforms;

				}

			}

			_lights.ambient[ 0 ] = r;
			_lights.ambient[ 1 ] = g;
			_lights.ambient[ 2 ] = b;

			_lights.directional.length = directionalLength;
			_lights.point.length = pointLength;
			_lights.spot.length = spotLength;
			_lights.hemi.length = hemiLength;

			_lights.shadows.length = shadowsLength;

			_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + shadowsLength;

		}

		// GL state setting

		this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

			if ( cullFace === THREE.CullFaceNone ) {

				state.disable( _gl.CULL_FACE );

			} else {

				if ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {

					_gl.frontFace( _gl.CW );

				} else {

					_gl.frontFace( _gl.CCW );

				}

				if ( cullFace === THREE.CullFaceBack ) {

					_gl.cullFace( _gl.BACK );

				} else if ( cullFace === THREE.CullFaceFront ) {

					_gl.cullFace( _gl.FRONT );

				} else {

					_gl.cullFace( _gl.FRONT_AND_BACK );

				}

				state.enable( _gl.CULL_FACE );

			}

		};

		// Textures

		function setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {

			var extension;

			if ( isImagePowerOfTwo ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

				}

			}

			extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				_infoMemory.textures ++;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			texture.image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

			if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false ) {

				texture.image = makePowerOfTwo( texture.image );

			}

			var image = texture.image,
			isImagePowerOfTwo = isPowerOfTwo( image ),
			glFormat = paramThreeToGL( texture.format ),
			glType = paramThreeToGL( texture.type );

			setTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );

			var mipmap, mipmaps = texture.mipmaps;

			if ( texture instanceof THREE.DataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

				}

			} else if ( texture instanceof THREE.CompressedTexture ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

							state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

						}

					} else {

						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );

				}

			}

			if ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		this.setTexture = function ( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );
					return;

				}

				if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );
					return;

				}

				uploadTexture( textureProperties, texture, slot );

				return;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		};

		function clampToMaxSize ( image, maxSize ) {

			if ( image.width > maxSize || image.height > maxSize ) {

				// Warning: Scaling through the canvas will only work with images that use
				// premultiplied alpha.

				var scale = maxSize / Math.max( image.width, image.height );

				var canvas = document.createElement( 'canvas' );
				canvas.width = Math.floor( image.width * scale );
				canvas.height = Math.floor( image.height * scale );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;
			if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;

			return false;

		}

		function makePowerOfTwo( image ) {

			if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

				var canvas = document.createElement( 'canvas' );
				canvas.width = THREE.Math.nearestPowerOfTwo( image.width );
				canvas.height = THREE.Math.nearestPowerOfTwo( image.height );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function setCubeTexture ( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.image.length === 6 ) {

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					if ( ! textureProperties.__image__webglTextureCube ) {

						texture.addEventListener( 'dispose', onTextureDispose );

						textureProperties.__image__webglTextureCube = _gl.createTexture();

						_infoMemory.textures ++;

					}

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

					var isCompressed = texture instanceof THREE.CompressedTexture;
					var isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;

					var cubeImage = [];

					for ( var i = 0; i < 6; i ++ ) {

						if ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {

							cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

						} else {

							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

						}

					}

					var image = cubeImage[ 0 ],
					isImagePowerOfTwo = isPowerOfTwo( image ),
					glFormat = paramThreeToGL( texture.format ),
					glType = paramThreeToGL( texture.type );

					setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed ) {

							if ( isDataTexture ) {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

							}

						} else {

							var mipmap, mipmaps = cubeImage[ i ].mipmaps;

							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

								mipmap = mipmaps[ j ];

								if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									} else {

										console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()" );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

					if ( texture.generateMipmaps && isImagePowerOfTwo ) {

						_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

					}

					textureProperties.__version = texture.version;

					if ( texture.onUpdate ) texture.onUpdate( texture );

				} else {

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				}

			}

		}

		function setCubeTextureDynamic ( texture, slot ) {

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = paramThreeToGL( renderTarget.texture.format );
			var glType = paramThreeToGL( renderTarget.texture.type );
			state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage ( renderbuffer, renderTarget ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				// FIXME: We don't support !depth !stencil
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );

			if ( isCube ) {

				renderTargetProperties.__webglDepthbuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

				}

			} else {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

			}

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			_infoMemory.textures ++;

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
			var isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height );
			var glFormat = paramThreeToGL( renderTarget.texture.format );
			var glType = paramThreeToGL( renderTarget.texture.type );

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );
				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

				}

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
				state.bindTexture( _gl.TEXTURE_2D, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		this.setRenderTarget = function ( renderTarget ) {

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				setupRenderTarget( renderTarget );

			}

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
			var framebuffer, width, height, vx, vy;

			if ( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );

				if ( isCube ) {

					framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

				} else {

					framebuffer = renderTargetProperties.__webglFramebuffer;

				}

				width = renderTarget.width;
				height = renderTarget.height;

				vx = 0;
				vy = 0;

			} else {

				framebuffer = null;

				width = _viewportWidth;
				height = _viewportHeight;

				vx = _viewportX;
				vy = _viewportY;

			}

			if ( framebuffer !== _currentFramebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_gl.viewport( vx, vy, width, height );

				_currentFramebuffer = framebuffer;

			}

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, 0 );

			}

			_currentWidth = width;
			_currentHeight = height;

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

			if ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;

					if ( texture.format !== THREE.RGBAFormat
						&& paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( texture.type !== THREE.UnsignedByteType
						&& paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE )
						&& ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) )
						&& ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

						_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

					}

				}

			}

		};

		function updateRenderTargetMipmap( renderTarget ) {

			var target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
			var texture = properties.get( renderTarget.texture ).__webglTexture;

			state.bindTexture( target, texture );
			_gl.generateMipmap( target );
			state.bindTexture( target, null );

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback ( f ) {

			if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		// Map three.js constants to WebGL constants

		function paramThreeToGL ( p ) {

			var extension;

			if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
			if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
			if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

			if ( p === THREE.NearestFilter ) return _gl.NEAREST;
			if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
			if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

			if ( p === THREE.LinearFilter ) return _gl.LINEAR;
			if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
			if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

			if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
			if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
			if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

			if ( p === THREE.ByteType ) return _gl.BYTE;
			if ( p === THREE.ShortType ) return _gl.SHORT;
			if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
			if ( p === THREE.IntType ) return _gl.INT;
			if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
			if ( p === THREE.FloatType ) return _gl.FLOAT;

			extension = extensions.get( 'OES_texture_half_float' );

			if ( extension !== null ) {

				if ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;

			}

			if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
			if ( p === THREE.RGBFormat ) return _gl.RGB;
			if ( p === THREE.RGBAFormat ) return _gl.RGBA;
			if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
			if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;

			if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
			if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
			if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

			if ( p === THREE.ZeroFactor ) return _gl.ZERO;
			if ( p === THREE.OneFactor ) return _gl.ONE;
			if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
			if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
			if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
			if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
			if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
			if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

			if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
			if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
			if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

			if ( extension !== null ) {

				if ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
				if ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
				if ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
				if ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

			}

			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			if ( extension !== null ) {

				if ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

			}

			extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				if ( p === THREE.MinEquation ) return extension.MIN_EXT;
				if ( p === THREE.MaxEquation ) return extension.MAX_EXT;

			}

			return 0;

		}

	};

	// File:src/renderers/WebGLRenderTarget.js

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	THREE.WebGLRenderTarget = function ( width, height, options ) {

		this.uuid = THREE.Math.generateUUID();

		this.width = width;
		this.height = height;

		options = options || {};

		if ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;

		this.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy );

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;

	};

	THREE.WebGLRenderTarget.prototype = {

		constructor: THREE.WebGLRenderTarget,

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.dispose();

			}

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;

			this.shareDepthFrom = source.shareDepthFrom;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );

	// File:src/renderers/WebGLRenderTargetCube.js

	/**
	 * @author alteredq / http://alteredqualia.com
	 */

	THREE.WebGLRenderTargetCube = function ( width, height, options ) {

		THREE.WebGLRenderTarget.call( this, width, height, options );

		this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5

	};

	THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );
	THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;

	// File:src/renderers/webgl/WebGLBufferRenderer.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			_gl.drawArrays( mode, start, count );

			_infoRender.calls ++;
			_infoRender.vertices += count;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;

		}

		function renderInstances( geometry ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			var position = geometry.attributes.position;

			if ( position instanceof THREE.InterleavedBufferAttribute ) {

				extension.drawArraysInstancedANGLE( mode, 0, position.data.count, geometry.maxInstancedCount );

			} else {

				extension.drawArraysInstancedANGLE( mode, 0, position.count, geometry.maxInstancedCount );

			}

		}

		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;

	};

	// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, size;

		function setIndex( index ) {

			if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {

				type = _gl.UNSIGNED_INT;
				size = 4;

			} else {

				type = _gl.UNSIGNED_SHORT;
				size = 2;

			}

		}

		function render( start, count ) {

			_gl.drawElements( mode, count, type, start * size );

			_infoRender.calls ++;
			_infoRender.vertices += count;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;

		}

		function renderInstances( geometry, start, count ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			var index = geometry.index;

			extension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );

		}

		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;

	};

	// File:src/renderers/webgl/WebGLExtensions.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLExtensions = function ( gl ) {

		var extensions = {};

		this.get = function ( name ) {

			if ( extensions[ name ] !== undefined ) {

				return extensions[ name ];

			}

			var extension;

			switch ( name ) {

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;

				default:
					extension = gl.getExtension( name );

			}

			if ( extension === null ) {

				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

			}

			extensions[ name ] = extension;

			return extension;

		};

	};

	// File:src/renderers/webgl/WebGLCapabilities.js

	THREE.WebGLCapabilities = function ( gl, extensions, parameters ) {

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		this.getMaxPrecision = getMaxPrecision;

		this.precision = parameters.precision !== undefined ? parameters.precision : 'highp',
		this.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;

		this.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		this.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		this.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		this.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		this.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		this.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		this.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		this.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		this.vertexTextures = this.maxVertexTextures > 0;
		this.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
		this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;

		var _maxPrecision = getMaxPrecision( this.precision );

		if ( _maxPrecision !== this.precision ) {

			console.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );
			this.precision = _maxPrecision;

		}

		if ( this.logarithmicDepthBuffer ) {

			this.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );

		}

	};

	// File:src/renderers/webgl/WebGLGeometries.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLGeometries = function ( gl, properties, info ) {

		var geometries = {};

		function get( object ) {

			var geometry = object.geometry;

			if ( geometries[ geometry.id ] !== undefined ) {

				return geometries[ geometry.id ];

			}

			geometry.addEventListener( 'dispose', onGeometryDispose );

			var buffergeometry;

			if ( geometry instanceof THREE.BufferGeometry ) {

				buffergeometry = geometry;

			} else if ( geometry instanceof THREE.Geometry ) {

				if ( geometry._bufferGeometry === undefined ) {

					geometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );

				}

				buffergeometry = geometry._bufferGeometry;

			}

			geometries[ geometry.id ] = buffergeometry;

			info.memory.geometries ++;

			return buffergeometry;

		}

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry.index !== null ) {

				deleteAttribute( buffergeometry.index );

			}

			deleteAttributes( buffergeometry.attributes );

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			var property = properties.get( geometry );
			if ( property.wireframe ) deleteAttribute( property.wireframe );

			properties.delete( geometry );

			info.memory.geometries --;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function deleteAttribute( attribute ) {

			var buffer = getAttributeBuffer( attribute );

			if ( buffer !== undefined ) {

				gl.deleteBuffer( buffer );
				removeAttributeBuffer( attribute );

			}

		}

		function deleteAttributes( attributes ) {

			for ( var name in attributes ) {

				deleteAttribute( attributes[ name ] );

			}

		}

		function removeAttributeBuffer( attribute ) {

			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

				properties.delete( attribute.data );

			} else {

				properties.delete( attribute );

			}

		}

		this.get = get;

	};

	// File:src/renderers/webgl/WebGLLights.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLLights = function () {

		var lights = {};

		this.get = function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			var uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						direction: new THREE.Vector3(),
						color: new THREE.Color(),
						shadow: -1
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new THREE.Vector3(),
						color: new THREE.Color(),
						distance: 0,
						decay: 0,
						shadow: -1
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new THREE.Vector3(),
						direction: new THREE.Vector3(),
						color: new THREE.Color(),
						distance: 0,
						decay: 0,
						angleCos: 0
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new THREE.Vector3(),
						skyColor: new THREE.Color(),
						groundColor: new THREE.Color()
					};
					break;

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		};

	};

	// File:src/renderers/webgl/WebGLObjects.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLObjects = function ( gl, properties, info ) {

		var geometries = new THREE.WebGLGeometries( gl, properties, info );

		//

		function update( object ) {

			// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.

			var geometry = geometries.get( object );

			if ( object.geometry instanceof THREE.Geometry ) {

				geometry.updateFromObject( object );

			}

			var index = geometry.index;
			var attributes = geometry.attributes;

			if ( index !== null ) {

				updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			for ( var name in attributes ) {

				updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					updateAttribute( array[ i ], gl.ARRAY_BUFFER );

				}

			}

			return geometry;

		}

		function updateAttribute( attribute, bufferType ) {

			var data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;

			var attributeProperties = properties.get( data );

			if ( attributeProperties.__webglBuffer === undefined ) {

				createBuffer( attributeProperties, data, bufferType );

			} else if ( attributeProperties.version !== data.version ) {

				updateBuffer( attributeProperties, data, bufferType );

			}

		}

		function createBuffer( attributeProperties, data, bufferType ) {

			attributeProperties.__webglBuffer = gl.createBuffer();
			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

			gl.bufferData( bufferType, data.array, usage );

			attributeProperties.version = data.version;

		}

		function updateBuffer( attributeProperties, data, bufferType ) {

			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			if ( data.dynamic === false || data.updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, data.array );

			} else if ( data.updateRange.count === 0 ) {

				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

			} else {

				gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
								  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );

				data.updateRange.count = 0; // reset range

			}

			attributeProperties.version = data.version;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function getWireframeAttribute( geometry ) {

			var property = properties.get( geometry );

			if ( property.wireframe !== undefined ) {

				return property.wireframe;

			}

			var indices = [];

			var index = geometry.index;
			var attributes = geometry.attributes;
			var position = attributes.position;

			// console.time( 'wireframe' );

			if ( index !== null ) {

				var edges = {};
				var array = index.array;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					if ( checkEdge( edges, a, b ) ) indices.push( a, b );
					if ( checkEdge( edges, b, c ) ) indices.push( b, c );
					if ( checkEdge( edges, c, a ) ) indices.push( c, a );

				}

			} else {

				var array = attributes.position.array;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			// console.timeEnd( 'wireframe' );

			var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
			var attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );

			updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );

			property.wireframe = attribute;

			return attribute;

		}

		function checkEdge( edges, a, b ) {

			if ( a > b ) {

				var tmp = a;
				a = b;
				b = tmp;

			}

			var list = edges[ a ];

			if ( list === undefined ) {

				edges[ a ] = [ b ];
				return true;

			} else if ( list.indexOf( b ) === -1 ) {

				list.push( b );
				return true;

			}

			return false;

		}

		this.getAttributeBuffer = getAttributeBuffer;
		this.getWireframeAttribute = getWireframeAttribute;

		this.update = update;

	};

	// File:src/renderers/webgl/WebGLProgram.js

	THREE.WebGLProgram = ( function () {

		var programIdCount = 0;

		// TODO: Combine the regex
		var structRe = /^([\w\d_]+)\.([\w\d_]+)$/;
		var arrayStructRe = /^([\w\d_]+)\[(\d+)\]\.([\w\d_]+)$/;
		var arrayRe = /^([\w\d_]+)\[0\]$/;

		function generateExtensions( extensions, parameters, rendererExtensions ) {

			extensions = extensions || {};

			var chunks = [
				( extensions.derivatives || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
				( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
				( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
				( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',
			];

			return chunks.filter( filterEmptyLine ).join( '\n' );

		}

		function generateDefines( defines ) {

			var chunks = [];

			for ( var name in defines ) {

				var value = defines[ name ];

				if ( value === false ) continue;

				chunks.push( '#define ' + name + ' ' + value );

			}

			return chunks.join( '\n' );

		}

		function fetchUniformLocations( gl, program, identifiers ) {

			var uniforms = {};

			var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

			for ( var i = 0; i < n; i ++ ) {

				var info = gl.getActiveUniform( program, i );
				var name = info.name;
				var location = gl.getUniformLocation( program, name );

				//console.log("THREE.WebGLProgram: ACTIVE UNIFORM:", name);

				var matches = structRe.exec( name );
				if ( matches ) {

					var structName = matches[ 1 ];
					var structProperty = matches[ 2 ];

					var uniformsStruct = uniforms[ structName ];

					if ( ! uniformsStruct ) {

						uniformsStruct = uniforms[ structName ] = {};

					}

					uniformsStruct[ structProperty ] = location;

					continue;

				}

				matches = arrayStructRe.exec( name );

				if ( matches ) {

					var arrayName = matches[ 1 ];
					var arrayIndex = matches[ 2 ];
					var arrayProperty = matches[ 3 ];

					var uniformsArray = uniforms[ arrayName ];

					if ( ! uniformsArray ) {

						uniformsArray = uniforms[ arrayName ] = [];

					}

					var uniformsArrayIndex = uniformsArray[ arrayIndex ];

					if ( ! uniformsArrayIndex ) {

						uniformsArrayIndex = uniformsArray[ arrayIndex ] = {};

					}

					uniformsArrayIndex[ arrayProperty ] = location;

					continue;

				}

				matches = arrayRe.exec( name );

				if ( matches ) {

					var arrayName = matches[ 1 ];

					uniforms[ arrayName ] = location;

					continue;

				}

				uniforms[ name ] = location;

			}

			return uniforms;

		}

		function fetchAttributeLocations( gl, program, identifiers ) {

			var attributes = {};

			var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

			for ( var i = 0; i < n; i ++ ) {

				var info = gl.getActiveAttrib( program, i );
				var name = info.name;

				// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

				attributes[ name ] = gl.getAttribLocation( program, name );

			}

			return attributes;

		}

		function filterEmptyLine( string ) {

			return string !== '';

		}

		return function WebGLProgram( renderer, code, material, parameters ) {

			var gl = renderer.context;

			var extensions = material.extensions;
			var defines = material.defines;

			var vertexShader = material.__webglShader.vertexShader;
			var fragmentShader = material.__webglShader.fragmentShader;

			var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

			if ( parameters.shadowMapType === THREE.PCFShadowMap ) {

				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

			} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {

				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

			}

			var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
			var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
			var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

			if ( parameters.envMap ) {

				switch ( material.envMap.mapping ) {

					case THREE.CubeReflectionMapping:
					case THREE.CubeRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
						break;

					case THREE.EquirectangularReflectionMapping:
					case THREE.EquirectangularRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
						break;

					case THREE.SphericalReflectionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
						break;

				}

				switch ( material.envMap.mapping ) {

					case THREE.CubeRefractionMapping:
					case THREE.EquirectangularRefractionMapping:
						envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
						break;

				}

				switch ( material.combine ) {

					case THREE.MultiplyOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
						break;

					case THREE.MixOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
						break;

					case THREE.AddOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
						break;

				}

			}

			var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

			// console.log( 'building new program ' );

			//

			var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

			var customDefines = generateDefines( defines );

			//

			var program = gl.createProgram();

			var prefixVertex, prefixFragment;

			if ( material instanceof THREE.RawShaderMaterial ) {

				prefixVertex = '';
				prefixFragment = '';

			} else {

				prefixVertex = [

					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',

					'#define SHADER_NAME ' + material.__webglShader.name,

					customDefines,

					parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

					renderer.gammaInput ? '#define GAMMA_INPUT' : '',
					renderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',
					'#define GAMMA_FACTOR ' + gammaFactorDefine,

					'#define NUM_DIR_LIGHTS ' + parameters.numDirLights,
					'#define NUM_POINT_LIGHTS ' + parameters.numPointLights,
					'#define NUM_SPOT_LIGHTS ' + parameters.numSpotLights,
					'#define NUM_HEMI_LIGHTS ' + parameters.numHemiLights,

					'#define NUM_SHADOWS ' + parameters.numShadows,

					'#define MAX_BONES ' + parameters.maxBones,

					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',

					parameters.flatShading ? '#define FLAT_SHADED' : '',

					parameters.skinning ? '#define USE_SKINNING' : '',
					parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

					parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
					parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',

					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
					parameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',
					parameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',

					parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',


					'uniform mat4 modelMatrix;',
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform mat4 viewMatrix;',
					'uniform mat3 normalMatrix;',
					'uniform vec3 cameraPosition;',

					'attribute vec3 position;',
					'attribute vec3 normal;',
					'attribute vec2 uv;',

					'#ifdef USE_COLOR',

					'	attribute vec3 color;',

					'#endif',

					'#ifdef USE_MORPHTARGETS',

					'	attribute vec3 morphTarget0;',
					'	attribute vec3 morphTarget1;',
					'	attribute vec3 morphTarget2;',
					'	attribute vec3 morphTarget3;',

					'	#ifdef USE_MORPHNORMALS',

					'		attribute vec3 morphNormal0;',
					'		attribute vec3 morphNormal1;',
					'		attribute vec3 morphNormal2;',
					'		attribute vec3 morphNormal3;',

					'	#else',

					'		attribute vec3 morphTarget4;',
					'		attribute vec3 morphTarget5;',
					'		attribute vec3 morphTarget6;',
					'		attribute vec3 morphTarget7;',

					'	#endif',

					'#endif',

					'#ifdef USE_SKINNING',

					'	attribute vec4 skinIndex;',
					'	attribute vec4 skinWeight;',

					'#endif',

					'\n'

				].filter( filterEmptyLine ).join( '\n' );


				prefixFragment = [

					customExtensions,

					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',

					'#define SHADER_NAME ' + material.__webglShader.name,

					customDefines,

					'#define NUM_DIR_LIGHTS ' + parameters.numDirLights,
					'#define NUM_POINT_LIGHTS ' + parameters.numPointLights,
					'#define NUM_SPOT_LIGHTS ' + parameters.numSpotLights,
					'#define NUM_HEMI_LIGHTS ' + parameters.numHemiLights,

					'#define NUM_SHADOWS ' + parameters.numShadows,

					parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

					renderer.gammaInput ? '#define GAMMA_INPUT' : '',
					renderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',
					'#define GAMMA_FACTOR ' + gammaFactorDefine,

					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapTypeDefine : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.envMap ? '#define ' + envMapBlendingDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',

					parameters.flatShading ? '#define FLAT_SHADED' : '',

					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',

					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
					parameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',
					parameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',

					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

					parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

					'uniform mat4 viewMatrix;',
					'uniform vec3 cameraPosition;',

					'\n'

				].filter( filterEmptyLine ).join( '\n' );

			}

			var vertexGlsl = prefixVertex + vertexShader;
			var fragmentGlsl = prefixFragment + fragmentShader;

			var glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
			var glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

			gl.attachShader( program, glVertexShader );
			gl.attachShader( program, glFragmentShader );

			// Force a particular attribute to index 0.

			if ( material.index0AttributeName !== undefined ) {

				gl.bindAttribLocation( program, 0, material.index0AttributeName );

			} else if ( parameters.morphTargets === true ) {

				// programs with morphTargets displace position out of attribute 0
				gl.bindAttribLocation( program, 0, 'position' );

			}

			gl.linkProgram( program );

			var programLog = gl.getProgramInfoLog( program );
			var vertexLog = gl.getShaderInfoLog( glVertexShader );
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

			var runnable = true;
			var haveDiagnostics = true;

			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

				runnable = false;

				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

			} else if ( programLog !== '' ) {

				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

			} else if ( vertexLog === '' || fragmentLog === '' ) {

				haveDiagnostics = false;

			}

			if ( haveDiagnostics ) {

				this.diagnostics = {

					runnable: runnable,
					material: material,

					programLog: programLog,

					vertexShader: {

						log: vertexLog,
						prefix: prefixVertex

					},

					fragmentShader: {

						log: fragmentLog,
						prefix: prefixFragment

					}

				};

			}

			// clean up

			gl.deleteShader( glVertexShader );
			gl.deleteShader( glFragmentShader );

			// set up caching for uniform locations

			var cachedUniforms;

			this.getUniforms = function() {

				if ( cachedUniforms === undefined ) {

					cachedUniforms = fetchUniformLocations( gl, program );

				}

				return cachedUniforms;

			};

			// set up caching for attribute locations

			var cachedAttributes;

			this.getAttributes = function() {

				if ( cachedAttributes === undefined ) {

					cachedAttributes = fetchAttributeLocations( gl, program );

				}

				return cachedAttributes;

			};

			// free resource

			this.destroy = function() {

				gl.deleteProgram( program );
				this.program = undefined;

			};

			// DEPRECATED

			Object.defineProperties( this, {

				uniforms: {
					get: function() {

						console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
						return this.getUniforms();

					}
				},

				attributes: {
					get: function() {

						console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
						return this.getAttributes();

					}
				}

			} );


			//

			this.id = programIdCount ++;
			this.code = code;
			this.usedTimes = 1;
			this.program = program;
			this.vertexShader = glVertexShader;
			this.fragmentShader = glFragmentShader;

			return this;

		};

	} )();

	// File:src/renderers/webgl/WebGLPrograms.js

	THREE.WebGLPrograms = function ( renderer, capabilities ) {

		var programs = [];

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshStandardMaterial: 'standard',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points'
		};

		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "envMap", "envMapMode",
			"lightMap", "aoMap", "emissiveMap", "bumpMap", "normalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap",
			"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights",
			"numShadows", "shadowMapEnabled", "pointLightShadows",
			"shadowMapType", "shadowMapDebug",
			"alphaTest", "doubleSided", "flipSided"
		];


		function allocateBones ( object ) {

			if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = nVertexMatrices;

				if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {

					maxBones = Math.min( object.skeleton.bones.length, maxBones );

					if ( maxBones < object.skeleton.bones.length ) {

						console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );

					}

				}

				return maxBones;

			}

		}

		this.getParameters = function ( material, lights, fog, object ) {

			var shaderID = shaderIDs[ material.type ];
			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = allocateBones( object );
			var precision = renderer.getPrecision();

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var parameters = {

				shaderID: shaderID,

				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,

				map: !! material.map,
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				combine: material.combine,

				vertexColors: material.vertexColors,

				fog: fog,
				useFog: material.fog,
				fogExp: fog instanceof THREE.FogExp2,

				flatShading: material.shading === THREE.FlatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

				skinning: material.skinning,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numHemiLights: lights.hemi.length,

				numShadows: lights.shadows.length,
				pointLightShadows: lights.shadowsPointLight,

				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,
				shadowMapDebug: renderer.shadowMap.debug,

				alphaTest: material.alphaTest,
				doubleSided: material.side === THREE.DoubleSide,
				flipSided: material.side === THREE.BackSide

			};

			return parameters;

		};

		this.getProgramCode = function ( material, parameters ) {

			var chunks = [];

			if ( parameters.shaderID ) {

				chunks.push( parameters.shaderID );

			} else {

				chunks.push( material.fragmentShader );
				chunks.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					chunks.push( name );
					chunks.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				var parameterName = parameterNames[ i ];
				chunks.push( parameterName );
				chunks.push( parameters[ parameterName ] );

			}

			return chunks.join();

		};

		this.acquireProgram = function ( material, parameters, code ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var programInfo = programs[ p ];

				if ( programInfo.code === code ) {

					program = programInfo;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new THREE.WebGLProgram( renderer, code, material, parameters );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	};

	// File:src/renderers/webgl/WebGLProperties.js

	/**
	* @author fordacious / fordacious.github.io
	*/

	THREE.WebGLProperties = function () {

		var properties = {};

		this.get = function ( object ) {

			var uuid = object.uuid;
			var map = properties[ uuid ];

			if ( map === undefined ) {

				map = {};
				properties[ uuid ] = map;

			}

			return map;

		};

		this.delete = function ( object ) {

			delete properties[ object.uuid ];

		};

		this.clear = function () {

			properties = {};

		};

	};

	// File:src/renderers/webgl/WebGLShader.js

	THREE.WebGLShader = ( function () {

		function addLineNumbers( string ) {

			var lines = string.split( '\n' );

			for ( var i = 0; i < lines.length; i ++ ) {

				lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

			}

			return lines.join( '\n' );

		}

		return function WebGLShader( gl, type, string ) {

			var shader = gl.createShader( type );

			gl.shaderSource( shader, string );
			gl.compileShader( shader );

			if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

				console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

			}

			if ( gl.getShaderInfoLog( shader ) !== '' ) {

				console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

			}

			// --enable-privileged-webgl-extension
			// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

			return shader;

		};

	} )();

	// File:src/renderers/webgl/WebGLShadowMap.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {

		var _gl = _renderer.context,
		_state = _renderer.state,
		_frustum = new THREE.Frustum(),
		_projScreenMatrix = new THREE.Matrix4(),

		_min = new THREE.Vector3(),
		_max = new THREE.Vector3(),

		_lookTarget = new THREE.Vector3(),
		_lightPositionWorld = new THREE.Vector3(),

		_renderList = [],

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants );

		var cubeDirections = [
			new THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),
			new THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )
		];

		var cubeUps = [
			new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),
			new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),	new THREE.Vector3( 0, 0, - 1 )
		];

		var cube2DViewPorts = [
			new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),
			new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()
		];

		var _vector4 = new THREE.Vector4();

		// init

		var depthShader = THREE.ShaderLib[ "depthRGBA" ];
		var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );

		var distanceShader = THREE.ShaderLib[ "distanceRGBA" ];
		var distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );

		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;

			var depthMaterial = new THREE.ShaderMaterial( {
				uniforms: depthUniforms,
				vertexShader: depthShader.vertexShader,
				fragmentShader: depthShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning
			} );

			depthMaterial._shadowPass = true;

			_depthMaterials[ i ] = depthMaterial;

			var distanceMaterial = new THREE.ShaderMaterial( {
				uniforms: distanceUniforms,
				vertexShader: distanceShader.vertexShader,
				fragmentShader: distanceShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning
			} );

			distanceMaterial._shadowPass = true;

			_distanceMaterials[ i ] = distanceMaterial;

		}

		//

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = THREE.PCFShadowMap;
		this.cullFace = THREE.CullFaceFront;

		this.render = function ( scene, camera ) {

			var faceCount, isPointLight;

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			// Save GL state

			var currentScissorTest = _state.getScissorTest();

			// save the existing viewport so it can be restored later
			_renderer.getViewport( _vector4 );

			// Set GL state for depth map.
			_gl.clearColor( 1, 1, 1, 1 );
			_state.disable( _gl.BLEND );
			_state.enable( _gl.CULL_FACE );
			_gl.frontFace( _gl.CCW );
			_gl.cullFace( scope.cullFace === THREE.CullFaceFront ? _gl.FRONT : _gl.BACK );
			_state.setDepthTest( true );
			_state.setScissorTest( false );

			// render depth map

			var shadows = _lights.shadows;

			for ( var i = 0, il = shadows.length; i < il; i ++ ) {

				var light = shadows[ i ];

				var shadow = light.shadow;
				var shadowCamera = shadow.camera;
				var shadowMapSize = shadow.mapSize;

				if ( light instanceof THREE.PointLight ) {

					faceCount = 6;
					isPointLight = true;

					var vpWidth = shadowMapSize.x / 4.0;
					var vpHeight = shadowMapSize.y / 2.0;

					// These viewports map a cube-map onto a 2D texture with the
					// following orientation:
					//
					//  xzXZ
					//   y Y
					//
					// X - Positive x direction
					// x - Negative x direction
					// Y - Positive y direction
					// y - Negative y direction
					// Z - Positive z direction
					// z - Negative z direction

					// positive X
					cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
					// negative X
					cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
					// positive Z
					cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
					// negative Z
					cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
					// positive Y
					cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
					// negative Y
					cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

				} else {

					faceCount = 1;
					isPointLight = false;

				}

				if ( shadow.map === null ) {

					var shadowFilter = THREE.LinearFilter;

					if ( scope.type === THREE.PCFSoftShadowMap ) {

						shadowFilter = THREE.NearestFilter;

					}

					var pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };

					shadow.map = new THREE.WebGLRenderTarget( shadowMapSize.x, shadowMapSize.y, pars );
					shadow.matrix = new THREE.Matrix4();

					//

					if ( light instanceof THREE.SpotLight ) {

						shadowCamera.aspect = shadowMapSize.x / shadowMapSize.y;

					}

					shadowCamera.updateProjectionMatrix();

				}

				var shadowMap = shadow.map;
				var shadowMatrix = shadow.matrix;

				_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( _lightPositionWorld );

				_renderer.setRenderTarget( shadowMap );
				_renderer.clear();

				// render shadow map for each cube face (if omni-directional) or
				// run a single pass if not

				for ( var face = 0; face < faceCount; face ++ ) {

					if ( isPointLight ) {

						_lookTarget.copy( shadowCamera.position );
						_lookTarget.add( cubeDirections[ face ] );
						shadowCamera.up.copy( cubeUps[ face ] );
						shadowCamera.lookAt( _lookTarget );
						var vpDimensions = cube2DViewPorts[ face ];
						_renderer.setViewport( vpDimensions.x, vpDimensions.y, vpDimensions.z, vpDimensions.w );

					} else {

						_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
						shadowCamera.lookAt( _lookTarget );

					}

					shadowCamera.updateMatrixWorld();
					shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

					// compute shadow matrix

					shadowMatrix.set(
						0.5, 0.0, 0.0, 0.5,
						0.0, 0.5, 0.0, 0.5,
						0.0, 0.0, 0.5, 0.5,
						0.0, 0.0, 0.0, 1.0
					);

					shadowMatrix.multiply( shadowCamera.projectionMatrix );
					shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

					// update camera matrices and frustum

					_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
					_frustum.setFromMatrix( _projScreenMatrix );

					// set object matrices & frustum culling

					_renderList.length = 0;

					projectObject( scene, camera, shadowCamera );

					// render shadow map
					// render regular objects

					for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {

						var object = _renderList[ j ];
						var geometry = _objects.update( object );
						var material = object.material;

						if ( material instanceof THREE.MeshFaceMaterial ) {

							var groups = geometry.groups;
							var materials = material.materials;

							for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

								var group = groups[ k ];
								var groupMaterial = materials[ group.materialIndex ];

								if ( groupMaterial.visible === true ) {

									var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
									_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

								}

							}

						} else {

							var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

						}

					}

				}

				// We must call _renderer.resetGLState() at the end of each iteration of
				// the light loop in order to force material updates for each light.
				_renderer.resetGLState();

			}

			_renderer.setViewport( _vector4.x, _vector4.y, _vector4.z, _vector4.w );

			// Restore GL state.
			var clearColor = _renderer.getClearColor(),
			clearAlpha = _renderer.getClearAlpha();
			_renderer.setClearColor( clearColor, clearAlpha );
			_state.enable( _gl.BLEND );

			if ( currentScissorTest === true ) {

				_state.setScissorTest( true );

			}

			if ( scope.cullFace === THREE.CullFaceFront ) {

				_gl.cullFace( _gl.BACK );

			}

			_renderer.resetGLState();

			scope.needsUpdate = false;

		};

		function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

			var geometry = object.geometry;

			var newMaterial = null;

			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;

			if ( isPointLight ) {

				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;

			}

			if ( ! customMaterial ) {

				var useMorphing = geometry.morphTargets !== undefined &&
						geometry.morphTargets.length > 0 && material.morphTargets;

				var useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;

				var variantIndex = 0;

				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;

				newMaterial = materialVariants[ variantIndex ];

			} else {

				newMaterial = customMaterial;

			}

			newMaterial.visible = material.visible;
			newMaterial.wireframe = material.wireframe;
			newMaterial.wireframeLinewidth = material.wireframeLinewidth;

			if ( isPointLight && newMaterial.uniforms.lightPos !== undefined ) {

				newMaterial.uniforms.lightPos.value.copy( lightPositionWorld );

			}

			return newMaterial;

		}

		function projectObject( object, camera, shadowCamera ) {

			if ( object.visible === false ) return;

			if ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {

				if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {

					var material = object.material;

					if ( material.visible === true ) {

						object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
						_renderList.push( object );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, shadowCamera );

			}

		}

	};

	// File:src/renderers/webgl/WebGLState.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {

		var _this = this;

		var newAttributes = new Uint8Array( 16 );
		var enabledAttributes = new Uint8Array( 16 );
		var attributeDivisors = new Uint8Array( 16 );

		var capabilities = {};

		var compressedTextureFormats = null;

		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;

		var currentDepthFunc = null;
		var currentDepthWrite = null;

		var currentColorWrite = null;

		var currentFlipSided = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var currentScissorTest = null;

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );

		var currentTextureSlot = undefined;
		var currentBoundTextures = {};

		this.init = function () {

			gl.clearColor( 0, 0, 0, 1 );
			gl.clearDepth( 1 );
			gl.clearStencil( 0 );

			this.enable( gl.DEPTH_TEST );
			gl.depthFunc( gl.LEQUAL );

			gl.frontFace( gl.CCW );
			gl.cullFace( gl.BACK );
			this.enable( gl.CULL_FACE );

			this.enable( gl.BLEND );
			gl.blendEquation( gl.FUNC_ADD );
			gl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );

		};

		this.initAttributes = function () {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		};

		this.enableAttribute = function ( attribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== 0 ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				extension.vertexAttribDivisorANGLE( attribute, 0 );
				attributeDivisors[ attribute ] = 0;

			}

		};

		this.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		};

		this.disableUnusedAttributes = function () {

			for ( var i = 0, l = enabledAttributes.length; i < l; i ++ ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		};

		this.enable = function ( id ) {

			if ( capabilities[ id ] !== true ) {

				gl.enable( id );
				capabilities[ id ] = true;

			}

		};

		this.disable = function ( id ) {

			if ( capabilities[ id ] !== false ) {

				gl.disable( id );
				capabilities[ id ] = false;

			}

		};

		this.getCompressedTextureFormats = function () {

			if ( compressedTextureFormats === null ) {

				compressedTextureFormats = [];

				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ) {

					var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

					for ( var i = 0; i < formats.length; i ++ ) {

						compressedTextureFormats.push( formats[ i ] );

					}

				}

			}

			return compressedTextureFormats;

		};

		this.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha ) {

			if ( blending !== currentBlending ) {

				if ( blending === THREE.NoBlending ) {

					this.disable( gl.BLEND );

				} else if ( blending === THREE.AdditiveBlending ) {

					this.enable( gl.BLEND );
					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

				} else if ( blending === THREE.SubtractiveBlending ) {

					// TODO: Find blendFuncSeparate() combination

					this.enable( gl.BLEND );
					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

				} else if ( blending === THREE.MultiplyBlending ) {

					// TODO: Find blendFuncSeparate() combination

					this.enable( gl.BLEND );
					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

				} else if ( blending === THREE.CustomBlending ) {

					this.enable( gl.BLEND );

				} else {

					this.enable( gl.BLEND );
					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
					gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

				}

				currentBlending = blending;

			}

			if ( blending === THREE.CustomBlending ) {

				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;

				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

					gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;

				}

				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

					gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;

				}

			} else {

				currentBlendEquation = null;
				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendEquationAlpha = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

			}

		};

		this.setDepthFunc = function ( depthFunc ) {

			if ( currentDepthFunc !== depthFunc ) {

				if ( depthFunc ) {

					switch ( depthFunc ) {

						case THREE.NeverDepth:

							gl.depthFunc( gl.NEVER );
							break;

						case THREE.AlwaysDepth:

							gl.depthFunc( gl.ALWAYS );
							break;

						case THREE.LessDepth:

							gl.depthFunc( gl.LESS );
							break;

						case THREE.LessEqualDepth:

							gl.depthFunc( gl.LEQUAL );
							break;

						case THREE.EqualDepth:

							gl.depthFunc( gl.EQUAL );
							break;

						case THREE.GreaterEqualDepth:

							gl.depthFunc( gl.GEQUAL );
							break;

						case THREE.GreaterDepth:

							gl.depthFunc( gl.GREATER );
							break;

						case THREE.NotEqualDepth:

							gl.depthFunc( gl.NOTEQUAL );
							break;

						default:

							gl.depthFunc( gl.LEQUAL );

					}

				} else {

					gl.depthFunc( gl.LEQUAL );

				}

				currentDepthFunc = depthFunc;

			}

		};

		this.setDepthTest = function ( depthTest ) {

			if ( depthTest ) {

				this.enable( gl.DEPTH_TEST );

			} else {

				this.disable( gl.DEPTH_TEST );

			}

		};

		this.setDepthWrite = function ( depthWrite ) {

			if ( currentDepthWrite !== depthWrite ) {

				gl.depthMask( depthWrite );
				currentDepthWrite = depthWrite;

			}

		};

		this.setColorWrite = function ( colorWrite ) {

			if ( currentColorWrite !== colorWrite ) {

				gl.colorMask( colorWrite, colorWrite, colorWrite, colorWrite );
				currentColorWrite = colorWrite;

			}

		};

		this.setFlipSided = function ( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		};

		this.setLineWidth = function ( width ) {

			if ( width !== currentLineWidth ) {

				gl.lineWidth( width );

				currentLineWidth = width;

			}

		};

		this.setPolygonOffset = function ( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				this.enable( gl.POLYGON_OFFSET_FILL );

			} else {

				this.disable( gl.POLYGON_OFFSET_FILL );

			}

			if ( polygonOffset && ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) ) {

				gl.polygonOffset( factor, units );

				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;

			}

		};

		this.getScissorTest = function () {

			return currentScissorTest;

		};

		this.setScissorTest = function ( scissorTest ) {

			currentScissorTest = scissorTest;

			if ( scissorTest ) {

				this.enable( gl.SCISSOR_TEST );

			} else {

				this.disable( gl.SCISSOR_TEST );

			}

		};

		// texture

		this.activeTexture = function ( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		this.bindTexture = function ( webglType, webglTexture ) {

			if ( currentTextureSlot === undefined ) {

				_this.activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		};

		this.compressedTexImage2D = function () {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		};

		this.texImage2D = function () {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		};

		//

		this.reset = function () {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			capabilities = {};

			compressedTextureFormats = null;

			currentBlending = null;

			currentDepthWrite = null;
			currentColorWrite = null;

			currentFlipSided = null;

		};

	};

	// File:src/renderers/webgl/plugins/LensFlarePlugin.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.LensFlarePlugin = function ( renderer, flares ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;
		var hasVertexTexture;

		var tempTexture, occlusionTexture;

		function init() {

			var vertices = new Float32Array( [
				- 1, - 1,  0, 0,
				 1, - 1,  1, 0,
				 1,  1,  1, 1,
				- 1,  1,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			// buffers

			vertexBuffer     = gl.createBuffer();
			elementBuffer    = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			// textures

			tempTexture      = gl.createTexture();
			occlusionTexture = gl.createTexture();

			state.bindTexture( gl.TEXTURE_2D, tempTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			hasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;

			var shader;

			if ( hasVertexTexture ) {

				shader = {

					vertexShader: [

						"uniform lowp int renderType;",

						"uniform vec3 screenPosition;",
						"uniform vec2 scale;",
						"uniform float rotation;",

						"uniform sampler2D occlusionMap;",

						"attribute vec2 position;",
						"attribute vec2 uv;",

						"varying vec2 vUV;",
						"varying float vVisibility;",

						"void main() {",

							"vUV = uv;",

							"vec2 pos = position;",

							"if ( renderType == 2 ) {",

								"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

								"vVisibility =        visibility.r / 9.0;",
								"vVisibility *= 1.0 - visibility.g / 9.0;",
								"vVisibility *=       visibility.b / 9.0;",
								"vVisibility *= 1.0 - visibility.a / 9.0;",

								"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
								"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

							"}",

							"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

						"}"

					].join( "\n" ),

					fragmentShader: [

						"uniform lowp int renderType;",

						"uniform sampler2D map;",
						"uniform float opacity;",
						"uniform vec3 color;",

						"varying vec2 vUV;",
						"varying float vVisibility;",

						"void main() {",

							// pink square

							"if ( renderType == 0 ) {",

								"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

							// restore

							"} else if ( renderType == 1 ) {",

								"gl_FragColor = texture2D( map, vUV );",

							// flare

							"} else {",

								"vec4 texture = texture2D( map, vUV );",
								"texture.a *= opacity * vVisibility;",
								"gl_FragColor = texture;",
								"gl_FragColor.rgb *= color;",

							"}",

						"}"

					].join( "\n" )

				};

			} else {

				shader = {

					vertexShader: [

						"uniform lowp int renderType;",

						"uniform vec3 screenPosition;",
						"uniform vec2 scale;",
						"uniform float rotation;",

						"attribute vec2 position;",
						"attribute vec2 uv;",

						"varying vec2 vUV;",

						"void main() {",

							"vUV = uv;",

							"vec2 pos = position;",

							"if ( renderType == 2 ) {",

								"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
								"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

							"}",

							"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

						"}"

					].join( "\n" ),

					fragmentShader: [

						"precision mediump float;",

						"uniform lowp int renderType;",

						"uniform sampler2D map;",
						"uniform sampler2D occlusionMap;",
						"uniform float opacity;",
						"uniform vec3 color;",

						"varying vec2 vUV;",

						"void main() {",

							// pink square

							"if ( renderType == 0 ) {",

								"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );",

							// restore

							"} else if ( renderType == 1 ) {",

								"gl_FragColor = texture2D( map, vUV );",

							// flare

							"} else {",

								"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;",
								"visibility = ( 1.0 - visibility / 4.0 );",

								"vec4 texture = texture2D( map, vUV );",
								"texture.a *= opacity * visibility;",
								"gl_FragColor = texture;",
								"gl_FragColor.rgb *= color;",

							"}",

						"}"

					].join( "\n" )

				};

			}

			program = createProgram( shader );

			attributes = {
				vertex: gl.getAttribLocation ( program, "position" ),
				uv:     gl.getAttribLocation ( program, "uv" )
			};

			uniforms = {
				renderType:     gl.getUniformLocation( program, "renderType" ),
				map:            gl.getUniformLocation( program, "map" ),
				occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
				opacity:        gl.getUniformLocation( program, "opacity" ),
				color:          gl.getUniformLocation( program, "color" ),
				scale:          gl.getUniformLocation( program, "scale" ),
				rotation:       gl.getUniformLocation( program, "rotation" ),
				screenPosition: gl.getUniformLocation( program, "screenPosition" )
			};

		}

		/*
		 * Render lens flares
		 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
		 *         reads these back and calculates occlusion.
		 */

		this.render = function ( scene, camera, viewportWidth, viewportHeight ) {

			if ( flares.length === 0 ) return;

			var tempPosition = new THREE.Vector3();

			var invAspect = viewportHeight / viewportWidth,
				halfViewportWidth = viewportWidth * 0.5,
				halfViewportHeight = viewportHeight * 0.5;

			var size = 16 / viewportHeight,
				scale = new THREE.Vector2( size * invAspect, size );

			var screenPosition = new THREE.Vector3( 1, 1, 0 ),
				screenPositionPixels = new THREE.Vector2( 1, 1 );

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.vertex );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			// loop through all lens flares to update their occlusion and positions
			// setup gl and common used attribs/uniforms

			gl.uniform1i( uniforms.occlusionMap, 0 );
			gl.uniform1i( uniforms.map, 1 );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			state.disable( gl.CULL_FACE );
			gl.depthMask( false );

			for ( var i = 0, l = flares.length; i < l; i ++ ) {

				size = 16 / viewportHeight;
				scale.set( size * invAspect, size );

				// calc object screen position

				var flare = flares[ i ];

				tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

				tempPosition.applyMatrix4( camera.matrixWorldInverse );
				tempPosition.applyProjection( camera.projectionMatrix );

				// setup arrays for gl programs

				screenPosition.copy( tempPosition );

				screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;
				screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;

				// screen cull

				if ( hasVertexTexture || (
					screenPositionPixels.x > 0 &&
					screenPositionPixels.x < viewportWidth &&
					screenPositionPixels.y > 0 &&
					screenPositionPixels.y < viewportHeight ) ) {

					// save current RGB to temp texture

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, null );
					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


					// render pink quad

					gl.uniform1i( uniforms.renderType, 0 );
					gl.uniform2f( uniforms.scale, scale.x, scale.y );
					gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

					state.disable( gl.BLEND );
					state.enable( gl.DEPTH_TEST );

					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// copy result to occlusionMap

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


					// restore graphics

					gl.uniform1i( uniforms.renderType, 1 );
					state.disable( gl.DEPTH_TEST );

					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// update object positions

					flare.positionScreen.copy( screenPosition );

					if ( flare.customUpdateCallback ) {

						flare.customUpdateCallback( flare );

					} else {

						flare.updateLensFlares();

					}

					// render flares

					gl.uniform1i( uniforms.renderType, 2 );
					state.enable( gl.BLEND );

					for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

						var sprite = flare.lensFlares[ j ];

						if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

							screenPosition.x = sprite.x;
							screenPosition.y = sprite.y;
							screenPosition.z = sprite.z;

							size = sprite.size * sprite.scale / viewportHeight;

							scale.x = size * invAspect;
							scale.y = size;

							gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
							gl.uniform2f( uniforms.scale, scale.x, scale.y );
							gl.uniform1f( uniforms.rotation, sprite.rotation );

							gl.uniform1f( uniforms.opacity, sprite.opacity );
							gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

							state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
							renderer.setTexture( sprite.texture, 1 );

							gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

						}

					}

				}

			}

			// restore gl

			state.enable( gl.CULL_FACE );
			state.enable( gl.DEPTH_TEST );
			gl.depthMask( true );

			renderer.resetGLState();

		};

		function createProgram ( shader ) {

			var program = gl.createProgram();

			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
			var vertexShader = gl.createShader( gl.VERTEX_SHADER );

			var prefix = "precision " + renderer.getPrecision() + " float;\n";

			gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
			gl.shaderSource( vertexShader, prefix + shader.vertexShader );

			gl.compileShader( fragmentShader );
			gl.compileShader( vertexShader );

			gl.attachShader( program, fragmentShader );
			gl.attachShader( program, vertexShader );

			gl.linkProgram( program );

			return program;

		}

	};

	// File:src/renderers/webgl/plugins/SpritePlugin.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.SpritePlugin = function ( renderer, sprites ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;

		var texture;

		// decompose matrixWorld

		var spritePosition = new THREE.Vector3();
		var spriteRotation = new THREE.Quaternion();
		var spriteScale = new THREE.Vector3();

		function init() {

			var vertices = new Float32Array( [
				- 0.5, - 0.5,  0, 0,
				  0.5, - 0.5,  1, 0,
				  0.5,   0.5,  1, 1,
				- 0.5,   0.5,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			vertexBuffer  = gl.createBuffer();
			elementBuffer = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			program = createProgram();

			attributes = {
				position:			gl.getAttribLocation ( program, 'position' ),
				uv:					gl.getAttribLocation ( program, 'uv' )
			};

			uniforms = {
				uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
				uvScale:			gl.getUniformLocation( program, 'uvScale' ),

				rotation:			gl.getUniformLocation( program, 'rotation' ),
				scale:				gl.getUniformLocation( program, 'scale' ),

				color:				gl.getUniformLocation( program, 'color' ),
				map:				gl.getUniformLocation( program, 'map' ),
				opacity:			gl.getUniformLocation( program, 'opacity' ),

				modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
				projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

				fogType:			gl.getUniformLocation( program, 'fogType' ),
				fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
				fogNear:			gl.getUniformLocation( program, 'fogNear' ),
				fogFar:				gl.getUniformLocation( program, 'fogFar' ),
				fogColor:			gl.getUniformLocation( program, 'fogColor' ),

				alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
			};

			var canvas = document.createElement( 'canvas' );
			canvas.width = 8;
			canvas.height = 8;

			var context = canvas.getContext( '2d' );
			context.fillStyle = 'white';
			context.fillRect( 0, 0, 8, 8 );

			texture = new THREE.Texture( canvas );
			texture.needsUpdate = true;

		}

		this.render = function ( scene, camera ) {

			if ( sprites.length === 0 ) return;

			// setup gl

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.position );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			state.disable( gl.CULL_FACE );
			state.enable( gl.BLEND );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			state.activeTexture( gl.TEXTURE0 );
			gl.uniform1i( uniforms.map, 0 );

			var oldFogType = 0;
			var sceneFogType = 0;
			var fog = scene.fog;

			if ( fog ) {

				gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

				if ( fog instanceof THREE.Fog ) {

					gl.uniform1f( uniforms.fogNear, fog.near );
					gl.uniform1f( uniforms.fogFar, fog.far );

					gl.uniform1i( uniforms.fogType, 1 );
					oldFogType = 1;
					sceneFogType = 1;

				} else if ( fog instanceof THREE.FogExp2 ) {

					gl.uniform1f( uniforms.fogDensity, fog.density );

					gl.uniform1i( uniforms.fogType, 2 );
					oldFogType = 2;
					sceneFogType = 2;

				}

			} else {

				gl.uniform1i( uniforms.fogType, 0 );
				oldFogType = 0;
				sceneFogType = 0;

			}


			// update positions and sort

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];

				sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
				sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

			}

			sprites.sort( painterSortStable );

			// render all sprites

			var scale = [];

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];
				var material = sprite.material;

				gl.uniform1f( uniforms.alphaTest, material.alphaTest );
				gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

				sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

				scale[ 0 ] = spriteScale.x;
				scale[ 1 ] = spriteScale.y;

				var fogType = 0;

				if ( scene.fog && material.fog ) {

					fogType = sceneFogType;

				}

				if ( oldFogType !== fogType ) {

					gl.uniform1i( uniforms.fogType, fogType );
					oldFogType = fogType;

				}

				if ( material.map !== null ) {

					gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
					gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

				} else {

					gl.uniform2f( uniforms.uvOffset, 0, 0 );
					gl.uniform2f( uniforms.uvScale, 1, 1 );

				}

				gl.uniform1f( uniforms.opacity, material.opacity );
				gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

				gl.uniform1f( uniforms.rotation, material.rotation );
				gl.uniform2fv( uniforms.scale, scale );

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
				state.setDepthTest( material.depthTest );
				state.setDepthWrite( material.depthWrite );

				if ( material.map && material.map.image && material.map.image.width ) {

					renderer.setTexture( material.map, 0 );

				} else {

					renderer.setTexture( texture, 0 );

				}

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			}

			// restore gl

			state.enable( gl.CULL_FACE );

			renderer.resetGLState();

		};

		function createProgram () {

			var program = gl.createProgram();

			var vertexShader = gl.createShader( gl.VERTEX_SHADER );
			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

			gl.shaderSource( vertexShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform float rotation;',
				'uniform vec2 scale;',
				'uniform vec2 uvOffset;',
				'uniform vec2 uvScale;',

				'attribute vec2 position;',
				'attribute vec2 uv;',

				'varying vec2 vUV;',

				'void main() {',

					'vUV = uvOffset + uv * uvScale;',

					'vec2 alignedPosition = position * scale;',

					'vec2 rotatedPosition;',
					'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
					'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

					'vec4 finalPosition;',

					'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
					'finalPosition.xy += rotatedPosition;',
					'finalPosition = projectionMatrix * finalPosition;',

					'gl_Position = finalPosition;',

				'}'

			].join( '\n' ) );

			gl.shaderSource( fragmentShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform vec3 color;',
				'uniform sampler2D map;',
				'uniform float opacity;',

				'uniform int fogType;',
				'uniform vec3 fogColor;',
				'uniform float fogDensity;',
				'uniform float fogNear;',
				'uniform float fogFar;',
				'uniform float alphaTest;',

				'varying vec2 vUV;',

				'void main() {',

					'vec4 texture = texture2D( map, vUV );',

					'if ( texture.a < alphaTest ) discard;',

					'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

					'if ( fogType > 0 ) {',

						'float depth = gl_FragCoord.z / gl_FragCoord.w;',
						'float fogFactor = 0.0;',

						'if ( fogType == 1 ) {',

							'fogFactor = smoothstep( fogNear, fogFar, depth );',

						'} else {',

							'const float LOG2 = 1.442695;',
							'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
							'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

						'}',

						'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

					'}',

				'}'

			].join( '\n' ) );

			gl.compileShader( vertexShader );
			gl.compileShader( fragmentShader );

			gl.attachShader( program, vertexShader );
			gl.attachShader( program, fragmentShader );

			gl.linkProgram( program );

			return program;

		}

		function painterSortStable ( a, b ) {

			if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return b.id - a.id;

			}

		}

	};

	// File:src/Three.Legacy.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	Object.defineProperties( THREE.Box2.prototype, {
		isIntersectionBox: {
			value: function ( box ) {
				console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			}
		}
	} );

	Object.defineProperties( THREE.Box3.prototype, {
		isIntersectionBox: {
			value: function ( box ) {
				console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			}
		},
		isIntersectionSphere: {
			value: function ( sphere ) {
				console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
			}
		}
	} );

	Object.defineProperties( THREE.Matrix3.prototype, {
		multiplyVector3: {
			value: function ( vector ) {
				console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
				return vector.applyMatrix3( this );
			}
		},
		multiplyVector3Array: {
			value: function ( a ) {
				console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
				return this.applyToVector3Array( a );
			}
		}
	} );

	Object.defineProperties( THREE.Matrix4.prototype, {
		extractPosition: {
			value: function ( m ) {
				console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
				return this.copyPosition( m );
			}
		},
		setRotationFromQuaternion: {
			value: function ( q ) {
				console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
				return this.makeRotationFromQuaternion( q );
			}
		},
		multiplyVector3: {
			value: function ( vector ) {
				console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
				return vector.applyProjection( this );
			}
		},
		multiplyVector4: {
			value: function ( vector ) {
				console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
			}
		},
		multiplyVector3Array: {
			value: function ( a ) {
				console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
				return this.applyToVector3Array( a );
			}
		},
		rotateAxis: {
			value: function ( v ) {
				console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
				v.transformDirection( this );
			}
		},
		crossVector: {
			value: function ( vector ) {
				console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
			}
		},
		translate: {
			value: function ( v ) {
				console.error( 'THREE.Matrix4: .translate() has been removed.' );
			}
		},
		rotateX: {
			value: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
			}
		},
		rotateY: {
			value: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
			}
		},
		rotateZ: {
			value: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
			}
		},
		rotateByAxis: {
			value: function ( axis, angle ) {
				console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
			}
		}
	} );

	Object.defineProperties( THREE.Plane.prototype, {
		isIntersectionLine: {
			value: function ( line ) {
				console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
				return this.intersectsLine( line );
			}
		}
	} );

	Object.defineProperties( THREE.Quaternion.prototype, {
		multiplyVector3: {
			value: function ( vector ) {
				console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
				return vector.applyQuaternion( this );
			}
		}
	} );

	Object.defineProperties( THREE.Ray.prototype, {
		isIntersectionBox: {
			value: function ( box ) {
				console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			}
		},
		isIntersectionPlane: {
			value: function ( plane ) {
				console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
				return this.intersectsPlane( plane );
			}
		},
		isIntersectionSphere: {
			value: function ( sphere ) {
				console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
			}
		}
	} );

	Object.defineProperties( THREE.Vector3.prototype, {
		setEulerFromRotationMatrix: {
			value: function () {
				console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
			}
		},
		setEulerFromQuaternion: {
			value: function () {
				console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
			}
		},
		getPositionFromMatrix: {
			value: function ( m ) {
				console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
				return this.setFromMatrixPosition( m );
			}
		},
		getScaleFromMatrix: {
			value: function ( m ) {
				console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
				return this.setFromMatrixScale( m );
			}
		},
		getColumnFromMatrix: {
			value: function ( index, matrix ) {
				console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
				return this.setFromMatrixColumn( index, matrix );
			}
		}
	} );

	//

	Object.defineProperties( THREE.Object3D.prototype, {
		eulerOrder: {
			get: function () {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;
			}
		},
		getChildByName: {
			value: function ( name ) {
				console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
				return this.getObjectByName( name );
			}
		},
		renderDepth: {
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
			}
		},
		translate: {
			value: function ( distance, axis ) {
				console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
				return this.translateOnAxis( axis, distance );
			}
		},
		useQuaternion: {
			get: function () {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			}
		}
	} );

	//

	Object.defineProperties( THREE, {
		PointCloud: {
			value: function ( geometry, material ) {
				console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
				return new THREE.Points( geometry, material );
			}
		},
		ParticleSystem: {
			value: function ( geometry, material ) {
				console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
				return new THREE.Points( geometry, material );
			}
		}
	} );

	//

	Object.defineProperties( THREE.Light.prototype, {
		onlyShadow: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .onlyShadow has been removed.' );
			}
		},
		shadowCameraFov: {
			set: function ( value ) {
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function ( value ) {
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function ( value ) {
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function ( value ) {
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function ( value ) {
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function ( value ) {
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function ( value ) {
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
			}
		},
		shadowBias: {
			set: function ( value ) {
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function ( value ) {
				this.shadow.darkness = value;
			}
		},
		shadowMapWidth: {
			set: function ( value ) {
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function ( value ) {
				this.shadow.mapSize.height = value;
			}
		}
	} );

	//

	Object.defineProperties( THREE.BufferAttribute.prototype, {
		length: {
			get: function () {
				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
				return this.array.length;
			}
		}
	} );

	//

	Object.defineProperties( THREE.Material.prototype, {
		wrapAround: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			}
		},
		wrapRGB: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
				return new THREE.Color();
			}
		}
	} );

	Object.defineProperties( THREE, {
		PointCloudMaterial: {
			value: function ( parameters ) {
				console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
				return new THREE.PointsMaterial( parameters );
			}
		},
		ParticleBasicMaterial: {
			value: function ( parameters ) {
				console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
				return new THREE.PointsMaterial( parameters );
			}
		},
		ParticleSystemMaterial:{
			value: function ( parameters ) {
				console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
				return new THREE.PointsMaterial( parameters );
			}
		}
	} );

	Object.defineProperties( THREE.MeshPhongMaterial.prototype, {
		metal: {
			get: function () {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;
			},
			set: function ( value ) {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
			}
		}
	} );

	Object.defineProperties( THREE.ShaderMaterial.prototype, {
		derivatives: {
			get: function () {
				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;
			},
			set: function ( value ) {
				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;
			}
		}
	} );

	//

	Object.defineProperties( THREE.WebGLRenderer.prototype, {
		supportsFloatTextures: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
				return this.extensions.get( 'OES_texture_float' );
			}
		},
		supportsHalfFloatTextures: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
				return this.extensions.get( 'OES_texture_half_float' );
			}
		},
		supportsStandardDerivatives: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
				return this.extensions.get( 'OES_standard_derivatives' );
			}
		},
		supportsCompressedTextureS3TC: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
			}
		},
		supportsCompressedTexturePVRTC: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
			}
		},
		supportsBlendMinMax: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
				return this.extensions.get( 'EXT_blend_minmax' );
			}
		},
		supportsVertexTextures: {
			value: function () {
				return this.capabilities.vertexTextures;
			}
		},
		supportsInstancedArrays: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
				return this.extensions.get( 'ANGLE_instanced_arrays' );
			}
		},
		initMaterial: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
			}
		},
		addPrePlugin: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
			}
		},
		addPostPlugin: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
			}
		},
		updateShadowMap: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
			}
		},
		shadowMapEnabled: {
			get: function () {
				return this.shadowMap.enabled;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;
			}
		},
		shadowMapType: {
			get: function () {
				return this.shadowMap.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;
			}
		},
		shadowMapCullFace: {
			get: function () {
				return this.shadowMap.cullFace;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
				this.shadowMap.cullFace = value;
			}
		},
		shadowMapDebug: {
			get: function () {
				return this.shadowMap.debug;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.' );
				this.shadowMap.debug = value;
			}
		}
	} );

	//

	Object.defineProperties( THREE.WebGLRenderTarget.prototype, {
		wrapS: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;
			}
		},
		wrapT: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;
			}
		},
		magFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;
			}
		},
		minFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;
			}
		},
		anisotropy: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;
			}
		},
		offset: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;
			}
		},
		repeat: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;
			}
		},
		format: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;
			}
		},
		type: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;
			}
		},
		generateMipmaps: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;
			}
		}
	} );

	//

	THREE.GeometryUtils = {

		merge: function ( geometry1, geometry2, materialIndexOffset ) {

			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

			var matrix;

			if ( geometry2 instanceof THREE.Mesh ) {

				geometry2.matrixAutoUpdate && geometry2.updateMatrix();

				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;

			}

			geometry1.merge( geometry2, matrix, materialIndexOffset );

		},

		center: function ( geometry ) {

			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();

		}

	};

	THREE.ImageUtils = {

		crossOrigin: undefined,

		loadTexture: function ( url, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

			var loader = new THREE.TextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( url, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadTextureCube: function ( urls, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

			var loader = new THREE.CubeTextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( urls, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadCompressedTexture: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' )

		},

		loadCompressedTextureCube: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' )

		}

	};

	//

	THREE.Projector = function () {

		console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

		this.projectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
			vector.project( camera );

		};

		this.unprojectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
			vector.unproject( camera );

		};

		this.pickingRay = function ( vector, camera ) {

			console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

		};

	};

	//

	THREE.CanvasRenderer = function () {

		console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

		this.domElement = document.createElement( 'canvas' );
		this.clear = function () {};
		this.render = function () {};
		this.setClearColor = function () {};
		this.setSize = function () {};

	};

	//

	THREE.TextGeometry = function () {

		console.error( 'THREE.TextGeometry has been moved to /examples/js/geometries/TextGeometry.js' );
		console.error( 'THREE.FontUtils has been moved to /examples/js/utils/FontUtils.js' );

	};

	// File:src/extras/CurveUtils.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.CurveUtils = {

		tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

			return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

		},

		// Puay Bing, thanks for helping with this derivative!

		tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {

			return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
				3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
				6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
				3 * t * t * p3;

		},

		tangentSpline: function ( t, p0, p1, p2, p3 ) {

			// To check if my formulas are correct

			var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
			var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
			var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
			var h11 = 3 * t * t - 2 * t;	// t3 − t2

			return h00 + h10 + h01 + h11;

		},

		// Catmull-Rom

		interpolate: function( p0, p1, p2, p3, t ) {

			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	};

	// File:src/extras/SceneUtils.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.SceneUtils = {

		createMultiMaterialObject: function ( geometry, materials ) {

			var group = new THREE.Group();

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				group.add( new THREE.Mesh( geometry, materials[ i ] ) );

			}

			return group;

		},

		detach: function ( child, parent, scene ) {

			child.applyMatrix( parent.matrixWorld );
			parent.remove( child );
			scene.add( child );

		},

		attach: function ( child, scene, parent ) {

			var matrixWorldInverse = new THREE.Matrix4();
			matrixWorldInverse.getInverse( parent.matrixWorld );
			child.applyMatrix( matrixWorldInverse );

			scene.remove( child );
			parent.add( child );

		}

	};

	// File:src/extras/ShapeUtils.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		triangulate: ( function () {

			/**
			 * This code is a quick port of code written in C++ which was submitted to
			 * flipcode.com by John W. Ratcliff  // July 22, 2000
			 * See original code and more information here:
			 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
			 *
			 * ported to actionscript by Zevan Rosser
			 * www.actionsnippet.com
			 *
			 * ported to javascript by Joshua Koo
			 * http://www.lab4games.net/zz85/blog
			 *
			 */

			function snip( contour, u, v, w, n, verts ) {

				var p;
				var ax, ay, bx, by;
				var cx, cy, px, py;

				ax = contour[ verts[ u ] ].x;
				ay = contour[ verts[ u ] ].y;

				bx = contour[ verts[ v ] ].x;
				by = contour[ verts[ v ] ].y;

				cx = contour[ verts[ w ] ].x;
				cy = contour[ verts[ w ] ].y;

				if ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;

				var aX, aY, bX, bY, cX, cY;
				var apx, apy, bpx, bpy, cpx, cpy;
				var cCROSSap, bCROSScp, aCROSSbp;

				aX = cx - bx;  aY = cy - by;
				bX = ax - cx;  bY = ay - cy;
				cX = bx - ax;  cY = by - ay;

				for ( p = 0; p < n; p ++ ) {

					px = contour[ verts[ p ] ].x;
					py = contour[ verts[ p ] ].y;

					if ( ( ( px === ax ) && ( py === ay ) ) ||
						 ( ( px === bx ) && ( py === by ) ) ||
						 ( ( px === cx ) && ( py === cy ) ) )	continue;

					apx = px - ax;  apy = py - ay;
					bpx = px - bx;  bpy = py - by;
					cpx = px - cx;  cpy = py - cy;

					// see if p is inside triangle abc

					aCROSSbp = aX * bpy - aY * bpx;
					cCROSSap = cX * apy - cY * apx;
					bCROSScp = bX * cpy - bY * cpx;

					if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

				}

				return true;

			}

			// takes in an contour array and returns

			return function ( contour, indices ) {

				var n = contour.length;

				if ( n < 3 ) return null;

				var result = [],
					verts = [],
					vertIndices = [];

				/* we want a counter-clockwise polygon in verts */

				var u, v, w;

				if ( THREE.ShapeUtils.area( contour ) > 0.0 ) {

					for ( v = 0; v < n; v ++ ) verts[ v ] = v;

				} else {

					for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

				}

				var nv = n;

				/*  remove nv - 2 vertices, creating 1 triangle every time */

				var count = 2 * nv;   /* error detection */

				for ( v = nv - 1; nv > 2; ) {

					/* if we loop, it is probably a non-simple polygon */

					if ( ( count -- ) <= 0 ) {

						//** Triangulate: ERROR - probable bad polygon!

						//throw ( "Warning, unable to triangulate polygon!" );
						//return null;
						// Sometimes warning is fine, especially polygons are triangulated in reverse.
						console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

						if ( indices ) return vertIndices;
						return result;

					}

					/* three consecutive vertices in current polygon, <u,v,w> */

					u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
					v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
					w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

					if ( snip( contour, u, v, w, nv, verts ) ) {

						var a, b, c, s, t;

						/* true names of the vertices */

						a = verts[ u ];
						b = verts[ v ];
						c = verts[ w ];

						/* output Triangle */

						result.push( [ contour[ a ],
							contour[ b ],
							contour[ c ] ] );


						vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

						/* remove v from the remaining polygon */

						for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

							verts[ s ] = verts[ t ];

						}

						nv --;

						/* reset error detection counter */

						count = 2 * nv;

					}

				}

				if ( indices ) return vertIndices;
				return result;

			}

		} )(),

		triangulateShape: function ( contour, holes ) {

			function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

				// inOtherPt needs to be collinear to the inSegment
				if ( inSegPt1.x !== inSegPt2.x ) {

					if ( inSegPt1.x < inSegPt2.x ) {

						return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

					} else {

						return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

					}

				} else {

					if ( inSegPt1.y < inSegPt2.y ) {

						return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

					} else {

						return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

					}

				}

			}

			function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

				var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
				var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

				var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
				var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

				var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
				var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

				if ( Math.abs( limit ) > Number.EPSILON ) {

					// not parallel

					var perpSeg2;
					if ( limit > 0 ) {

						if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

					} else {

						if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

					}

					// i.e. to reduce rounding errors
					// intersection at endpoint of segment#1?
					if ( perpSeg2 === 0 ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt1 ];

					}
					if ( perpSeg2 === limit ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt2 ];

					}
					// intersection at endpoint of segment#2?
					if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
					if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

					// return real intersection point
					var factorSeg1 = perpSeg2 / limit;
					return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
								y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

				} else {

					// parallel or collinear
					if ( ( perpSeg1 !== 0 ) ||
						 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

					// they are collinear or degenerate
					var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
					var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
					// both segments are points
					if ( seg1Pt && seg2Pt ) {

						if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
							 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
						return [ inSeg1Pt1 ];                 						// they are the same point

					}
					// segment#1  is a single point
					if ( seg1Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
						return [ inSeg1Pt1 ];

					}
					// segment#2  is a single point
					if ( seg2Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
						return [ inSeg2Pt1 ];

					}

					// they are collinear segments, which might overlap
					var seg1min, seg1max, seg1minVal, seg1maxVal;
					var seg2min, seg2max, seg2minVal, seg2maxVal;
					if ( seg1dx !== 0 ) {

						// the segments are NOT on a vertical line
						if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

						}
						if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

						}

					} else {

						// the segments are on a vertical line
						if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

						}
						if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

						}

					}
					if ( seg1minVal <= seg2minVal ) {

						if ( seg1maxVal <  seg2minVal )	return [];
						if ( seg1maxVal === seg2minVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg2min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
						return	[ seg2min, seg2max ];

					} else {

						if ( seg1minVal >  seg2maxVal )	return [];
						if ( seg1minVal === seg2maxVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg1min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
						return	[ seg1min, seg2max ];

					}

				}

			}

			function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

				// The order of legs is important

				// translation of all points, so that Vertex is at (0,0)
				var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
				var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
				var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

				// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
				var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
				var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

				if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

					// angle != 180 deg.

					var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
					// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

					if ( from2toAngle > 0 ) {

						// main angle < 180 deg.
						return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

					} else {

						// main angle > 180 deg.
						return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

					}

				} else {

					// angle == 180 deg.
					// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
					return	( from2otherAngle > 0 );

				}

			}


			function removeHoles( contour, holes ) {

				var shape = contour.concat(); // work on this shape
				var hole;

				function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

					// Check if hole point lies within angle around shape point
					var lastShapeIdx = shape.length - 1;

					var prevShapeIdx = inShapeIdx - 1;
					if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

					var nextShapeIdx = inShapeIdx + 1;
					if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

					var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
						return	false;

					}

					// Check if shape point lies within angle around hole point
					var lastHoleIdx = hole.length - 1;

					var prevHoleIdx = inHoleIdx - 1;
					if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

					var nextHoleIdx = inHoleIdx + 1;
					if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

					insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
						return	false;

					}

					return	true;

				}

				function intersectsShapeEdge( inShapePt, inHolePt ) {

					// checks for intersections with shape edges
					var sIdx, nextIdx, intersection;
					for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

						nextIdx = sIdx + 1; nextIdx %= shape.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
						if ( intersection.length > 0 )		return	true;

					}

					return	false;

				}

				var indepHoles = [];

				function intersectsHoleEdge( inShapePt, inHolePt ) {

					// checks for intersections with hole edges
					var ihIdx, chkHole,
						hIdx, nextIdx, intersection;
					for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

						chkHole = holes[ indepHoles[ ihIdx ]];
						for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

							nextIdx = hIdx + 1; nextIdx %= chkHole.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;

						}

					}
					return	false;

				}

				var holeIndex, shapeIndex,
					shapePt, holePt,
					holeIdx, cutKey, failedCuts = [],
					tmpShape1, tmpShape2,
					tmpHole1, tmpHole2;

				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

					indepHoles.push( h );

				}

				var minShapeIndex = 0;
				var counter = indepHoles.length * 2;
				while ( indepHoles.length > 0 ) {

					counter --;
					if ( counter < 0 ) {

						console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
						break;

					}

					// search for shape-vertex and hole-vertex,
					// which can be connected without intersections
					for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

						shapePt = shape[ shapeIndex ];
						holeIndex	= - 1;

						// search for hole which can be reached without intersections
						for ( var h = 0; h < indepHoles.length; h ++ ) {

							holeIdx = indepHoles[ h ];

							// prevent multiple checks
							cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
							if ( failedCuts[ cutKey ] !== undefined )			continue;

							hole = holes[ holeIdx ];
							for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

								holePt = hole[ h2 ];
								if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
								if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
								if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

								holeIndex = h2;
								indepHoles.splice( h, 1 );

								tmpShape1 = shape.slice( 0, shapeIndex + 1 );
								tmpShape2 = shape.slice( shapeIndex );
								tmpHole1 = hole.slice( holeIndex );
								tmpHole2 = hole.slice( 0, holeIndex + 1 );

								shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

								minShapeIndex = shapeIndex;

								// Debug only, to show the selected cuts
								// glob_CutLines.push( [ shapePt, holePt ] );

								break;

							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found

							failedCuts[ cutKey ] = true;			// remember failure

						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found

					}

				}

				return shape; 			/* shape with no holes */

			}


			var i, il, f, face,
				key, index,
				allPointsMap = {};

			// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

			var allpoints = contour.concat();

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				Array.prototype.push.apply( allpoints, holes[ h ] );

			}

			//console.log( "allpoints",allpoints, allpoints.length );

			// prepare all points map

			for ( i = 0, il = allpoints.length; i < il; i ++ ) {

				key = allpoints[ i ].x + ":" + allpoints[ i ].y;

				if ( allPointsMap[ key ] !== undefined ) {

					console.warn( "THREE.Shape: Duplicate point", key );

				}

				allPointsMap[ key ] = i;

			}

			// remove holes by cutting paths to holes and adding them to the shape
			var shapeWithoutHoles = removeHoles( contour, holes );

			var triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
			//console.log( "triangles",triangles, triangles.length );

			// check all face vertices against all points map

			for ( i = 0, il = triangles.length; i < il; i ++ ) {

				face = triangles[ i ];

				for ( f = 0; f < 3; f ++ ) {

					key = face[ f ].x + ":" + face[ f ].y;

					index = allPointsMap[ key ];

					if ( index !== undefined ) {

						face[ f ] = index;

					}

				}

			}

			return triangles.concat();

		},

		isClockWise: function ( pts ) {

			return THREE.ShapeUtils.area( pts ) < 0;

		},

		// Bezier Curves formulas obtained from
		// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

		// Quad Bezier Functions

		b2: ( function () {

			function b2p0( t, p ) {

				var k = 1 - t;
				return k * k * p;

			}

			function b2p1( t, p ) {

				return 2 * ( 1 - t ) * t * p;

			}

			function b2p2( t, p ) {

				return t * t * p;

			}

			return function ( t, p0, p1, p2 ) {

				return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );

			};

		} )(),

		// Cubic Bezier Functions

		b3: ( function () {

			function b3p0( t, p ) {

				var k = 1 - t;
				return k * k * k * p;

			}

			function b3p1( t, p ) {

				var k = 1 - t;
				return 3 * k * k * t * p;

			}

			function b3p2( t, p ) {

				var k = 1 - t;
				return 3 * k * t * t * p;

			}

			function b3p3( t, p ) {

				return t * t * t * p;

			}

			return function ( t, p0, p1, p2, p3 ) {

				return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );

			};

		} )()

	};

	// File:src/extras/core/Curve.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of Curve methods
	 * .getPoint(t), getTangent(t)
	 * .getPointAt(u), getTagentAt(u)
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following classes subclasses THREE.Curve:
	 *
	 * -- 2d classes --
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.CubicBezierCurve
	 * THREE.SplineCurve
	 * THREE.ArcCurve
	 * THREE.EllipseCurve
	 *
	 * -- 3d classes --
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.SplineCurve3
	 * THREE.ClosedSplineCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	THREE.Curve = function () {

	};

	THREE.Curve.prototype = {

		constructor: THREE.Curve,

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( t ) {

			console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var d, pts = [];

			for ( d = 0; d <= divisions; d ++ ) {

				pts.push( this.getPoint( d / divisions ) );

			}

			return pts;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var d, pts = [];

			for ( d = 0; d <= divisions; d ++ ) {

				pts.push( this.getPointAt( d / divisions ) );

			}

			return pts;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;

			if ( this.cacheArcLengths
				&& ( this.cacheArcLengths.length === divisions + 1 )
				&& ! this.needsUpdate ) {

				//console.log( "cached", this.cacheArcLengths );
				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint ( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum:sum }; Sum is in the last element.

		},

		updateArcLengths: function() {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			//var time = Date.now();

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			//console.log('b' , i, low, high, Date.now()- time);

			if ( arcLengths[ i ] === targetArcLength ) {

				var t = i / ( il - 1 );
				return t;

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		}

	}

	THREE.Curve.Utils = THREE.CurveUtils; // backwards compatibility

	// TODO: Transformation for Curves?

	/**************************************************************
	 *	3D Curves
	 **************************************************************/

	// A Factory method for creating new curve subclasses

	THREE.Curve.create = function ( constructor, getPointFunc ) {

		constructor.prototype = Object.create( THREE.Curve.prototype );
		constructor.prototype.constructor = constructor;
		constructor.prototype.getPoint = getPointFunc;

		return constructor;

	};

	// File:src/extras/core/CurvePath.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	THREE.CurvePath = function () {

		this.curves = [];

		this.autoClose = false; // Automatically closes the path

	};

	THREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );
	THREE.CurvePath.prototype.constructor = THREE.CurvePath;

	THREE.CurvePath.prototype.add = function ( curve ) {

		this.curves.push( curve );

	};

	/*
	THREE.CurvePath.prototype.checkConnection = function() {
		// TODO
		// If the ending of curve is not connected to the starting
		// or the next curve, then, this is not a real path
	};
	*/

	THREE.CurvePath.prototype.closePath = function() {

		// TODO Test
		// and verify for vector3 (needs to implement equals)
		// Add a line curve if start and end of lines are not connected
		var startPoint = this.curves[ 0 ].getPoint( 0 );
		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

		if ( ! startPoint.equals( endPoint ) ) {

			this.curves.push( new THREE.LineCurve( endPoint, startPoint ) );

		}

	};

	// To get accurate point with reference to
	// entire path distance at time t,
	// following has to be done:

	// 1. Length of each sub path have to be known
	// 2. Locate and identify type of curve
	// 3. Get t for the curve
	// 4. Return curve.getPointAt(t')

	THREE.CurvePath.prototype.getPoint = function( t ) {

		var d = t * this.getLength();
		var curveLengths = this.getCurveLengths();
		var i = 0;

		// To think about boundaries points.

		while ( i < curveLengths.length ) {

			if ( curveLengths[ i ] >= d ) {

				var diff = curveLengths[ i ] - d;
				var curve = this.curves[ i ];

				var u = 1 - diff / curve.getLength();

				return curve.getPointAt( u );

			}

			i ++;

		}

		return null;

		// loop where sum != 0, sum > d , sum+1 <d

	};

	/*
	THREE.CurvePath.prototype.getTangent = function( t ) {
	};
	*/

	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	// getPoint() depends on getLength

	THREE.CurvePath.prototype.getLength = function() {

		var lens = this.getCurveLengths();
		return lens[ lens.length - 1 ];

	};

	// Compute lengths and cache them
	// We cannot overwrite getLengths() because UtoT mapping uses it.

	THREE.CurvePath.prototype.getCurveLengths = function() {

		// We use cache values if curves and cache array are same length

		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

			return this.cacheLengths;

		}

		// Get length of sub-curve
		// Push sums into cached array

		var lengths = [], sums = 0;

		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

			sums += this.curves[ i ].getLength();
			lengths.push( sums );

		}

		this.cacheLengths = lengths;

		return lengths;

	};



	/**************************************************************
	 *	Create Geometries Helpers
	 **************************************************************/

	/// Generate geometry from path points (for Line or Points objects)

	THREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {

		var pts = this.getPoints( divisions );
		return this.createGeometry( pts );

	};

	// Generate geometry from equidistant sampling along the path

	THREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {

		var pts = this.getSpacedPoints( divisions );
		return this.createGeometry( pts );

	};

	THREE.CurvePath.prototype.createGeometry = function( points ) {

		var geometry = new THREE.Geometry();

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			geometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );

		}

		return geometry;

	};

	// File:src/extras/core/Path.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 *
	 **/

	THREE.Path = function ( points ) {

		THREE.CurvePath.call( this );

		this.actions = [];

		if ( points ) {

			this.fromPoints( points );

		}

	};

	THREE.Path.prototype = Object.create( THREE.CurvePath.prototype );
	THREE.Path.prototype.constructor = THREE.Path;

	// TODO Clean up PATH API

	// Create path using straight lines to connect all points
	// - vectors: array of Vector2

	THREE.Path.prototype.fromPoints = function ( vectors ) {

		this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

		for ( var i = 1, l = vectors.length; i < l; i ++ ) {

			this.lineTo( vectors[ i ].x, vectors[ i ].y );

		}

	};

	// startPath() endPath()?

	THREE.Path.prototype.moveTo = function ( x, y ) {

		this.actions.push( { action: 'moveTo', args: [ x, y ] } );

	};

	THREE.Path.prototype.lineTo = function ( x, y ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;

		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );
		this.curves.push( curve );

		this.actions.push( { action: 'lineTo', args: [ x, y ] } );

	};

	THREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;

		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		var curve = new THREE.QuadraticBezierCurve(
			new THREE.Vector2( x0, y0 ),
			new THREE.Vector2( aCPx, aCPy ),
			new THREE.Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );

	};

	THREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;

		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		var curve = new THREE.CubicBezierCurve(
			new THREE.Vector2( x0, y0 ),
			new THREE.Vector2( aCP1x, aCP1y ),
			new THREE.Vector2( aCP2x, aCP2y ),
			new THREE.Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );

	};

	THREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {

		var args = Array.prototype.slice.call( arguments );

		var lastargs = this.actions[ this.actions.length - 1 ].args;

		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		var npts = [ new THREE.Vector2( x0, y0 ) ];
		Array.prototype.push.apply( npts, pts );

		var curve = new THREE.SplineCurve( npts );
		this.curves.push( curve );

		this.actions.push( { action: 'splineThru', args: args } );

	};

	// FUTURE: Change the API or follow canvas API?

	THREE.Path.prototype.arc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		this.absarc( aX + x0, aY + y0, aRadius,
			aStartAngle, aEndAngle, aClockwise );

	 };

	 THREE.Path.prototype.absarc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	 };

	THREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

	 };


	THREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var args = [
			aX, aY,
			xRadius, yRadius,
			aStartAngle, aEndAngle,
			aClockwise,
			aRotation || 0 // aRotation is optional.
		];

		var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
		this.curves.push( curve );

		var lastPoint = curve.getPoint( 1 );
		args.push( lastPoint.x );
		args.push( lastPoint.y );

		this.actions.push( { action: 'ellipse', args: args } );

	 };

	THREE.Path.prototype.getSpacedPoints = function ( divisions ) {

		if ( ! divisions ) divisions = 40;

		var points = [];

		for ( var i = 0; i < divisions; i ++ ) {

			points.push( this.getPoint( i / divisions ) );

			//if ( !this.getPoint( i / divisions ) ) throw "DIE";

		}

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	};

	/* Return an array of vectors based on contour of the path */

	THREE.Path.prototype.getPoints = function( divisions ) {

		divisions = divisions || 12;

		var b2 = THREE.ShapeUtils.b2;
		var b3 = THREE.ShapeUtils.b3;

		var points = [];

		var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,
			laste, tx, ty;

		for ( var i = 0, l = this.actions.length; i < l; i ++ ) {

			var item = this.actions[ i ];

			var action = item.action;
			var args = item.args;

			switch ( action ) {

			case 'moveTo':

				points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

				break;

			case 'lineTo':

				points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

				break;

			case 'quadraticCurveTo':

				cpx  = args[ 2 ];
				cpy  = args[ 3 ];

				cpx1 = args[ 0 ];
				cpy1 = args[ 1 ];

				if ( points.length > 0 ) {

					laste = points[ points.length - 1 ];

					cpx0 = laste.x;
					cpy0 = laste.y;

				} else {

					laste = this.actions[ i - 1 ].args;

					cpx0 = laste[ laste.length - 2 ];
					cpy0 = laste[ laste.length - 1 ];

				}

				for ( var j = 1; j <= divisions; j ++ ) {

					var t = j / divisions;

					tx = b2( t, cpx0, cpx1, cpx );
					ty = b2( t, cpy0, cpy1, cpy );

					points.push( new THREE.Vector2( tx, ty ) );

				}

				break;

			case 'bezierCurveTo':

				cpx  = args[ 4 ];
				cpy  = args[ 5 ];

				cpx1 = args[ 0 ];
				cpy1 = args[ 1 ];

				cpx2 = args[ 2 ];
				cpy2 = args[ 3 ];

				if ( points.length > 0 ) {

					laste = points[ points.length - 1 ];

					cpx0 = laste.x;
					cpy0 = laste.y;

				} else {

					laste = this.actions[ i - 1 ].args;

					cpx0 = laste[ laste.length - 2 ];
					cpy0 = laste[ laste.length - 1 ];

				}


				for ( var j = 1; j <= divisions; j ++ ) {

					var t = j / divisions;

					tx = b3( t, cpx0, cpx1, cpx2, cpx );
					ty = b3( t, cpy0, cpy1, cpy2, cpy );

					points.push( new THREE.Vector2( tx, ty ) );

				}

				break;

			case 'splineThru':

				laste = this.actions[ i - 1 ].args;

				var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );
				var spts = [ last ];

				var n = divisions * args[ 0 ].length;

				spts = spts.concat( args[ 0 ] );

				var spline = new THREE.SplineCurve( spts );

				for ( var j = 1; j <= n; j ++ ) {

					points.push( spline.getPointAt( j / n ) );

				}

				break;

			case 'arc':

				var aX = args[ 0 ], aY = args[ 1 ],
					aRadius = args[ 2 ],
					aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],
					aClockwise = !! args[ 5 ];

				var deltaAngle = aEndAngle - aStartAngle;
				var angle;
				var tdivisions = divisions * 2;

				for ( var j = 1; j <= tdivisions; j ++ ) {

					var t = j / tdivisions;

					if ( ! aClockwise ) {

						t = 1 - t;

					}

					angle = aStartAngle + t * deltaAngle;

					tx = aX + aRadius * Math.cos( angle );
					ty = aY + aRadius * Math.sin( angle );

					//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

					points.push( new THREE.Vector2( tx, ty ) );

				}

				//console.log(points);

				break;

			case 'ellipse':

				var aX = args[ 0 ], aY = args[ 1 ],
					xRadius = args[ 2 ],
					yRadius = args[ 3 ],
					aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],
					aClockwise = !! args[ 6 ],
					aRotation = args[ 7 ];


				var deltaAngle = aEndAngle - aStartAngle;
				var angle;
				var tdivisions = divisions * 2;

				var cos, sin;
				if ( aRotation !== 0 ) {

					cos = Math.cos( aRotation );
					sin = Math.sin( aRotation );

				}

				for ( var j = 1; j <= tdivisions; j ++ ) {

					var t = j / tdivisions;

					if ( ! aClockwise ) {

						t = 1 - t;

					}

					angle = aStartAngle + t * deltaAngle;

					tx = aX + xRadius * Math.cos( angle );
					ty = aY + yRadius * Math.sin( angle );

					if ( aRotation !== 0 ) {

						var x = tx, y = ty;

						// Rotate the point about the center of the ellipse.
						tx = ( x - aX ) * cos - ( y - aY ) * sin + aX;
						ty = ( x - aX ) * sin + ( y - aY ) * cos + aY;

					}

					//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

					points.push( new THREE.Vector2( tx, ty ) );

				}

				//console.log(points);

				break;

			} // end switch

		}



		// Normalize to remove the closing point by default.
		var lastPoint = points[ points.length - 1 ];
		if ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&
				 Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )
			points.splice( points.length - 1, 1 );

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	};

	//
	// Breaks path into shapes
	//
	//	Assumptions (if parameter isCCW==true the opposite holds):
	//	- solid shapes are defined clockwise (CW)
	//	- holes are defined counterclockwise (CCW)
	//
	//	If parameter noHoles==true:
	//  - all subPaths are regarded as solid shapes
	//  - definition order CW/CCW has no relevance
	//

	THREE.Path.prototype.toShapes = function( isCCW, noHoles ) {

		function extractSubpaths( inActions ) {

			var subPaths = [], lastPath = new THREE.Path();

			for ( var i = 0, l = inActions.length; i < l; i ++ ) {

				var item = inActions[ i ];

				var args = item.args;
				var action = item.action;

				if ( action === 'moveTo' ) {

					if ( lastPath.actions.length !== 0 ) {

						subPaths.push( lastPath );
						lastPath = new THREE.Path();

					}

				}

				lastPath[ action ].apply( lastPath, args );

			}

			if ( lastPath.actions.length !== 0 ) {

				subPaths.push( lastPath );

			}

			// console.log(subPaths);

			return	subPaths;

		}

		function toShapesNoHoles( inSubpaths ) {

			var shapes = [];

			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

				var tmpPath = inSubpaths[ i ];

				var tmpShape = new THREE.Shape();
				tmpShape.actions = tmpPath.actions;
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );

			}

			//console.log("shape", shapes);

			return shapes;

		}

		function isPointInsidePolygon( inPt, inPolygon ) {

			var polyLen = inPolygon.length;

			// inPt on polygon contour => immediate success    or
			// toggling of inside/outside at every single! intersection point of an edge
			//  with the horizontal line through inPt, left of inPt
			//  not counting lowerY endpoints of edges and whole edges on that line
			var inside = false;
			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

				var edgeLowPt  = inPolygon[ p ];
				var edgeHighPt = inPolygon[ q ];

				var edgeDx = edgeHighPt.x - edgeLowPt.x;
				var edgeDy = edgeHighPt.y - edgeLowPt.y;

				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

					// not parallel
					if ( edgeDy < 0 ) {

						edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

					}
					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

					if ( inPt.y === edgeLowPt.y ) {

						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
						// continue;				// no intersection or edgeLowPt => doesn't count !!!

					} else {

						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
						if ( perpEdge < 0 ) 				continue;
						inside = ! inside;		// true intersection left of inPt

					}

				} else {

					// parallel or collinear
					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
					// edge lies on the same horizontal line as inPt
					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
					// continue;

				}

			}

			return	inside;

		}

		var isClockWise = THREE.ShapeUtils.isClockWise;

		var subPaths = extractSubpaths( this.actions );
		if ( subPaths.length === 0 ) return [];

		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


		var solid, tmpPath, tmpShape, shapes = [];

		if ( subPaths.length === 1 ) {

			tmpPath = subPaths[ 0 ];
			tmpShape = new THREE.Shape();
			tmpShape.actions = tmpPath.actions;
			tmpShape.curves = tmpPath.curves;
			shapes.push( tmpShape );
			return shapes;

		}

		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
		holesFirst = isCCW ? ! holesFirst : holesFirst;

		// console.log("Holes first", holesFirst);

		var betterShapeHoles = [];
		var newShapes = [];
		var newShapeHoles = [];
		var mainIdx = 0;
		var tmpPoints;

		newShapes[ mainIdx ] = undefined;
		newShapeHoles[ mainIdx ] = [];

		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

			tmpPath = subPaths[ i ];
			tmpPoints = tmpPath.getPoints();
			solid = isClockWise( tmpPoints );
			solid = isCCW ? ! solid : solid;

			if ( solid ) {

				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

				newShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };
				newShapes[ mainIdx ].s.actions = tmpPath.actions;
				newShapes[ mainIdx ].s.curves = tmpPath.curves;

				if ( holesFirst )	mainIdx ++;
				newShapeHoles[ mainIdx ] = [];

				//console.log('cw', i);

			} else {

				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

				//console.log('ccw', i);

			}

		}

		// only Holes? -> probably all Shapes with wrong orientation
		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


		if ( newShapes.length > 1 ) {

			var ambiguous = false;
			var toChange = [];

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				betterShapeHoles[ sIdx ] = [];

			}

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				var sho = newShapeHoles[ sIdx ];

				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

					var ho = sho[ hIdx ];
					var hole_unassigned = true;

					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
							if ( hole_unassigned ) {

								hole_unassigned = false;
								betterShapeHoles[ s2Idx ].push( ho );

							} else {

								ambiguous = true;

							}

						}

					}
					if ( hole_unassigned ) {

						betterShapeHoles[ sIdx ].push( ho );

					}

				}

			}
			// console.log("ambiguous: ", ambiguous);
			if ( toChange.length > 0 ) {

				// console.log("to change: ", toChange);
				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

			}

		}

		var tmpHoles;

		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

			tmpShape = newShapes[ i ].s;
			shapes.push( tmpShape );
			tmpHoles = newShapeHoles[ i ];

			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

				tmpShape.holes.push( tmpHoles[ j ].h );

			}

		}

		//console.log("shape", shapes);

		return shapes;

	};

	// File:src/extras/core/Shape.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	THREE.Shape = function () {

		THREE.Path.apply( this, arguments );

		this.holes = [];

	};

	THREE.Shape.prototype = Object.create( THREE.Path.prototype );
	THREE.Shape.prototype.constructor = THREE.Shape;

	// Convenience method to return ExtrudeGeometry

	THREE.Shape.prototype.extrude = function ( options ) {

		return new THREE.ExtrudeGeometry( this, options );

	};

	// Convenience method to return ShapeGeometry

	THREE.Shape.prototype.makeGeometry = function ( options ) {

		return new THREE.ShapeGeometry( this, options );

	};

	// Get points of holes

	THREE.Shape.prototype.getPointsHoles = function ( divisions ) {

		var holesPts = [];

		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

		}

		return holesPts;

	};


	// Get points of shape and holes (keypoints based on segments parameter)

	THREE.Shape.prototype.extractAllPoints = function ( divisions ) {

		return {

			shape: this.getPoints( divisions ),
			holes: this.getPointsHoles( divisions )

		};

	};

	THREE.Shape.prototype.extractPoints = function ( divisions ) {

		return this.extractAllPoints( divisions );

	};

	THREE.Shape.Utils = THREE.ShapeUtils; // backwards compatibility

	// File:src/extras/curves/LineCurve.js

	/**************************************************************
	 *	Line
	 **************************************************************/

	THREE.LineCurve = function ( v1, v2 ) {

		this.v1 = v1;
		this.v2 = v2;

	};

	THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.LineCurve.prototype.constructor = THREE.LineCurve;

	THREE.LineCurve.prototype.getPoint = function ( t ) {

		var point = this.v2.clone().sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	THREE.LineCurve.prototype.getPointAt = function ( u ) {

		return this.getPoint( u );

	};

	THREE.LineCurve.prototype.getTangent = function( t ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	// File:src/extras/curves/QuadraticBezierCurve.js

	/**************************************************************
	 *	Quadratic Bezier curve
	 **************************************************************/


	THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	};

	THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;


	THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {

		var b2 = THREE.ShapeUtils.b2;

		return new THREE.Vector2(
			b2( t, this.v0.x, this.v1.x, this.v2.x ),
			b2( t, this.v0.y, this.v1.y, this.v2.y )
		);

	};


	THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {

		var tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;

		return new THREE.Vector2(
			tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
			tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
		).normalize();

	};

	// File:src/extras/curves/CubicBezierCurve.js

	/**************************************************************
	 *	Cubic Bezier curve
	 **************************************************************/

	THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	};

	THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;

	THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {

		var b3 = THREE.ShapeUtils.b3;

		return new THREE.Vector2(
			b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		);

	};

	THREE.CubicBezierCurve.prototype.getTangent = function( t ) {

		var tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;

		return new THREE.Vector2(
			tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		).normalize();

	};

	// File:src/extras/curves/SplineCurve.js

	/**************************************************************
	 *	Spline curve
	 **************************************************************/

	THREE.SplineCurve = function ( points /* array of Vector2 */ ) {

		this.points = ( points == undefined ) ? [] : points;

	};

	THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;

	THREE.SplineCurve.prototype.getPoint = function ( t ) {

		var points = this.points;
		var point = ( points.length - 1 ) * t;

		var intPoint = Math.floor( point );
		var weight = point - intPoint;

		var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var point1 = points[ intPoint ];
		var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		var interpolate = THREE.CurveUtils.interpolate;

		return new THREE.Vector2(
			interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
			interpolate( point0.y, point1.y, point2.y, point3.y, weight )
		);

	};

	// File:src/extras/curves/EllipseCurve.js

	/**************************************************************
	 *	Ellipse curve
	 **************************************************************/

	THREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		this.aX = aX;
		this.aY = aY;

		this.xRadius = xRadius;
		this.yRadius = yRadius;

		this.aStartAngle = aStartAngle;
		this.aEndAngle = aEndAngle;

		this.aClockwise = aClockwise;

		this.aRotation = aRotation || 0;

	};

	THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;

	THREE.EllipseCurve.prototype.getPoint = function ( t ) {

		var deltaAngle = this.aEndAngle - this.aStartAngle;

		if ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;
		if ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;

		var angle;

		if ( this.aClockwise === true ) {

			angle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );

		} else {

			angle = this.aStartAngle + t * deltaAngle;

		}

		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x, ty = y;

			// Rotate the point about the center of the ellipse.
			x = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;
			y = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;

		}

		return new THREE.Vector2( x, y );

	};

	// File:src/extras/curves/ArcCurve.js

	/**************************************************************
	 *	Arc curve
	 **************************************************************/

	THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	};

	THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );
	THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;

	// File:src/extras/curves/LineCurve3.js

	/**************************************************************
	 *	Line3D
	 **************************************************************/

	THREE.LineCurve3 = THREE.Curve.create(

		function ( v1, v2 ) {

			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			var vector = new THREE.Vector3();

			vector.subVectors( this.v2, this.v1 ); // diff
			vector.multiplyScalar( t );
			vector.add( this.v1 );

			return vector;

		}

	);

	// File:src/extras/curves/QuadraticBezierCurve3.js

	/**************************************************************
	 *	Quadratic Bezier 3D curve
	 **************************************************************/

	THREE.QuadraticBezierCurve3 = THREE.Curve.create(

		function ( v0, v1, v2 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			var b2 = THREE.ShapeUtils.b2;

			return new THREE.Vector3(
				b2( t, this.v0.x, this.v1.x, this.v2.x ),
				b2( t, this.v0.y, this.v1.y, this.v2.y ),
				b2( t, this.v0.z, this.v1.z, this.v2.z )
			);

		}

	);

	// File:src/extras/curves/CubicBezierCurve3.js

	/**************************************************************
	 *	Cubic Bezier 3D curve
	 **************************************************************/

	THREE.CubicBezierCurve3 = THREE.Curve.create(

		function ( v0, v1, v2, v3 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;

		},

		function ( t ) {

			var b3 = THREE.ShapeUtils.b3;

			return new THREE.Vector3(
				b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
				b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
			);

		}

	);

	// File:src/extras/curves/SplineCurve3.js

	/**************************************************************
	 *	Spline 3D curve
	 **************************************************************/


	THREE.SplineCurve3 = THREE.Curve.create(

		function ( points /* array of Vector3 */ ) {

			console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
			this.points = ( points == undefined ) ? [] : points;

		},

		function ( t ) {

			var points = this.points;
			var point = ( points.length - 1 ) * t;

			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

			var interpolate = THREE.CurveUtils.interpolate;

			return new THREE.Vector3(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
				interpolate( point0.z, point1.z, point2.z, point3.z, weight )
			);

		}

	);

	// File:src/extras/curves/CatmullRomCurve3.js

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */

	THREE.CatmullRomCurve3 = ( function() {

		var
			tmp = new THREE.Vector3(),
			px = new CubicPoly(),
			py = new CubicPoly(),
			pz = new CubicPoly();

		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM

		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/

		function CubicPoly() {

		}

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {

			this.c0 = x0;
			this.c1 = t0;
			this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			this.c3 = 2 * x0 - 2 * x1 + t0 + t1;

		};

		CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			// initCubicPoly
			this.init( x1, x2, t1, t2 );

		};

		// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
		CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {

			this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		};

		CubicPoly.prototype.calc = function( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;

		};

		// Subclass Three.js curve
		return THREE.Curve.create(

			function ( p /* array of Vector3 */ ) {

				this.points = p || [];

			},

			function ( t ) {

				var points = this.points,
					point, intPoint, weight, l;

				l = points.length;

				if ( l < 2 ) console.log( 'duh, you need at least 2 points' );

				point = ( l - 1 ) * t;
				intPoint = Math.floor( point );
				weight = point - intPoint;

				if ( weight === 0 && intPoint === l - 1 ) {

					intPoint = l - 2;
					weight = 1;

				}

				var p0, p1, p2, p3;

				if ( intPoint === 0 ) {

					// extrapolate first point
					tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
					p0 = tmp;

				} else {

					p0 = points[ intPoint - 1 ];

				}

				p1 = points[ intPoint ];
				p2 = points[ intPoint + 1 ];

				if ( intPoint + 2 < l ) {

					p3 = points[ intPoint + 2 ]

				} else {

					// extrapolate last point
					tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 2 ] );
					p3 = tmp;

				}

				if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

					// init Centripetal / Chordal Catmull-Rom
					var pow = this.type === 'chordal' ? 0.5 : 0.25;
					var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
					var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
					var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

					// safety check for repeated points
					if ( dt1 < 1e-4 ) dt1 = 1.0;
					if ( dt0 < 1e-4 ) dt0 = dt1;
					if ( dt2 < 1e-4 ) dt2 = dt1;

					px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
					py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
					pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

				} else if ( this.type === 'catmullrom' ) {

					var tension = this.tension !== undefined ? this.tension : 0.5;
					px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
					py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
					pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

				}

				var v = new THREE.Vector3(
					px.calc( weight ),
					py.calc( weight ),
					pz.calc( weight )
				);

				return v;

			}

		);

	} )();

	// File:src/extras/curves/ClosedSplineCurve3.js

	/**************************************************************
	 *	Closed Spline 3D curve
	 **************************************************************/


	THREE.ClosedSplineCurve3 = THREE.Curve.create(

		function ( points /* array of Vector3 */ ) {

			this.points = ( points == undefined ) ? [] : points;

		},

		function ( t ) {

			var points = this.points;
			var point = ( points.length - 0 ) * t; // This needs to be from 0-length +1

			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

			var point0 = points[ ( intPoint - 1 ) % points.length ];
			var point1 = points[ ( intPoint     ) % points.length ];
			var point2 = points[ ( intPoint + 1 ) % points.length ];
			var point3 = points[ ( intPoint + 2 ) % points.length ];

			var interpolate = THREE.CurveUtils.interpolate;

			return new THREE.Vector3(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
				interpolate( point0.z, point1.z, point2.z, point3.z, weight )
			);

		}

	);

	// File:src/extras/geometries/BoxGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
	 */

	THREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		THREE.Geometry.call( this );

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		this.widthSegments = widthSegments || 1;
		this.heightSegments = heightSegments || 1;
		this.depthSegments = depthSegments || 1;

		var scope = this;

		var width_half = width / 2;
		var height_half = height / 2;
		var depth_half = depth / 2;

		buildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px
		buildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx
		buildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py
		buildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny
		buildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz
		buildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz

		function buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {

			var w, ix, iy,
			gridX = scope.widthSegments,
			gridY = scope.heightSegments,
			width_half = width / 2,
			height_half = height / 2,
			offset = scope.vertices.length;

			if ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {

				w = 'z';

			} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {

				w = 'y';
				gridY = scope.depthSegments;

			} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {

				w = 'x';
				gridX = scope.depthSegments;

			}

			var gridX1 = gridX + 1,
			gridY1 = gridY + 1,
			segment_width = width / gridX,
			segment_height = height / gridY,
			normal = new THREE.Vector3();

			normal[ w ] = depth > 0 ? 1 : - 1;

			for ( iy = 0; iy < gridY1; iy ++ ) {

				for ( ix = 0; ix < gridX1; ix ++ ) {

					var vector = new THREE.Vector3();
					vector[ u ] = ( ix * segment_width - width_half ) * udir;
					vector[ v ] = ( iy * segment_height - height_half ) * vdir;
					vector[ w ] = depth;

					scope.vertices.push( vector );

				}

			}

			for ( iy = 0; iy < gridY; iy ++ ) {

				for ( ix = 0; ix < gridX; ix ++ ) {

					var a = ix + gridX1 * iy;
					var b = ix + gridX1 * ( iy + 1 );
					var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = ( ix + 1 ) + gridX1 * iy;

					var uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );
					var uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );
					var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );
					var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );

					var face = new THREE.Face3( a + offset, b + offset, d + offset );
					face.normal.copy( normal );
					face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
					face.materialIndex = materialIndex;

					scope.faces.push( face );
					scope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

					face = new THREE.Face3( b + offset, c + offset, d + offset );
					face.normal.copy( normal );
					face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
					face.materialIndex = materialIndex;

					scope.faces.push( face );
					scope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

				}

			}

		}

		this.mergeVertices();

	};

	THREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;

	THREE.CubeGeometry = THREE.BoxGeometry; // backwards compatibility

	// File:src/extras/geometries/CircleGeometry.js

	/**
	 * @author hughes
	 */

	THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );

	};

	THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;

	// File:src/extras/geometries/CircleBufferGeometry.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {

		THREE.BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		var vertices = segments + 2;

		var positions = new Float32Array( vertices * 3 );
		var normals = new Float32Array( vertices * 3 );
		var uvs = new Float32Array( vertices * 2 );

		// center data is already zero, but need to set a few extras
		normals[ 2 ] = 1.0;
		uvs[ 0 ] = 0.5;
		uvs[ 1 ] = 0.5;

		for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {

			var segment = thetaStart + s / segments * thetaLength;

			positions[ i ] = radius * Math.cos( segment );
			positions[ i + 1 ] = radius * Math.sin( segment );

			normals[ i + 2 ] = 1; // normal z

			uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
			uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;

		}

		var indices = [];

		for ( var i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		this.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

	};

	THREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;

	// File:src/extras/geometries/CylinderGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radiusTop = radiusTop !== undefined ? radiusTop : 20;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
		height = height !== undefined ? height : 100;

		radialSegments = radialSegments || 8;
		heightSegments = heightSegments || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : 2 * Math.PI;

		var heightHalf = height / 2;

		var x, y, vertices = [], uvs = [];

		for ( y = 0; y <= heightSegments; y ++ ) {

			var verticesRow = [];
			var uvsRow = [];

			var v = y / heightSegments;
			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;

				var vertex = new THREE.Vector3();
				vertex.x = radius * Math.sin( u * thetaLength + thetaStart );
				vertex.y = - v * height + heightHalf;
				vertex.z = radius * Math.cos( u * thetaLength + thetaStart );

				this.vertices.push( vertex );

				verticesRow.push( this.vertices.length - 1 );
				uvsRow.push( new THREE.Vector2( u, 1 - v ) );

			}

			vertices.push( verticesRow );
			uvs.push( uvsRow );

		}

		var tanTheta = ( radiusBottom - radiusTop ) / height;
		var na, nb;

		for ( x = 0; x < radialSegments; x ++ ) {

			if ( radiusTop !== 0 ) {

				na = this.vertices[ vertices[ 0 ][ x ] ].clone();
				nb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();

			} else {

				na = this.vertices[ vertices[ 1 ][ x ] ].clone();
				nb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();

			}

			na.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();
			nb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();

			for ( y = 0; y < heightSegments; y ++ ) {

				var v1 = vertices[ y ][ x ];
				var v2 = vertices[ y + 1 ][ x ];
				var v3 = vertices[ y + 1 ][ x + 1 ];
				var v4 = vertices[ y ][ x + 1 ];

				var n1 = na.clone();
				var n2 = na.clone();
				var n3 = nb.clone();
				var n4 = nb.clone();

				var uv1 = uvs[ y ][ x ].clone();
				var uv2 = uvs[ y + 1 ][ x ].clone();
				var uv3 = uvs[ y + 1 ][ x + 1 ].clone();
				var uv4 = uvs[ y ][ x + 1 ].clone();

				this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );

				this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );

			}

		}

		// top cap

		if ( openEnded === false && radiusTop > 0 ) {

			this.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );

			for ( x = 0; x < radialSegments; x ++ ) {

				var v1 = vertices[ 0 ][ x ];
				var v2 = vertices[ 0 ][ x + 1 ];
				var v3 = this.vertices.length - 1;

				var n1 = new THREE.Vector3( 0, 1, 0 );
				var n2 = new THREE.Vector3( 0, 1, 0 );
				var n3 = new THREE.Vector3( 0, 1, 0 );

				var uv1 = uvs[ 0 ][ x ].clone();
				var uv2 = uvs[ 0 ][ x + 1 ].clone();
				var uv3 = new THREE.Vector2( uv2.x, 0 );

				this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 1 ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

			}

		}

		// bottom cap

		if ( openEnded === false && radiusBottom > 0 ) {

			this.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );

			for ( x = 0; x < radialSegments; x ++ ) {

				var v1 = vertices[ heightSegments ][ x + 1 ];
				var v2 = vertices[ heightSegments ][ x ];
				var v3 = this.vertices.length - 1;

				var n1 = new THREE.Vector3( 0, - 1, 0 );
				var n2 = new THREE.Vector3( 0, - 1, 0 );
				var n3 = new THREE.Vector3( 0, - 1, 0 );

				var uv1 = uvs[ heightSegments ][ x + 1 ].clone();
				var uv2 = uvs[ heightSegments ][ x ].clone();
				var uv3 = new THREE.Vector2( uv2.x, 1 );

				this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 2 ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

			}

		}

		this.computeFaceNormals();

	};

	THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;

	// File:src/extras/geometries/EdgesGeometry.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.EdgesGeometry = function ( geometry, thresholdAngle ) {

		THREE.BufferGeometry.call( this );

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		var thresholdDot = Math.cos( THREE.Math.degToRad( thresholdAngle ) );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		var geometry2;

		if ( geometry instanceof THREE.BufferGeometry ) {

			geometry2 = new THREE.Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var vertices = geometry2.vertices;
		var faces = geometry2.faces;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge[ 0 ] = face[ keys[ j ] ];
				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
				edge.sort( sortFunction );

				var key = edge.toString();

				if ( hash[ key ] === undefined ) {

					hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					hash[ key ].face2 = i;

				}

			}

		}

		var coords = [];

		for ( var key in hash ) {

			var h = hash[ key ];

			if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {

				var vertex = vertices[ h.vert1 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

				vertex = vertices[ h.vert2 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

			}

		}

		this.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );

	};

	THREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;

	// File:src/extras/geometries/ExtrudeGeometry.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  amount: <int>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
	 *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
	 *
	 *  uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	THREE.ExtrudeGeometry = function ( shapes, options ) {

		if ( typeof( shapes ) === "undefined" ) {

			shapes = [];
			return;

		}

		THREE.Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

		// can't really use automatic vertex normals
		// as then front and back sides get smoothed too
		// should do separate smoothing just for sides

		//this.computeVertexNormals();

		//console.log( "took", ( Date.now() - startTime ) );

	};

	THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;

	THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {

		var sl = shapes.length;

		for ( var s = 0; s < sl; s ++ ) {

			var shape = shapes[ s ];
			this.addShape( shape, options );

		}

	};

	THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

		var amount = options.amount !== undefined ? options.amount : 100;

		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var steps = options.steps !== undefined ? options.steps : 1;

		var extrudePath = options.extrudePath;
		var extrudePts, extrudeByPath = false;

		// Use default WorldUVGenerator if no UV generators are specified.
		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;

		var splineTube, binormal, normal, position2;
		if ( extrudePath ) {

			extrudePts = extrudePath.getSpacedPoints( steps );

			extrudeByPath = true;
			bevelEnabled = false; // bevels not supported for path extrusion

			// SETUP TNB variables

			// Reuse TNB from TubeGeomtry for now.
			// TODO1 - have a .isClosed in spline?

			splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );

			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

			binormal = new THREE.Vector3();
			normal = new THREE.Vector3();
			position2 = new THREE.Vector3();

		}

		// Safeguards if bevels are not enabled

		if ( ! bevelEnabled ) {

			bevelSegments = 0;
			bevelThickness = 0;
			bevelSize = 0;

		}

		// Variables initialization

		var ahole, h, hl; // looping of holes
		var scope = this;

		var shapesOffset = this.vertices.length;

		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! THREE.ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				if ( THREE.ShapeUtils.isClockWise( ahole ) ) {

					holes[ h ] = ahole.reverse();

				}

			}

			reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

		}


		var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );

		/* Vertices */

		var contour = vertices; // vertices has all points but contour has only points of circumference

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			vertices = vertices.concat( ahole );

		}


		function scalePt2 ( pt, vec, size ) {

			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

			return vec.clone().multiplyScalar( size ).add( pt );

		}

		var b, bs, t, z,
			vert, vlen = vertices.length,
			face, flen = faces.length;


		// Find directions for point movement


		function getBevelVec( inPt, inPrev, inNext ) {

			// computes for inPt the corresponding point inPt' on a new contour
			//   shifted by 1 unit (length of normalized vector) to the left
			// if we walk along contour clockwise, this new contour is outside the old one
			//
			// inPt' is the intersection of the two lines parallel to the two
			//  adjacent edges of inPt at a distance of 1 unit on the left side.

			var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt

			// good reading for geometry algorithms (here: line-line intersection)
			// http://geomalgorithms.com/a05-_intersect-1.html

			var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
			var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;

			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

			// check for collinear edges
			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

				// not collinear

				// length of vectors for normalizing

				var v_prev_len = Math.sqrt( v_prev_lensq );
				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

				// shift adjacent points by unit vectors to the left

				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

				// scaling factor for v_prev to intersection point

				var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
						  ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				// vector from inPt to intersection point

				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

				// Don't normalize!, otherwise sharp corners become ugly
				//  but prevent crazy spikes
				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
				if ( v_trans_lensq <= 2 ) {

					return	new THREE.Vector2( v_trans_x, v_trans_y );

				} else {

					shrink_by = Math.sqrt( v_trans_lensq / 2 );

				}

			} else {

				// handle special case of collinear edges

				var direction_eq = false;		// assumes: opposite
				if ( v_prev_x > Number.EPSILON ) {

					if ( v_next_x > Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( v_prev_x < - Number.EPSILON ) {

						if ( v_next_x < - Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

							direction_eq = true;

						}

					}

				}

				if ( direction_eq ) {

					// console.log("Warning: lines are a straight sequence");
					v_trans_x = - v_prev_y;
					v_trans_y =  v_prev_x;
					shrink_by = Math.sqrt( v_prev_lensq );

				} else {

					// console.log("Warning: lines are a straight spike");
					v_trans_x = v_prev_x;
					v_trans_y = v_prev_y;
					shrink_by = Math.sqrt( v_prev_lensq / 2 );

				}

			}

			return	new THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

		}


		var contourMovements = [];

		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			// console.log('i,j,k', i, j , k)

			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

		}

		var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			oneHoleMovements = [];

			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

			}

			holesMovements.push( oneHoleMovements );
			verticesMovements = verticesMovements.concat( oneHoleMovements );

		}


		// Loop bevelSegments, 1 for the front, 1 for the back

		for ( b = 0; b < bevelSegments; b ++ ) {

			//for ( b = bevelSegments; b > 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * ( 1 - t );

			//z = bevelThickness * t;
			bs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved
			//bs = bevelSize * t; // linear

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

				v( vert.x, vert.y,  - z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					v( vert.x, vert.y,  - z );

				}

			}

		}

		bs = bevelSize;

		// Back facing vertices

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, 0 );

			} else {

				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

		// Add stepped vertices...
		// Including front facing vertices

		var s;

		for ( s = 1; s <= steps; s ++ ) {

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount / steps * s );

				} else {

					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

		}


		// Add bevel segments planes

		//for ( b = 1; b <= bevelSegments; b ++ ) {
		for ( b = bevelSegments - 1; b >= 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * ( 1 - t );
			//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
			bs = bevelSize * Math.sin ( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
				v( vert.x, vert.y,  amount + z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y,  amount + z );

					} else {

						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

					}

				}

			}

		}

		/* Faces */

		// Top and bottom faces

		buildLidFaces();

		// Sides faces

		buildSideFaces();


		/////  Internal functions

		function buildLidFaces() {

			if ( bevelEnabled ) {

				var layer = 0; // steps + 1
				var offset = vlen * layer;

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

				}

				layer = steps + bevelSegments * 2;
				offset = vlen * layer;

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

				}

			} else {

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

				}

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

				}

			}

		}

		// Create faces for the z-sides of the shape

		function buildSideFaces() {

			var layeroffset = 0;
			sidewalls( contour, layeroffset );
			layeroffset += contour.length;

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				sidewalls( ahole, layeroffset );

				//, true
				layeroffset += ahole.length;

			}

		}

		function sidewalls( contour, layeroffset ) {

			var j, k;
			i = contour.length;

			while ( -- i >= 0 ) {

				j = i;
				k = i - 1;
				if ( k < 0 ) k = contour.length - 1;

				//console.log('b', i,j, i-1, k,vertices.length);

				var s = 0, sl = steps  + bevelSegments * 2;

				for ( s = 0; s < sl; s ++ ) {

					var slen1 = vlen * s;
					var slen2 = vlen * ( s + 1 );

					var a = layeroffset + j + slen1,
						b = layeroffset + k + slen1,
						c = layeroffset + k + slen2,
						d = layeroffset + j + slen2;

					f4( a, b, c, d, contour, s, sl, j, k );

				}

			}

		}


		function v( x, y, z ) {

			scope.vertices.push( new THREE.Vector3( x, y, z ) );

		}

		function f3( a, b, c ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;

			scope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );

			var uvs = uvgen.generateTopUV( scope, a, b, c );

			scope.faceVertexUvs[ 0 ].push( uvs );

		}

		function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;
			d += shapesOffset;

			scope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );
			scope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );

			var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );

			scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
			scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

		}

	};

	THREE.ExtrudeGeometry.WorldUVGenerator = {

		generateTopUV: function ( geometry, indexA, indexB, indexC ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];

			return [
				new THREE.Vector2( a.x, a.y ),
				new THREE.Vector2( b.x, b.y ),
				new THREE.Vector2( c.x, c.y )
			];

		},

		generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];
			var d = vertices[ indexD ];

			if ( Math.abs( a.y - b.y ) < 0.01 ) {

				return [
					new THREE.Vector2( a.x, 1 - a.z ),
					new THREE.Vector2( b.x, 1 - b.z ),
					new THREE.Vector2( c.x, 1 - c.z ),
					new THREE.Vector2( d.x, 1 - d.z )
				];

			} else {

				return [
					new THREE.Vector2( a.y, 1 - a.z ),
					new THREE.Vector2( b.y, 1 - b.z ),
					new THREE.Vector2( c.y, 1 - c.z ),
					new THREE.Vector2( d.y, 1 - d.z )
				];

			}

		}
	};

	// File:src/extras/geometries/ShapeGeometry.js

	/**
	 * @author jonobr1 / http://jonobr1.com
	 *
	 * Creates a one-sided polygonal geometry from a path shape. Similar to
	 * ExtrudeGeometry.
	 *
	 * parameters = {
	 *
	 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
	 *
	 *	material: <int> // material index for front and back faces
	 *	uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	THREE.ShapeGeometry = function ( shapes, options ) {

		THREE.Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

	};

	THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;

	/**
	 * Add an array of shapes to THREE.ShapeGeometry.
	 */
	THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			this.addShape( shapes[ i ], options );

		}

		return this;

	};

	/**
	 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
	 */
	THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {

		if ( options === undefined ) options = {};
		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var material = options.material;
		var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

		//

		var i, l, hole;

		var shapesOffset = this.vertices.length;
		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! THREE.ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe...

			for ( i = 0, l = holes.length; i < l; i ++ ) {

				hole = holes[ i ];

				if ( THREE.ShapeUtils.isClockWise( hole ) ) {

					holes[ i ] = hole.reverse();

				}

			}

			reverse = false;

		}

		var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );

		// Vertices

		for ( i = 0, l = holes.length; i < l; i ++ ) {

			hole = holes[ i ];
			vertices = vertices.concat( hole );

		}

		//

		var vert, vlen = vertices.length;
		var face, flen = faces.length;

		for ( i = 0; i < vlen; i ++ ) {

			vert = vertices[ i ];

			this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );

		}

		for ( i = 0; i < flen; i ++ ) {

			face = faces[ i ];

			var a = face[ 0 ] + shapesOffset;
			var b = face[ 1 ] + shapesOffset;
			var c = face[ 2 ] + shapesOffset;

			this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
			this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );

		}

	};

	// File:src/extras/geometries/LatheGeometry.js

	/**
	 * @author astrodud / http://astrodud.isgreat.org/
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 */

	// points - to create a closed torus, one must use a set of points
	//    like so: [ a, b, c, d, a ], see first is the same as last.
	// segments - the number of circumference segments to create
	// phiStart - the starting radian
	// phiLength - the radian (0 to 2*PI) range of the lathed section
	//    2*pi is a closed lathe, less than 2PI is a portion.

	THREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {

		THREE.Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = segments || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || 2 * Math.PI;

		var inversePointLength = 1.0 / ( points.length - 1 );
		var inverseSegments = 1.0 / segments;

		for ( var i = 0, il = segments; i <= il; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var c = Math.cos( phi ),
				s = Math.sin( phi );

			for ( var j = 0, jl = points.length; j < jl; j ++ ) {

				var pt = points[ j ];

				var vertex = new THREE.Vector3();

				vertex.x = c * pt.x - s * pt.y;
				vertex.y = s * pt.x + c * pt.y;
				vertex.z = pt.z;

				this.vertices.push( vertex );

			}

		}

		var np = points.length;

		for ( var i = 0, il = segments; i < il; i ++ ) {

			for ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {

				var base = j + np * i;
				var a = base;
				var b = base + np;
				var c = base + 1 + np;
				var d = base + 1;

				var u0 = i * inverseSegments;
				var v0 = j * inversePointLength;
				var u1 = u0 + inverseSegments;
				var v1 = v0 + inversePointLength;

				this.faces.push( new THREE.Face3( a, b, d ) );

				this.faceVertexUvs[ 0 ].push( [

					new THREE.Vector2( u0, v0 ),
					new THREE.Vector2( u1, v0 ),
					new THREE.Vector2( u0, v1 )

				] );

				this.faces.push( new THREE.Face3( b, c, d ) );

				this.faceVertexUvs[ 0 ].push( [

					new THREE.Vector2( u1, v0 ),
					new THREE.Vector2( u1, v1 ),
					new THREE.Vector2( u0, v1 )

				] );


			}

		}

		this.mergeVertices();
		this.computeFaceNormals();
		this.computeVertexNormals();

	};

	THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;

	// File:src/extras/geometries/PlaneGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {

		THREE.Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );

	};

	THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;

	// File:src/extras/geometries/PlaneBufferGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	THREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {

		THREE.BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var vertices = new Float32Array( gridX1 * gridY1 * 3 );
		var normals = new Float32Array( gridX1 * gridY1 * 3 );
		var uvs = new Float32Array( gridX1 * gridY1 * 2 );

		var offset = 0;
		var offset2 = 0;

		for ( var iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( var ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices[ offset ] = x;
				vertices[ offset + 1 ] = - y;

				normals[ offset + 2 ] = 1;

				uvs[ offset2 ] = ix / gridX;
				uvs[ offset2 + 1 ] = 1 - ( iy / gridY );

				offset += 3;
				offset2 += 2;

			}

		}

		offset = 0;

		var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );

		for ( var iy = 0; iy < gridY; iy ++ ) {

			for ( var ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				indices[ offset ] = a;
				indices[ offset + 1 ] = b;
				indices[ offset + 2 ] = d;

				indices[ offset + 3 ] = b;
				indices[ offset + 4 ] = c;
				indices[ offset + 5 ] = d;

				offset += 6;

			}

		}

		this.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

	};

	THREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;

	// File:src/extras/geometries/RingGeometry.js

	/**
	 * @author Kaleb Murphy
	 */

	THREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 0;
		outerRadius = outerRadius || 50;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 8;

		var i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );

		for ( i = 0; i < phiSegments + 1; i ++ ) {

			// concentric circles inside ring

			for ( o = 0; o < thetaSegments + 1; o ++ ) {

				// number of segments per circle

				var vertex = new THREE.Vector3();
				var segment = thetaStart + o / thetaSegments * thetaLength;
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );

				this.vertices.push( vertex );
				uvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );

			}

			radius += radiusStep;

		}

		var n = new THREE.Vector3( 0, 0, 1 );

		for ( i = 0; i < phiSegments; i ++ ) {

			// concentric circles inside ring

			var thetaSegment = i * ( thetaSegments + 1 );

			for ( o = 0; o < thetaSegments ; o ++ ) {

				// number of segments per circle

				var segment = o + thetaSegment;

				var v1 = segment;
				var v2 = segment + thetaSegments + 1;
				var v3 = segment + thetaSegments + 2;

				this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );

				v1 = segment;
				v2 = segment + thetaSegments + 2;
				v3 = segment + 1;

				this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );

			}

		}

		this.computeFaceNormals();

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

	};

	THREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.RingGeometry.prototype.constructor = THREE.RingGeometry;

	// File:src/extras/geometries/SphereGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );

	};

	THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;

	// File:src/extras/geometries/SphereBufferGeometry.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * based on THREE.SphereGeometry
	 */

	THREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		THREE.BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = thetaStart + thetaLength;

		var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );

		var positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		var index = 0, vertices = [], normal = new THREE.Vector3();

		for ( var y = 0; y <= heightSegments; y ++ ) {

			var verticesRow = [];

			var v = y / heightSegments;

			for ( var x = 0; x <= widthSegments; x ++ ) {

				var u = x / widthSegments;

				var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				var py = radius * Math.cos( thetaStart + v * thetaLength );
				var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				normal.set( px, py, pz ).normalize();

				positions.setXYZ( index, px, py, pz );
				normals.setXYZ( index, normal.x, normal.y, normal.z );
				uvs.setXY( index, u, 1 - v );

				verticesRow.push( index );

				index ++;

			}

			vertices.push( verticesRow );

		}

		var indices = [];

		for ( var y = 0; y < heightSegments; y ++ ) {

			for ( var x = 0; x < widthSegments; x ++ ) {

				var v1 = vertices[ y ][ x + 1 ];
				var v2 = vertices[ y ][ x ];
				var v3 = vertices[ y + 1 ][ x ];
				var v4 = vertices[ y + 1 ][ x + 1 ];

				if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
				if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );

			}

		}

		this.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', positions );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

	};

	THREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;

	// File:src/extras/geometries/TorusGeometry.js

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
	 */

	THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

		THREE.Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 100;
		tube = tube || 40;
		radialSegments = radialSegments || 8;
		tubularSegments = tubularSegments || 6;
		arc = arc || Math.PI * 2;

		var center = new THREE.Vector3(), uvs = [], normals = [];

		for ( var j = 0; j <= radialSegments; j ++ ) {

			for ( var i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );

				var vertex = new THREE.Vector3();
				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				this.vertices.push( vertex );

				uvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );
				normals.push( vertex.clone().sub( center ).normalize() );

			}

		}

		for ( var j = 1; j <= radialSegments; j ++ ) {

			for ( var i = 1; i <= tubularSegments; i ++ ) {

				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				var face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );
				this.faces.push( face );
				this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );

				face = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );
				this.faces.push( face );
				this.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );

			}

		}

		this.computeFaceNormals();

	};

	THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;

	// File:src/extras/geometries/TorusKnotGeometry.js

	/**
	 * @author oosmoxiecode
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473
	 */

	THREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {

		THREE.Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			p: p,
			q: q,
			heightScale: heightScale
		};

		radius = radius || 100;
		tube = tube || 40;
		radialSegments = radialSegments || 64;
		tubularSegments = tubularSegments || 8;
		p = p || 2;
		q = q || 3;
		heightScale = heightScale || 1;

		var grid = new Array( radialSegments );
		var tang = new THREE.Vector3();
		var n = new THREE.Vector3();
		var bitan = new THREE.Vector3();

		for ( var i = 0; i < radialSegments; ++ i ) {

			grid[ i ] = new Array( tubularSegments );
			var u = i / radialSegments * 2 * p * Math.PI;
			var p1 = getPos( u, q, p, radius, heightScale );
			var p2 = getPos( u + 0.01, q, p, radius, heightScale );
			tang.subVectors( p2, p1 );
			n.addVectors( p2, p1 );

			bitan.crossVectors( tang, n );
			n.crossVectors( bitan, tang );
			bitan.normalize();
			n.normalize();

			for ( var j = 0; j < tubularSegments; ++ j ) {

				var v = j / tubularSegments * 2 * Math.PI;
				var cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
				var cy = tube * Math.sin( v );

				var pos = new THREE.Vector3();
				pos.x = p1.x + cx * n.x + cy * bitan.x;
				pos.y = p1.y + cx * n.y + cy * bitan.y;
				pos.z = p1.z + cx * n.z + cy * bitan.z;

				grid[ i ][ j ] = this.vertices.push( pos ) - 1;

			}

		}

		for ( var i = 0; i < radialSegments; ++ i ) {

			for ( var j = 0; j < tubularSegments; ++ j ) {

				var ip = ( i + 1 ) % radialSegments;
				var jp = ( j + 1 ) % tubularSegments;

				var a = grid[ i ][ j ];
				var b = grid[ ip ][ j ];
				var c = grid[ ip ][ jp ];
				var d = grid[ i ][ jp ];

				var uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );
				var uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );
				var uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );
				var uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );

				this.faces.push( new THREE.Face3( a, b, d ) );
				this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

				this.faces.push( new THREE.Face3( b, c, d ) );
				this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

		this.computeFaceNormals();
		this.computeVertexNormals();

		function getPos( u, in_q, in_p, radius, heightScale ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = in_q / in_p * u;
			var cs = Math.cos( quOverP );

			var tx = radius * ( 2 + cs ) * 0.5 * cu;
			var ty = radius * ( 2 + cs ) * su * 0.5;
			var tz = heightScale * radius * Math.sin( quOverP ) * 0.5;

			return new THREE.Vector3( tx, ty, tz );

		}

	};

	THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;

	// File:src/extras/geometries/TubeGeometry.js

	/**
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 *
	 * Modified from the TorusKnotGeometry by @oosmoxiecode
	 *
	 * Creates a tube which extrudes along a 3d spline
	 *
	 * Uses parallel transport frames as described in
	 * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
	 */

	THREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {

		THREE.Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			segments: segments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed,
			taper: taper
		};

		segments = segments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;
		taper = taper || THREE.TubeGeometry.NoTaper;

		var grid = [];

		var scope = this,

			tangent,
			normal,
			binormal,

			numpoints = segments + 1,

			u, v, r,

			cx, cy,
			pos, pos2 = new THREE.Vector3(),
			i, j,
			ip, jp,
			a, b, c, d,
			uva, uvb, uvc, uvd;

		var frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),
			tangents = frames.tangents,
			normals = frames.normals,
			binormals = frames.binormals;

		// proxy internals
		this.tangents = tangents;
		this.normals = normals;
		this.binormals = binormals;

		function vert( x, y, z ) {

			return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;

		}

		// construct the grid

		for ( i = 0; i < numpoints; i ++ ) {

			grid[ i ] = [];

			u = i / ( numpoints - 1 );

			pos = path.getPointAt( u );

			tangent = tangents[ i ];
			normal = normals[ i ];
			binormal = binormals[ i ];

			r = radius * taper( u );

			for ( j = 0; j < radialSegments; j ++ ) {

				v = j / radialSegments * 2 * Math.PI;

				cx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
				cy = r * Math.sin( v );

				pos2.copy( pos );
				pos2.x += cx * normal.x + cy * binormal.x;
				pos2.y += cx * normal.y + cy * binormal.y;
				pos2.z += cx * normal.z + cy * binormal.z;

				grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );

			}

		}


		// construct the mesh

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < radialSegments; j ++ ) {

				ip = ( closed ) ? ( i + 1 ) % segments : i + 1;
				jp = ( j + 1 ) % radialSegments;

				a = grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
				b = grid[ ip ][ j ];
				c = grid[ ip ][ jp ];
				d = grid[ i ][ jp ];

				uva = new THREE.Vector2( i / segments, j / radialSegments );
				uvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );
				uvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );
				uvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );

				this.faces.push( new THREE.Face3( a, b, d ) );
				this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

				this.faces.push( new THREE.Face3( b, c, d ) );
				this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

		this.computeFaceNormals();
		this.computeVertexNormals();

	};

	THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;

	THREE.TubeGeometry.NoTaper = function ( u ) {

		return 1;

	};

	THREE.TubeGeometry.SinusoidalTaper = function ( u ) {

		return Math.sin( Math.PI * u );

	};

	// For computing of Frenet frames, exposing the tangents, normals and binormals the spline
	THREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {

		var	normal = new THREE.Vector3(),

			tangents = [],
			normals = [],
			binormals = [],

			vec = new THREE.Vector3(),
			mat = new THREE.Matrix4(),

			numpoints = segments + 1,
			theta,
			smallest,

			tx, ty, tz,
			i, u;


		// expose internals
		this.tangents = tangents;
		this.normals = normals;
		this.binormals = binormals;

		// compute the tangent vectors for each segment on the path

		for ( i = 0; i < numpoints; i ++ ) {

			u = i / ( numpoints - 1 );

			tangents[ i ] = path.getTangentAt( u );
			tangents[ i ].normalize();

		}

		initialNormal3();

		/*
		function initialNormal1(lastBinormal) {
			// fixed start binormal. Has dangers of 0 vectors
			normals[ 0 ] = new THREE.Vector3();
			binormals[ 0 ] = new THREE.Vector3();
			if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
			normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
		}

		function initialNormal2() {

			// This uses the Frenet-Serret formula for deriving binormal
			var t2 = path.getTangentAt( epsilon );

			normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
			binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );

			normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();

		}
		*/

		function initialNormal3() {

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the smallest tangent xyz component

			normals[ 0 ] = new THREE.Vector3();
			binormals[ 0 ] = new THREE.Vector3();
			smallest = Number.MAX_VALUE;
			tx = Math.abs( tangents[ 0 ].x );
			ty = Math.abs( tangents[ 0 ].y );
			tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= smallest ) {

				smallest = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= smallest ) {

				smallest = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= smallest ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );

		}


		// compute the slowly-varying normal and binormal vectors for each segment on the path

		for ( i = 1; i < numpoints; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				theta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}


		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed ) {

			theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );
			theta /= ( numpoints - 1 );

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( i = 1; i < numpoints; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

	};

	// File:src/extras/geometries/PolyhedronGeometry.js

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {

		THREE.Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		var that = this;

		for ( var i = 0, l = vertices.length; i < l; i += 3 ) {

			prepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );

		}

		var p = this.vertices;

		var faces = [];

		for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {

			var v1 = p[ indices[ i ] ];
			var v2 = p[ indices[ i + 1 ] ];
			var v3 = p[ indices[ i + 2 ] ];

			faces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );

		}

		var centroid = new THREE.Vector3();

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			subdivide( faces[ i ], detail );

		}


		// Handle case when face straddles the seam

		for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {

			var uvs = this.faceVertexUvs[ 0 ][ i ];

			var x0 = uvs[ 0 ].x;
			var x1 = uvs[ 1 ].x;
			var x2 = uvs[ 2 ].x;

			var max = Math.max( x0, x1, x2 );
			var min = Math.min( x0, x1, x2 );

			if ( max > 0.9 && min < 0.1 ) {

				// 0.9 is somewhat arbitrary

				if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
				if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
				if ( x2 < 0.2 ) uvs[ 2 ].x += 1;

			}

		}


		// Apply radius

		for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {

			this.vertices[ i ].multiplyScalar( radius );

		}


		// Merge vertices

		this.mergeVertices();

		this.computeFaceNormals();

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );


		// Project vector onto sphere's surface

		function prepare( vector ) {

			var vertex = vector.normalize().clone();
			vertex.index = that.vertices.push( vertex ) - 1;

			// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.

			var u = azimuth( vector ) / 2 / Math.PI + 0.5;
			var v = inclination( vector ) / Math.PI + 0.5;
			vertex.uv = new THREE.Vector2( u, 1 - v );

			return vertex;

		}


		// Approximate a curved face with recursively sub-divided triangles.

		function make( v1, v2, v3, materialIndex ) {

			var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );
			that.faces.push( face );

			centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );

			var azi = azimuth( centroid );

			that.faceVertexUvs[ 0 ].push( [
				correctUV( v1.uv, v1, azi ),
				correctUV( v2.uv, v2, azi ),
				correctUV( v3.uv, v3, azi )
			] );

		}


		// Analytically subdivide a face to the required detail level.

		function subdivide( face, detail ) {

			var cols = Math.pow( 2, detail );
			var a = prepare( that.vertices[ face.a ] );
			var b = prepare( that.vertices[ face.b ] );
			var c = prepare( that.vertices[ face.c ] );
			var v = [];

			var materialIndex = face.materialIndex;

			// Construct all of the vertices for this subdivision.

			for ( var i = 0 ; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = prepare( a.clone().lerp( c, i / cols ) );
				var bj = prepare( b.clone().lerp( c, i / cols ) );
				var rows = cols - i;

				for ( var j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );

					}

				}

			}

			// Construct all of the faces.

			for ( var i = 0; i < cols ; i ++ ) {

				for ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						make(
							v[ i ][ k + 1 ],
							v[ i + 1 ][ k ],
							v[ i ][ k ],
							materialIndex
						);

					} else {

						make(
							v[ i ][ k + 1 ],
							v[ i + 1 ][ k + 1 ],
							v[ i + 1 ][ k ],
							materialIndex
						);

					}

				}

			}

		}


		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}


		// Texture fixing helper. Spheres have some odd behaviours.

		function correctUV( uv, vector, azimuth ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
			return uv.clone();

		}


	};

	THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;

	// File:src/extras/geometries/DodecahedronGeometry.js

	/**
	 * @author Abe Pazos / https://hamoid.com
	 */

	THREE.DodecahedronGeometry = function ( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,    - 1, - 1,  1,
			- 1,  1, - 1,    - 1,  1,  1,
			 1, - 1, - 1,     1, - 1,  1,
			 1,  1, - 1,     1,  1,  1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t,     0, - r,  t,
			 0,  r, - t,     0,  r,  t,

			// (±1/φ, ±φ, 0)
			- r, - t,  0,    - r,  t,  0,
			 r, - t,  0,     r,  t,  0,

			// (±φ, 0, ±1/φ)
			- t,  0, - r,     t,  0, - r,
			- t,  0,  r,     t,  0,  r
		];

		var indices = [
			 3, 11,  7,      3,  7, 15,      3, 15, 13,
			 7, 19, 17,      7, 17,  6,      7,  6, 15,
			17,  4,  8,     17,  8, 10,     17, 10,  6,
			 8,  0, 16,      8, 16,  2,      8,  2, 10,
			 0, 12,  1,      0,  1, 18,      0, 18, 16,
			 6, 10,  2,      6,  2, 13,      6, 13, 15,
			 2, 16, 18,      2, 18,  3,      2,  3, 13,
			18,  1,  9,     18,  9, 11,     18, 11,  3,
			 4, 14, 12,      4, 12,  0,      4,  0,  8,
			11,  9,  5,     11,  5, 19,     11, 19,  7,
			19,  5, 14,     19, 14,  4,     19,  4, 17,
			 1, 12, 14,      1, 14,  5,      1,  5,  9
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;

	// File:src/extras/geometries/IcosahedronGeometry.js

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	THREE.IcosahedronGeometry = function ( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
			 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
			 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
		];

		var indices = [
			 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
			 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
			 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
			 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;

	// File:src/extras/geometries/OctahedronGeometry.js

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	THREE.OctahedronGeometry = function ( radius, detail ) {

		var vertices = [
			1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
		];

		var indices = [
			0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;

	// File:src/extras/geometries/TetrahedronGeometry.js

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	THREE.TetrahedronGeometry = function ( radius, detail ) {

		var vertices = [
			 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
		];

		var indices = [
			 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;

	// File:src/extras/geometries/ParametricGeometry.js

	/**
	 * @author zz85 / https://github.com/zz85
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 *
	 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
	 *
	 */

	THREE.ParametricGeometry = function ( func, slices, stacks ) {

		THREE.Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		var verts = this.vertices;
		var faces = this.faces;
		var uvs = this.faceVertexUvs[ 0 ];

		var i, j, p;
		var u, v;

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				u = j / slices;

				p = func( u, v );
				verts.push( p );

			}

		}

		var a, b, c, d;
		var uva, uvb, uvc, uvd;

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				a = i * sliceCount + j;
				b = i * sliceCount + j + 1;
				c = ( i + 1 ) * sliceCount + j + 1;
				d = ( i + 1 ) * sliceCount + j;

				uva = new THREE.Vector2( j / slices, i / stacks );
				uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
				uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
				uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );

				faces.push( new THREE.Face3( a, b, d ) );
				uvs.push( [ uva, uvb, uvd ] );

				faces.push( new THREE.Face3( b, c, d ) );
				uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

		// console.log(this);

		// magic bullet
		// var diff = this.mergeVertices();
		// console.log('removed ', diff, ' vertices by merging');

		this.computeFaceNormals();
		this.computeVertexNormals();

	};

	THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;

	// File:src/extras/geometries/WireframeGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.WireframeGeometry = function ( geometry ) {

		THREE.BufferGeometry.call( this );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		if ( geometry instanceof THREE.Geometry ) {

			var vertices = geometry.vertices;
			var faces = geometry.faces;
			var numEdges = 0;

			// allocate maximal size
			var edges = new Uint32Array( 6 * faces.length );

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0; j < 3; j ++ ) {

					edge[ 0 ] = face[ keys[ j ] ];
					edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
					edge.sort( sortFunction );

					var key = edge.toString();

					if ( hash[ key ] === undefined ) {

						edges[ 2 * numEdges ] = edge[ 0 ];
						edges[ 2 * numEdges + 1 ] = edge[ 1 ];
						hash[ key ] = true;
						numEdges ++;

					}

				}

			}

			var coords = new Float32Array( numEdges * 2 * 3 );

			for ( var i = 0, l = numEdges; i < l; i ++ ) {

				for ( var j = 0; j < 2; j ++ ) {

					var vertex = vertices[ edges [ 2 * i + j ] ];

					var index = 6 * i + 3 * j;
					coords[ index + 0 ] = vertex.x;
					coords[ index + 1 ] = vertex.y;
					coords[ index + 2 ] = vertex.z;

				}

			}

			this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

		} else if ( geometry instanceof THREE.BufferGeometry ) {

			if ( geometry.index !== null ) {

				// Indexed BufferGeometry

				var indices = geometry.index.array;
				var vertices = geometry.attributes.position;
				var groups = geometry.groups;
				var numEdges = 0;

				if ( groups.length === 0 ) {

					geometry.addGroup( 0, indices.length );

				}

				// allocate maximal size
				var edges = new Uint32Array( 2 * indices.length );

				for ( var o = 0, ol = groups.length; o < ol; ++ o ) {

					var group = groups[ o ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						for ( var j = 0; j < 3; j ++ ) {

							edge[ 0 ] = indices[ i + j ];
							edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
							edge.sort( sortFunction );

							var key = edge.toString();

							if ( hash[ key ] === undefined ) {

								edges[ 2 * numEdges ] = edge[ 0 ];
								edges[ 2 * numEdges + 1 ] = edge[ 1 ];
								hash[ key ] = true;
								numEdges ++;

							}

						}

					}

				}

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numEdges; i < l; i ++ ) {

					for ( var j = 0; j < 2; j ++ ) {

						var index = 6 * i + 3 * j;
						var index2 = edges[ 2 * i + j ];

						coords[ index + 0 ] = vertices.getX( index2 );
						coords[ index + 1 ] = vertices.getY( index2 );
						coords[ index + 2 ] = vertices.getZ( index2 );

					}

				}

				this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

			} else {

				// non-indexed BufferGeometry

				var vertices = geometry.attributes.position.array;
				var numEdges = vertices.length / 3;
				var numTris = numEdges / 3;

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numTris; i < l; i ++ ) {

					for ( var j = 0; j < 3; j ++ ) {

						var index = 18 * i + 6 * j;

						var index1 = 9 * i + 3 * j;
						coords[ index + 0 ] = vertices[ index1 ];
						coords[ index + 1 ] = vertices[ index1 + 1 ];
						coords[ index + 2 ] = vertices[ index1 + 2 ];

						var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
						coords[ index + 3 ] = vertices[ index2 ];
						coords[ index + 4 ] = vertices[ index2 + 1 ];
						coords[ index + 5 ] = vertices[ index2 + 2 ];

					}

				}

				this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

			}

		}

	};

	THREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;

	// File:src/extras/helpers/AxisHelper.js

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AxisHelper = function ( size ) {

		size = size || 1;

		var vertices = new Float32Array( [
			0, 0, 0,  size, 0, 0,
			0, 0, 0,  0, size, 0,
			0, 0, 0,  0, 0, size
		] );

		var colors = new Float32Array( [
			1, 0, 0,  1, 0.6, 0,
			0, 1, 0,  0.6, 1, 0,
			0, 0, 1,  0, 0.6, 1
		] );

		var geometry = new THREE.BufferGeometry();
		geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );

		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

		THREE.LineSegments.call( this, geometry, material );

	};

	THREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;

	// File:src/extras/helpers/ArrowHelper.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	THREE.ArrowHelper = ( function () {

		var lineGeometry = new THREE.Geometry();
		lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );

		var coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );
		coneGeometry.translate( 0, - 0.5, 0 );

		return function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

			// dir is assumed to be normalized

			THREE.Object3D.call( this );

			if ( color === undefined ) color = 0xffff00;
			if ( length === undefined ) length = 1;
			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;

			this.position.copy( origin );

			this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );
			this.line.matrixAutoUpdate = false;
			this.add( this.line );

			this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );
			this.cone.matrixAutoUpdate = false;
			this.add( this.cone );

			this.setDirection( dir );
			this.setLength( length, headLength, headWidth );

		}

	}() );

	THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;

	THREE.ArrowHelper.prototype.setDirection = ( function () {

		var axis = new THREE.Vector3();
		var radians;

		return function setDirection( dir ) {

			// dir is assumed to be normalized

			if ( dir.y > 0.99999 ) {

				this.quaternion.set( 0, 0, 0, 1 );

			} else if ( dir.y < - 0.99999 ) {

				this.quaternion.set( 1, 0, 0, 0 );

			} else {

				axis.set( dir.z, 0, - dir.x ).normalize();

				radians = Math.acos( dir.y );

				this.quaternion.setFromAxisAngle( axis, radians );

			}

		};

	}() );

	THREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	THREE.ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.set( color );
		this.cone.material.color.set( color );

	};

	// File:src/extras/helpers/BoxHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BoxHelper = function ( object ) {

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new THREE.BufferGeometry();
		geometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );

		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );

		if ( object !== undefined ) {

			this.update( object );

		}

	};

	THREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;

	THREE.BoxHelper.prototype.update = ( function () {

		var box = new THREE.Box3();

		return function ( object ) {

			box.setFromObject( object );

			if ( box.empty() ) return;

			var min = box.min;
			var max = box.max;

			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/

			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			var position = this.geometry.attributes.position;
			var array = position.array;

			array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
			array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
			array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
			array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

			position.needsUpdate = true;

			this.geometry.computeBoundingSphere();

		}

	} )();

	// File:src/extras/helpers/BoundingBoxHelper.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	// a helper to show the world-axis-aligned bounding box for an object

	THREE.BoundingBoxHelper = function ( object, hex ) {

		var color = ( hex !== undefined ) ? hex : 0x888888;

		this.object = object;

		this.box = new THREE.Box3();

		THREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );

	};

	THREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );
	THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;

	THREE.BoundingBoxHelper.prototype.update = function () {

		this.box.setFromObject( this.object );

		this.box.size( this.scale );

		this.box.center( this.position );

	};

	// File:src/extras/helpers/CameraHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	THREE.CameraHelper = function ( camera ) {

		var geometry = new THREE.Geometry();
		var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );

		var pointMap = {};

		// colors

		var hexFrustum = 0xffaa00;
		var hexCone = 0xff0000;
		var hexUp = 0x00aaff;
		var hexTarget = 0xffffff;
		var hexCross = 0x333333;

		// near

		addLine( "n1", "n2", hexFrustum );
		addLine( "n2", "n4", hexFrustum );
		addLine( "n4", "n3", hexFrustum );
		addLine( "n3", "n1", hexFrustum );

		// far

		addLine( "f1", "f2", hexFrustum );
		addLine( "f2", "f4", hexFrustum );
		addLine( "f4", "f3", hexFrustum );
		addLine( "f3", "f1", hexFrustum );

		// sides

		addLine( "n1", "f1", hexFrustum );
		addLine( "n2", "f2", hexFrustum );
		addLine( "n3", "f3", hexFrustum );
		addLine( "n4", "f4", hexFrustum );

		// cone

		addLine( "p", "n1", hexCone );
		addLine( "p", "n2", hexCone );
		addLine( "p", "n3", hexCone );
		addLine( "p", "n4", hexCone );

		// up

		addLine( "u1", "u2", hexUp );
		addLine( "u2", "u3", hexUp );
		addLine( "u3", "u1", hexUp );

		// target

		addLine( "c", "t", hexTarget );
		addLine( "p", "c", hexCross );

		// cross

		addLine( "cn1", "cn2", hexCross );
		addLine( "cn3", "cn4", hexCross );

		addLine( "cf1", "cf2", hexCross );
		addLine( "cf3", "cf4", hexCross );

		function addLine( a, b, hex ) {

			addPoint( a, hex );
			addPoint( b, hex );

		}

		function addPoint( id, hex ) {

			geometry.vertices.push( new THREE.Vector3() );
			geometry.colors.push( new THREE.Color( hex ) );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( geometry.vertices.length - 1 );

		}

		THREE.LineSegments.call( this, geometry, material );

		this.camera = camera;
		this.camera.updateProjectionMatrix();

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	};

	THREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;

	THREE.CameraHelper.prototype.update = function () {

		var geometry, pointMap;

		var vector = new THREE.Vector3();
		var camera = new THREE.Camera();

		function setPoint( point, x, y, z ) {

			vector.set( x, y, z ).unproject( camera );

			var points = pointMap[ point ];

			if ( points !== undefined ) {

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					geometry.vertices[ points[ i ] ].copy( vector );

				}

			}

		}

		return function () {

			geometry = this.geometry;
			pointMap = this.pointMap;

			var w = 1, h = 1;

			// we need just camera projection matrix
			// world matrix must be identity

			camera.projectionMatrix.copy( this.camera.projectionMatrix );

			// center / target

			setPoint( "c", 0, 0, - 1 );
			setPoint( "t", 0, 0,  1 );

			// near

			setPoint( "n1", - w, - h, - 1 );
			setPoint( "n2",   w, - h, - 1 );
			setPoint( "n3", - w,   h, - 1 );
			setPoint( "n4",   w,   h, - 1 );

			// far

			setPoint( "f1", - w, - h, 1 );
			setPoint( "f2",   w, - h, 1 );
			setPoint( "f3", - w,   h, 1 );
			setPoint( "f4",   w,   h, 1 );

			// up

			setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
			setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
			setPoint( "u3",         0, h * 2,   - 1 );

			// cross

			setPoint( "cf1", - w,   0, 1 );
			setPoint( "cf2",   w,   0, 1 );
			setPoint( "cf3",   0, - h, 1 );
			setPoint( "cf4",   0,   h, 1 );

			setPoint( "cn1", - w,   0, - 1 );
			setPoint( "cn2",   w,   0, - 1 );
			setPoint( "cn3",   0, - h, - 1 );
			setPoint( "cn4",   0,   h, - 1 );

			geometry.verticesNeedUpdate = true;

		};

	}();

	// File:src/extras/helpers/DirectionalLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.DirectionalLightHelper = function ( light, size ) {

		THREE.Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		size = size || 1;

		var geometry = new THREE.Geometry();
		geometry.vertices.push(
			new THREE.Vector3( - size,   size, 0 ),
			new THREE.Vector3(   size,   size, 0 ),
			new THREE.Vector3(   size, - size, 0 ),
			new THREE.Vector3( - size, - size, 0 ),
			new THREE.Vector3( - size,   size, 0 )
		);

		var material = new THREE.LineBasicMaterial( { fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		this.lightPlane = new THREE.Line( geometry, material );
		this.add( this.lightPlane );

		geometry = new THREE.Geometry();
		geometry.vertices.push(
			new THREE.Vector3(),
			new THREE.Vector3()
		);

		material = new THREE.LineBasicMaterial( { fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		this.targetLine = new THREE.Line( geometry, material );
		this.add( this.targetLine );

		this.update();

	};

	THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;

	THREE.DirectionalLightHelper.prototype.dispose = function () {

		this.lightPlane.geometry.dispose();
		this.lightPlane.material.dispose();
		this.targetLine.geometry.dispose();
		this.targetLine.material.dispose();

	};

	THREE.DirectionalLightHelper.prototype.update = function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var v3 = new THREE.Vector3();

		return function () {

			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );

			this.lightPlane.lookAt( v3 );
			this.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			this.targetLine.geometry.vertices[ 1 ].copy( v3 );
			this.targetLine.geometry.verticesNeedUpdate = true;
			this.targetLine.material.color.copy( this.lightPlane.material.color );

		};

	}();

	// File:src/extras/helpers/EdgesHelper.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @param object THREE.Mesh whose geometry will be used
	 * @param hex line color
	 * @param thresholdAngle the minimum angle (in degrees),
	 * between the face normals of adjacent faces,
	 * that is required to render an edge. A value of 10 means
	 * an edge is only rendered if the angle is at least 10 degrees.
	 */

	THREE.EdgesHelper = function ( object, hex, thresholdAngle ) {

		var color = ( hex !== undefined ) ? hex : 0xffffff;

		THREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	};

	THREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;

	// File:src/extras/helpers/FaceNormalsHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry instanceof THREE.Geometry ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new THREE.BufferGeometry();

		var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	};

	THREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;

	THREE.FaceNormalsHelper.prototype.update = ( function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var normalMatrix = new THREE.Matrix3();

		return function update() {

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var normal = face.normal;

				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );

				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

			position.needsUpdate = true;

			return this;

		}

	}() );

	// File:src/extras/helpers/GridHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.GridHelper = function ( size, step ) {

		var geometry = new THREE.Geometry();
		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

		this.color1 = new THREE.Color( 0x444444 );
		this.color2 = new THREE.Color( 0x888888 );

		for ( var i = - size; i <= size; i += step ) {

			geometry.vertices.push(
				new THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),
				new THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )
			);

			var color = i === 0 ? this.color1 : this.color2;

			geometry.colors.push( color, color, color, color );

		}

		THREE.LineSegments.call( this, geometry, material );

	};

	THREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.GridHelper.prototype.constructor = THREE.GridHelper;

	THREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {

		this.color1.set( colorCenterLine );
		this.color2.set( colorGrid );

		this.geometry.colorsNeedUpdate = true;

	};

	// File:src/extras/helpers/HemisphereLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.HemisphereLightHelper = function ( light, sphereSize ) {

		THREE.Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.colors = [ new THREE.Color(), new THREE.Color() ];

		var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
		geometry.rotateX( - Math.PI / 2 );

		for ( var i = 0, il = 8; i < il; i ++ ) {

			geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

		}

		var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );

		this.lightSphere = new THREE.Mesh( geometry, material );
		this.add( this.lightSphere );

		this.update();

	};

	THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;

	THREE.HemisphereLightHelper.prototype.dispose = function () {

		this.lightSphere.geometry.dispose();
		this.lightSphere.material.dispose();

	};

	THREE.HemisphereLightHelper.prototype.update = function () {

		var vector = new THREE.Vector3();

		return function () {

			this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
			this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

			this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
			this.lightSphere.geometry.colorsNeedUpdate = true;

		}

	}();

	// File:src/extras/helpers/PointLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.PointLightHelper = function ( light, sphereSize ) {

		this.light = light;
		this.light.updateMatrixWorld();

		var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
		var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		THREE.Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	};

	THREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );
	THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;

	THREE.PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	THREE.PointLightHelper.prototype.update = function () {

		this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	// File:src/extras/helpers/SkeletonHelper.js

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 */

	THREE.SkeletonHelper = function ( object ) {

		this.bones = this.getBoneList( object );

		var geometry = new THREE.Geometry();

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( bone.parent instanceof THREE.Bone ) {

				geometry.vertices.push( new THREE.Vector3() );
				geometry.vertices.push( new THREE.Vector3() );
				geometry.colors.push( new THREE.Color( 0, 0, 1 ) );
				geometry.colors.push( new THREE.Color( 0, 1, 0 ) );

			}

		}

		geometry.dynamic = true;

		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		THREE.LineSegments.call( this, geometry, material );

		this.root = object;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();

	};


	THREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;

	THREE.SkeletonHelper.prototype.getBoneList = function( object ) {

		var boneList = [];

		if ( object instanceof THREE.Bone ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );

		}

		return boneList;

	};

	THREE.SkeletonHelper.prototype.update = function () {

		var geometry = this.geometry;

		var matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );

		var boneMatrix = new THREE.Matrix4();

		var j = 0;

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( bone.parent instanceof THREE.Bone ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );

				j += 2;

			}

		}

		geometry.verticesNeedUpdate = true;

		geometry.computeBoundingSphere();

	};

	// File:src/extras/helpers/SpotLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.SpotLightHelper = function ( light ) {

		THREE.Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		var geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );

		geometry.translate( 0, - 0.5, 0 );
		geometry.rotateX( - Math.PI / 2 );

		var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );

		this.cone = new THREE.Mesh( geometry, material );
		this.add( this.cone );

		this.update();

	};

	THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;

	THREE.SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	THREE.SpotLightHelper.prototype.update = function () {

		var vector = new THREE.Vector3();
		var vector2 = new THREE.Vector3();

		return function () {

			var coneLength = this.light.distance ? this.light.distance : 10000;
			var coneWidth = coneLength * Math.tan( this.light.angle );

			this.cone.scale.set( coneWidth, coneWidth, coneLength );

			vector.setFromMatrixPosition( this.light.matrixWorld );
			vector2.setFromMatrixPosition( this.light.target.matrixWorld );

			this.cone.lookAt( vector2.sub( vector ) );

			this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		};

	}();

	// File:src/extras/helpers/VertexNormalsHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry instanceof THREE.Geometry ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( objGeometry instanceof THREE.BufferGeometry ) {

			nNormals = objGeometry.attributes.normal.count

		}

		//

		var geometry = new THREE.BufferGeometry();

		var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	};

	THREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;

	THREE.VertexNormalsHelper.prototype.update = ( function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var normalMatrix = new THREE.Matrix3();

		return function update() {

			var keys = [ 'a', 'b', 'c' ];

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			if ( objGeometry instanceof THREE.Geometry ) {

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						var vertex = vertices[ face[ keys[ j ] ] ];

						var normal = face.vertexNormals[ j ];

						v1.copy( vertex ).applyMatrix4( matrixWorld );

						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

			} else if ( objGeometry instanceof THREE.BufferGeometry ) {

				var objPos = objGeometry.attributes.position;

				var objNorm = objGeometry.attributes.normal;

				var idx = 0;

				// for simplicity, ignore index and drawcalls, and render every normal

				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

			position.needsUpdate = true;

			return this;

		}

	}() );

	// File:src/extras/helpers/WireframeHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.WireframeHelper = function ( object, hex ) {

		var color = ( hex !== undefined ) ? hex : 0xffffff;

		THREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	};

	THREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;

	// File:src/extras/objects/ImmediateRenderObject.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.ImmediateRenderObject = function ( material ) {

		THREE.Object3D.call( this );

		this.material = material;
		this.render = function ( renderCallback ) {};

	};

	THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );
	THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;

	// File:src/extras/objects/MorphBlendMesh.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.MorphBlendMesh = function( geometry, material ) {

		THREE.Mesh.call( this, geometry, material );

		this.animationsMap = {};
		this.animationsList = [];

		// prepare default animation
		// (all frames played together in 1 second)

		var numFrames = this.geometry.morphTargets.length;

		var name = "__default";

		var startFrame = 0;
		var endFrame = numFrames - 1;

		var fps = numFrames / 1;

		this.createAnimation( name, startFrame, endFrame, fps );
		this.setAnimationWeight( name, 1 );

	};

	THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );
	THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;

	THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

		var animation = {

			start: start,
			end: end,

			length: end - start + 1,

			fps: fps,
			duration: ( end - start ) / fps,

			lastFrame: 0,
			currentFrame: 0,

			active: false,

			time: 0,
			direction: 1,
			weight: 1,

			directionBackwards: false,
			mirroredLoop: false

		};

		this.animationsMap[ name ] = animation;
		this.animationsList.push( animation );

	};

	THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

		var pattern = /([a-z]+)_?(\d+)/i;

		var firstAnimation, frameRanges = {};

		var geometry = this.geometry;

		for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

			var morph = geometry.morphTargets[ i ];
			var chunks = morph.name.match( pattern );

			if ( chunks && chunks.length > 1 ) {

				var name = chunks[ 1 ];

				if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

				var range = frameRanges[ name ];

				if ( i < range.start ) range.start = i;
				if ( i > range.end ) range.end = i;

				if ( ! firstAnimation ) firstAnimation = name;

			}

		}

		for ( var name in frameRanges ) {

			var range = frameRanges[ name ];
			this.createAnimation( name, range.start, range.end, fps );

		}

		this.firstAnimation = firstAnimation;

	};

	THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = 1;
			animation.directionBackwards = false;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = - 1;
			animation.directionBackwards = true;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.fps = fps;
			animation.duration = ( animation.end - animation.start ) / animation.fps;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.duration = duration;
			animation.fps = ( animation.end - animation.start ) / animation.duration;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.weight = weight;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = time;

		}

	};

	THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

		var time = 0;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			time = animation.time;

		}

		return time;

	};

	THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

		var duration = - 1;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			duration = animation.duration;

		}

		return duration;

	};

	THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = 0;
			animation.active = true;

		} else {

			console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );

		}

	};

	THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.active = false;

		}

	};

	THREE.MorphBlendMesh.prototype.update = function ( delta ) {

		for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

			var animation = this.animationsList[ i ];

			if ( ! animation.active ) continue;

			var frameTime = animation.duration / animation.length;

			animation.time += animation.direction * delta;

			if ( animation.mirroredLoop ) {

				if ( animation.time > animation.duration || animation.time < 0 ) {

					animation.direction *= - 1;

					if ( animation.time > animation.duration ) {

						animation.time = animation.duration;
						animation.directionBackwards = true;

					}

					if ( animation.time < 0 ) {

						animation.time = 0;
						animation.directionBackwards = false;

					}

				}

			} else {

				animation.time = animation.time % animation.duration;

				if ( animation.time < 0 ) animation.time += animation.duration;

			}

			var keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
			var weight = animation.weight;

			if ( keyframe !== animation.currentFrame ) {

				this.morphTargetInfluences[ animation.lastFrame ] = 0;
				this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

				this.morphTargetInfluences[ keyframe ] = 0;

				animation.lastFrame = animation.currentFrame;
				animation.currentFrame = keyframe;

			}

			var mix = ( animation.time % frameTime ) / frameTime;

			if ( animation.directionBackwards ) mix = 1 - mix;

			if ( animation.currentFrame !== animation.lastFrame ) {

				this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
				this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

			} else {

				this.morphTargetInfluences[ animation.currentFrame ] = weight;

			}

		}

	};

	module.exports = window.THREE = THREE;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	  function uuid() {
	    var nid = "",
	        len = 0;
	    while (len < 36) {
	      nid = nid.concat((Math.random() * 16 | 0).toString(16));
	      len++;
	    }
	    return nid.replace(/^(\w{8})\w(\w{4})\w\w(\w{3})\w\w(\w{3})\w(\w{12})/, "$1-$2-4$3-" + "49ab".charAt(Math.random() * 4 | 0) + "$4-$5");
	  }

	  return uuid;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	* @module Box3D
	*/

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Box3D = window.Box3D = window.Box3D || {};

	Box3D.EntityUpdatePackage = function () {
	  this.type = 'updateEntity';
	  this.entityId = '';
	  this.entityData = {};
	};

	function translateIdsToObjects(entity, idArray) {
	  for (var i = 0; i < idArray.length; i++) {
	    idArray[i] = entity.getObjectById(idArray[i]);
	    if (!idArray[i]) {
	      idArray[i] = idArray.getObjectById(idArray[i].id);
	    }
	  }
	}

	/**
	 * EntityDispatcher handles dispatching entity changes between running engine instances
	 * and external applications. EntityDispatcher can be created and passed to a multiple engine
	 * instances, allowing multiple engines to share the same entity list.
	 */

	var EntityDispatcher = function () {
	  function EntityDispatcher() {
	    _classCallCheck(this, EntityDispatcher);

	    this.engines = [];
	    this.entities = {};
	    Box3D.globalEvents.on('remoteEntityUpdate', this.onRemoteEntityUpdate, this);
	    Box3D.globalEvents.on('remoteEntityDelete', this.onRemoteEntityDelete, this);
	  }

	  /**
	   * Registers a new engine instance with the EntityDispatcher. This allows the engine
	   * to receive entity updates, including property changes, added entities, etc.
	   * @param {Object} newEngine A reference to the engine to register.
	   */

	  _createClass(EntityDispatcher, [{
	    key: 'addEngine',
	    value: function addEngine(newEngine) {
	      if (!newEngine) {
	        return;
	      }
	      if (!this.engines.indexOf(newEngine) !== -1) {
	        this.engines.push(newEngine);
	      } else {
	        _log2.default.warn('The engine, ' + newEngine.getName() + ', has already been registered.');
	      }
	    }

	    /**
	     * Unregisters an engine instance from the EntityDispatcher. This will cut off the engine
	     * from receiving entity updates, including property changes, added entities, etc.
	     * @param {Object} engine A reference to the engine to unregister.
	     */

	  }, {
	    key: 'removeEngine',
	    value: function removeEngine(engine) {
	      var index = undefined;
	      if (!engine) {
	        return;
	      }
	      index = this.engines.indexOf(engine);
	      if (index !== -1) {
	        this.engines.splice(index, 1);
	      } else {
	        _log2.default.warn('The engine, ' + engine.getName() + ' isn\'t currently registered.');
	      }
	    }

	    /**
	     * Adds the given entities to all registered engines.
	     * @param {Array} entities Array of new entity descriptors
	     * @return {Promise} A promise that resolves with an array of entities that were
	     * added to all registered engines.
	     */

	  }, {
	    key: 'addEntities',
	    value: function addEntities(entityArray) {
	      var _this = this;

	      var initializeAssets = function initializeAssets(assets) {
	        assets.forEach(function (json) {
	          this.dispatchCreatedAsset(json);
	        }, _this);

	        _this.engines.forEach(function (engine) {
	          assets.forEach(function (json) {
	            var asset = engine.assetRegistry.getAssetById(json.id);
	            var registry = engine.assetRegistry.getRegistryByType(json.type);
	            if (asset) {
	              asset.initialize({
	                box3DRuntime: engine,
	                registry: registry
	              });
	            }
	          });
	        });
	      };

	      var initializeObjects = function initializeObjects(objects) {
	        // Register all objects with the newly registered assets.
	        objects.forEach(function (objectJson) {
	          _this.dispatchCreatedObject(objectJson);
	        });

	        // Initialize entities in each engine.
	        _this.engines.forEach(function (engine) {
	          objects.forEach(function (json) {
	            var object = engine.getEntityById(json.id);
	            if (object) {
	              object.initialize({
	                box3DRuntime: engine
	              });
	            }
	          });
	        });
	      };

	      var loadAssets = function loadAssets(assets) {
	        var allEngineAssets = [];

	        assets.forEach(function (asset) {
	          if (asset) {
	            _this.engines.forEach(function (engine) {
	              var engineAsset = engine.assetRegistry.getAssetById(asset.id);
	              if (engineAsset && !engineAsset.isLoaded()) {
	                allEngineAssets.push(engineAsset);
	              }
	            });
	          }
	        });

	        // Don't do a Promise.all if the array is empty.
	        if (!assets.length) {
	          return Promise.resolve();
	        }

	        return Promise.all(allEngineAssets.map(function (asset) {
	          return new Promise(function (resolveAsset) {
	            asset.load(resolveAsset);
	          });
	        }));
	      };

	      var nonDocumentAssets = [],
	          documentAssets = [],
	          objects = [];

	      // Partition the entity array into "assets" and "objects".
	      entityArray.forEach(function (entityJson) {
	        if (!entityJson.parentAssetId || entityJson.parentAssetId === entityJson.id) {
	          if (entityJson.type === 'document') {
	            documentAssets.push(entityJson);
	          } else {
	            nonDocumentAssets.push(entityJson);
	          }
	        } else {
	          objects.push(entityJson);
	        }
	      });

	      initializeAssets(documentAssets);

	      return loadAssets(documentAssets).then(function () {
	        initializeAssets(nonDocumentAssets);
	        initializeObjects(objects);
	        return entityArray;
	      });
	    }

	    /**
	     * Serializes the entities into a format that can be saved.
	     * @method serializeEntities
	     * @public
	     * @return {Array} Array of json descriptors for all entities.
	     */

	  }, {
	    key: 'serializeEntities',
	    value: function serializeEntities() {
	      var serialize = function serialize(entity) {
	        var descriptor = entity.sharedData;
	        var returnJson = {
	          id: descriptor.id,
	          type: descriptor.type,
	          parentAssetId: descriptor.parentAssetId,
	          parentId: descriptor.parentId,
	          prefabAssetId: descriptor.prefabAssetId,
	          prefabObjectId: descriptor.prefabObjectId,
	          prefabInstanceId: descriptor.prefabInstanceId,
	          properties: entity.getOwnProperties(),
	          children: entity.getChildren(),
	          components: entity.componentRegistry.get()
	        };
	        return returnJson;
	      };
	      var serializedEntities = [];
	      if (this.engines.length) {
	        var entities = this.engines[0].entities;
	        _lodash2.default.each(entities, function (entity) {
	          serializedEntities.push(serialize(entity));
	        }, this);
	      }
	      return serializedEntities;
	    }

	    /**
	     * Return direct references to all entity descriptors. These are shared
	     * for each entity across engine instances.
	     * @method getEntityDescriptors
	     * @public
	     * @return {Array} Array of json descriptors for all entities.
	     */

	  }, {
	    key: 'getEntityDescriptors',
	    value: function getEntityDescriptors() {
	      var entityDescriptors = [];
	      _lodash2.default.each(this.entities, function (entity) {
	        entityDescriptors.push(entity);
	      }, this);
	      return entityDescriptors;
	    }

	    /**
	     * Update an existing entity with the values provided in the given json descriptor
	     * @method updateEntity
	     * @private
	     * @param  {Object} jsonDescriptor Description of the entity.
	     */

	  }, {
	    key: 'updateEntity',
	    value: function updateEntity(jsonDescriptor) {
	      var entities = this.engines[0].entities;
	      var entity = entities[jsonDescriptor.id];
	      // Only need to update the values for one engine since all structures are shared.
	      _lodash2.default.each(jsonDescriptor, function (value, attrib) {
	        entity.set(attrib, value, { silent: true });
	      }, this);
	      entity.setProperties(jsonDescriptor.properties);
	      entity.setChildren(jsonDescriptor.children);
	      entity.componentRegistry.set(jsonDescriptor.components);
	    }

	    /**
	     * Create a new asset using the given entity description
	     * @method dispatchCreatedAsset
	     * @public
	     * @param  {Object} jsonDescriptor Description of the asset.
	     */

	  }, {
	    key: 'dispatchCreatedAsset',
	    value: function dispatchCreatedAsset(jsonDescriptor) {
	      var json = undefined;

	      if (this.entities[jsonDescriptor.id]) {
	        json = this.entities[jsonDescriptor.id];
	      } else {
	        json = {
	          id: jsonDescriptor.id,
	          name: jsonDescriptor.name,
	          type: jsonDescriptor.type,
	          parentAssetId: jsonDescriptor.id, // parentAssetId === id for assets
	          dependencies: {
	            textures: {},
	            materials: {},
	            geometries: {},
	            animations: {}
	          },
	          children: jsonDescriptor.children || [],
	          previousChildren: [],
	          properties: jsonDescriptor.properties || {},
	          previousProperties: {},
	          components: jsonDescriptor.components || [],
	          previousComponents: []
	        };
	        if (jsonDescriptor.originalType) {
	          json.originalType = jsonDescriptor.originalType;
	        }
	        if (jsonDescriptor.builtIn) {
	          json.builtIn = jsonDescriptor.builtIn;
	        }
	        if (jsonDescriptor.resources) {
	          json.resources = jsonDescriptor.resources;
	        }
	        this.entities[json.id] = json;
	      }

	      this.fireExternalUpdate(jsonDescriptor.id, json, 'createEntity');
	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        if (!this.engines[i].assetRegistry.getAssetById(json.id)) {
	          this.engines[i].assetRegistry.trigger('addAssetEntity', json);
	        }
	      }
	    }

	    /**
	     * Create a new object using the given entity description
	     * @method dispatchCreatedObject
	     * @public
	     * @param  {Object} jsonDescriptor Description of the object.
	     */

	  }, {
	    key: 'dispatchCreatedObject',
	    value: function dispatchCreatedObject(jsonDescriptor) {
	      var json = undefined;

	      if (this.entities[jsonDescriptor.id]) {
	        json = this.entities[jsonDescriptor.id];
	      } else {
	        json = {
	          id: jsonDescriptor.id,
	          name: jsonDescriptor.name,
	          type: jsonDescriptor.type,
	          parentId: jsonDescriptor.parentId,
	          parentAssetId: jsonDescriptor.parentAssetId,
	          prefabAssetId: jsonDescriptor.prefabAssetId,
	          prefabObjectId: jsonDescriptor.prefabObjectId,
	          prefabInstanceId: jsonDescriptor.prefabInstanceId,
	          children: jsonDescriptor.children || [],
	          previousChildren: [],
	          properties: jsonDescriptor.properties || {},
	          previousProperties: {},
	          components: jsonDescriptor.components || [],
	          previousComponents: []
	        };
	        this.entities[json.id] = json;
	      }

	      this.fireExternalUpdate(jsonDescriptor.id, json, 'createEntity');
	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        var asset = this.engines[i].assetRegistry.getAssetById(json.parentAssetId);
	        if (asset && !asset.getObjectById(json.id)) {
	          asset.trigger('addObjectEntity', json);
	        }
	      }
	    }

	    /**
	     * Delete an asset from all engine instances.
	     * @method dispatchDestroyedAsset
	     * @public
	     * @param  {String} assetId Id of the asset to delete.
	     */

	  }, {
	    key: 'dispatchDestroyedAsset',
	    value: function dispatchDestroyedAsset(assetId) {
	      if (!this.entities[assetId]) {
	        _log2.default.error('Can\'t destroy an asset with ID, ' + assetId + ', that doesn\'t exist.');
	        return;
	      }
	      this.fireExternalUpdate(assetId, {}, 'destroyEntity');
	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        this.engines[i].assetRegistry.trigger('removeAssetEntity', assetId);
	      }
	      delete this.entities[assetId];
	    }

	    /**
	     * Delete an object from all engine instances.
	     * @method dispatchDestroyedObject
	     * @public
	     * @param  {String} assetId Id of the object to delete.
	     */

	  }, {
	    key: 'dispatchDestroyedObject',
	    value: function dispatchDestroyedObject(objectId) {
	      if (!this.entities[objectId]) {
	        _log2.default.error('Can\'t destroy an object with ID, ' + objectId + ', that doesn\'t exist.');
	        return;
	      }
	      this.fireExternalUpdate(objectId, {}, 'destroyEntity');
	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        var object = this.engines[i].getEntityById(objectId);
	        var asset = object.getParentAsset();
	        asset.trigger('removeObjectEntity', objectId);
	      }
	      delete this.entities[objectId];
	    }
	  }, {
	    key: 'dispacthAttributeChanged',
	    value: function dispacthAttributeChanged(entity, attrib, value) {
	      var json = {};
	      json[attrib] = value;
	      this.fireExternalUpdate(entity.id, json);

	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        var entityToChange = this.engines[i].getEntityById(entity.id);
	        entityToChange.trigger('change:' + attrib, value);
	      }
	    }
	  }, {
	    key: 'dispatchPropertyChanged',
	    value: function dispatchPropertyChanged(entity, property, value) {
	      var propertyDescriptor = {};
	      propertyDescriptor[property] = value;
	      this.dispatchPropertiesChanged(entity, propertyDescriptor);
	    }
	  }, {
	    key: 'dispatchPropertiesChanged',
	    value: function dispatchPropertiesChanged(entity, json) {
	      var _this2 = this;

	      this.fireExternalUpdate(entity.id, { properties: json });

	      // Apply changes in each engine

	      var _loop = function _loop(i) {
	        var entityToChange = _this2.engines[i].getEntityById(entity.id);
	        if (entityToChange) {
	          _lodash2.default.each(json, function (value, id) {
	            // TODO - if this property is an object id, translate to an entity
	            entityToChange.trigger('change:properties.' + id, value);
	          }, _this2);

	          entityToChange.trigger('change:properties', json);
	        }
	      };

	      for (var i = 0; i < this.engines.length; i++) {
	        _loop(i);
	      }
	    }
	  }, {
	    key: 'dispatchChildAdded',
	    value: function dispatchChildAdded(entity, newChild) {
	      this.fireExternalUpdate(entity.id, { children: entity.getChildIds() });

	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        var _entityToChange = this.engines[i].getEntityById(entity.id);
	        var childArray = [newChild];
	        translateIdsToObjects(_entityToChange, childArray);
	        _entityToChange.trigger('change:children', childArray, []);
	      }
	    }
	  }, {
	    key: 'dispatchChildRemoved',
	    value: function dispatchChildRemoved(entity, childToRemove) {
	      this.fireExternalUpdate(entity.id, { children: entity.getChildIds() });
	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        var _entityToChange2 = this.engines[i].getEntityById(entity.id);
	        var childArray = [childToRemove];
	        translateIdsToObjects(_entityToChange2, childArray);
	        _entityToChange2.trigger('change:children', [], childArray);
	      }
	    }
	  }, {
	    key: 'dispatchChildChanged',
	    value: function dispatchChildChanged(entity, addedChildren, removedChildren) {
	      this.fireExternalUpdate(entity.id, { children: entity.getChildIds() });

	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        var _entityToChange3 = this.engines[i].getEntityById(entity.id);
	        translateIdsToObjects(_entityToChange3, addedChildren);
	        translateIdsToObjects(_entityToChange3, removedChildren);
	        _entityToChange3.trigger('change:children', addedChildren, removedChildren);
	      }
	    }

	    /**
	     * Called by an engine instance when the given component has been added.
	     * @method dispatchComponentAdded
	     * @private
	     * @param  {Box3DEntity} entity       The entity that the change was made on.
	     * @param  {Array} newComponentIds   Array of ID's for components that have been added
	     */

	  }, {
	    key: 'dispatchComponentsAdded',
	    value: function dispatchComponentsAdded(entity, newComponentIds) {
	      this.fireExternalUpdate(entity.id, { components: entity.componentRegistry.getDescriptors() });

	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        var _entityToChange4 = this.engines[i].getEntityById(entity.id);

	        _entityToChange4.trigger('add:components', newComponentIds);
	      }
	    }

	    /**
	     * Remove the given component attached to the given entity.
	     * @method dispatchComponentRemoved
	     * @private
	     * @param  {Box3DEntity} entity       The entity that the change was made on.
	     * @param  {Array} componentIds  Array of IDs for components that have been removed
	     */

	  }, {
	    key: 'dispatchComponentsRemoved',
	    value: function dispatchComponentsRemoved(entity, componentIds) {
	      this.fireExternalUpdate(entity.id, { components: entity.componentRegistry.getDescriptors() });

	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        var _entityToChange5 = this.engines[i].getEntityById(entity.id);
	        _entityToChange5.trigger('remove:components', componentIds);
	      }
	    }

	    /**
	     * Called by an engine when the list of components attached to the given entity has changed.
	     * @method  dispatchComponentChanged
	     * @private
	     * @param  {Box3DEntity} entity       The entity that the change was made on.
	     * @param  {Array} changedComponents   Array of ids for components that have been changed.
	     */

	  }, {
	    key: 'dispatchComponentsChanged',
	    value: function dispatchComponentsChanged(entity, changedComponents) {
	      this.fireExternalUpdate(entity.id, { components: entity.componentRegistry.getDescriptors() });

	      // Apply changes in each engine
	      for (var i = 0; i < this.engines.length; i++) {
	        var _entityToChange6 = this.engines[i].getEntityById(entity.id);
	        _entityToChange6.trigger('change:components', changedComponents);
	      }
	    }

	    /**
	     * Fire events for entity updates intended for external apps to listen to.
	     * @method fireExternalUpdate
	     * @private
	     * @param {String} entityId       Id of the entity that changed.
	     * @param {Object} jsonDescriptor Description of what changed.
	     * @param {String} type The type of change ('destroyEntity', 'createEntity', 'updateEntity')
	     */

	  }, {
	    key: 'fireExternalUpdate',
	    value: function fireExternalUpdate(entityId, jsonDescriptor, type) {
	      // TODO - create a pool of these objects to avoid allocating a new one each time?
	      var updatePkg = new Box3D.EntityUpdatePackage();
	      updatePkg.type = type ? type : 'updateEntity';
	      updatePkg.entityId = entityId;
	      updatePkg.entityData = jsonDescriptor;
	      Box3D.globalEvents.trigger('EntityUpdates', updatePkg);
	    }

	    /**
	     * When an entity change is received from an external source, this function is
	     * called to update the entity is each engine.
	     * @method onRemoteEntityUpdate
	     * @private
	     * @param  {Object} entityDesc Json descriptor of entity
	     */

	  }, {
	    key: 'onRemoteEntityUpdate',
	    value: function onRemoteEntityUpdate(entityDesc) {
	      var box3dEntity = undefined;
	      var assets = this.engines[0].assetRegistry.assets;
	      //If the entity is an asset.
	      if (entityDesc.id === entityDesc.parentAssetId || !entityDesc.parentAssetId) {
	        box3dEntity = assets[entityDesc.id];
	        if (!box3dEntity) {
	          this.dispatchCreatedAsset(entityDesc);
	        }
	        //Otherwise, it's an object within an asset.
	      } else {
	          var parentAsset = assets[entityDesc.parentAssetId];
	          //If the parent asset exists, get the object and update it.
	          if (parentAsset) {
	            box3dEntity = parentAsset.getObjectById(entityDesc.id);
	            if (!box3dEntity) {
	              this.dispatchCreatedObject(entityDesc);
	            }
	          }
	        }
	      if (box3dEntity) {
	        // TODO: Add undefined values for removed attributes (since json standard
	        // doesn't support undefined and, hence, we need to explicitly mark incoming
	        // values as undefined if they're missing.)
	        this.updateEntity(entityDesc);
	      }
	    }

	    /**
	     * When an entity deletion is received from an external source, this function is
	     * called to remove the entity is each engine.
	     * @method onRemoteEntityDelete
	     * @private
	     * @param  {Object} entityDesc Json descriptor of entity
	     */

	  }, {
	    key: 'onRemoteEntityDelete',
	    value: function onRemoteEntityDelete(entityDesc) {
	      var assets = this.engines[0].assetRegistry.assets;
	      var asset = assets[entityDesc.parentAssetId];
	      if (asset && entityDesc.id !== entityDesc.parentAssetId) {
	        var object = asset.getObjectById(entityDesc.id);
	        if (object) {
	          object.destroy();
	        }
	      } else {
	        asset = this.assets[entityDesc.id];
	        if (asset) {
	          asset.destroy();
	        }
	      }
	    }
	  }]);

	  return EntityDispatcher;
	}();

	window.Box3D = window.Box3D || {};
	window.Box3D.EntityDispatcher = EntityDispatcher;

	exports.default = EntityDispatcher;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _uuid = __webpack_require__(9);

	var _uuid2 = _interopRequireDefault(_uuid);

	var _RuntimeEvents2 = __webpack_require__(4);

	var _RuntimeEvents3 = _interopRequireDefault(_RuntimeEvents2);

	var _Box3DAsset = __webpack_require__(12);

	var _Box3DAsset2 = _interopRequireDefault(_Box3DAsset);

	var _BaseRegistry = __webpack_require__(15);

	var _BaseRegistry2 = _interopRequireDefault(_BaseRegistry);

	var _MaterialRegistry = __webpack_require__(16);

	var _MaterialRegistry2 = _interopRequireDefault(_MaterialRegistry);

	var _TextureRegistry = __webpack_require__(18);

	var _TextureRegistry2 = _interopRequireDefault(_TextureRegistry);

	var _ScriptRegistry = __webpack_require__(20);

	var _ScriptRegistry2 = _interopRequireDefault(_ScriptRegistry);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/* global Box3D */
	/**
	 * @class AssetRegistry
	 * @constructor
	 */

	var AssetRegistry = function (_RuntimeEvents) {
	  _inherits(AssetRegistry, _RuntimeEvents);

	  function AssetRegistry() {
	    _classCallCheck(this, AssetRegistry);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AssetRegistry).call(this));

	    _this.assets = undefined;
	    _this.box3DRuntime = undefined;
	    _this.entityCollection = undefined;
	    _this.Scripts = new _ScriptRegistry2.default();
	    _this.Applications = new _BaseRegistry2.default(Box3D.ApplicationAsset);
	    _this.Documents = new _BaseRegistry2.default(Box3D.DocumentAsset);
	    _this.Scenes = new _BaseRegistry2.default(Box3D.SceneAsset);
	    _this.Prefabs = new _BaseRegistry2.default(Box3D.PrefabAsset);
	    _this.Geometries = new _BaseRegistry2.default(Box3D.BaseGeometryAsset);
	    _this.Shaders = new _BaseRegistry2.default(Box3D.ShaderAsset);
	    _this.Materials = new _MaterialRegistry2.default();
	    _this.Textures = new _TextureRegistry2.default();
	    _this.Animations = new _BaseRegistry2.default(Box3D.AnimationAsset);
	    _this.Audio = new _BaseRegistry2.default(Box3D.AudioAsset);
	    _this.initTimeoutId = undefined;
	    return _this;
	  }

	  _createClass(AssetRegistry, [{
	    key: 'initialize',
	    value: function initialize(box3DRuntime) {
	      this.assets = {};
	      this.box3DRuntime = box3DRuntime;

	      this.Scripts.initialize(box3DRuntime);
	      this.Textures.initialize(box3DRuntime);
	      this.Shaders.initialize(box3DRuntime);
	      this.Materials.initialize(box3DRuntime);
	      this.Applications.initialize(box3DRuntime);
	      this.Documents.initialize(box3DRuntime);
	      this.Scenes.initialize(box3DRuntime);
	      this.Prefabs.initialize(box3DRuntime);
	      this.Geometries.initialize(box3DRuntime);
	      this.Animations.initialize(box3DRuntime);
	      this.Audio.initialize(box3DRuntime);

	      this.on('addAssetEntity', this.registerAsset, this);
	      this.on('removeAssetEntity', this.unregisterAsset, this);

	      //Initialize scripts first so that other assets can use them
	      this.Scripts.initSystemAssets();
	      this.Shaders.initSystemAssets();
	      this.Materials.initSystemAssets();
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      if (this.initTimeoutId) {
	        clearTimeout(this.initTimeoutId);
	      }
	      _log2.default.info(this.box3DRuntime.engineName + ' - Uninitializing AssetRegistry.');

	      this.Scenes.uninitialize();
	      this.Scenes = undefined;
	      this.Prefabs.uninitialize();
	      this.Prefabs = undefined;
	      this.Models = undefined;
	      this.Geometries.uninitialize();
	      this.Geometries = undefined;
	      this.Materials.uninitialize();
	      this.Materials = undefined;
	      this.Shaders.uninitialize();
	      this.Shaders = undefined;
	      this.Textures.uninitialize();
	      this.Textures = undefined;
	      this.Animations.uninitialize();
	      this.Animations = undefined;
	      this.Audio.uninitialize();
	      this.Audio = undefined;
	      this.Documents.uninitialize();
	      this.Documents = undefined;
	      this.Applications.uninitialize();
	      this.Applications = undefined;
	      this.Scripts.uninitialize();
	      this.Scripts = undefined;

	      this.off('addAssetEntity', this.registerAsset, this);
	      this.off('removeAssetEntity', this.unregisterAsset, this);

	      _lodash2.default.each(this.assets, function (asset, id) {
	        delete this.assets[id];
	      }, this);

	      this.assets = undefined;
	      this.box3DRuntime = undefined;
	    }
	  }, {
	    key: 'getAsset',
	    value: function getAsset(predicate, registryArray) {
	      var registry = registryArray ? registryArray : this.assets,
	          all = !_lodash2.default.isFunction(predicate);
	      var keys = _lodash2.default.keys(registry);
	      for (var i = 0; i < keys.length; i++) {
	        if (all || predicate(registry[keys[i]])) {
	          return registry[keys[i]];
	        }
	      }
	    }

	    /**
	     * Returns the asset with the provided Id.
	     * @method getAssetById
	     * @param  {String} assetId The ID of the asset.
	     * @return {Object} The asset or null if not found.
	     */

	  }, {
	    key: 'getAssetById',
	    value: function getAssetById(assetId) {
	      var separatorIndex = assetId ? assetId.indexOf('#') : -1,
	          documentAsset,
	          documentId,
	          entityName;

	      if (separatorIndex >= 0) {
	        documentId = assetId.substr(0, separatorIndex);
	        documentAsset = this.box3DRuntime.assetRegistry.getAssetById(documentId);

	        if (!documentAsset) {
	          return null;
	        }

	        entityName = assetId.substr(separatorIndex + 1);
	        assetId = documentAsset.getEntityId(entityName);
	      }

	      if (this.assets[assetId]) {
	        return this.assets[assetId];
	      }

	      return null;
	    }
	  }, {
	    key: 'getAssetsByType',
	    value: function getAssetsByType(assetType) {
	      return this.getAssets(function (e) {
	        return e.type === assetType;
	      });
	    }

	    /**
	     * Returns the first asset found with the provided name, if it exists.
	     * Note: Care should be taken when calling this function often (such as every frame)
	     * because it is not build for high performance.
	     * @method getAssetByName
	     * @param  {String} assetName The name of the asset
	     * @return {Object} The asset, if found, or null if not found.
	     */

	  }, {
	    key: 'getAssetByName',
	    value: function getAssetByName(assetName) {
	      return this.getAssetsByName(assetName)[0];
	    }

	    /**
	     * Returns all assets found with the provided name, if they exist.
	     * Note: Care should be taken when calling this function often (such as every frame)
	     * because it is not build for high performance.
	     * @method getAssetsByName
	     * @param  {String} assetName The name of the asset
	     * @return {Array} The assets with the matching name.
	     */

	  }, {
	    key: 'getAssetsByName',
	    value: function getAssetsByName(assetName) {
	      return this.getAssets(function (e) {
	        return e.getName() === assetName;
	      });
	    }

	    /**
	     * Returns an array of assets that match any of the provided filters.
	     * @method getAssets
	     * @param  {function} predicate A predicate function for determining whether or not a
	     * particular in the collection is a match. Function should return boolean true/false.
	     * @return {array} Array of assets that match at least one of the querries
	     */

	  }, {
	    key: 'getAssets',
	    value: function getAssets(predicate, registryArray) {
	      var registry = registryArray ? registryArray : this.assets,
	          all = !_lodash2.default.isFunction(predicate),
	          results = [];

	      _lodash2.default.each(registry, function (asset) {
	        if (all || predicate(asset)) {
	          results.push(asset);
	        }
	      });

	      return results;
	    }

	    /**
	     * Creates a new asset and stores it in the registry.
	     * @method createAsset
	     * @param  {Object} json    The definition of the asset. Needs to at least include and 'id'
	     * and a 'type' (e.g. 'material', 'prefab', etc.)
	     * @return {Object} The newly created asset
	     */

	  }, {
	    key: 'createAsset',
	    value: function createAsset(json) {
	      var registry;
	      var newAsset;
	      json.properties = json.properties || {};
	      json.components = json.components || {};
	      json.name = json.name || '';

	      registry = this.getRegistryByType(json.type);
	      if (!registry) {
	        _log2.default.error('AssetRegistry.createAsset : Trying ' + 'to create asset of unsupported type, ' + json.type);
	        return null;
	      }

	      json.id = this.generateUniqueAssetId(json.id);

	      this.box3DRuntime.entityDispatcher.dispatchCreatedAsset(json);

	      newAsset = this.getAssetById(json.id);
	      newAsset.initialize({
	        box3DRuntime: this.box3DRuntime,
	        registry: registry
	      });

	      return newAsset;
	    }

	    /**
	     * Deletes the asset and its hierarchy from the project.
	     * Force-unloads the asset, if it is loaded.
	     * @method destroyAssetById
	     * @public
	     * @param  {String} assetId The ID of the asset to destroy
	     */

	  }, {
	    key: 'destroyAssetById',
	    value: function destroyAssetById(assetId) {
	      var asset = this.assets[assetId];
	      this.destroyAsset(asset);
	    }

	    /**
	     * Deletes the asset and its hierarchy from the project.
	     * Force-unloads the asset, if it is loaded.
	     * @method destroyAsset
	     * @public
	     * @param  {Box3DAsset} asset The Box3DAsset to destroy
	     */

	  }, {
	    key: 'destroyAsset',
	    value: function destroyAsset(asset) {
	      if (!asset || !asset instanceof _Box3DAsset2.default) {
	        _log2.default.warn('AssetRegistry.destroy : You must specify a valid asset ID to destroy.');
	        return;
	      }
	      var options = { recursive: false };
	      var objects;
	      asset.unload();
	      if (asset.objects) {
	        objects = _lodash2.default.values(asset.objects);
	        objects.forEach(function (obj) {
	          asset.destroyObject(obj, options);
	        });
	      }
	      this.box3DRuntime.entityDispatcher.dispatchDestroyedAsset(asset.id);
	    }
	  }, {
	    key: 'registerAsset',
	    value: function registerAsset(json) {
	      var registry = this.getRegistryByType(json.type);
	      var asset;
	      if (registry) {
	        asset = registry.registerAsset(json);
	        if (asset) {
	          this.assets[asset.id] = asset;
	          this.box3DRuntime.entities[asset.id] = asset;
	        }
	      }
	    }
	  }, {
	    key: 'unregisterAsset',
	    value: function unregisterAsset(assetId) {
	      var type = this.getAssetById(assetId).type;
	      var registry = this.getRegistryByType(type);
	      if (registry) {
	        registry.unregisterAsset(assetId);
	      }

	      delete this.assets[assetId];
	      delete this.box3DRuntime.entities[assetId];
	      this.box3DRuntime.trigger(type + 'Deleted', assetId);
	    }
	  }, {
	    key: 'getEntityClass',
	    value: function getEntityClass(type) {
	      switch (type) {
	        case 'application':
	          return Box3D.ApplicationAsset;
	        case 'animation':
	          return Box3D.AnimationAsset;
	        case 'document':
	          return Box3D.DocumentAsset;
	        case 'object':
	          return Box3D.Box3DObject;
	        case 'asset':
	          return Box3D.Box3DAsset;
	        case 'scene':
	          return Box3D.SceneAsset;
	        case 'prefab':
	          return Box3D.PrefabAsset;
	        case 'material':
	          return Box3D.MaterialAsset;
	        case 'shader':
	          return Box3D.ShaderAsset;
	        case 'meshGeometry':
	          return Box3D.MeshGeometryAsset;
	        case 'primitiveGeometry':
	          return Box3D.PrimitiveGeometryAsset;
	        case 'texture2D':
	          return Box3D.Texture2DAsset;
	        case 'renderTexture2D':
	          return Box3D.RenderTexture2DAsset;
	        case 'textureCube':
	          return Box3D.TextureCubeAsset;
	        case 'renderTextureCube':
	          return Box3D.RenderTextureCubeAsset;
	        case 'textureVideo':
	          return Box3D.TextureVideoAsset;
	        case 'script':
	          return Box3D.ScriptAsset;
	        case 'model':
	          return Box3D.ModelObject;
	        case 'mesh':
	          return Box3D.BaseMeshObject;
	        case 'camera':
	          return Box3D.CameraObject;
	        case 'light':
	          return Box3D.LightObject;
	        case 'node':
	          return Box3D.Box3DObject;
	        default:
	          _log2.default.error('Unknown asset type, ' + type + ', given as argument to getEntityClass');
	          return;
	      }
	    }
	  }, {
	    key: 'getRegistryByType',
	    value: function getRegistryByType(type) {
	      switch (type) {
	        case 'application':
	          return this.Applications;

	        case 'document':
	          return this.Documents;

	        case 'scene':
	          return this.Scenes;

	        case 'prefab':
	          return this.Prefabs;

	        case 'material':
	          return this.Materials;

	        case 'shader':
	          return this.Shaders;

	        case 'meshGeometry':
	        case 'primitiveGeometry':
	          return this.Geometries;

	        case 'texture2D':
	        case 'renderTexture2D':
	        case 'textureCube':
	        case 'renderTextureCube':
	        case 'textureVideo':
	          return this.Textures;

	        case 'animation':
	          return this.Animations;

	        case 'script':
	          return this.Scripts;

	        case 'audio':
	          return this.Audio;

	        default:
	          return null;
	      }
	    }
	  }, {
	    key: 'update',
	    value: function update(delta) {
	      this.Materials.update(delta);
	    }
	  }, {
	    key: 'set',
	    value: function set(json, options) {
	      var asset = this.assets[json.id];
	      if (asset) {
	        asset.set(json, options);
	      } else {
	        _log2.default.error('Trying to \'set\' properties without specifying a valid asset ID.');
	      }
	    }
	  }, {
	    key: 'unset',
	    value: function unset(json, options) {
	      var asset = this.assets[json.id];
	      if (asset) {
	        asset.unset(json, options);
	      } else {
	        _log2.default.error('Trying to \'unset\' properties without specifying a valid asset ID.');
	      }
	    }

	    /**
	     * Generate a unique uuid.
	     * @param  {String} assetId Optional Id to use as a starting point.
	     * @return {String}          The resulting unique Id.
	     */

	  }, {
	    key: 'generateUniqueAssetId',
	    value: function generateUniqueAssetId(assetId) {
	      var newId;

	      if (this.assets[assetId] || !assetId) {
	        newId = (0, _uuid2.default)();
	      } else {
	        newId = assetId;
	      }

	      return newId;
	    }
	  }]);

	  return AssetRegistry;
	}(_RuntimeEvents3.default);

	exports.default = AssetRegistry;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _uuid = __webpack_require__(9);

	var _uuid2 = _interopRequireDefault(_uuid);

	var _Box3DEntity2 = __webpack_require__(13);

	var _Box3DEntity3 = _interopRequireDefault(_Box3DEntity2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Box3D = window.Box3D;

	/**
	 * The base class asset
	 * @class Box3DAsset
	 * @constructor
	 */

	var Box3DAsset = function (_Box3DEntity) {
	  _inherits(Box3DAsset, _Box3DEntity);

	  function Box3DAsset(json) {
	    _classCallCheck(this, Box3DAsset);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Box3DAsset).call(this, json));

	    _this.objects = {};
	    _this.registry = undefined;
	    //By default, components aren't loaded for objects inside of assets.
	    _this.loadComponents = false;
	    return _this;
	  }

	  _createClass(Box3DAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      this.registry = properties.registry;
	      _get(Object.getPrototypeOf(Box3DAsset.prototype), 'initialize', this).call(this, properties);

	      this.on('addObjectEntity', this.registerObject, this);
	      this.on('removeObjectEntity', this.unregisterObject, this);

	      this.on('triggerLoad', this.load, this);
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {

	      this.off('triggerLoad', this.load, this);

	      this.off('addObjectEntity', this.registerObject, this);
	      this.off('removeObjectEntity', this.unregisterObject, this);

	      //Uninitialize this asset ( will force unload the asset and its children)
	      _get(Object.getPrototypeOf(Box3DAsset.prototype), 'uninitialize', this).call(this);

	      //Uninitialize all child objects. Most of these will probably already be unloaded
	      //but, if not, this will force unload them.
	      for (var x in this.objects) {
	        this.objects[x].uninitialize();
	        delete this.objects[x];
	      }
	    }
	  }, {
	    key: 'load',
	    value: function load(callback) {
	      _get(Object.getPrototypeOf(Box3DAsset.prototype), 'load', this).call(this, callback);
	      if (!this.isDependenciesLoaded()) {
	        this.loadDependencies();
	      }
	    }

	    /**
	     * Returns the byte size of the data of the specified type. This function is used by
	     * the public functions, getDataSizeDownload, getDataSizeInMemory, etc.
	     * @private
	     * @method getDataSize
	     * @param {String} sizeType One of 'download', 'inMemory' or 'loaded'
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @param {Object} params Specify parameters to narrow down the type of asset to
	     * return values for. e.g. for textures, you might specify {compression: 'dxt'}.
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSize',
	    value: function getDataSize(sizeType, dependencyType, params) {
	      var totalSize = 0;
	      var dependencyTypes = [];
	      if (dependencyType) {
	        dependencyTypes.push(dependencyType);
	      } else {
	        dependencyTypes = ['textures', 'animations', 'geometries'];
	      }
	      dependencyTypes.forEach(function (type) {
	        var dependencies = this.getDependencies()[type];
	        _lodash2.default.each(dependencies, function (obj, id) {
	          var asset = this.getAssetById(id);
	          if (asset) {
	            switch (sizeType) {
	              case 'loaded':
	                totalSize += asset.getDataSizeLoaded(type, params);
	                break;
	              case 'download':
	                totalSize += asset.getDataSizeDownload(type, params);
	                break;
	              default:
	                totalSize += asset.getDataSizeInMemory(type, params);
	            }
	          }
	        }, this);
	      }, this);

	      return totalSize;
	    }

	    /**
	     * Returns the byte size of the data that has already been loaded by this asset and its
	     * hierarchy.
	     * @public
	     * @method getDataSizeLoaded
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeLoaded',
	    value: function getDataSizeLoaded(dependencyType, params) {
	      return this.getDataSize('loaded', dependencyType, params);
	    }

	    /**
	     * Returns the total amount of data to be downloaded for all the dependencies of the type
	     * specified that are referenced by this asset.
	     * @method getDataSizeDownload
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @param {Object} params Specify parameters to narrow down the type of asset to
	     * return values for. e.g. for textures, you might specify {compression: 'dxt'}.
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeDownload',
	    value: function getDataSizeDownload(dependencyType, params) {
	      return this.getDataSize('download', dependencyType, params);
	    }

	    /**
	     * Returns the total amount of memory occupied by all the dependencies of the type
	     * specified that are referenced by this asset.
	     * @method getDataSizeInMemory
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @param {Object} params Specify parameters to narrow down the type of asset to
	     * return values for. e.g. for textures, you might specify {compression: 'dxt'}.
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeInMemory',
	    value: function getDataSizeInMemory(dependencyType, params) {
	      return this.getDataSize('inMemory', dependencyType, params);
	    }

	    /**
	     * Returns the asset with the provided Id, if it exists.
	     * @method getAssetById
	     * @param  {String} assetId The ID of the asset
	     * @return {object} The asset or null if not found.
	     */

	  }, {
	    key: 'getAssetById',
	    value: function getAssetById(assetId) {
	      return this.box3DRuntime.assetRegistry.getAssetById(assetId);
	    }

	    /**
	     * Returns the first object inside this asset that matches one or more of the
	     * provided filters.
	     * @method getObject
	     * @param  {Object} predicate A function which returns 'true' or 'false', used to determine
	     * which entities to return.
	     * @return {Object}        The first object that matches the querry
	     */

	  }, {
	    key: 'getObject',
	    value: function getObject(predicate) {
	      var all;
	      if (predicate && !_lodash2.default.isFunction(predicate)) {
	        _log2.default.error('Deprecated call to getObject');
	        all = true;
	      }

	      for (var i in this.objects) {
	        if (all || predicate(this.objects[i])) {
	          return this.objects[i];
	        }
	      }
	    }

	    /**
	     * Returns the object with the provided Id, if it exists in the current asset.
	     * @method getObjectById
	     * @param  {String} objectID The ID of the object
	     * @return {Object} The object or null if not found.
	     */

	  }, {
	    key: 'getObjectById',
	    value: function getObjectById(objectID) {

	      if (this.objects[objectID]) {
	        return this.objects[objectID];
	      } else if (objectID === this.id) {
	        return this;
	      }

	      return null;
	    }

	    /**
	     * Returns the first object with the provided name, if it exists in the current asset.
	     * Note: Care should be taken when calling this function often (such as every frame)
	     * because it is not build for high performance.
	     * @method getObjectByName
	     * @param  {String} objectName The name of the object
	     * @return {object} The object, if found, or null if not found.
	     */

	  }, {
	    key: 'getObjectByName',
	    value: function getObjectByName(objectName) {
	      return this.getObject(function (e) {
	        return e.getName() === objectName;
	      });
	    }

	    /**
	     * Returns the objects with the provided name, if any exist in the current asset.
	     * Note: Care should be taken when calling this function often (such as every frame)
	     * because it is not build for high performance.
	     * @method getObjectsByName
	     * @param  {String} objectName The name of the object
	     * @return {array} Array of matching objects
	     */

	  }, {
	    key: 'getObjectsByName',
	    value: function getObjectsByName(objectName) {
	      return this.getObjects(function (e) {
	        return e.getName() === objectName;
	      });
	    }

	    /**
	     * Returns the first object with the provided type, if any exist in the current asset.
	     * @method getObjectsByType
	     * @param  {String} objectType The type of the object
	     * @return {Object} The first matching object
	     */

	  }, {
	    key: 'getObjectByType',
	    value: function getObjectByType(objectType) {
	      return this.getObject(function (e) {
	        return e.type === objectType;
	      });
	    }

	    /**
	     * Returns the objects with the provided type, if any exist in the current asset.
	     * @method getObjectsByType
	     * @param  {String} objectType The type of the object
	     * @return {array} Array of matching objects
	     */

	  }, {
	    key: 'getObjectsByType',
	    value: function getObjectsByType(objectType) {
	      return this.getObjects(function (e) {
	        return e.type === objectType;
	      });
	    }

	    /**
	     * Returns an array of objects inside this asset that match any of the provided filters.
	     * @method getObjects
	     * @param  {object} predicate A function which returns 'true' or 'false', used to determine
	     * which entities to return.
	     * can be either single options or arrays of multiple values to match.
	     * @return {array}        Array of objects that match the querry
	     */

	  }, {
	    key: 'getObjects',
	    value: function getObjects(predicate) {
	      var results = [],
	          all;
	      if (!_lodash2.default.isFunction(predicate)) {
	        if (predicate) {
	          _log2.default.error('Deprecated call to getObjects');
	        }
	        all = true;
	      }

	      _lodash2.default.each(this.objects, function (object) {
	        if (all || predicate(object)) {
	          results.push(object);
	        }
	      }, this);

	      return results;
	    }
	  }, {
	    key: 'unload',
	    value: function unload(options) {

	      //abort xhr request associated with this
	      this.box3DRuntime.resourceLoader.abortRequest(this.id);

	      _get(Object.getPrototypeOf(Box3DAsset.prototype), 'unload', this).call(this, options);
	    }

	    /**
	     * Go through all registered dependencies and check if they're all loaded.
	     * @private
	     * @return {Boolean} True iff all registered dependencies are loaded.
	     */

	  }, {
	    key: 'checkIfDependenciesLoaded',
	    value: function checkIfDependenciesLoaded() {
	      var dependencies = this.getDependencies();
	      var asset;
	      var isLoaded = true;
	      for (var id in dependencies) {
	        asset = this.box3DRuntime.getEntityById(id);
	        if (asset && !asset.isBaseLoaded()) {
	          isLoaded = false;
	          break;
	        }
	      }
	      return isLoaded;
	    }
	  }, {
	    key: 'cleanOrphanObjects',
	    value: function cleanOrphanObjects(options) {
	      var allObjects = _lodash2.default.clone(this.objects);
	      this.traverse(function (obj) {
	        delete allObjects[obj.id];
	      });
	      options = options || {};
	      options.recursive = false;
	      _lodash2.default.each(allObjects, function (obj) {
	        _log2.default.info(this.type + ' asset has orphaned ' + obj.type + ', ' + obj.id);
	        this.destroyObjectById(obj.id, options);
	      }, this);
	    }
	  }, {
	    key: 'getObjectClass',
	    value: function getObjectClass(type) {
	      switch (type) {
	        case 'camera':
	          return Box3D.CameraObject;
	        case 'light':
	          return Box3D.LightObject;
	        case 'mesh':
	          return Box3D.StaticMeshObject;
	        case 'skinnedMesh':
	          return Box3D.SkinnedMeshObject;
	        case 'model':
	          return Box3D.ModelObject;
	        case 'node':
	          return Box3D.Box3DObject;
	        default:
	          _log2.default.warn('Currently no support for object type ' + type);
	          return Box3D.Box3DObject;
	      }
	    }

	    /**
	     * Internal method for registering a new object. This is called in each engine instance
	     * after calling createObject().
	     * @method registerObject
	     * @private
	     * @param  {Object} jsonDesc [description]
	     */

	  }, {
	    key: 'registerObject',
	    value: function registerObject(jsonDesc) {

	      var newObject = new (this.getObjectClass(jsonDesc.type))(jsonDesc);

	      this.objects[newObject.id] = newObject;
	      this.box3DRuntime.entities[newObject.id] = newObject;
	    }

	    /**
	     * Internal method for unregistering an object. This is called in each engine instance
	     * after calling destroyObject().
	     * @method unregisterObject
	     * @private
	     * @param  {String} objectId Id of the object to unregister
	     */

	  }, {
	    key: 'unregisterObject',
	    value: function unregisterObject(objectId) {
	      var object = this.objects[objectId];
	      if (!object) {
	        return;
	      }
	      object.unload({
	        recursive: false
	      });
	      object.uninitialize();
	      delete this.box3DRuntime.entities[objectId];
	      delete this.objects[objectId];
	    }

	    /**
	     * Creates a new object and stores it in the asset. Note that this doesn't add the object
	     * as a child. You will need to call addChild to do this.
	     * @public
	     * @param  {Object} json    Object definition.
	     * @return {Object} The newly created object
	     */

	  }, {
	    key: 'createObject',
	    value: function createObject(json) {
	      var newObject;
	      json.properties = json.properties || {};
	      json.components = json.components || {};
	      json.name = json.name || '';
	      json.type = json.type || 'node';

	      json.id = this.generateUniqueObjectId(json.id);
	      json.parentAssetId = this.id;

	      this.box3DRuntime.entityDispatcher.dispatchCreatedObject(json);

	      newObject = this.getObjectById(json.id);
	      newObject.initialize({
	        box3DRuntime: this.box3DRuntime
	      });

	      return newObject;
	    }

	    /**
	     * Destroys the asset and causes any instances of the asset to be removed.
	     */

	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.box3DRuntime.trigger(this.type + 'Deleted', this.id);
	      this.registry.destroyAsset(this);
	    }

	    /**
	     * Deletes the object and its hierarchy from this asset.
	     * @method destroyObjectById
	     * @public
	     * @param  {String} objectId The ID of the object to destroy
	     * @param  {Object} options  The standard options object
	     */

	  }, {
	    key: 'destroyObjectById',
	    value: function destroyObjectById(objectId, options) {
	      var object = this.objects[objectId];
	      this.destroyObject(object, options);
	    }

	    /**
	     * Deletes the object and its hierarchy from this asset.
	     * @method destroyObject
	     * @public
	     * @param  {Object} object The Box3DObject to destroy
	     * @param  {Object} options  The standard options object
	     */

	  }, {
	    key: 'destroyObject',
	    value: function destroyObject(object, options) {
	      var parent;
	      if (!object || !object instanceof Box3D.Box3DObject) {
	        _log2.default.warn('Box3DAsset.destroyObject : You must specify a valid object ID to destroy.');
	        return;
	      }
	      options = options || {};

	      // If this should be recursive, do so.
	      if (options.recursive !== false) {
	        var children = object.getChildren();
	        children.forEach(function (child) {
	          child.set('parentId', undefined, { silent: true });
	          this.destroyObjectById(child.id, options);
	        }, this);
	      }
	      parent = object.getParentObject();
	      if (parent) {
	        parent.removeChild(object);
	      }
	      this.box3DRuntime.entityDispatcher.dispatchDestroyedObject(object.id);
	    }

	    /**
	     * Copy all objects in this asset over to the given asset.
	     * This function maintains parent-child relationships between all objects but
	     * not with the asset itself.
	     * @public
	     * @param  {Object} asset   The asset to copy the objects into
	     */

	  }, {
	    key: 'cloneObjectsInto',
	    value: function cloneObjectsInto(asset) {
	      var that = this;
	      var cloneMap = {};
	      var objects = _lodash2.default.keys(this.objects);
	      // Create child objects
	      _lodash2.default.each(this.objects, function (object) {
	        var objectJson = {
	          id: (0, _uuid2.default)(),
	          name: object.getName(),
	          parentAssetId: asset.id,
	          prefabObjectId: object.get('prefabObjectId'),
	          prefabAssetId: object.get('prefabAssetId'),
	          prefabInstanceId: object.get('prefabInstanceId'),
	          type: object.type,
	          properties: _lodash2.default.cloneDeep(object.getOwnProperties()),
	          components: _lodash2.default.cloneDeep(object.componentRegistry.getDescriptors())
	        };
	        var newObj = asset.createObject(objectJson);
	        cloneMap[object.id] = newObj;
	      }, this);
	      // For each object, set 'parentId' and 'children' on the new object.
	      _lodash2.default.each(objects, function (objectId) {
	        var newChildren = [];
	        var object = that.getObjectById(objectId);
	        var childIds = object.getChildIds();
	        var newObject = cloneMap[objectId];
	        if (childIds.length) {
	          for (var i = 0; i < childIds.length; i++) {
	            if (cloneMap[childIds[i]]) {
	              newChildren.push(cloneMap[childIds[i]].id);
	              cloneMap[childIds[i]].set('parentId', newObject.id);
	            }
	          }
	          object.setChildIds(newChildren);
	        }
	      }, this);

	      return cloneMap;
	    }

	    //Clones the asset in the database as well as the threeJS data, if loaded.

	  }, {
	    key: 'clone',
	    value: function clone(options) {

	      var assets = this.box3DRuntime.assetRegistry;
	      var newAsset;
	      var objectMap;
	      var newAssetJSON = {};
	      options = options || {};

	      newAssetJSON.id = options.id ? assets.generateUniqueAssetId(options.id) : assets.generateUniqueAssetId(this.id);
	      newAssetJSON.name = options.name !== undefined ? options.name : this.getName();
	      newAssetJSON.type = this.getType();
	      newAssetJSON.folder = this.get('folder');
	      newAssetJSON.properties = _lodash2.default.cloneDeep(this.getOwnProperties());
	      newAssetJSON.components = _lodash2.default.cloneDeep(this.componentRegistry.getDescriptors());

	      newAsset = assets.createAsset(newAssetJSON);
	      // Clone all this asset's objects into the new asset
	      objectMap = this.cloneObjectsInto(newAsset);
	      // Link up the asset's immediate children.
	      var children = this.getChildIds();
	      var newChildren = [];
	      _lodash2.default.each(children, function (childId) {
	        newChildren.push(objectMap[childId].id);
	      }, this);
	      newAsset.setChildIds(newChildren);
	      return newAsset;
	    }

	    /**
	     * Generate a unique uuid.
	     * @param  {String} objectId Optional Id to use as a starting point.
	     * @return {String}          The resulting unique Id.
	     */

	  }, {
	    key: 'generateUniqueObjectId',
	    value: function generateUniqueObjectId(objectId) {
	      var newId;

	      if (!objectId || this.objects[objectId]) {
	        newId = (0, _uuid2.default)();
	      } else {
	        newId = objectId;
	      }

	      return newId;
	    }
	  }, {
	    key: 'onEntityNameChanged',
	    value: function onEntityNameChanged(model, value) {
	      var changeList = model.changed;

	      if (changeList.name) {
	        this.name = value;
	        if (this.runtimeData && this.runtimeData.name !== undefined) {
	          this.runtimeData.name = value;
	        }
	      }
	    }
	  }]);

	  return Box3DAsset;
	}(_Box3DEntity3.default);

	Box3DAsset.schema = _lodash2.default.extend({}, _Box3DEntity3.default.schema, {});
	Box3DAsset.events = {
	  triggerLoad: {
	    scope: 'local',
	    params: [],
	    action: true,
	    category: 'Loading'
	  }
	};

	window.Box3D.Box3DAsset = Box3DAsset;
	exports.default = Box3DAsset;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _RuntimeEvents2 = __webpack_require__(4);

	var _RuntimeEvents3 = _interopRequireDefault(_RuntimeEvents2);

	var _ComponentRegistry = __webpack_require__(14);

	var _ComponentRegistry2 = _interopRequireDefault(_ComponentRegistry);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Box3D = window.Box3D = window.Box3D || {};
	/**
	  * The base class for all objects and assets in the engine.
	  *
	  * @class Box3DEntity
	  * @constructor
	  */

	var Box3DEntity = function (_RuntimeEvents) {
	  _inherits(Box3DEntity, _RuntimeEvents);

	  function Box3DEntity(jsonDesc) {
	    _classCallCheck(this, Box3DEntity);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Box3DEntity).call(this));

	    _this.events = {
	      load: {
	        params: [],
	        action: false,
	        category: 'Loading'
	      },
	      loadBase: {
	        params: [],
	        action: false,
	        category: 'Loading'
	      },
	      loadChildren: {
	        params: [],
	        action: false,
	        category: 'Loading'
	      },
	      startTimer: {
	        params: [{
	          name: 'time',
	          description: 'The time (in seconds) that will elapse before the \'endTimer\' event ' + 'will be fired.',
	          type: 'f',
	          default: 5.0
	        }],
	        action: true,
	        category: 'General'
	      },
	      endTimer: {
	        params: [],
	        action: false,
	        category: 'General'
	      }
	    };

	    jsonDesc = jsonDesc || {};
	    _this.box3DRuntime = undefined;
	    _this.componentRegistry = undefined;

	    _this.state = new Array(4);

	    _this.runtimeData = undefined;
	    _this.sharedData = undefined;
	    _this.events = {};
	    // TODO - id and type should be defined as getters that grab the value from
	    // internal, private data.
	    _this.id = jsonDesc.id;
	    _this.type = jsonDesc.type;
	    _this.sharedData = jsonDesc;
	    _this.ownDependencies = {};
	    _this.dependencies = {};
	    return _this;
	  }

	  _createClass(Box3DEntity, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(Box3DEntity.prototype), 'initialize', this).call(this, properties);
	      this._buildParamDependencies();
	    }
	  }, {
	    key: 'markState',
	    value: function markState(stateType, state) {
	      if (!state) {
	        return;
	      }
	      this.state[stateType] = state;
	      var parent = this.getParentObject();
	      switch (state) {
	        case Box3DEntity.STATE.PENDING:
	          //If the parent's children are not unloaded or destroyed, mark them as in-progress
	          if (parent && parent.state[Box3DEntity.STATE_TYPE.CHILDREN] > Box3DEntity.STATE.PENDING) {
	            parent.markState(Box3DEntity.STATE_TYPE.CHILDREN, Box3DEntity.STATE.INPROGRESS);
	          }
	          if (this.isUnloaded()) {
	            this.trigger('unload', this);
	          }
	          break;
	        case Box3DEntity.STATE.INPROGRESS:
	          if (state === Box3DEntity.STATE_TYPE.BASE) {
	            this.trigger('loadStarted', this);
	          }
	        // Fallthrough
	        case Box3DEntity.STATE.PARTIAL:
	          // Set parent's children state to INPROGRESS
	          if (parent) {
	            parent.markState(Box3DEntity.STATE_TYPE.CHILDREN, Box3DEntity.STATE.INPROGRESS);
	          }
	          break;
	        case Box3DEntity.STATE.SUCCEEDED:
	        case Box3DEntity.STATE.FAILED:
	        case Box3DEntity.STATE.ABORTED:
	          // Fire the appropriate load event
	          switch (stateType) {
	            case Box3DEntity.STATE_TYPE.BASE:
	              this.trigger('loadBase', this);
	              break;
	            case Box3DEntity.STATE_TYPE.CHILDREN:
	              this.trigger('loadChildren', this);
	              break;
	            case Box3DEntity.STATE_TYPE.DEPENDENCIES:
	              this.trigger('loadDependencies', this);
	              break;
	            case Box3DEntity.STATE_TYPE.COMPONENTS:
	              this.trigger('loadComponents', this);
	          }

	          // If this entity isn't finished loading then it won't affect the parent's state.
	          if (!this.isLoaded()) {
	            return;
	          } else {
	            this.trigger('load', this);
	          }
	          if (!parent) {
	            break;
	          }
	          // Otherwise, if parent's other children are loaded, then update child state of parent
	          if (parent.checkIfChildrenLoaded()) {
	            // Don't overwrite the state if it was already something that needs to be recorded.
	            if (state >= parent.state[Box3DEntity.STATE_TYPE.CHILDREN]) {
	              parent.markState(Box3DEntity.STATE_TYPE.CHILDREN, state);
	            }
	          }
	      }
	    }
	  }, {
	    key: 'initialize',
	    value: function initialize(properties) {
	      var _this2 = this;

	      if (!properties.box3DRuntime) {
	        _log2.default.error('Can\'t create an entity without an engine reference.');
	        return false;
	      }

	      this.box3DRuntime = properties.box3DRuntime;
	      this.isBox3DEntity = true;

	      for (var i = 0; i < this.state.length; i++) {
	        this.state[i] = Box3DEntity.STATE.PENDING;
	      }

	      this.on('change:name', this._nameChanged, this);
	      this.on('change:properties', this._propertyChanged, this);
	      this.on('change:children', this._childrenChanged, this);

	      this.on('startTimer', this.startTimer, this);

	      _lodash2.default.each(this.sharedData.properties, function (value, key) {
	        Box3DEntity._setValueObj.value = value;
	        if (!_this2.verifyProperty(key, Box3DEntity._setValueObj)) {
	          _log2.default.warn('Property, ' + key + ', does not exist or has an invalid property.');
	        }
	      });

	      this.initializeComponents();
	      this.registerDependencies();
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      // Stop listening to events bound with this.listenToOnce, this.listenTo, etc.
	      this.stopListening();

	      this.off('startTimer', this.startTimer, this);

	      this.off('change:name', this._nameChanged, this);
	      this.off('change:properties', this._propertyChanged, this);
	      this.off('change:children', this._childrenChanged, this);

	      this.unregisterDependencies();

	      if (this.componentRegistry) {
	        this.componentRegistry.uninitialize();
	        this.componentRegistry = null;
	      }

	      this._uninitPrefabBindings();

	      this.unload({ recursive: false });

	      this.id = undefined;
	      this.type = undefined;
	      for (var i = 0; i < this.state.length; i++) {
	        this.state[i] = Box3DEntity.STATE.DESTROYED;
	      }

	      this.runtimeData = undefined;
	      this.box3DRuntime = undefined;
	    }
	  }, {
	    key: 'initializeComponents',
	    value: function initializeComponents() {
	      if (!this.componentRegistry) {
	        this.componentRegistry = new _ComponentRegistry2.default({
	          box3DEntity: this
	        });
	        this.componentRegistry.initialize();
	      }
	    }

	    /**
	     * Return ID's of dependencies of this entity as well as reference counts. This doesn't
	     * include dependencies of dependencies or dependencies of objects within this entity (if
	     * this is an asset).
	     * @return {Object} Dependencies, keyed by asset ID and containing reference counts.
	     */

	  }, {
	    key: 'getOwnDependencies',
	    value: function getOwnDependencies() {
	      return this.ownDependencies;
	    }

	    /**
	     * Return the assets that this entity is dependent on. e.g. materials, textures,
	     * geometry, animations, etc. This includes all assets referenced directly by this entity
	     * and all objects inside it (in the case of assets). If the dependencies also have their
	     * own dependencies, these are also included.
	     * @return {Object} A dictionary of assets, keyed by id and containing a reference
	     * counter.
	     */

	  }, {
	    key: 'getDependencies',
	    value: function getDependencies() {
	      return this.dependencies;
	    }

	    /**
	     * Register all dependencies for this entity.
	     * @method registerDependencies
	     * @private
	     */

	  }, {
	    key: 'registerDependencies',
	    value: function registerDependencies() {
	      // Will be overridden per entity type.
	      return;
	    }

	    /**
	     * Register all dependencies for this entity.
	     * @method registerDependencies
	     * @private
	     */

	  }, {
	    key: 'unregisterDependencies',
	    value: function unregisterDependencies() {
	      var currentDependencies = this.getDependencies();

	      // Unregister existing dependencies
	      _lodash2.default.each(currentDependencies, function (dep, id) {
	        var i;
	        var length;
	        // It's possible that the previous dependency being unregistered also caused this
	        // dependency to be unregisterd (e.g. a renderTexture that uses another texture) so
	        // dep may not exist anymore.
	        if (!dep) {
	          return;
	        }
	        length = dep.count;
	        for (i = 0; i < length; i++) {
	          this.unregisterDependency(id);
	        }
	      }, this);
	    }

	    /**
	     * Register the given asset as being a sub dependency of this asset. A sub dependency
	     * is a dependency that is indirectly referenced by this entity (i.e. the dependency has its
	     * own dependency).
	     * @method registerSubDependency
	     * @private
	     * @param  {String} assetId The id of the asset to register
	     */

	  }, {
	    key: 'registerSubDependency',
	    value: function registerSubDependency(assetId) {
	      var asset;
	      var dependency = this.dependencies[assetId];
	      if (!dependency) {
	        this.dependencies[assetId] = { count: 1 };
	        // A new dependency was added so make sure that our state isn't 'loaded' anymore.
	        if (this.isDependenciesLoaded()) {
	          this.markState(Box3DEntity.STATE_TYPE.DEPENDENCIES, Box3DEntity.STATE.INPROGRESS);
	        }
	        asset = this.box3DRuntime.assetRegistry.getAssetById(assetId);
	        // When each dependency is loaded, check if we're done and mark dependencies as
	        // finished if we are done.
	        asset.when('loadBase', function () {
	          if (this.checkIfOwnDependenciesLoaded()) {
	            this.markState(Box3DEntity.STATE_TYPE.DEPENDENCIES, Box3DEntity.STATE.SUCCEEDED);
	          }
	        }, this);
	      } else {
	        dependency.count++;
	      }
	      // Inform entities referencing this entity as a dependency of the change
	      this.trigger('change:dependency', assetId, null);
	    }

	    /**
	     * Unregister the given asset as being a sub dependency of this asset. A sub dependency
	     * is a dependency that is indirectly referenced by this entity (i.e. the dependency has its
	     * own dependency).
	     * @method unregisterSubDependency
	     * @private
	     * @param  {String} assetId The id of the asset to unregister
	     */

	  }, {
	    key: 'unregisterSubDependency',
	    value: function unregisterSubDependency(assetId) {
	      var dependency = this.dependencies[assetId];
	      if (dependency) {
	        dependency.count--;
	        if (dependency.count === 0) {
	          delete this.dependencies[assetId];
	        }
	        // Inform entities referencing this entity as a dependency of the change
	        this.trigger('change:dependency', null, assetId);
	      }
	    }

	    /**
	     * Register the given asset as being a dependency of this entity as well as the parent
	     * asset, if any. A count is maintained to track the number of times a given asset is referenced
	     * by this entity. This allows easy calculation of data size of an asset or individual object.
	     * Registering a dependency on an object that is already a dependency of another will
	     * automatically register it with that entity as well.
	     * @method registerAssetDependency
	     * @private
	     * @param  {String} assetId The id of the asset to register
	     */

	  }, {
	    key: 'registerDependency',
	    value: function registerDependency(assetId) {
	      var _this3 = this;

	      var parentAsset = this.getParentAsset();
	      assetId = _lodash2.default.isObject(assetId) ? assetId.id : assetId;
	      var asset = this.box3DRuntime.getEntityById(assetId);
	      if (asset) {
	        (function () {
	          if (parentAsset && parentAsset !== _this3) {
	            parentAsset.registerSubDependency(assetId);
	          } else {
	            parentAsset = null;
	          }
	          var dependencies = _this3.getOwnDependencies();
	          if (!dependencies[assetId]) {
	            dependencies[assetId] = {
	              count: 1
	            };
	            //Bind to dependency changes on this asset so that we can register or unregister
	            //sub dependencies as needed.
	            dependencies[assetId].onSubDependencyChange = function (newAssetId, oldAssetId) {
	              if (!dependencies[assetId]) {
	                return;
	              }
	              for (var j = 0; j < dependencies[assetId].count; j++) {
	                if (newAssetId) {
	                  _this3.registerSubDependency(newAssetId);
	                  if (parentAsset) {
	                    parentAsset.registerSubDependency(newAssetId);
	                  }
	                }
	                if (oldAssetId) {
	                  _this3.unregisterSubDependency(oldAssetId);
	                  if (parentAsset) {
	                    parentAsset.unregisterSubDependency(oldAssetId);
	                  }
	                }
	              }
	            };
	            // A new dependency was added so make sure that our state isn't 'loaded' anymore.
	            if (_this3.isDependenciesLoaded()) {
	              _this3.markState(Box3DEntity.STATE_TYPE.DEPENDENCIES, Box3DEntity.STATE.INPROGRESS);
	            }
	            if (!_this3.isUnloaded() && asset.isUnloaded()) {
	              asset.load();
	            }
	            // When each dependency is loaded, check if we're done and mark dependencies as
	            // finished if we are done.
	            asset.when('loadBase', function () {
	              if (this.checkIfOwnDependenciesLoaded()) {
	                this.markState(Box3DEntity.STATE_TYPE.DEPENDENCIES, Box3DEntity.STATE.SUCCEEDED);
	              }
	            }, _this3);
	            asset.on('change:dependency', dependencies[assetId].onSubDependencyChange, _this3);
	          } else {
	            dependencies[assetId].count++;
	          }

	          //Register all the current dependencies of the new asset with this entity.
	          _lodash2.default.each(asset.getDependencies(), function (dep, id) {
	            for (var i = 0; i < dep.count; i++) {
	              this.registerSubDependency(id);
	              if (parentAsset) {
	                parentAsset.registerSubDependency(id);
	              }
	            }
	          }, _this3);

	          _this3.registerSubDependency(assetId);
	        })();
	      }
	    }

	    /**
	     * Unregister the given asset as being a dependency of this asset.
	     * @method unregisterDependency
	     * @private
	     * @param  {String} assetId The id of the asset to unregister
	     */

	  }, {
	    key: 'unregisterDependency',
	    value: function unregisterDependency(assetId) {
	      assetId = _lodash2.default.isObject(assetId) ? assetId.id : assetId;
	      var asset = this.box3DRuntime.getEntityById(assetId);
	      var dependencies = this.getOwnDependencies();
	      var dependency = dependencies[assetId];
	      var parentAsset = this.getParentAsset();
	      if (dependency) {
	        if (parentAsset && parentAsset !== this) {
	          parentAsset.unregisterSubDependency(assetId);
	        } else {
	          parentAsset = null;
	        }
	        //Decrement the reference count for this material
	        dependency.count--;

	        //If this material is no longer referenced, remove it completely.
	        if (dependency.count === 0) {
	          delete dependencies[assetId];

	          if (asset) {
	            //Unbind the event callback for texture changes on this material
	            asset.off('change:dependency', dependency.onSubDependencyChange, this);
	          }
	        }

	        if (asset) {
	          //Unregister all the current dependencies of the asset from this entity
	          _lodash2.default.each(asset.getDependencies(), function (dep, id) {
	            for (var i = 0; i < dep.count; i++) {
	              this.unregisterSubDependency(id);
	              if (parentAsset) {
	                parentAsset.unregisterSubDependency(id);
	              }
	            }
	          }, this);
	        }
	        this.unregisterSubDependency(assetId);
	      }
	    }

	    /**
	     * Get the name of the entity
	     * @method getName
	     * @public
	     * @return {String} The entity's name
	     */

	  }, {
	    key: 'getName',
	    value: function getName() {
	      return this.sharedData.name;
	    }

	    /**
	     * Set the name of the entity
	     * @method setName
	     * @public
	     * @param {String} newName       : The entity's new name
	     * @param {Object} options :    Options object.
	     */

	  }, {
	    key: 'setName',
	    value: function setName(newName, options) {
	      this.set('name', newName, options);
	    }
	  }, {
	    key: 'get',
	    value: function get(attrib) {
	      return this.sharedData[attrib];
	    }
	  }, {
	    key: 'set',
	    value: function set(attrib, value, options) {
	      if (_lodash2.default.isObject(attrib)) {
	        _log2.default.error('set being passed an object!!');
	        return;
	      }
	      if (this.sharedData.hasOwnProperty(attrib)) {
	        this.sharedData[attrib] = value;
	      }
	      if (!options || !options.silent) {
	        this.box3DRuntime.entityDispatcher.dispacthAttributeChanged(this, attrib, value);
	      }
	    }

	    // TODO - Is there a use-case for unset outside of prefab instances??

	  }, {
	    key: 'unset',
	    value: function unset(attrib, options) {
	      if (this.sharedData.hasOwnProperty(attrib)) {
	        delete this.sharedData[attrib];
	      }
	      if (!options || !options.silent) {
	        this.box3DRuntime.entityDispatcher.dispacthAttributeChanged(this, attrib, undefined, options);
	      }
	    }
	  }, {
	    key: 'verifyProperty',
	    value: function verifyProperty(propertyName, valueObj) {
	      // Verify property value against schema.
	      if (this.constructor.schema[propertyName]) {
	        var value = valueObj.value;
	        var newValue = undefined;
	        switch (this.constructor.schema[propertyName].type) {
	          case 'string':
	          case 'id':
	            if (_lodash2.default.isString(value)) {
	              return true;
	            }
	            break;
	          case 'integer':
	            if (_lodash2.default.isNumber(value) && Math.round(value) === value) {
	              return true;
	            }
	            break;
	          case 'float':
	            if (_lodash2.default.isNumber(value)) {
	              return true;
	            }
	            break;
	          case 'boolean':
	            if (_lodash2.default.isBoolean(value)) {
	              return true;
	            }
	            break;
	          case 'object':
	            if (_lodash2.default.isObject(value)) {
	              return true;
	            }
	            break;
	          case 'array':
	            if (_lodash2.default.isArray(value)) {
	              return true;
	            }
	            break;
	          case 'vector2':
	            if (_lodash2.default.isNumber(value.x) && _lodash2.default.isNumber(value.y) && _lodash2.default.size(value) === 2) {
	              if (this.sharedData.properties.hasOwnProperty(propertyName)) {
	                newValue = this.sharedData.properties[propertyName];
	                newValue.x = value.x;
	                newValue.y = value.y;
	              } else {
	                newValue = { x: value.x, y: value.y };
	              }
	              return true;
	            }
	            break;
	          case 'vector3':
	            if (_lodash2.default.isNumber(value.x) && _lodash2.default.isNumber(value.y) && _lodash2.default.isNumber(value.z) && _lodash2.default.size(value) === 3) {
	              if (this.sharedData.properties.hasOwnProperty(propertyName)) {
	                newValue = this.sharedData.properties[propertyName];
	                newValue.x = value.x;
	                newValue.y = value.y;
	                newValue.z = value.z;
	              } else {
	                newValue = { x: value.x, y: value.y, z: value.z };
	              }
	            }
	            break;
	          case 'vector4':
	            if (_lodash2.default.isNumber(value.x) && _lodash2.default.isNumber(value.y) && _lodash2.default.isNumber(value.z) && _lodash2.default.isNumber(value.w) && _lodash2.default.size(value) === 4) {
	              if (this.sharedData.properties.hasOwnProperty(propertyName)) {
	                newValue = this.sharedData.properties[propertyName];
	                newValue.x = value.x;
	                newValue.y = value.y;
	                newValue.z = value.z;
	                newValue.w = value.w;
	              } else {
	                newValue = { x: value.x, y: value.y, z: value.z, w: value.w };
	              }
	            }
	            break;
	          case 'color':
	            if (_lodash2.default.isNumber(value.r) && _lodash2.default.isNumber(value.g) && _lodash2.default.isNumber(value.b) && _lodash2.default.size(value) === 3) {
	              if (this.sharedData.properties.hasOwnProperty(propertyName)) {
	                newValue = this.sharedData.properties[propertyName];
	                newValue.r = value.r;
	                newValue.g = value.g;
	                newValue.b = value.b;
	              } else {
	                newValue = { r: value.r, g: value.g, b: value.b };
	              }
	            }
	            break;
	          default:
	            _log2.default.error('Forgot to add the type, ' + this.constructor.schema[propertyName].type);
	            return false;
	        }
	        valueObj.value = newValue;
	        return true;
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: 'setProperty',

	    /**
	     * Set a new or existing property for this object.
	     * @method setProperty
	     * @public
	     * @param  {String} propertyName Name of the property to set.
	     * @param  {Mixed} value        Value of the property.
	     * @param  {Object} options      Options object. Can contain things like silent: true, etc.
	     * @returns {Boolean} True if the set was successful. False otherwise.
	     */
	    value: function setProperty(propertyName, value, options) {
	      Box3DEntity._setValueObj.value = value;
	      if (this.verifyProperty(propertyName, Box3DEntity._setValueObj)) {
	        var newValue = Box3DEntity._setValueObj.value;
	        // Copy the previous value.
	        this.sharedData.previousProperties[propertyName] = _lodash2.default.clone(this.sharedData.properties[propertyName]);
	        this.sharedData.properties[propertyName] = newValue;
	        // Dispatch change event
	        if (!options || !options.silent) {
	          this.box3DRuntime.entityDispatcher.dispatchPropertyChanged(this, propertyName, newValue);
	        }
	      }
	    }

	    /**
	     * Remove an existing property from this object.
	     * @method unsetProperty
	     * @public
	     * @param  {String} propertyName Name of the property to remove.
	     * @param  {Object} options      Options object. Can contain things like silent: true, etc.
	     */

	  }, {
	    key: 'unsetProperty',
	    value: function unsetProperty(propertyName, options) {
	      this.sharedData.previousProperties[propertyName] = this.sharedData.properties[propertyName];
	      delete this.sharedData.properties[propertyName];
	      if (!options || !options.silent) {
	        this.box3DRuntime.entityDispatcher.dispatchPropertyChanged(this, propertyName, undefined);
	      }
	    }

	    /**
	     * Set multiple new or existing properties for this object at once. This merges with
	     * existing properties
	     * @method setProperties
	     * @public
	     * @param  {Object} json Key-value pairs of properties.
	     * @param  {Object} options      Options object. Can contain things like silent: true, etc.
	     */

	  }, {
	    key: 'setProperties',
	    value: function setProperties(json, options) {
	      //TODO - verify  property values against schema.
	      _lodash2.default.each(this.sharedData.properties, function (value, key) {
	        this.sharedData.previousProperties[key] = _lodash2.default.clone(this.sharedData.properties[key]);
	      }, this);
	      _lodash2.default.each(json, function (value, key) {
	        this.sharedData.properties[key] = json[key];
	      }, this);
	      if (!options || !options.silent) {
	        this.box3DRuntime.entityDispatcher.dispatchPropertiesChanged(this, json);
	      }
	    }

	    /**
	     * Returns the property of the object given by 'propertyName'.
	     * This function only looks on the local entity and won't return
	     * inherited values.
	     * @method getOwnProperty
	     * @public
	     * @param  {String} propertyName The name of the property.
	     * @return {Mixed}              The property value
	     */

	  }, {
	    key: 'getOwnProperty',
	    value: function getOwnProperty(propertyName) {
	      return this.sharedData.properties[propertyName];
	    }

	    /**
	     * Returns the previous value of the property of the object given by 'propertyName'
	     * If the property doesn't exist in the object, the prefab object
	     * is checked.
	     * @method getPreviousProperty
	     * @public
	     * @param  {String} propertyName The name of the property.
	     * @return {Mixed}              The property's previous value
	     */

	  }, {
	    key: 'getPreviousProperty',
	    value: function getPreviousProperty(propertyName) {
	      var value = this.sharedData.previousProperties[propertyName];
	      if (!_lodash2.default.isUndefined(value)) {
	        return value;
	      } else {
	        var prefabObj = this.getPrefabObject();
	        if (prefabObj) {
	          return prefabObj.getProperty(propertyName);
	        } else {
	          return this.getDefaultProperty(propertyName);
	        }
	      }
	    }

	    /**
	     * Returns all properties of the entity. This function only looks on the
	     * local entity and won't return inherited values.
	     * @method getOwnProperties
	     * @public
	     * @return {Mixed}              The properties
	     */

	  }, {
	    key: 'getOwnProperties',
	    value: function getOwnProperties() {
	      return this.sharedData.properties;
	    }

	    /**
	     * Copy the properties of the given object to this object, overwriting
	     * any of the same name.
	     * @method copyProperties
	     * @param  {Box3DEntity} object  The object to copy properties from.
	     * @param  {Object} options The standard options object
	     */

	  }, {
	    key: 'copyProperties',
	    value: function copyProperties(object, options) {
	      var newProperties = {};
	      var objProperties = object.getOwnProperties();

	      _lodash2.default.extend(newProperties, this.sharedData.properties, objProperties);

	      this.setProperties(newProperties, options);
	    }

	    /**
	     * Copy the properties of the given object to this object, leaving
	     * any of the same name unmodified.
	     * @method mergeProperties
	     * @param  {Box3DEntity} object  The object to copy properties from.
	     * @param  {Object} options The standard options object
	     */

	  }, {
	    key: 'mergeProperties',
	    value: function mergeProperties(object, options) {
	      var newProperties = {};
	      var objProperties = object.getOwnProperties();

	      _lodash2.default.extend(newProperties, objProperties, this.sharedData.properties);

	      this.setProperties(newProperties, options);
	    }

	    /**
	     * Return all ID's for the direct children of this object that match the given predicate
	     * function.
	     * @method getChildIds
	     * @param  {Function} predicate A function which returns 'true' or 'false', used to
	     * determine which ID's to return.
	     * @return {Array} An array containing all the matching child ID's.
	     */

	  }, {
	    key: 'getChildIds',
	    value: function getChildIds(predicate) {
	      var results = [];
	      var i = 0;
	      var all = !_lodash2.default.isFunction(predicate);
	      if (all) {
	        return this.sharedData.children;
	      } else {
	        for (i = 0; i < this.sharedData.children.length; i++) {
	          if (all || predicate(this.sharedData.children[i])) {
	            results.push(this.sharedData.children[i]);
	          }
	        }
	        return results;
	      }
	    }

	    /**
	     * Set the entire set of children in one call.
	     * @method setChildIds
	     * @public
	     * @param  {Array} newChildren Array of children ids to set.
	     * @param  {Object} options      Options object. Can contain things like silent: true, etc.
	     */

	  }, {
	    key: 'setChildIds',
	    value: function setChildIds(newChildren, options) {
	      var i;
	      var addedChildren, removedChildren;
	      var lengthDiff = newChildren.length - this.sharedData.children.length;
	      var removed = Math.abs(Math.min(0, lengthDiff));
	      this.sharedData.previousChildren = this.sharedData.children.slice();
	      // Resize the array.
	      this.sharedData.children.splice(0, removed);
	      for (i = 0; i < newChildren.length; i++) {
	        this.sharedData.children[i] = newChildren[i];
	      }
	      if (!options || !options.silent) {
	        addedChildren = [];
	        removedChildren = [];
	        //Determine differences
	        for (i = 0; i < newChildren.length; i++) {
	          if (this.sharedData.previousChildren.indexOf(newChildren[i]) === -1) {
	            addedChildren.push(newChildren[i]);
	          }
	        }
	        for (i = 0; i < this.sharedData.previousChildren.length; i++) {
	          if (newChildren.indexOf(this.sharedData.previousChildren[i]) === -1) {
	            removedChildren.push(this.sharedData.previousChildren[i]);
	          }
	        }
	        this.box3DRuntime.entityDispatcher.dispatchChildChanged(this, addedChildren, removedChildren);
	      }
	    }

	    /**
	     * Adds the specified object as a direct child of this object.
	     * The object must already be registered as part of the parent asset.
	     * (i.e. it was created with createObject() or moved to this asset with moveTo())
	     * @method addChildById
	     * @param  {String} objectId The ID of the object to add as a direct child of this object.
	     * @param  {Object} options  Standard options structure. Can contain the following key-value
	     * pairs:
	     * 'retainTransform' : true if you want the child's transform automatically adjusted to
	     * keep its position, quaternion and size relative to the parent the same as before.
	     * 'keepPrefabLinks' : true if you want the new child to remain linked to its prefab after
	     * being added to the new parent.
	     */

	  }, {
	    key: 'addChildById',
	    value: function addChildById(objectId, options) {

	      function retainWorldTransform(oldParent, object) {
	        var childJSON = {};
	        //If the object is loaded, we'll use the three.js matrix data to
	        //compute the new transform information for the child (so that the
	        //child's relative world transform doesn't change)
	        // TODO: Do this calculation so that we don't rely on the runtimeData being
	        // loaded already.
	        if (that.runtimeData) {

	          var newParentMat = new _three2.default.Matrix4();
	          newParentMat.getInverse(that.runtimeData.matrixWorld);

	          if (oldParent && oldParent.runtimeData) {

	            var parentMat = new _three2.default.Matrix4();
	            parentMat.copy(oldParent.runtimeData.matrixWorld);

	            if (object.runtimeData) {
	              object.runtimeData.applyMatrix(parentMat);
	            }
	          }

	          var position = new _three2.default.Vector3();
	          var scale = new _three2.default.Vector3();
	          var quaternion = new _three2.default.Quaternion();
	          if (object.runtimeData) {
	            object.runtimeData.applyMatrix(newParentMat);
	            position.copy(object.runtimeData.position);
	            scale.copy(object.runtimeData.scale);
	            quaternion.copy(object.runtimeData.quaternion);
	          } else {
	            var mat = new _three2.default.Matrix4();
	            position.copy(object.getPosition());
	            quaternion.copy(object.getQuaternion());
	            scale.copy(object.getScale());
	            mat.compose(position, quaternion, scale);
	            mat.multiply(newParentMat);
	            mat.decompose(position, quaternion, scale);
	          }

	          childJSON['position'] = {
	            x: position.x,
	            y: position.y,
	            z: position.z
	          };
	          childJSON['quaternion'] = {
	            x: quaternion.x,
	            y: quaternion.y,
	            z: quaternion.z,
	            w: quaternion.w
	          };
	          childJSON['scale'] = {
	            x: scale.x,
	            y: scale.y,
	            z: scale.z
	          };
	          object.set({ parentId: that.id }, { silent: true });
	          object.setProperties(childJSON);
	        }
	      }
	      var that = this;
	      var object = this.getParentAsset().getObjectById(objectId);
	      if (object) {
	        if (objectId === this.id) {
	          return;
	        }
	        options = options || {};
	        var oldParent = object.getParentObject();
	        object.set('parentId', this.id, { silent: true });

	        //If the object has a parent already, remove it from that parent.
	        if (oldParent && oldParent.id !== this.id) {
	          //remove the object from previous parent
	          oldParent.removeChildById(object.id);
	        }

	        if (options.retainTransform) {
	          retainWorldTransform(oldParent, object);
	        }

	        if (!options.keepPrefabLinks) {
	          if (object.isInstance() && !object.isInstanceTop()) {
	            object.breakPrefabLink();
	          }
	        }
	        this.sharedData.previousChildren = this.sharedData.children.slice();
	        this.sharedData.children.push(objectId);
	        this.box3DRuntime.entityDispatcher.dispatchChildAdded(this, objectId);
	      } else {
	        _log2.default.error('Box3DEntity.addChildById - the object being added is not part of this asset.' + ' If it is an object from a different asset (e.g. scene, model, etc.), it must first ' + 'be moved to this asset using moveTo()');
	      }
	    }

	    /**
	     * Set a new or existing property for this object and for all objects under it in the
	     * hierarchy
	     * @method setPropertyRecursive
	     * @public
	     * @param  {String} propertyName Name of the property to set.
	     * @param  {Mixed} value        Value of the property.
	     * @param  {Object} options      Options object. Can contain things like silent: true, etc.
	     */

	  }, {
	    key: 'setPropertyRecursive',
	    value: function setPropertyRecursive(propertyName, value, options) {
	      var that = this;
	      options = options || {};

	      this.setProperty(propertyName, value);
	      var children = that.getChildren();
	      children.forEach(children, function (child) {
	        if (child) {
	          child.setPropertyRecursive(propertyName, value, options);
	        }
	      });
	    }

	    /**
	     * Returns the default property of the object given by 'propertyName'
	     * @method getDefaultProperty
	     * @public
	     * @param  {String} propertyName The name of the property.
	     * @return {Mixed}              The property value
	     */

	  }, {
	    key: 'getDefaultProperty',
	    value: function getDefaultProperty(propertyName) {
	      var value = undefined;
	      var schemaDef = this.constructor.schema[propertyName];
	      value = schemaDef ? schemaDef.default : undefined;

	      if (value instanceof Object) {
	        return _lodash2.default.clone(value);
	      } else {
	        return value;
	      }
	    }

	    /**
	     * Returns the default properties of the object given by 'propertyName'
	     * @method getDefaultProperties
	     * @public
	     * @return {Object} List of default values, keyed by property name.
	     */

	  }, {
	    key: 'getDefaultProperties',
	    value: function getDefaultProperties() {
	      var defaults = {};
	      _lodash2.default.each(this.constructor.schema, function (val, key) {
	        defaults[key] = val.default instanceof Object ? _lodash2.default.clone(val) : val.default;
	      });
	      return defaults;
	    }

	    /**
	     * Returns the property of the object given by 'propertyName'
	     * If the property doesn't exist in the object, the prefab object
	     * is checked.
	     * @method getProperty
	     * @public
	     * @param  {String} propertyName The name of the property.
	     * @return {Mixed}              The property value
	     */

	  }, {
	    key: 'getProperty',
	    value: function getProperty(propertyName) {
	      var localProperty = this.getOwnProperty(propertyName);
	      if (!_lodash2.default.isUndefined(localProperty)) {
	        return localProperty;
	      } else {
	        var prefabProperty = this.getPrefabProperty(propertyName);
	        if (prefabProperty) {
	          return prefabProperty;
	        } else {
	          return this.getDefaultProperty(propertyName);
	        }
	      }
	    }

	    /**
	     * Revert the property to its default value.
	     * @method revertProperty
	     * @public
	     * @param  {String} propertyName Name of the property to revert to default.
	     */

	  }, {
	    key: 'revertProperty',
	    value: function revertProperty(propertyName) {
	      this.unsetProperty(propertyName);
	    }

	    /**
	     * Returns all properties of the entity, including those inherrited from
	     * the entity's prefab.
	     * @method getProperties
	     * @public
	     * @return {Mixed}              The properties
	     */

	  }, {
	    key: 'getProperties',
	    value: function getProperties() {
	      var myProperties = this.getOwnProperties();
	      var prefabObj = this.getPrefabObject();
	      var propertiesObj = this.getDefaultProperties();
	      // If this object has a prefab, inherit the prefab's properties in the returned
	      // structure.
	      if (prefabObj) {
	        var prefabObjProperties = prefabObj.getOwnProperties();
	        propertiesObj = _lodash2.default.extend(propertiesObj, prefabObjProperties, myProperties);
	        return propertiesObj;
	      } else {
	        propertiesObj = _lodash2.default.extend(propertiesObj, myProperties);
	        return propertiesObj;
	      }
	    }

	    /**
	     * Returns the property given by 'propertyName' for this entity's
	     * prefab (if any).
	     * @method getPrefabProperty
	     * @public
	     * @param  {String} propertyName The name of the property.
	     * @return {Mixed}              The property value
	     */

	  }, {
	    key: 'getPrefabProperty',
	    value: function getPrefabProperty(propertyName) {
	      var prefabObj = this.getPrefabObject();
	      if (prefabObj) {
	        return prefabObj.getProperty(propertyName);
	      } else {
	        return undefined;
	      }
	    }
	  }, {
	    key: 'startTimer',
	    value: function startTimer(time) {
	      function updateTimer(delta) {
	        elapsedTime += delta;
	        if (elapsedTime >= time) {
	          that.box3DRuntime.off('update', updateTimer, that);
	          that.trigger('endTimer');
	        }
	      }
	      var that = this;
	      var elapsedTime = 0.0;
	      this.box3DRuntime.on('update', updateTimer, this);
	    }

	    /**
	     * Traverse this entity's hierarchy and call the given function for each of them.
	     * @method traverse
	     * @param  {Function} fn The function to call for each object. The function will be passed
	     * two parameters. The first is the object and the second is the parent. If the function
	     * returns a non-zero value, the traverse will immediately stop.
	     */

	  }, {
	    key: 'traverse',
	    value: function traverse(fn, context) {
	      context = context || this;
	      var parentAsset = this.getParentAsset();
	      var children = this.getChildIds();
	      for (var x = 0; x < children.length; x++) {
	        var object = parentAsset.getObjectById(children[x]);
	        if (object && typeof fn === 'function') {
	          var returnVal = fn.call(context, object);
	          if (!returnVal) {
	            object.traverse(fn, context);
	          } else {
	            break;
	          }
	        }
	      }
	    }

	    /**
	     * Traverse this entity's hierarchy and return an array containing all of the entities
	     * satisfying the predicate function
	     * @param  {Function} predicate     A function which returns 'true' or 'false'
	     * @return {Array}                  The matching entities
	     */

	  }, {
	    key: 'getDescendants',
	    value: function getDescendants(predicate) {
	      var results = [],
	          all = !_lodash2.default.isFunction(predicate);

	      this.traverse(function (e) {
	        if (all || predicate(e)) {
	          results.push(e);
	        }
	      });

	      return results;
	    }

	    /**
	     * Traverse this entity's hierarchy and return the first entity satisfying
	     * the predicate function
	     * @param  {Function} predicate     A function which returns 'true' or 'false'
	     * @return {Array}                  The matching entities
	     */

	  }, {
	    key: 'getDescendant',
	    value: function getDescendant(predicate) {
	      var all = !_lodash2.default.isFunction(predicate),
	          entity;

	      this.traverse(function (e) {
	        if (!entity && (all || predicate(e))) {
	          entity = e;
	        }
	      });

	      return entity;
	    }

	    /**
	     * get the three data associated with this entity
	     * @method getRuntimeData
	     * @param  {Object} [options]
	     * @return {Three Object} The Three.JS data attached to this Box3DEntity. Can be things
	     * like THREE.Material, THREE.Object3D, THREE.PointLight, etc. See threejs.org/docs/
	     */

	  }, {
	    key: 'getRuntimeData',
	    value: function getRuntimeData(options) {
	      if (!this.runtimeData) {
	        this.load(options);
	      }
	      return this.runtimeData;
	    }

	    /**
	     * Returns the object with the provided Id, if it exists in this entity's hierarchy.
	     * @method getDescendantById
	     * @param  {String} objectID The ID of the object
	     * @return {Object} The object or null if not found.
	     */

	  }, {
	    key: 'getDescendantById',
	    value: function getDescendantById(objectID) {
	      return this.getDescendant(function (e) {
	        return e.id === objectID;
	      });
	    }

	    /**
	     * Returns the first object with the provided name that is found in this object's hierarchy.
	     * Note: Care should be taken when calling this function often (such as every frame)
	     * because it is not build for high performance.
	     * @method getDescendantByName
	     * @param  {String} objectName The name of the object
	     * @return {Object} The object, if found, or null if not found.
	     */

	  }, {
	    key: 'getDescendantByName',
	    value: function getDescendantByName(objectName) {
	      return this.getDescendant(function (e) {
	        return e.getName() === objectName;
	      });
	    }

	    /**
	     * Returns all objects with the provided type that are in this entity's hierarchy.
	     * Note: Care should be taken when calling this function often (such as every frame)
	     * because it is not build for high performance.
	     * @method getDescendantsByType
	     * @param  {String} objectType The type of the object
	     * @return {Array} An array of all objects with the given name.
	     */

	  }, {
	    key: 'getDescendantsByType',
	    value: function getDescendantsByType(objectType) {
	      return this.getDescendants(function (e) {
	        return e.type === objectType;
	      });
	    }

	    /**
	     * Returns all objects with the provided name that are in this entity's hierarchy.
	     * Note: Care should be taken when calling this function often (such as every frame)
	     * because it is not build for high performance.
	     * @method getDescendantsByName
	     * @param  {String} objectName The name of the object
	     * @return {Array} An array of all objects with the given name.
	     */

	  }, {
	    key: 'getDescendantsByName',
	    value: function getDescendantsByName(objectName) {
	      return this.getDescendants(function (e) {
	        return e.getName() === objectName;
	      });
	    }

	    /**
	     * Returns the object if it is a direct child of this object.
	     * @method getChildById
	     * @param  {String} objectId The ID of the child to get
	     * @return {Box3DEntity}  The child object, if it exists
	     */

	  }, {
	    key: 'getChildById',
	    value: function getChildById(objectId) {
	      return this.getChild(function (child) {
	        return child && child.id === objectId;
	      });
	    }

	    /**
	     * Return the first direct child of this object that matches the given predicate function.
	     * @method getChild
	     * @param  {Function} A function which returns 'true' or 'false', used to determine
	     * which entity to return.
	     * @return {Object} The first matching object.
	     */

	  }, {
	    key: 'getChild',
	    value: function getChild(predicate) {
	      var children = this.getChildIds();
	      var i = 0;
	      var all = !_lodash2.default.isFunction(predicate);
	      for (i = 0; i < children.length; i++) {
	        var obj = this.getParentAsset().getObjectById(children[i]);
	        if (obj) {
	          if (all || predicate(obj)) {
	            return obj;
	          }
	        }
	      }
	      return null;
	    }

	    /**
	     * Return all direct children of this object that match the given predicate function.
	     * @method getChildren
	     * @param  {Function} predicate A function which returns 'true' or 'false', used to
	     * determine which entities to return.
	     * @return {Array} An array containing all the matching objects.
	     */

	  }, {
	    key: 'getChildren',
	    value: function getChildren(predicate) {
	      var results = [];
	      var children = this.getChildIds();
	      var i = 0;
	      var all = !_lodash2.default.isFunction(predicate);
	      for (i = 0; i < children.length; i++) {
	        var obj = this.getChildById(children[i]);
	        if (obj) {
	          if (all || predicate(obj)) {
	            results.push(obj);
	          }
	        }
	      }
	      return results;
	    }

	    /**
	     * Return all direct children of this object that match the given predicate function.
	     * @method getChildrenMap
	     * @param  {Function} predicate A function which returns 'true' or 'false', used to
	     * determine which entities to return.
	     * @return {Object} An map from object ID's to all matching objects.
	     */

	  }, {
	    key: 'getChildrenMap',
	    value: function getChildrenMap(predicate) {
	      var results = {};
	      var children = this.getChildren(predicate);
	      var i = 0;
	      for (i = 0; i < children.length; i++) {
	        var obj = children[i];
	        if (obj) {
	          results[obj.id] = obj;
	        }
	      }
	      return results;
	    }

	    /**
	     * Returns the top-level asset that this object is part of.
	     * If this object is an asset, the returned object will be the object.
	     * @method getParentAsset
	     * @return {Box3DEntity} The parent asset of this object.
	     */

	  }, {
	    key: 'getParentAsset',
	    value: function getParentAsset() {
	      var parentAssetId = this.get('parentAssetId');
	      if (this.isAsset()) {
	        return this;
	      } else if (parentAssetId) {
	        return this.box3DRuntime.assetRegistry.getAssetById(parentAssetId);
	      } else {
	        return null;
	      }
	    }

	    /**
	     * Returns the object that is the immediate parent of this one.
	     * Returns null if this object doesn't have a parent. This will be
	     * the case if the object is an asset or is orphaned.
	     * @method getParentObject
	     * @return {Box3DEntity} The parent object of this object.
	     */

	  }, {
	    key: 'getParentObject',
	    value: function getParentObject() {

	      var parentAsset = this.getParentAsset();
	      var parentObj = parentAsset.getObjectById(this.get('parentId'));

	      return parentObj;
	    }

	    /**
	     * If this object is a prefab instance, return the top-level of the instance.
	     * @method getInstanceTop
	     * @return {Box3DEntity} The top-level of the prefab instance.
	     */

	  }, {
	    key: 'getInstanceTop',
	    value: function getInstanceTop() {

	      if (this.isInstanceTop()) {
	        return this;
	      } else {
	        var prefabInstanceId = this.get('prefabInstanceId');
	        if (prefabInstanceId) {
	          return this.getParentAsset().getObjectById(prefabInstanceId);
	        } else {
	          return null;
	        }
	      }
	    }

	    /**
	     * Returns the asset that this object is an instance of. i.e. this will give you
	     * the Prefab Asset that this object is inherrited from.
	     * @method getPrefabAsset
	     * @return {Box3D.Box3DAsset} The asset that this object is an instance of.
	     */

	  }, {
	    key: 'getPrefabAsset',
	    value: function getPrefabAsset() {
	      var prefabAssetId = this.get('prefabAssetId');
	      if (prefabAssetId) {
	        return this.box3DRuntime.assetRegistry.getAssetById(prefabAssetId);
	      }
	      return null;
	    }

	    /**
	     * Returns the top-level asset where the source data for this object is stored.
	     * i.e. this will give you the asset that contains the link to the original asset
	     * data on the server (e.g. mesh data, animation data, etc.)
	     * @method getPrefabObject
	     * @return {Box3D.Box3DAsset} the asset where the source data for this object is stored.
	     */

	  }, {
	    key: 'getPrefabObject',
	    value: function getPrefabObject() {
	      var prefabObjectId = this.get('prefabObjectId');
	      if (prefabObjectId) {
	        var prefabAsset = this.getPrefabAsset();
	        if (prefabAsset) {

	          if (prefabObjectId === prefabAsset.id) {
	            return prefabAsset;
	          } else {

	            var obj = prefabAsset.getObjectById(prefabObjectId);
	            if (!obj) {
	              _log2.default.warn('Box3DEntity.getPrefabObject(): This entity, ' + this.id + ', has a valid prefab asset defined but its prefab object doesn\'t exist.');
	            }
	            return obj;
	          }
	        } else {
	          _log2.default.warn('Box3DEntity.getPrefabObject(): This entity, ' + this.id + ', has a prefab asset defined that doesn\'t seem to exist.');
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'isAsset',
	    value: function isAsset() {
	      return this.get('parentAssetId') === this.id;
	    }

	    /**
	     * Returns true if the object is an instance of a prefab asset.
	     * @method isInstance
	     * @return {boolean} true if the object is an instance of a prefab object. false otherwise.
	     */

	  }, {
	    key: 'isInstance',
	    value: function isInstance() {
	      var prefabAssetId = this.get('prefabAssetId');
	      if (prefabAssetId) {
	        return true;
	      } else {
	        return false;
	      }
	    }

	    /**
	     * Returns true if the object is the top-level of a prefab instance tree.
	     * @method isInstanceTop
	     * @return {Boolean} True if and only if the object is the top level of a prefab instance.
	     */

	  }, {
	    key: 'isInstanceTop',
	    value: function isInstanceTop() {
	      var prefabObjectId = this.get('prefabObjectId');
	      var prefabAssetId = this.get('prefabAssetId');
	      return prefabObjectId && prefabObjectId === prefabAssetId ? true : false;
	    }

	    /**
	     * If the condition for specified event is met, immediately calls the callback. Otherwise,
	     * listens for the event to be fired and then calls it. Useful for more concise code.
	     * @method when
	     * @param {String} eventName The name of the event to listen for
	     * @param {Function} callback The callback function to call when the event occurs
	     * @param {Object} context The context that the callback will be called in
	     */

	  }, {
	    key: 'when',
	    value: function when(eventName, callback, context) {
	      if (_lodash2.default.isFunction(callback)) {
	        if (eventName === 'load' && this.isLoaded() || eventName === 'loadBase' && this.isBaseLoaded() || eventName === 'loadChildren' && this.isChildrenLoaded() || eventName === 'loadDependencies' && this.isDependenciesLoaded() || eventName === 'loadComponents' && this.isComponentsLoaded()) {
	          callback.call(context, this);
	        } else {
	          this.once(eventName, callback, context);
	        }
	      }
	    }

	    /**
	     * Loads the Three.JS data for this object and all of its children. The following events
	     * will be fired during this process:
	     * 'load' - fired when all objects in the hierarchy are loaded and all dependencies are
	     * either loaded or have encountered an error.
	     * 'loadBase' - fired when the data for just object is loaded, not including any children
	     * or asset dependencies (materials, textures, etc.).
	     * 'loadChildren' - fired when the hierarchy of Three.JS objects have been loaded. This
	     * does not include asset dependencies like materials and textures.
	     * 'loadDependencies' - fired when all the asset dependencies (animations, textures, etc.)
	     * for an object (and its children) have been loaded. This does not necessarily mean that
	     * the Three.JS objects for the hierarchy are loaded.
	     * @method load
	     * @param  {Function} callback This function gets called when the final 'load' event is
	     * triggered.
	     *
	     */

	  }, {
	    key: 'load',
	    value: function load(callback) {
	      var _this4 = this;

	      this.when('load', function () {
	        if (_lodash2.default.isFunction(callback)) {
	          callback(_this4);
	        }
	      }, this);

	      //Load this object
	      this.loadBase();
	      //Now handle loading the object's children
	      this.loadChildren();

	      if (this.checkIfOwnDependenciesLoaded()) {
	        this.markState(Box3DEntity.STATE_TYPE.DEPENDENCIES, Box3DEntity.STATE.SUCCEEDED);
	      }
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {}

	    /**
	     * Construct and return a list of all unique dependencies of the specified type that are
	     * referenced by this entity or any.
	     * @public
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations', 'materials'
	     * @return {Object}               Dictionary of assets, keyed on ID.
	     */

	  }, {
	    key: 'buildListOfReferencedDependencies',
	    value: function buildListOfReferencedDependencies() /*dependencyType*/{
	      return {};
	    }

	    /**
	     * Return the assets that this entity and all of its children are dependent on.
	     * e.g. materials, textures, geometry, animations, etc. This includes all assets
	     * referenced directly by this entity or by any children. If the dependencies also
	     * have their own dependencies, these are also included.
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations' or 'materials'
	     * @return {Object} A dictionary of assets, keyed by id and containing a reference
	     * counter.
	     */

	  }, {
	    key: 'getChildDependencies',
	    value: function getChildDependencies(dependencyType) {
	      var dependencies = {};
	      var children = this.getChildren();

	      function addDependency(dep, id) {
	        var asset = this.box3DRuntime.getEntityById(id);
	        // If the asset doesn't exist or isn't of a type that we care about, bail out.
	        if (!asset || dependencyType && !asset.type.includes(dependencyType)) {
	          return;
	        }
	        if (dependencies[id]) {
	          dependencies[id].count += dep.count;
	        } else {
	          dependencies[id] = { count: dep.count };
	        }
	      }

	      _lodash2.default.each(this.dependencies, addDependency, this);

	      children.forEach(function (child) {
	        var childDeps = child.getChildDependencies(dependencyType);
	        _lodash2.default.each(childDeps, addDependency, this);
	      }, this);
	      return dependencies;
	    }

	    /**
	     * Load runtime data for this entity alone, not child entities or
	     * dependencies. This method triggers 'loadBase' when complete.
	     * Calling this method after loading is complete causes the
	     * method to trigger 'loadBase' again.
	     * @method loadBase
	     * @public
	     * @param {Function} [callback] Called when loading is complete
	     * @returns {void}
	     */

	  }, {
	    key: 'loadBase',
	    value: function loadBase(callback) {
	      var _this5 = this;

	      if (this.isBaseLoaded()) {
	        this.trigger('loadBase', this);
	        if (_lodash2.default.isFunction(callback)) {
	          callback(this);
	        }
	      } else if (this.isBaseUnloaded()) {
	        this.once('loadBase', callback, this);

	        this.markState(Box3DEntity.STATE_TYPE.BASE, Box3DEntity.STATE.INPROGRESS);

	        this.componentRegistry.loadComponents();

	        this.createRuntimeData(function () {
	          // Apply the initial set of properties.
	          _this5._applyPropertiesLoaded(_this5.getProperties(), 'init');

	          // Start listening to prefab change events.
	          if (_this5.isInstance()) {
	            _this5._initPrefabBindings();
	          }
	          if (_this5.state[Box3DEntity.STATE_TYPE.BASE] <= Box3DEntity.STATE.SUCCEEDED) {
	            _this5.markState(Box3DEntity.STATE_TYPE.BASE, Box3DEntity.STATE.SUCCEEDED);
	          }
	        });
	      }
	    }

	    /**
	     * Reload runtime data for this entity. This should be called by
	     * subclasses when they wish to change the runtimeData reference.
	     * This method invokes loadBase() to reload runtime data, so
	     * 'loadBase' is triggered upon completion.
	     * @method reloadBase
	     * @protected
	     * @param {Function} [callback] Called when loading is complete
	     * @returns {void}
	     */

	  }, {
	    key: 'reloadBase',
	    value: function reloadBase(callback) {
	      var _this6 = this;

	      // Stop listening to prefab change events.
	      if (this.isInstance()) {
	        this._unintPrefabBindings();
	      }

	      this.componentRegistry.unloadComponents();

	      // Remove the old runtimeData from its parent.
	      var parent = this.runtimeData && this.runtimeData.parent;
	      if (parent) {
	        parent.remove(this.runtimeData);
	      }

	      this.markState(Box3DEntity.STATE_TYPE.BASE, Box3DEntity.STATE.PENDING);

	      this.loadBase(function () {
	        // Add the new runtimeData to the parent.
	        if (parent) {
	          parent.add(_this6.runtimeData);
	        }

	        if (_lodash2.default.isFunction(callback)) {
	          callback();
	        }
	      });
	    }

	    /**
	     * Load only the dependencies for this entity. These are all the textures,
	     * materials, geometries, animations, etc. that are referenced by this entity.
	     * This also includes dependencies of dependencies.
	     * @public
	     * @method loadDependencies
	     */

	  }, {
	    key: 'loadDependencies',
	    value: function loadDependencies(callback) {
	      var _this7 = this;

	      //Bind to loading progress of dependencies
	      var dependencies = this.getDependencies();
	      var dependencyKeys = _lodash2.default.keys(dependencies);
	      if (_lodash2.default.isFunction(callback)) {
	        this.once('loadDependencies', callback, this);
	      }
	      this.box3DRuntime.loadEntities(dependencyKeys, function () {
	        _this7.markState(Box3DEntity.STATE_TYPE.DEPENDENCIES, Box3DEntity.STATE.SUCCEEDED);
	      });
	    }

	    /**
	     * Load the dependencies for this entity and all of its children. These are all the textures,
	     * materials, geometries, animations, etc. that are referenced by this entity and its hierarchy.
	     * This also includes dependencies of dependencies.
	     * @public
	     * @method loadChildDependencies
	     */

	  }, {
	    key: 'loadChildDependencies',
	    value: function loadChildDependencies(callback) {
	      var dependencies = this.getChildDependencies();
	      var dependencyKeys = _lodash2.default.keys(dependencies);
	      this.box3DRuntime.loadEntities(dependencyKeys, callback);
	    }

	    /**
	     * Returns the percentage of data that has already been loaded by this object and its
	     * hierarchy.
	     * @public
	     * @method getLoadingProgress
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getLoadingProgress',
	    value: function getLoadingProgress(dependencyType) {
	      var loaded = this.getDataSizeLoaded(dependencyType);
	      var total = this.getDataSizeDownload(dependencyType);
	      return loaded / total;
	    }

	    /**
	     * Removes the specified object as a direct child of this asset.
	     * This does not delete (destroy) the object or unload it.
	     * @method removeChildById
	     * @param  {String} childId The ID of the child to be removed as a direct child of
	     * this object.
	     */

	  }, {
	    key: 'removeChildById',
	    value: function removeChildById(childId) {
	      var index;
	      var child = this.getChildById(childId);
	      if (child) {
	        this.sharedData.previousChildren = this.sharedData.children.slice();
	        index = this.sharedData.children.indexOf(childId);
	        if (index !== -1) {
	          this.sharedData.children.splice(index, 1);
	        }
	        child.set('parentId', null);
	        this.box3DRuntime.entityDispatcher.dispatchChildRemoved(this, childId);
	      } else {
	        _log2.default.warn('Box3DEntity.removeChildById - object, ' + childId + ', is not part ' + 'of this asset.');
	      }
	    }

	    /**
	     * Create runtime data for this entity. Upon successful completion,
	     * call getRuntimeData() to retrieve the runtime data. Sub-classes should
	     * override this method to initialize their runtime data.
	     * @method createRuntimeData
	     * @protected
	     * @param {Function} [callback] Called when the runtime data is available
	     * @returns {void}
	     */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      // Default implementation invokes the callback.
	      callback();
	    }

	    //If this object is an instance of another, we'll hook up the entity events
	    //so that we can listen to changes to the source asset.

	  }, {
	    key: '_initPrefabBindings',
	    value: function _initPrefabBindings() {
	      var prefabObject = this.getPrefabObject();
	      if (prefabObject) {
	        prefabObject.on('propertyChanges', this.onPrefabEntityChanged, this);
	      }
	    }
	  }, {
	    key: '_uninitPrefabBindings',
	    value: function _uninitPrefabBindings() {
	      var prefabObject = this.getPrefabObject();
	      if (prefabObject) {
	        prefabObject.off('propertyChanges', this.onPrefabEntityChanged, this);
	      }
	    }

	    /**
	     * Loads the entire hierarchy of objects below this one.
	     * @method loadChildren
	     */

	  }, {
	    key: 'loadChildren',
	    value: function loadChildren(callback) {

	      if (this.isChildrenLoaded()) {
	        // Make sure we trigger the appropriate events
	        this.markState(Box3DEntity.STATE_TYPE.CHILDREN, Box3DEntity.STATE.SUCCEEDED);
	        if (_lodash2.default.isFunction(callback)) {
	          callback(this);
	        }
	      } else {
	        this.markState(Box3DEntity.STATE_TYPE.CHILDREN, Box3DEntity.STATE.INPROGRESS);
	        this.once('loadChildren', callback, this);

	        //Record a list of the child hierarchies to load so that we can know
	        //when all the children are complete.
	        var children = this.getChildren();
	        this._childrenChanged(children, []);
	      }
	    }

	    /**
	     * Unload the object and its hierarchy.
	     * @method unload
	     * @param  {Object} options Options object. Supported flags:
	     * recursive: Unload entire hierarchy of objects. True by default.
	     */

	  }, {
	    key: 'unload',
	    value: function unload(options) {
	      options = options || {};

	      if (this.componentRegistry) {
	        this.componentRegistry.unloadComponents();
	      }

	      if (!this.isUnloaded()) {
	        if (this.runtimeData && this.runtimeData.parent) {
	          this.runtimeData.parent.remove(this.runtimeData);
	        }
	      }

	      //Only unload children that are legit verold objects. Everything else should be
	      //handled by whatever created it.
	      var parentAsset = this.getParentAsset();
	      var children = this.getChildIds();

	      if (options.recursive !== false) {
	        children.forEach(function (id) {
	          var childObj = parentAsset.getObjectById(id);
	          if (childObj) {
	            childObj.unload();
	          }
	        });
	      }
	      this.markState(Box3DEntity.STATE_TYPE.BASE, Box3DEntity.STATE.PENDING);
	      this.markState(Box3DEntity.STATE_TYPE.CHILDREN, Box3DEntity.STATE.PENDING);
	      this.markState(Box3DEntity.STATE_TYPE.DEPENDENCIES, Box3DEntity.STATE.PENDING);
	      this.markState(Box3DEntity.STATE_TYPE.COMPONENTS, Box3DEntity.STATE.PENDING);
	      this.runtimeData = null;
	    }

	    /**
	     * Returns true if the given state indicates that loading is complete,
	     * regardless of whether the load was successful or not.
	     * @method checkLoadFinished
	     * @private
	     * @param  {Number} state A state value to check against
	     * @return {Boolean}       True if the state indicates that loading
	     * is finished.
	     */

	  }, {
	    key: 'isUnloaded',

	    /**
	     * Returns true iff the entity is completely unloaded.
	     * @method isUnloaded
	     * @public
	     * @return {Boolean} true iff the entity is completely unloaded.
	     */
	    value: function isUnloaded() {
	      var combinedState = Box3DEntity.STATE.PENDING;
	      for (var i = 0; i < this.state.length; i++) {
	        combinedState &= this.state[i];
	      }
	      return Box3DEntity.STATE.PENDING === combinedState;
	    }

	    /**
	     * Returns true if the three.js data is finished loading, including
	     * all dependencies and children in this entity's hierarchy. Note that
	     * a true value only means that the load is finished, not that it was
	     * necessarily completely successful.
	     * @public
	     * @method isLoaded
	     * @return {Boolean} True, if loading is finished
	     */

	  }, {
	    key: 'isLoaded',
	    value: function isLoaded() {
	      var finishedState = Box3DEntity.STATE.SUCCEEDED | Box3DEntity.STATE.FAILED | Box3DEntity.STATE.ABORTED;
	      for (var i = 0; i < this.state.length; i++) {
	        if (!(finishedState & this.state[i])) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Returns true if any part of the loading of this entity failed. Note that
	     * failure is distinct from abortion. For example, if an asset is unloaded or
	     * destroyed during the load, the load is considered to be aborted, not failed.
	     * @return {Boolean} Whether the load failed or not.
	     */

	  }, {
	    key: 'isLoadFailed',
	    value: function isLoadFailed() {
	      for (var i = 0; i < this.state.length; i++) {
	        if (Box3DEntity.STATE.FAILED & this.state[i]) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * Returns true if the three.js data is in the process of loading, including all dependencies
	     * and children in this entity's hierarchy.
	     * @public
	     * @method isLoading
	     * @return {Boolean} True, if loaded
	     */

	  }, {
	    key: 'isLoading',
	    value: function isLoading() {
	      var combinedState = 0;
	      for (var i = 0; i < this.state.length; i++) {
	        combinedState |= this.state[i];
	      }
	      return combinedState & Box3DEntity.STATE.INPROGRESS;
	    }

	    /**
	     * Returns true if the three.js data for this entity is loaded. This does not include
	     * any dependencies (like materials, textures, etc.) or any children in this entity's
	     * hierarchy.
	     * @public
	     * @method isBaseLoaded
	     * @return {Boolean} True, if the base three.js object is loaded
	     */

	  }, {
	    key: 'isBaseLoaded',
	    value: function isBaseLoaded() {
	      return Box3DEntity.checkLoadFinished(this.state[Box3DEntity.STATE_TYPE.BASE]);
	    }

	    /**
	     * Returns true if the three.js data for this entity is unloaded. This does not include
	     * any dependencies (like materials, textures, etc.) or any children in this entity's
	     * hierarchy.
	     * @public
	     * @method isBaseUnloaded
	     * @return {Boolean} True, if the base three.js object is unloaded
	     */

	  }, {
	    key: 'isBaseUnloaded',
	    value: function isBaseUnloaded() {
	      return this.state[Box3DEntity.STATE_TYPE.BASE] === Box3DEntity.STATE.PENDING;
	    }

	    /**
	     * Returns true if this entity has been destroyed.
	     * @public
	     * @method isDestroyed
	     * @return {Boolean} True, if the entity has been destroyed
	     */

	  }, {
	    key: 'isDestroyed',
	    value: function isDestroyed() {
	      return this.state[Box3DEntity.STATE_TYPE.BASE] === Box3DEntity.STATE.DESTROYED;
	    }

	    /**
	     * Returns true if the three.js data for this entity's entire hierarchy is loaded.
	     * This does not include any dependencies (like materials, textures, etc.).
	     * @public
	     * @method isChildrenLoaded
	     * @return {Boolean} True, if the three.js hierarchy is loaded
	     */

	  }, {
	    key: 'isChildrenLoaded',
	    value: function isChildrenLoaded() {
	      return Box3DEntity.checkLoadFinished(this.state[Box3DEntity.STATE_TYPE.CHILDREN]);
	    }

	    /**
	     * Returns true if this entity has not started to load its children yet.
	     * Note that a member of the hierarchy could potentially be loaded through other
	     * means even though this call returns true.
	     * @public
	     * @method isChildrenUnloaded
	     * @return {Boolean} True, if the three.js hierarchy is loaded
	     */

	  }, {
	    key: 'isChildrenUnloaded',
	    value: function isChildrenUnloaded() {
	      return Box3DEntity.STATE.PENDING === this.state[Box3DEntity.STATE_TYPE.CHILDREN];
	    }

	    /**
	     * Returns true if the three.js data for all assets referenced by this entity are loaded.
	     * i.e. materials, textures, animations, etc.
	     * @public
	     * @method isDependenciesLoaded
	     * @return {Boolean} True, if the dependencies are all loaded
	     */

	  }, {
	    key: 'isDependenciesLoaded',
	    value: function isDependenciesLoaded() {
	      return Box3DEntity.checkLoadFinished(this.state[Box3DEntity.STATE_TYPE.DEPENDENCIES]);
	    }

	    /**
	     * Returns true if the three.js data for all assets referenced by this entity are unloaded.
	     * i.e. materials, textures, animations, etc.
	     * @public
	     * @method isDependenciesUnloaded
	     * @return {Boolean} True, if the dependencies are all unloaded
	     */

	  }, {
	    key: 'isDependenciesUnloaded',
	    value: function isDependenciesUnloaded() {
	      return Box3DEntity.STATE.PENDING === this.state[Box3DEntity.STATE_TYPE.DEPENDENCIES];
	    }

	    /**
	     * Returns true if all the components on this entity are created and initialized with
	     * initial attribute values.
	     * @public
	     * @method isComponentsLoaded
	     * @return {Boolean} True, if the components are all loaded
	     */

	  }, {
	    key: 'isComponentsLoaded',
	    value: function isComponentsLoaded() {
	      return Box3DEntity.checkLoadFinished(this.state[Box3DEntity.STATE_TYPE.COMPONENTS]);
	    }

	    /**
	     * Returns true if all the components on this entity are fully unloaded
	     * @public
	     * @method isComponentsUnloaded
	     * @return {Boolean} True, if the components are all unloaded
	     */

	  }, {
	    key: 'isComponentsUnloaded',
	    value: function isComponentsUnloaded() {
	      return Box3DEntity.STATE.PENDING === this.state[Box3DEntity.STATE_TYPE.COMPONENTS];
	    }

	    /**
	     * Go through all registered dependencies and check if they're all loaded.
	     * @private
	     * @return {Boolean} True iff all registered dependencies are loaded.
	     */

	  }, {
	    key: 'checkIfOwnDependenciesLoaded',
	    value: function checkIfOwnDependenciesLoaded() {
	      var dependencies = this.getOwnDependencies();
	      var asset;
	      var isLoaded = true;
	      for (var id in dependencies) {
	        asset = this.box3DRuntime.getEntityById(id);
	        if (asset && !asset.isBaseLoaded()) {
	          isLoaded = false;
	          break;
	        }
	      }
	      return isLoaded;
	    }

	    /**
	     * Go through the children of this entity and check if they are all loaded
	     * @method checkIfChildrenLoaded
	     * @private
	     * @return {Boolean} True iff all children are loaded.
	     */

	  }, {
	    key: 'checkIfChildrenLoaded',
	    value: function checkIfChildrenLoaded() {
	      var children = this.getChildren();
	      for (var i = 0; i < children.length; i++) {
	        if (children.id !== this.id) {
	          if (!children[i].isLoaded()) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * Update runtime data based on property changes. This method is called in
	     * two situations: during initialization (just before 'loadBase' is
	     * triggered), and for property changes that occur between 'loadBase' and
	     * 'unload'. When called during initialization, *all* properties will be
	     * listed in the changes parameter. When overriding this method, always call
	     * the super implementation first.
	     * @method _applyPropertiesLoaded
	     * @private
	     * @param {Object} changes The names of properties that have changed
	     * @param {String} reason One of: 'init' or 'propertyChanged'
	     * @returns {void}
	     */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded() /*changes, reason*/{}

	    //Update the settings for the object that don't require the Three.JS data to exist.
	    //This method is called after loading an object and whenever there is a
	    //change event fired.

	  }, {
	    key: '_applyPropertiesUnloaded',
	    value: function _applyPropertiesUnloaded() {}
	  }, {
	    key: 'destroy',
	    value: function destroy(options) {
	      var parentAsset = this.getParentAsset();
	      parentAsset.destroyObjectById(this.id, options);
	    }

	    /**
	     * Clones the object in the database as well as the threeJS data, if loaded.
	     * @method clone
	     * @param  {Object} options The standard options object
	     */

	  }, {
	    key: 'clone',
	    value: function clone(options) {

	      var parentAsset = this.getParentAsset();
	      var newChild;
	      var newObject;
	      var newObjectJSON = {};
	      options = options || {};

	      newObjectJSON.id = options.id;
	      newObjectJSON.name = options.name !== undefined ? options.name : this.getName();

	      //Only copy the prefab links if the top-level of the instance is being copied
	      //If the top-level is copied, set the flag so that recursive calls will copy links.
	      if (options.keepPrefabLinks && this.isInstance() || this.isInstanceTop()) {
	        options.keepPrefabLinks = true;
	        newObjectJSON.prefabObjectId = this.get('prefabObjectId');
	        newObjectJSON.prefabAssetId = this.get('prefabAssetId');

	        if (this.isInstanceTop()) {
	          options.prefabInstanceId = newObjectJSON.id;
	        }
	        newObjectJSON.prefabInstanceId = options.prefabInstanceId ? options.prefabInstanceId : this.get('prefabInstanceId');
	        //If the object isn't a prefab instance, turn off the flag so that children
	        //don't keep their links.
	      } else if (!this.isInstance()) {
	          options.keepPrefabLinks = false;
	        }

	      newObjectJSON.type = this.getType();
	      newObjectJSON.properties = _lodash2.default.cloneDeep(this.getOwnProperties());
	      newObjectJSON.components = _lodash2.default.cloneDeep(this.componentRegistry.getDescriptors());

	      newObject = parentAsset.createObject(newObjectJSON);

	      var children = this.getChildren();
	      if (options.recursive !== false) {
	        children.forEach(function (child) {
	          if (child) {
	            newChild = child.clone({
	              prefabInstanceId: options.prefabInstanceId,
	              keepPrefabLinks: options.keepPrefabLinks
	            });
	            newObject.addChild(newChild, {
	              keepPrefabLinks: options.keepPrefabLinks
	            });
	          }
	        });
	      }
	      return newObject;
	    }

	    //Only copies and returns the Three.JS data for the asset. i.e. it doesn't create another
	    //Box3D asset but only the underlying Three.JS data.
	    //Each object type may need to override this function to provide this functionality.
	    //Should options be specified to allow for cloning whole tree, etc.?

	  }, {
	    key: 'cloneThreeData',
	    value: function cloneThreeData() {
	      if (this.runtimeData) {
	        var children = this.runtimeData.children;
	        this.runtimeData.children = [];
	        var newObject = this.runtimeData.clone();
	        this.runtimeData.children = children;
	        return newObject;
	      }
	    }

	    /**
	     * Adds the specified object as a direct child of this object.
	     * The object must already be registered as part of the parent asset.
	     * (i.e. it was created with createObject() or moved to this asset with moveTo())
	     * @method addChild
	     * @param  {Box3D.Box3DObject} object  The object to add as a direct child of this object.
	     * @param  {Object} options Options structure. Can contain the following key-value pairs:
	     * 'retainTransform' : true if you want the child's transform automatically adjusted to
	     * keep its position, quaternion and size relative to the parent the same as before.
	     * 'keepPrefabLinks' : true if you want the new child to remain linked to its prefab after
	     * being added to the new parent.
	     */

	  }, {
	    key: 'addChild',
	    value: function addChild(object, options) {
	      this.addChildById(object.id, options);
	    }

	    /**
	     * Removes the specified object as a direct child of this asset.
	     * This does not delete (destroy) the object or unload it.
	     * @method removeChild
	     * @param  {Box3D.Box3DObject} object  The object to add as a direct child of this object.
	     */

	  }, {
	    key: 'removeChild',
	    value: function removeChild(object) {
	      this.removeChildById(object.id);
	    }

	    /**
	     * Called when the entity's name changes and the object needs to be
	     * updated to reflect the changes.
	     * @private
	     * @method _nameChanged
	     * @param  {String} newName New name of the entity
	     */

	  }, {
	    key: '_nameChanged',
	    value: function _nameChanged(newName) {
	      if (this.runtimeData && this.runtimeData.name !== undefined) {
	        this.runtimeData.name = newName;
	      }
	    }

	    /**
	     * Called when the entity's properties change and the object needs to be
	     * updated to reflect the changes.
	     * @private
	     * @method _propertyChanged
	     * @param  {Object} properties An object containing changed properties
	     */

	  }, {
	    key: '_propertyChanged',
	    value: function _propertyChanged(properties) {
	      if (Box3DEntity.checkLoadFinished(this.state[Box3DEntity.STATE_TYPE.BASE])) {
	        this._applyPropertiesLoaded(properties, 'propertyChanged');
	      }
	      this._applyPropertiesUnloaded(properties);
	    }

	    /**
	     * Called when the entity's children list changes. Handles linking
	     * and unlinking children after changes made.
	     * @private
	     */

	  }, {
	    key: '_childrenChanged',
	    value: function _childrenChanged(addedChildren, removedChildren) {
	      var _this8 = this;

	      if (this.isUnloaded()) {
	        return;
	      }

	      for (var i = 0; i < removedChildren.length; i++) {
	        //Remove the child
	        var child = removedChildren[i];
	        if (child) {
	          if (this.isBaseLoaded()) {
	            this.runtimeData.remove(child.runtimeData);
	            if (child.type === 'light') {
	              _log2.default.info('A light was removed from object, ' + this.id + ', so we\'ll rebuild all shaders.');
	              this.box3DRuntime.trigger('rebuildMaterials');
	            }
	          }
	          if (!this.isChildrenLoaded()) {
	            if (this.checkIfChildrenLoaded()) {
	              this.markState(Box3DEntity.STATE_TYPE.CHILDREN, Box3DEntity.STATE.SUCCEEDED);
	            }
	          }
	        }
	      }

	      //Now, add children that should be added.
	      Promise.all(addedChildren.map(function (child) {
	        return new Promise(function (resolve) {
	          //Setting the parent id because this might not exist yet.
	          child.set('parentId', _this8.id, { silent: true });
	          if (_this8.isChildrenLoaded()) {
	            _this8.markState(Box3DEntity.STATE_TYPE.CHILDREN, Box3DEntity.STATE.INPROGRESS);
	          }
	          child.when('loadBase', function (newChild) {
	            _this8.when('loadBase', function () {
	              _this8.runtimeData.add(newChild.runtimeData);
	              _this8.box3DRuntime.needsRender = true;
	            });
	            if (newChild.type === 'light') {
	              _this8.box3DRuntime.trigger('rebuildMaterials');
	            }
	          });
	          child.when('load', resolve);
	          // Only load the child if it's not already loading and this entity's hierarchy
	          // is being or has been loaded.
	          if (!_this8.isChildrenUnloaded() && child.isBaseUnloaded()) {
	            child.load();
	            child.loadDependencies();
	          }
	        });
	      })).then(function () {
	        if (_this8.isDestroyed()) {
	          return;
	        }
	        if (!_this8.isChildrenUnloaded()) {
	          _this8.when('loadBase', function () {
	            // TODO: this should go through the children and look for the highest state value
	            // so that we pass states like FAILED and ABORTED up the hierarchy rather than just
	            // SUCCEEDED
	            _this8.markState(Box3DEntity.STATE_TYPE.CHILDREN, Box3DEntity.STATE.SUCCEEDED);
	          }, _this8);
	        }
	      }).catch(_log2.default.warn.bind(_log2.default));
	    }

	    //Called when the prefab asset changes and the instance object needs to be
	    //updated to reflect the changes.

	  }, {
	    key: 'onPrefabPropertiesChanged',
	    value: function onPrefabPropertiesChanged(changes) {
	      if (this.dontAcceptPrefabUpdates) {
	        return;
	      }
	      var properties = this.getOwnProperties();
	      var propertyChanges = {};
	      var topLevel = this.isInstanceTop();
	      //Only update the property if the instance hasn't overridden it.
	      _lodash2.default.each(changes, function (value, valueName) {

	        if (topLevel && (valueName === 'position' || valueName === 'quaternion' || valueName === 'scale')) {
	          return;
	        }
	        if (properties[valueName] === undefined || properties[valueName] === null) {
	          propertyChanges[valueName] = value;
	        }
	      }, this);

	      if (this.isBaseLoaded()) {
	        this._applyPropertiesLoaded(propertyChanges, 'propertyChanged');
	      }
	      this._applyPropertiesUnloaded(propertyChanges);
	    }
	  }, {
	    key: 'onPrefabEntityChanged',
	    value: function onPrefabEntityChanged() {
	      _log2.default.warn('TODO - reimplement updating from prefab changes');
	    }

	    //Called when the prefab asset changes and the instance object needs to be
	    //updated to reflect the changes.

	  }, {
	    key: 'onPrefabEntityChildrenChanged',
	    value: function onPrefabEntityChildrenChanged() {
	      _log2.default.warn('TODO - reimplement updating from prefab children changes');
	    }
	  }, {
	    key: 'generateUniqueObjectId',
	    value: function generateUniqueObjectId(objectID) {
	      var parentAsset = this.getParentAsset();
	      return parentAsset.generateUniqueObjectId(objectID);
	    }

	    /**
	     * Get the type of the entity
	     * @method getType
	     * @public
	     * @return {String} The entity's type
	     */

	  }, {
	    key: 'getType',
	    value: function getType() {
	      return this.get('type');
	    }

	    /**
	     * Get the description of the entity
	     * @method getDescription
	     * @public
	     * @return {String} The entity's description
	     */

	  }, {
	    key: 'getDescription',
	    value: function getDescription() {
	      return this.get('description');
	    }

	    /**
	     * Set the description of the entity
	     * @method setDescription
	     * @public
	     * @param {String} newDescription : The entity's new description
	     * @param {Object} options :    Options object.
	     */

	  }, {
	    key: 'setDescription',
	    value: function setDescription(newDescription, options) {
	      return this.set({
	        description: newDescription
	      }, options);
	    }

	    /**
	     * Set the specified material on every object in the hierarchy.
	     * @method setMaterialRecursive
	     * @param {String} materialId The Id of the material to use.
	     */

	  }, {
	    key: 'setMaterialRecursive',
	    value: function setMaterialRecursive(materialId) {
	      if (this.setMaterial) {
	        this.setMaterial(materialId);
	      }
	      var children = this.getChildren();
	      _lodash2.default.each(children, function (child) {
	        child.setMaterialRecursive(materialId);
	      }, this);
	    }

	    /**
	     * Unlink this entity from its prefab. This will prevent it from receiving prefab
	     * updates. By default, the entity's hierarchy is also unlinked.
	     * Passing in options.recursive as 'false' will prevent this.
	     * @method breakPrefabLink
	     */

	  }, {
	    key: 'breakPrefabLink',
	    value: function breakPrefabLink(options) {
	      if (!this.isInstance()) {
	        _log2.default.warn('breakPrefabLink: Can\'t call this on an entity that isn\'t an instance.');
	        return;
	      }
	      options = options ? options : {};

	      var children = this.getChildren();
	      children.forEach(children, function (child) {
	        if (child && options.recursive !== false) {
	          child.breakPrefabLink({
	            silent: options.silent,
	            recursive: options.recursive
	          });
	        }
	      });

	      this._uninitPrefabBindings();
	      this.mergeProperties(this.getPrefabObject(), {
	        silent: options.silent
	      });
	      this.mergeComponents(this.getPrefabObject());
	      var changes = {};

	      changes.prefabInstanceId = undefined;
	      changes.prefabObjectId = undefined;
	      changes.prefabAssetId = undefined;
	      this.set(changes, {
	        silent: true
	      });
	    }
	  }, {
	    key: 'getPrefabIdMapping',
	    value: function getPrefabIdMapping() {
	      var instanceIdMapping = {};
	      this.traverse(function (entity) {
	        if (entity.getPrefabObject()) {
	          instanceIdMapping[entity.getPrefabObject().id] = entity.id;
	        }
	      });
	      return instanceIdMapping;
	    }

	    /**
	     * Scale this object to a fixed size in the space of its parent. e.g. world space
	     * @method scaleToSize
	     * @param  {Float} size    The size in units of the parent's space.
	     * @param  {Object} options Options object.
	     */

	  }, {
	    key: 'scaleToSize',
	    value: function scaleToSize(size, options) {
	      var scale = this._determineScaleToSize(size);
	      this.setProperty('scale', {
	        x: scale,
	        y: scale,
	        z: scale
	      }, options);
	    }
	  }, {
	    key: '_determineScaleToSize',
	    value: function _determineScaleToSize(size) {
	      var aabb = {};
	      var bb = this.getBounds();
	      if (!bb) {
	        _log2.default.info('No bounds for ' + this.type + ' ' + this.id + ' so we\'ll compute it from the heirarchy. This could be slow.');
	        bb = this.computeBounds();
	      }
	      aabb.min = new _three2.default.Vector3(bb.min.x, bb.min.y, bb.min.z);
	      aabb.max = new _three2.default.Vector3(bb.max.x, bb.max.y, bb.max.z);
	      // Determine the mesh's scale and origin.
	      var distance = aabb.min.distanceTo(aabb.max);
	      var scale = size / distance;
	      if (scale <= 0) {
	        scale = 1.0;
	      }
	      return scale;
	    }

	    /**
	     * Get the bounds for the hierarchy rooted at this object.
	     * @method getBounds
	     * @public
	     * @returns {THREE.Box3|null} The bounds of the hierarchy, in this
	     * object's local space, or null if the bounds have not been computed.
	     */

	  }, {
	    key: 'getBounds',
	    value: function getBounds() {
	      // TODO: move this method to Box3DObject.
	      var bounds = this.getProperty('bounds');

	      if (bounds) {
	        return new _three2.default.Box3().set(new _three2.default.Vector3(bounds.min.x, bounds.min.y, bounds.min.z), new _three2.default.Vector3(bounds.max.x, bounds.max.y, bounds.max.z));
	      }

	      return null;
	    }

	    /**
	     * Get the bounds of this object, but not its children.
	     * @method getLocalBounds
	     * @public
	     * @returns {THREE.Box3} The bounds of this object.
	     */

	  }, {
	    key: 'getLocalBounds',
	    value: function getLocalBounds() {
	      // TODO: move this method to Box3DObject.
	      return new _three2.default.Box3();
	    }

	    /**
	     * Compute the bounds for the hierarchy rooted at this object.
	     * @method computeBounds
	     * @public
	     * @param {Object} options Options for setting the 'bounds' property.
	     * @returns {THREE.Box3} The bounds of the hierarchy, in this object's
	     * local space.
	     */

	  }, {
	    key: 'computeBounds',
	    value: function computeBounds(options) {
	      // TODO: move this method to Box3DObject.
	      var children = this.getChildren(),
	          box = this.getLocalBounds(),
	          xform = new _three2.default.Matrix4();

	      children.forEach(function (child) {
	        var childBox = child.computeBounds();

	        if (!childBox.empty()) {
	          // Transform the child's bounds into its parent's space.
	          xform.compose(child.getPosition(), child.getQuaternion(), child.getScale());

	          childBox.applyMatrix4(xform);

	          // Combine the child box with the others.
	          box.union(childBox);
	        }
	      }, this);

	      this.setProperty('bounds', {
	        min: { x: box.min.x, y: box.min.y, z: box.min.z },
	        max: { x: box.max.x, y: box.max.y, z: box.max.z }
	      }, options);

	      return box;
	    }

	    //Check this object's child references, parent reference, parent asset reference, etc.
	    //and fix them, if possible.

	  }, {
	    key: 'cleanupReferences',
	    value: function cleanupReferences(options) {
	      var changes = {};
	      var that = this;
	      var parentAsset = this.getParentAsset();
	      if (!parentAsset || parentAsset.id !== this.get('parentAssetId')) {
	        _log2.default.error('This object doesn\'t have a valid parentAssetId assigned to it.');
	        return;
	      } else {

	        var badParent = false;
	        var parent = this.getParentObject();
	        if (parent) {
	          var child = parent.getChildById(this.id);
	          if (!child) {
	            badParent = true;
	          }
	        } else {
	          badParent = true;
	        }
	        if (badParent) {
	          parentAsset.traverse(function (box3DEntity, parentEntity) {
	            //If we find this object in the hierarchy, fix the parentId to point to actual parent
	            if (box3DEntity.id === that.id) {
	              changes.parentId = parentEntity.id;
	              badParent = false;
	            }
	          });
	          if (badParent) {
	            _lodash2.default.each(parentAsset.objects, function (obj) {
	              //If the object has this object as a child, fix up the parentId
	              var children = obj.getChildren();
	              if (children.indexOf(this) !== -1) {
	                changes.parentId = obj.id;
	                badParent = false;
	              }
	            }, this);
	          }
	          if (badParent && parent) {
	            parent.addChildById(this.id);
	          } else {
	            this.set(changes, options);
	          }
	        }
	      }
	    }
	  }, {
	    key: 'registerComponentEvent',
	    value: function registerComponentEvent(name, parameters, scope, action, category, filter) {
	      if (scope === 'other') {
	        if (filter && filter.length) {
	          for (var i = 0; i < filter.length; i++) {
	            var type = filter[i];
	            var prototype = this.box3DRuntime.assetRegistry.getEntityClass(type).prototype;
	            prototype.events[name] = {
	              params: parameters,
	              action: action,
	              category: category
	            };
	          }
	        } else {
	          Box3D.Box3DEntity.prototype.events[name] = {
	            params: parameters,
	            action: action,
	            category: category
	          };
	        }
	      } else {
	        this.events[name] = {
	          params: parameters,
	          action: action,
	          category: category
	        };
	      }
	    }
	  }, {
	    key: 'removeComponentEvent',
	    value: function removeComponentEvent(name, scope) {
	      if (scope === 'other') {
	        if (Box3D.Box3DObject.prototype.events[name]) {
	          delete Box3D.Box3DObject.prototype.events[name];
	        }
	      } else {
	        if (this.events[name]) {
	          delete this.events[name];
	        }
	      }
	    }
	  }, {
	    key: 'getEvents',
	    value: function getEvents() {
	      var events = {};
	      _lodash2.default.extend(events, events, this.events);
	      var proto = Object.getPrototypeOf(this);
	      while (proto) {
	        if (proto.hasOwnProperty('events')) {
	          _lodash2.default.extend(events, events, proto.events);
	        }
	        proto = Object.getPrototypeOf(proto);
	      }
	      return events;
	    }
	  }], [{
	    key: 'checkLoadFinished',
	    value: function checkLoadFinished(state) {
	      var finishedState = Box3DEntity.STATE.SUCCEEDED | Box3DEntity.STATE.FAILED | Box3DEntity.STATE.ABORTED;
	      return !!(finishedState & state);
	    }
	  }]);

	  return Box3DEntity;
	}(_RuntimeEvents3.default);

	Box3DEntity.STATE = {
	  DESTROYED: 1,
	  PENDING: 2,
	  INPROGRESS: 4,
	  PARTIAL: 8,
	  SUCCEEDED: 16,
	  ABORTED: 32,
	  FAILED: 64
	};
	Box3DEntity.STATE_TYPE = {
	  BASE: 0,
	  CHILDREN: 1,
	  DEPENDENCIES: 2,
	  COMPONENTS: 3
	};
	Box3DEntity.schema = {};
	Box3DEntity._setValueObj = { value: null };

	window.Box3D.Box3DEntity = Box3DEntity;

	exports.default = Box3DEntity;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _uuid = __webpack_require__(9);

	var _uuid2 = _interopRequireDefault(_uuid);

	var _RuntimeEvents2 = __webpack_require__(4);

	var _RuntimeEvents3 = _interopRequireDefault(_RuntimeEvents2);

	var _Box3DEntity = __webpack_require__(13);

	var _Box3DEntity2 = _interopRequireDefault(_Box3DEntity);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// import ScriptAsset from 'Box3DRuntime/AssetRegistry/ScriptAsset';

	var box3dEntityEventMap = {
	  entityLoaded: 'load',
	  entityCreated: 'loadBase',
	  loadChildren: 'loadChildren',
	  loadDependencies: 'loadDependencies'
	};

	var engineEventMap = {
	  preUpdate: 'preUpdate',
	  update: 'update',
	  postUpdate: 'postUpdate',
	  preRender: 'preRender',
	  render: 'render',
	  postRender: 'postRender',
	  preRenderView: 'preRenderView',
	  postRenderView: 'postRenderView',
	  blur: 'suspend',
	  focus: 'resume'
	};

	/**
	 * @class  ComponentRegistry
	 * @param  {Object} opts Options hash `eg: { box3DEntity: box3DEntity }`
	 * @constructor
	 */

	var ComponentRegistry = function (_RuntimeEvents) {
	  _inherits(ComponentRegistry, _RuntimeEvents);

	  // event -> function name

	  function ComponentRegistry(opts) {
	    _classCallCheck(this, ComponentRegistry);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ComponentRegistry).call(this));

	    _this.components = {};
	    _this.box3DEntity = opts.box3DEntity;
	    return _this;
	  }

	  _createClass(ComponentRegistry, [{
	    key: 'initialize',
	    value: function initialize() {
	      var _this2 = this;

	      function onScriptDeleted(scriptId) {
	        var comps = this.getByScriptId(scriptId);
	        for (var i = 0; i < comps.length; i++) {
	          _log2.default.info('Removing component from ' + this.box3DEntity.type + ', ' + this.box3DEntity.id + ', because the script asset has been deleted.');
	          this.remove(comps[i]);
	        }
	      }
	      this.listenTo(this.box3DEntity.box3DRuntime, 'scriptDeleted', onScriptDeleted, this);
	      this.listenTo(this.box3DEntity, 'change:components', this.onComponentsChanged, this);
	      this.listenTo(this.box3DEntity, 'add:components', this.onComponentsAdded, this);
	      this.listenTo(this.box3DEntity, 'remove:components', this.onComponentsRemoved, this);

	      var componentJson = this.getDescriptors();
	      var keys = _lodash2.default.keys(componentJson);
	      Promise.all(keys.map(function (componentId) {
	        return new Promise(function (resolve) {
	          var componentDesc = componentJson[componentId];
	          _this2.createComponentObject(componentId, componentDesc, function (component) {
	            _this2.assignAttributeValues(component);
	            resolve();
	          });
	        });
	      })).then(function () {
	        // Call awake() on each component
	        for (var i = 0; i < keys.length; i++) {
	          var component = _this2.getById(keys[i]);
	          if (typeof component.awake === 'function') {
	            component.awake();
	          }
	        }
	      }).catch(function (err) {
	        _log2.default.error('Failed to initialize component registry.', err);
	      });
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      this.stopListening();
	      this.unloadComponents();
	    }

	    /**
	     * Return objects describing the components currently on this entity (that are matched
	     * by the predicate function). If no predicate is defined, all will be returned.
	     * @param  {Function} predicate Function called on each descriptor to filter results. Return
	     * true from the function to include the descriptor in the results.
	     * @public
	     * @method getDescriptors
	     * @return {Object}           All matching component descriptors.
	     */

	  }, {
	    key: 'getDescriptors',
	    value: function getDescriptors(predicate) {
	      var all = !_lodash2.default.isFunction(predicate);
	      var components = this.box3DEntity.sharedData.components;
	      if (all) {
	        return components;
	      } else {
	        var _ret = function () {
	          var results = {};
	          Object.keys(components).forEach(function (id) {
	            var comp = components[id];
	            if (predicate(comp)) {
	              results[id] = comp;
	            }
	          });
	          return {
	            v: results
	          };
	        }();

	        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	      }
	    }

	    /**
	     * Return the descriptor of a component with the given id
	     * @public
	     * @method getDescriptorById
	     * @param  {String} id Component id
	     * @return {Object}    JSON representing the component.
	     */

	  }, {
	    key: 'getDescriptorById',
	    value: function getDescriptorById(id) {
	      return this.box3DEntity.sharedData.components[id];
	    }

	    /**
	     * Return the previous descriptor of a component with the given id
	     * @public
	     * @method getPreviousDescriptorById
	     * @param  {String} id Component id
	     * @return {Object}    JSON representing the component.
	     */

	  }, {
	    key: 'getPreviousDescriptorById',
	    value: function getPreviousDescriptorById(id) {
	      return this.box3DEntity.sharedData.previousComponents[id];
	    }

	    /**
	     * Adds a new component to the Box3DEntity.
	     * @method add
	     * @param  {Mixed} script         Either a string scriptId or a script asset
	     * @param  {Object} componentData the parameters to pass into the component
	     */

	  }, {
	    key: 'add',
	    value: function add(scriptId) {
	      var componentData = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	      var name = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

	      var id = (0, _uuid2.default)();
	      var newComponent = {
	        scriptId: scriptId,
	        componentData: componentData,
	        enabled: true,
	        name: name
	      };
	      var sharedData = this.box3DEntity.sharedData;
	      sharedData.previousComponents = _lodash2.default.cloneDeep(sharedData.components);
	      sharedData.components[id] = newComponent;
	      var entityDispatcher = this.box3DEntity.box3DRuntime.entityDispatcher;
	      entityDispatcher.dispatchComponentsAdded(this.box3DEntity, [id]);
	      return this.components[id];
	    }

	    /**
	     * Removes a component
	     * @method remove
	     * @param  {Object} component The component object to remove.
	     * @return {Boolean} True if the component was removed successfuly.
	     */

	  }, {
	    key: 'remove',
	    value: function remove(component) {
	      var sharedData = this.box3DEntity.sharedData;
	      var componentId = _lodash2.default.isObject(component) ? component.getId() : component;
	      if (sharedData.components[componentId]) {
	        sharedData.previousComponents = _lodash2.default.cloneDeep(sharedData.components);
	        delete sharedData.components[componentId];
	        var entityDispatcher = this.box3DEntity.box3DRuntime.entityDispatcher;
	        entityDispatcher.dispatchComponentsRemoved(this.box3DEntity, [component.getId()]);
	        return true;
	      }
	      return false;
	    }

	    /**
	     * Returns the first component found with the provided script Id
	     * @method getFirstByScriptId
	     * @param  {String} scriptId The asset Id of the script asset used by the components
	     * @return {Object} The first component matching the search.
	     */

	  }, {
	    key: 'getFirstByScriptId',
	    value: function getFirstByScriptId(scriptId) {
	      var comps = this.get(function (comp) {
	        return comp.getScriptId() === scriptId;
	      });
	      if (_lodash2.default.isEmpty(comps)) {
	        return null;
	      } else {
	        return _lodash2.default.values(comps)[0];
	      }
	    }

	    /**
	     * Returns all components with the provided script Id
	     * @method getByScriptId
	     * @param  {String} scriptId The asset Id of the script asset used by the components
	     * @return {Object} An object containing all components matching the search,
	     * keyed by component ids.
	     */

	  }, {
	    key: 'getByScriptId',
	    value: function getByScriptId(scriptId) {
	      return this.get(function (comp) {
	        return comp.getScriptId() === scriptId;
	      });
	    }

	    /**
	     * Returns first component with the provided script name
	     * @method getFirstByScriptName
	     * @param  {String} scriptName The name of the script asset used by the components
	     * @return {Object} The first component that matches the search.
	     */

	  }, {
	    key: 'getFirstByScriptName',
	    value: function getFirstByScriptName(scriptName) {
	      return this.getFirst(function (comp) {
	        return comp.getScriptName() === scriptName;
	      });
	    }

	    /**
	     * Returns all components with the provided script name
	     * @method getByScriptName
	     * @param  {String} scriptName The name of the script asset used by the components
	     * @return {Object} An object containing all components matching the search,
	     * keyed by component ids.
	     */

	  }, {
	    key: 'getByScriptName',
	    value: function getByScriptName(scriptName) {
	      return this.get(function (comp) {
	        return comp.getScriptName() === scriptName;
	      });
	    }

	    /**
	     * Return the first component attached to this entity that matches the specified filter
	     * @method getFirst
	     * @param  {Function} predicate Filter function that takes a component parameter and returns
	     * true on match and false otherwise.
	     * @return {Object} The component matching the filter
	     */

	  }, {
	    key: 'getFirst',
	    value: function getFirst(predicate) {
	      var components = this.components;
	      if (!_lodash2.default.isFunction(predicate)) {
	        if (_lodash2.default.size(components)) {
	          return components[_lodash2.default.keys(components)[0]];
	        } else {
	          return undefined;
	        }
	      } else {
	        for (var i in components) {
	          if (components.hasOwnProperty(i)) {
	            if (predicate(components[i])) {
	              return components[i];
	            }
	          }
	        }
	        return undefined;
	      }
	    }

	    /**
	     * Return the component with the given ID, if there is one.
	     * @public
	     * @method getById
	     * @param  {String} componentId Unique ID of the component
	     * @return {Object}             The component
	     */

	  }, {
	    key: 'getById',
	    value: function getById(componentId) {
	      return this.components[componentId];
	    }

	    /**
	     * Return all of the components attached to this entity matching the specified filter
	     * @method get
	     * @param  {Function} predicate Filter function that takes a component parameter and returns
	     * true on match and false otherwise.
	     * @return {Object} The components matching the filter
	     */

	  }, {
	    key: 'get',
	    value: function get(predicate) {
	      var _this3 = this;

	      if (!_lodash2.default.isFunction(predicate)) {
	        return this.components;
	      } else {
	        var _ret2 = function () {
	          var results = {};
	          Object.keys(_this3.components).forEach(function (id) {
	            var component = _this3.components[id];
	            if (predicate(component)) {
	              results[id] = component;
	            }
	          });
	          return {
	            v: results
	          };
	        }();

	        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	      }
	    }

	    /**
	     * Set the entire list of components for this entity. This will remove components
	     * that are not specified.
	     * @method  set
	     * @public
	     * @param {Object} componentDescriptors Dictionary of component descriptors, keyed
	     * on the component Id.
	     * @param  {Object} options Standard options structure. Can contain {silent: true}
	     */

	  }, {
	    key: 'set',
	    value: function set(componentDescriptors) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var addComponentIds = [];
	      var removeComponentIds = [];
	      var changedComponents = {};
	      var sharedData = this.box3DEntity.sharedData;
	      var entityDispatcher = this.box3DEntity.box3DRuntime.entityDispatcher;
	      sharedData.previousComponents = _lodash2.default.cloneDeep(sharedData.components);

	      // Delete components that have been removed.
	      Object.keys(sharedData.components).forEach(function (id) {
	        if (!componentDescriptors[id]) {
	          removeComponentIds.push(id);
	        }
	      });
	      removeComponentIds.forEach(function (compId) {
	        delete sharedData.components[compId];
	      });

	      // Add and update other components
	      Object.keys(componentDescriptors).forEach(function (id) {
	        if (!sharedData.components[id]) {
	          sharedData.components[id] = componentDescriptors[id];
	          addComponentIds.push(id);
	        } else {
	          _lodash2.default.extend(sharedData.components[id], componentDescriptors[id]);
	          changedComponents[id] = componentDescriptors[id];
	        }
	      });

	      // Dispatch events for changes
	      if (!options.silent) {
	        entityDispatcher.dispatchComponentsRemoved(this.box3DEntity, removeComponentIds);
	        entityDispatcher.dispatchComponentsAdded(this.box3DEntity, addComponentIds);
	        entityDispatcher.dispatchComponentsChanged(this.box3DEntity, changedComponents);
	      }
	    }

	    /**
	     * Erase this entity's components.
	     * @method clearAll
	     * @param  {Object} options Standard options structure
	     */

	  }, {
	    key: 'clearAll',
	    value: function clearAll(options) {
	      this.set({}, options);
	    }

	    // TODO - put component ordering back in.
	    // _sortComponentKeys(componentsJson) {
	    //   var componentsOrder = this.box3DEntity.get('componentsOrder');
	    //   var components = _.clone(componentsJson);
	    //   if (componentsOrder && componentsOrder.length) {
	    //     var keys = [];
	    //     for (var i = 0; i < componentsOrder.length; i++) {
	    //       if (components[componentsOrder[i]]) {
	    //         keys.push(componentsOrder[i]);
	    //         delete components[componentsOrder[i]];
	    //       }
	    //     }
	    //     //Add remaining components that weren't in the order structure.
	    //     for (var j in components) {
	    //       keys.push(j);
	    //     }
	    //     return keys;
	    //   } else {
	    //     return _.keys(componentsJson);
	    //   }
	    // }

	    /**
	     * Called when one or more components on this entity have been modified.
	     * @param  {Object} componentDescriptors The descriptors for each changed component,
	     * keyed on the component's id.
	     * @method onComponentsChanged
	     * @private
	     * @return {void}
	     */

	  }, {
	    key: 'onComponentsChanged',
	    value: function onComponentsChanged(componentDescriptors) {
	      var _this4 = this;

	      Object.keys(componentDescriptors).forEach(function (id) {
	        var desc = componentDescriptors[id];
	        if (!desc) {
	          return;
	        }
	        var component = _this4.getById(id);
	        var scriptAsset = component.getScriptAsset();
	        if (!scriptAsset || !component) {
	          return;
	        }
	        var changedAttributes = [];
	        var scriptAttributes = scriptAsset.getProperty('attributes') || {};
	        Object.keys(scriptAttributes).forEach(function (attrName) {
	          var attrDef = scriptAttributes[attrName];
	          var attribValue = component.getAttribute(attrDef.name);
	          _this4.translateAttributeValue(component, attrDef.name, attrDef, attribValue);
	          if (component.getAttribute(attrDef.name) !== component.getPreviousAttribute(attrDef.name)) {
	            changedAttributes.push(attrDef.name);
	          }
	        });
	        component.attributesChanged(changedAttributes);
	      });
	    }

	    /**
	     * Called when one or more components have been added to this entity.
	     * @param  {Array} addedComponentIds Array of new component ids.
	     * @method onComponentsAdded
	     * @private
	     * @return {void}
	     */

	  }, {
	    key: 'onComponentsAdded',
	    value: function onComponentsAdded(addedComponentIds) {
	      var _this5 = this;

	      for (var i = 0; i < addedComponentIds.length; i++) {
	        var componentDesc = this.getDescriptorById(addedComponentIds[i]);
	        this.createComponentObject(addedComponentIds[i], componentDesc, function (component) {
	          _this5.assignAttributeValues(component);
	        });
	      }
	      // Call awake() on each component that was just added
	      for (var i = 0; i < addedComponentIds.length; i++) {
	        var component = this.getById(addedComponentIds[i]);
	        if (typeof component.awake === 'function') {
	          component.awake();
	        }
	      }
	      //If the object is already loaded when the component is created,
	      //explicitly load the component
	      if (!this.box3DEntity.isComponentsUnloaded()) {
	        for (var i = 0; i < addedComponentIds.length; i++) {
	          this.loadComponent(addedComponentIds[i]);
	        }
	      }
	    }

	    /**
	     * Called when one or more components have been removed from this entity.
	     * @param  {Array} removedComponentIds Array of removed component ids.
	     * @method onComponentsRemoved
	     * @private
	     * @return {void}
	     */

	  }, {
	    key: 'onComponentsRemoved',
	    value: function onComponentsRemoved(removedComponentIds) {
	      function _removeComponent(componentId) {
	        if (this.components[componentId]) {
	          var component = this.components[componentId];
	          this.components[componentId] = undefined;
	          delete this.components[componentId];
	          component.box3DEntity = undefined;
	          component.__box3d__ = undefined;

	          this.trigger('remove', componentId);
	        }
	      }

	      for (var i = 0; i < removedComponentIds.length; i++) {
	        this.unloadComponent(removedComponentIds[i]);
	        _removeComponent.call(this, removedComponentIds[i]);
	      }
	    }

	    /**
	     * Translate a attribute value to a value that is assigned as a member of
	     * the component. This function is called recursively for custom attibs.
	     * @method  translateAttributeValue
	     * @private
	     * @param  {Object} obj            The object to set with the resulting member variable. This is
	     * usually the component but, for custom attibs, it can be a sub-object.
	     * @param  {String} attributeName  Name of the attribute
	     * @param  {String} attributeDef   Definition of the attribute
	     * @param  {Mixed} attributeValue Raw value of the attribute before translation
	     * @return {void}
	     */

	  }, {
	    key: 'translateAttributeValue',
	    value: function translateAttributeValue(obj, attributeName, attributeDef, attributeValue) {
	      var _this6 = this;

	      var assetRegistry = this.box3DEntity.box3DRuntime.assetRegistry;
	      switch (attributeDef.type) {
	        case 'asset':
	          obj[attributeName] = assetRegistry.getAssetById(attributeValue);
	          break;
	        case 'object':
	          obj[attributeName] = this.box3DEntity.getObjectById(attributeValue);
	          break;
	        case 'custom':
	          obj[attributeName] = obj[attributeName] || {};
	          Object.keys(attributeValue).forEach(function (key) {
	            _this6.translateAttributeValue(obj[attributeName], key, attributeDef.attributes[key], attributeValue[key]);
	          });
	          break;
	        case 'c':
	          obj[attributeName] = obj[attributeName] || new _three2.default.Color();
	          obj[attributeName].setRGB(attributeValue.r, attributeValue.g, attributeValue.b);
	          break;
	        case 'a':
	          obj[attributeName] = obj[attributeName] || [];
	          //Handle arrays of different types
	          switch (attributeDef.subType.type) {
	            case 'asset':
	              attributeValue.forEach(function (id, idx) {
	                obj[attributeName][idx] = assetRegistry.getAssetById(id);
	              });
	              break;
	            case 'object':
	              attributeValue.forEach(function (id, idx) {
	                obj[attributeName][idx] = _this6.box3DEntity.getObjectById(id);
	              });
	              break;
	            case 'custom':
	              attributeValue.forEach(function (subObj, idx) {
	                obj[attributeName][idx] = obj[attributeName] || {};
	                Object.keys(subObj).forEach(function (key) {
	                  _this6.translateAttributeValue(obj[attributeName][idx], key, attributeDef.subType.attributes[key], attributeValue[idx][key]);
	                });
	              });
	              break;
	            default:
	              attributeValue.forEach(function (value, idx) {
	                obj[attributeName][idx] = value;
	              });
	          }
	          break;
	        case 'v2':
	          obj[attributeName] = obj[attributeName] || new _three2.default.Vector2();
	          obj[attributeName].set(attributeValue.x, attributeValue.y);
	          break;
	        case 'v3':
	          obj[attributeName] = obj[attributeName] || new _three2.default.Vector3();
	          obj[attributeName].set(attributeValue.x, attributeValue.y, attributeValue.z);
	          break;
	        case 'v4':
	          obj[attributeName] = obj[attributeName] || new _three2.default.Vector4();
	          obj[attributeName].set(attributeValue.x, attributeValue.y, attributeValue.z, attributeValue.w);
	          break;
	        default:
	          obj[attributeName] = attributeValue;
	      }
	    }

	    /**
	     * Take raw attribute values and create all member variables from them.
	     * @method assignAttributeValues
	     * @private
	     * @param  {Object} component The component to update.
	     * @return {void}
	     */

	  }, {
	    key: 'assignAttributeValues',
	    value: function assignAttributeValues(component) {
	      var _this7 = this;

	      var scriptAsset = component.getScriptAsset();
	      var scriptAttributes = scriptAsset.getProperty('attributes') || {};
	      Object.keys(scriptAttributes).forEach(function (attribName) {
	        var attrDef = scriptAttributes[attribName];
	        var attribValue = component.getAttribute(attrDef.name);
	        _this7.translateAttributeValue(component, attrDef.name, attrDef, attribValue);
	      });
	    }
	  }, {
	    key: '_buildEvents',
	    value: function _buildEvents(scriptAsset) {
	      var _this8 = this;

	      var eventList = scriptAsset.getProperty('events') || {};
	      Object.keys(eventList).forEach(function (name) {
	        var params = eventList[name];
	        _this8.box3DEntity.registerComponentEvent(name, params.parameters, params.scope, params.action, params.category, params.filter);
	      }, this);
	    }

	    /**
	     * Create the actual component using the given id and descriptor
	     * @method createComponentObject
	     * @private
	     * @param  {String}   componentId   Id of the component object
	     * @param  {Object}   componentDesc Json describing the component
	     * @param  {Function} fn            Callback when finished creating the component
	     * @return {void}
	     */

	  }, {
	    key: 'createComponentObject',
	    value: function createComponentObject(componentId, componentDesc, fn) {
	      var _this9 = this;

	      var classConstructor = undefined,
	          scriptName = undefined,
	          component = undefined;

	      var scriptId = componentDesc.scriptId;
	      var enabled = !!componentDesc.enabled;

	      if (this.components[componentId]) {
	        _log2.default.error('Component with id: ' + componentId + ' already exists!');
	        return;
	      }

	      var scriptAsset = this.box3DEntity.box3DRuntime.assetRegistry.getAssetById(scriptId);
	      if (!scriptAsset) {
	        _log2.default.warn('Unable to find script asset for ' + scriptId);
	        return;
	      }

	      scriptAsset.load(function () {
	        classConstructor = scriptAsset.sharedData.classConstructor;
	        scriptName = scriptAsset.getName();

	        component = new classConstructor();

	        _this9.components[componentId] = component;

	        component.__box3d__ = {
	          id: componentId,
	          scriptName: scriptName,
	          scriptId: scriptId,
	          enabled: enabled
	        };

	        component.box3DEntity = _this9.box3DEntity;

	        _this9._buildEvents(scriptAsset);

	        _this9.trigger('add', componentId);

	        if (_lodash2.default.isFunction(fn)) {
	          return fn(component);
	        }
	      });
	    }
	  }, {
	    key: 'loadComponent',
	    value: function loadComponent(component) {
	      var _this10 = this;

	      component = _lodash2.default.isObject(component) ? component : this.components[component];
	      if (!component) {
	        _log2.default.warn('Trying to load component, ' + component + ', that doesn\'t exist for entity, ' + this.box3DEntity.id);
	        return;
	      }

	      this.assignAttributeValues(component);

	      // We'll call start() because we're loading the component
	      if (typeof component.init === 'function') {
	        component.init();
	      }

	      Object.keys(engineEventMap).forEach(function (eventName) {
	        var fnName = engineEventMap[eventName];
	        if (typeof component[fnName] === 'function') {
	          _this10.box3DEntity.box3DRuntime.on(eventName, component[fnName], component);
	        }
	      });

	      Object.keys(box3dEntityEventMap).forEach(function (eventName) {
	        var fnName = box3dEntityEventMap[eventName];
	        if (typeof component[fnName] === 'function') {
	          _this10.box3DEntity.on(eventName, component[fnName], component);
	        }
	      });

	      if (typeof component.entityCreated === 'function') {
	        if (this.box3DEntity.isBaseLoaded()) {
	          component.entityCreated();
	        } else {
	          this.box3DEntity.once('loadBase', component.entityCreated, component);
	        }
	      }

	      if (typeof component.componentsLoaded === 'function') {
	        if (this.box3DEntity.isComponentsLoaded()) {
	          component.componentsLoaded();
	        } else {
	          this.box3DEntity.once('loadComponents', component.componentsLoaded, component);
	        }
	      }

	      if (typeof component.entityLoaded === 'function') {
	        this.box3DEntity.when('loadChildren', component.entityLoaded, component);
	      }

	      if (typeof component.assetLoaded === 'function') {
	        var scene = this.box3DEntity.getParentAsset();
	        scene.when('load', component.assetLoaded, component);
	      }

	      if (typeof component.enabled === 'function') {
	        component.listenTo(component, 'enable', component.enabled);
	      }

	      if (typeof component.disabled === 'function') {
	        component.listenTo(component, 'disable', component.disabled);
	      }
	    }
	  }, {
	    key: 'unloadComponent',
	    value: function unloadComponent(component) {
	      var _this11 = this;

	      component = _lodash2.default.isString(component) ? this.components[component] : component;
	      if (!component) {
	        return;
	      }
	      // Do we need to do this?
	      if (!this.box3DEntity || !this.box3DEntity.box3DRuntime) {
	        return;
	      }

	      Object.keys(engineEventMap).forEach(function (eventName) {
	        var fnName = engineEventMap[eventName];
	        if (typeof component[fnName] === 'function') {
	          _this11.box3DEntity.box3DRuntime.off(eventName, component[fnName], component);
	        }
	      });

	      Object.keys(box3dEntityEventMap).forEach(function (eventName) {
	        var fnName = box3dEntityEventMap[eventName];
	        if (typeof component[fnName] === 'function') {
	          _this11.box3DEntity.off(eventName, component[fnName], component);
	        }
	      });

	      if (!this.box3DEntity.isUnloaded() && typeof component.shutdown === 'function') {
	        component.shutdown();
	      }

	      if (typeof component.stopListening === 'function') {
	        component.stopListening();
	      }
	      if (typeof component.entityCreated === 'function') {
	        this.box3DEntity.off('loadBase', component.entityCreated, component);
	      }
	      if (typeof component.componentsLoaded === 'function') {
	        this.box3DEntity.off('loadComponents', component.componentsLoaded, component);
	      }
	      if (typeof component.entityLoaded === 'function') {
	        this.box3DEntity.off('loadChildren', component.entityLoaded, component);
	      }
	      if (typeof component.assetLoaded === 'function') {
	        var scene = this.box3DEntity.getParentAsset();
	        scene.off('loadChildren', component.assetLoaded, component);
	      }
	      if (typeof component.init === 'function') {
	        this.box3DEntity.off('loadStarted', component.init, component);
	      }
	    }
	  }, {
	    key: 'unloadComponents',
	    value: function unloadComponents() {
	      var _this12 = this;

	      Object.keys(this.components).forEach(function (id) {
	        var comp = _this12.components[id];
	        _this12.unloadComponent(comp);
	      });
	    }
	  }, {
	    key: 'loadComponents',
	    value: function loadComponents() {
	      var _this13 = this;

	      Object.keys(this.components).forEach(function (id) {
	        var comp = _this13.components[id];
	        _this13.loadComponent(comp);
	      });
	      this.box3DEntity.markState(_Box3DEntity2.default.STATE_TYPE.COMPONENTS, _Box3DEntity2.default.STATE.SUCCEEDED);
	    }
	  }]);

	  return ComponentRegistry;
	}(_RuntimeEvents3.default);

	window.Box3D = window.Box3D || {};
	window.Box3D.ComponentRegistry = ComponentRegistry;
	// export default ComponentRegistry;
	module.exports = ComponentRegistry;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var BaseRegistry = function () {
	  function BaseRegistry(type) {
	    _classCallCheck(this, BaseRegistry);

	    this.assetType = type;
	  }

	  _createClass(BaseRegistry, [{
	    key: 'initialize',
	    value: function initialize(box3DRuntime) {
	      this.assets = {};
	      this.box3DRuntime = box3DRuntime;
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      _lodash2.default.each(this.assets, function (asset, id) {
	        asset.off('load', this.onAssetLoaded, this);
	        asset.off('unload', this.onAssetUnloaded, this);
	        asset.uninitialize();
	        delete this.assets[id];
	      }, this);
	      this.assets = undefined;
	      this.box3DRuntime = undefined;
	    }
	  }, {
	    key: 'getAsset',
	    value: function getAsset(predicate) {
	      return this.box3DRuntime.assetRegistry.getAsset.call(this, predicate, this.assets);
	    }

	    /**
	     * Returns the asset with the provided Id, if it exists in the current asset.
	     * @method getAssetById
	     * @param  {String} assetId The ID of the object
	     * @return {object} The asset or null if not found.
	     */

	  }, {
	    key: 'getAssetById',
	    value: function getAssetById(assetID) {
	      return this.box3DRuntime.assetRegistry.getAssetById.call(this, assetID);
	    }

	    /**
	     * Returns an array of assets that match any of the provided filters.
	     * @method getAssets
	     * @param  {function} predicate A function used to determine whether or not an asset matches
	     *                              some criteria.
	     *                              This function should return boolean true or false.
	     * can be either single options or arrays of multiple values to match.
	     * @return {array} Array of assets that match at least one of the querries
	     */

	  }, {
	    key: 'getAssets',
	    value: function getAssets(predicate) {
	      return this.box3DRuntime.assetRegistry.getAssets.call(this, predicate, this.assets);
	    }
	  }, {
	    key: 'getAssetsByType',
	    value: function getAssetsByType(type) {
	      return this.box3DRuntime.assetRegistry.getAssetsByType.call(this, type, this.assets);
	    }
	  }, {
	    key: 'getAssetsByName',
	    value: function getAssetsByName(name) {
	      return this.box3DRuntime.assetRegistry.getAssetsByName.call(this, name, this.assets);
	    }
	  }, {
	    key: 'initSystemAssets',
	    value: function initSystemAssets() {
	      _lodash2.default.each(this.assetType.builtInAssetDescriptors, function (jsonDesc) {
	        jsonDesc.builtIn = true;
	        this.createAsset(jsonDesc);
	      }, this);
	    }

	    /**
	     * Creates a new asset and stores it in the registry.
	     * @method createAsset
	     * @param  {Object} json    The definition of the asset. Needs to at least include and 'id'
	     *                          and a 'type' (e.g. 'material', 'prefab', etc.)
	     * @return {Object} The newly created asset
	     */

	  }, {
	    key: 'createAsset',
	    value: function createAsset(json) {
	      return this.box3DRuntime.assetRegistry.createAsset(json);
	    }

	    /**
	     * Destroy the given asset.
	     * @public
	     * @param  {Object} asset Box3DAsset to delete.
	     */

	  }, {
	    key: 'destroyAsset',
	    value: function destroyAsset(asset) {
	      this.box3DRuntime.assetRegistry.destroyAsset(asset);
	    }

	    /**
	     * Destroy the given asset.
	     * @public
	     * @param  {String} assetId Id of the asset to delete.
	     */

	  }, {
	    key: 'destroyAssetById',
	    value: function destroyAssetById(assetId) {
	      this.box3DRuntime.assetRegistry.destroyAssetById(assetId);
	    }
	  }, {
	    key: 'onAssetLoaded',
	    value: function onAssetLoaded(asset) {
	      this.box3DRuntime.trigger('assetLoaded', asset);
	    }
	  }, {
	    key: 'onAssetUnloaded',
	    value: function onAssetUnloaded(asset) {
	      this.box3DRuntime.trigger('assetUnloaded', asset);
	    }
	  }, {
	    key: 'registerAsset',
	    value: function registerAsset(json) {
	      var newAsset = new (this.box3DRuntime.assetRegistry.getEntityClass(json.type))(json);

	      this.assets[newAsset.id] = newAsset;
	      newAsset.on('load', this.onAssetLoaded, this);
	      newAsset.on('unload', this.onAssetUnloaded, this);
	      return newAsset;
	    }
	  }, {
	    key: 'unregisterAsset',
	    value: function unregisterAsset(assetId) {
	      var asset = this.assets[assetId];
	      if (asset) {
	        asset.off('load', this.onAssetLoaded, this);
	        asset.off('unload', this.onAssetUnloaded, this);
	        asset.uninitialize();
	      }
	      delete this.assets[assetId];
	    }
	  }, {
	    key: 'set',
	    value: function set(json, options) {
	      this.box3DRuntime.assetRegistry.set(json, options);
	    }
	  }, {
	    key: 'unset',
	    value: function unset(json, options) {
	      this.box3DRuntime.assetRegistry.unset(json, options);
	    }
	  }]);

	  return BaseRegistry;
	}();

	BaseRegistry.builtInAssetDescriptors = {};
	exports.default = BaseRegistry;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseRegistry2 = __webpack_require__(15);

	var _BaseRegistry3 = _interopRequireDefault(_BaseRegistry2);

	var _MaterialAsset = __webpack_require__(17);

	var _MaterialAsset2 = _interopRequireDefault(_MaterialAsset);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/* global Box3D */
	/**
	 * Registry with manages all material assets
	 * @class MaterialRegistry
	 * @param {Object} [properties] Material registry properties
	 * @constructor
	 */

	var MaterialRegistry = function (_BaseRegistry) {
	  _inherits(MaterialRegistry, _BaseRegistry);

	  function MaterialRegistry() {
	    _classCallCheck(this, MaterialRegistry);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MaterialRegistry).call(this, Box3D.MaterialAsset));

	    _this.sharedUniforms = {
	      time: {
	        type: 'f',
	        value: 0.0
	      },
	      screenDimensions: {
	        type: 'v4',
	        value: new _three2.default.Vector4()
	      }
	    };
	    _this.timeValueInUse = false;
	    _this.standInTextures = {};
	    return _this;
	  }

	  _createClass(MaterialRegistry, [{
	    key: 'initialize',
	    value: function initialize(box3DRuntime) {
	      _get(Object.getPrototypeOf(MaterialRegistry.prototype), 'initialize', this).call(this, box3DRuntime);

	      this.standInTextures[_MaterialAsset2.default.STANDIN_TEXTURE_WHITE] = {
	        texture: null,
	        color: [255, 255, 255]
	      };
	      this.standInTextures[_MaterialAsset2.default.STANDIN_TEXTURE_WHITE_CUBE] = {
	        texture: null,
	        color: [255, 255, 255],
	        type: 'Cube'
	      };
	      this.standInTextures[_MaterialAsset2.default.STANDIN_TEXTURE_BLACK] = {
	        texture: null,
	        color: [0, 0, 0]
	      };
	      this.standInTextures[_MaterialAsset2.default.STANDIN_TEXTURE_BLACK_CUBE] = {
	        texture: null,
	        color: [0, 0, 0],
	        type: 'Cube'
	      };
	      this.standInTextures[_MaterialAsset2.default.STANDIN_TEXTURE_NORMAL] = {
	        texture: null,
	        color: [127, 127, 255]
	      };

	      this.box3DRuntime.on('rebuildMaterials', this.rebuildAll, this);
	      this.box3DRuntime.on('resize', this.onResize, this);
	      this.box3DRuntime.on('textureDeleted', this.onTextureDeleted, this);
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      this.box3DRuntime.off('rebuildMaterials', this.rebuildAll, this);
	      this.box3DRuntime.off('resize', this.onResize, this);
	      this.box3DRuntime.off('textureDeleted', this.onTextureDeleted, this);
	      for (var i in this.standInTextures) {
	        if (this.standInTextures.hasOwnProperty(i) && this.standInTextures[i].texture) {
	          this.standInTextures[i].texture.dispose();
	        }
	      }
	      _get(Object.getPrototypeOf(MaterialRegistry.prototype), 'uninitialize', this).call(this);
	    }

	    /**
	     * Returns a material asset to be used in place of missing assets.
	     * @method getMissingMaterial
	     * @public
	     * @return {Object} MaterialAsset
	     */

	  }, {
	    key: 'getMissingMaterial',
	    value: function getMissingMaterial() {
	      return this.getAssetById('missingMaterial');
	    }

	    /**
	     * Returns a texture intended to be used as a placeholder while another texture loads.
	     * e.g. MaterialAsset.STANDIN_TEXTURE_NORMAL results in a 1x1 normal map and can allow a
	     * material to render without artifacts while a full-res normal map loads.
	     * @method getStandInTexture
	     * @public
	     * @param {String} texEnum Texture stand-in type. MaterialAsset.STANDIN_TEXTURE_WHITE, etc.
	     * @return {Object} THREE.DataTexture or THREE.CubeTexture
	     */

	  }, {
	    key: 'getStandInTexture',
	    value: function getStandInTexture(texEnum) {
	      if (!this.standInTextures[texEnum]) {
	        return null;
	      }
	      if (!this.standInTextures[texEnum].texture) {
	        var textureReg = this.box3DRuntime.assetRegistry.Textures;
	        if (this.standInTextures[texEnum].type === 'Cube') {
	          this.standInTextures[texEnum].texture = textureReg.createColorTextureCube.apply(textureReg, _toConsumableArray(this.standInTextures[texEnum].color));
	        } else {
	          this.standInTextures[texEnum].texture = textureReg.createColorTexture.apply(textureReg, _toConsumableArray(this.standInTextures[texEnum].color));
	        }
	      }
	      return this.standInTextures[texEnum].texture;
	    }
	  }, {
	    key: 'getSharedUniform',
	    value: function getSharedUniform(uniformName) {
	      return this.sharedUniforms[uniformName];
	    }
	  }, {
	    key: 'update',
	    value: function update(delta) {
	      if (this.timeValueInUse) {
	        this.box3DRuntime.needsRender = true;
	      }
	      this.sharedUniforms.time.value = delta;
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	      var renderController;
	      this.sharedUniforms.screenDimensions.value.x = 0;
	      this.sharedUniforms.screenDimensions.value.y = 0;
	      renderController = this.box3DRuntime.getRenderer();
	      if (renderController) {
	        this.sharedUniforms.screenDimensions.value.z = renderController.getCanvasWidth();
	        this.sharedUniforms.screenDimensions.value.w = renderController.getCanvasHeight();
	      } else {
	        this.sharedUniforms.screenDimensions.value.z = 128;
	        this.sharedUniforms.screenDimensions.value.w = 128;
	      }
	    }
	  }, {
	    key: 'onTextureDeleted',
	    value: function onTextureDeleted(textureId) {
	      _lodash2.default.each(this.assets, function (matAsset) {
	        var updateNeeded = false;
	        var properties = matAsset.getOwnProperties();
	        var propertiesJson = {};
	        for (var p in properties) {
	          if (properties[p] === textureId) {
	            updateNeeded = true;
	            propertiesJson[p] = null;
	          }
	        }
	        if (updateNeeded) {
	          matAsset.setProperties(propertiesJson);
	        }
	      }, this);
	    }
	  }, {
	    key: 'rebuildAll',
	    value: function rebuildAll() {
	      _lodash2.default.each(this.assets, function (matAsset) {
	        if (matAsset.runtimeData) {
	          for (var y in matAsset.runtimeData) {
	            matAsset.runtimeData[y].needsUpdate = true;
	          }
	        }
	      }, this);
	    }
	  }]);

	  return MaterialRegistry;
	}(_BaseRegistry3.default);

	MaterialRegistry.materialObjectTypes = {
	  static: {
	    lights: true,
	    fog: true,
	    vertexColors: _three2.default.VertexColors,
	    skinning: false
	  },
	  skinned: {
	    lights: true,
	    fog: true,
	    vertexColors: _three2.default.VertexColors,
	    skinning: true
	  },
	  staticTangents: {
	    lights: true,
	    fog: true,
	    vertexColors: _three2.default.VertexColors,
	    skinning: false,
	    defines: {
	      USE_TANGENTS: true
	    }
	  },
	  skinnedTangents: {
	    lights: true,
	    fog: true,
	    vertexColors: _three2.default.VertexColors,
	    skinning: true,
	    defines: {
	      USE_TANGENTS: true
	    }
	  },
	  depthStatic: {
	    lights: false,
	    fog: false,
	    vertexColors: _three2.default.NoColors,
	    skinning: false,
	    defines: {
	      DEPTH_PASS: true
	    }
	  },
	  depthSkinned: {
	    lights: false,
	    fog: false,
	    vertexColors: _three2.default.NoColors,
	    skinning: true,
	    defines: {
	      DEPTH_PASS: true
	    }
	  }
	};

	Box3D.MaterialRegistry = MaterialRegistry;
	exports.default = MaterialRegistry;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/* global Box3D */
	/**
	 * An asset that holds geometry.
	 * @class MaterialAsset
	 * @constructor
	 */

	var MaterialAsset = function (_Box3DAsset) {
	  _inherits(MaterialAsset, _Box3DAsset);

	  function MaterialAsset(json) {
	    _classCallCheck(this, MaterialAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(MaterialAsset).call(this, json));
	  }

	  /**
	   * Stand-in textures are substituted while a real texture loads so that
	   * the material can properly render in the meantime.
	   * @type {String}
	   */

	  _createClass(MaterialAsset, [{
	    key: 'registerDependencies',

	    /**
	     * Rebuild dependencies for this material.
	     * @method registerDependencies
	     * @private
	     */
	    value: function registerDependencies() {
	      var textures = this.getReferencedAssetsList(true);
	      // Register fresh list of dependencies
	      textures.forEach(function (texAsset) {
	        if (texAsset) {
	          this.registerDependency(texAsset.id);
	        }
	      }, this);
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'getProperty',
	    value: function getProperty(propName) {
	      var value = _get(Object.getPrototypeOf(MaterialAsset.prototype), 'getProperty', this).call(this, propName);
	      if (value === undefined) {
	        var shaderParams = this.getShader().getProperty('parameters');
	        if (shaderParams[propName]) {
	          value = shaderParams[propName].default;
	        }
	      }
	      return value;
	    }
	  }, {
	    key: 'verifyProperty',
	    value: function verifyProperty(propertyName, valueObj) {
	      if (_get(Object.getPrototypeOf(MaterialAsset.prototype), 'verifyProperty', this).call(this, propertyName, valueObj)) {
	        return true;
	      }
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      if (shaderParams[propertyName]) {
	        var type = shaderParams[propertyName].type;
	        var value = valueObj.value;
	        var newValue = undefined;
	        // Handle scalar values
	        if (type === 't' && (_lodash2.default.isString(value) || value === null) || type === 'f' && _lodash2.default.isNumber(value) || type === 'b' && _lodash2.default.isBoolean(value) || type === 'i' && _lodash2.default.isNumber(value) && Math.round(value) === value || type === 'opt' && shaderParams[propertyName].options.hasOwnProperty(value)) {

	          newValue = value;

	          // Handle colours
	        } else if (type === 'c') {
	            if (this.sharedData.properties.hasOwnProperty(propertyName) && _lodash2.default.isObject(this.sharedData.properties[propertyName])) {
	              newValue = this.sharedData.properties[propertyName];
	            } else {
	              newValue = { r: 0.0, g: 0.0, b: 0.0 };
	              // this.sharedData.properties[propertyName] = newValue;
	            }
	            if (_lodash2.default.isString(value)) {
	              var hexValue = value;
	              if (hexValue.slice(0, 2) !== '0x') {
	                hexValue = parseInt(hexValue, 10);
	                hexValue = '0x' + hexValue.toString(16);
	              }
	              MaterialAsset.hexColorToVector(parseInt(hexValue, 16), newValue);
	            } else if (_lodash2.default.isNumber(value)) {
	              var clampedVal = Math.max(0, Math.max(0xffffff, value));
	              MaterialAsset.hexColorToVector(clampedVal, newValue);
	            } else if (_lodash2.default.isObject(value) && _lodash2.default.isNumber(value.r) && _lodash2.default.isNumber(value.g) && _lodash2.default.isNumber(value.b)) {
	              newValue.r = value.r;
	              newValue.g = value.g;
	              newValue.b = value.b;
	              var min = shaderParams[propertyName].min;
	              var max = shaderParams[propertyName].max;
	              if (min !== undefined) {
	                newValue.r = Math.max(newValue.r, min);
	                newValue.g = Math.max(newValue.g, min);
	                newValue.b = Math.max(newValue.b, min);
	              }
	              if (max !== undefined) {
	                newValue.r = Math.min(newValue.r, max);
	                newValue.g = Math.min(newValue.g, max);
	                newValue.b = Math.min(newValue.b, max);
	              }
	            }

	            // Handle vectors
	          } else if (type.charAt(0) === 'v' && _lodash2.default.isNumber(value.x) && _lodash2.default.isNumber(value.y)) {
	              if (this.sharedData.properties.hasOwnProperty(propertyName)) {
	                newValue = this.sharedData.properties[propertyName];
	              } else {
	                newValue = {};
	              }
	              newValue.x = value.x;
	              newValue.y = value.y;
	              if (type === 'v3' && _lodash2.default.isNumber(value.z)) {
	                newValue.z = value.z;
	              } else if (type === 'v4' && _lodash2.default.isNumber(value.z) && _lodash2.default.isNumber(value.w)) {
	                newValue.z = value.z;
	                newValue.w = value.w;
	              }
	            } else if (_lodash2.default.isUndefined(value)) {
	              newValue = undefined;
	            } else {
	              _log2.default.error('Wrong type specified for ' + propertyName);
	              return false;
	            }
	        valueObj.value = newValue;
	        return true;
	      }
	      return false;
	    }

	    /**
	     * Return a list of texture assets that this material currently uses.
	     * This takes enabled/disabled features into account as well as conditional
	     * logic for the individual parameter.
	     * @return {[type]} [description]
	     */

	  }, {
	    key: 'getReferencedAssetsList',
	    value: function getReferencedAssetsList(allowDuplicates) {
	      var refTextures = [];
	      var refTextureMap = {};
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      var shaderUniforms = shaderAsset.getProperty('uniforms');
	      var shaderFeatures = shaderAsset.getProperty('features');
	      // For each enabled feature for this material, go through
	      // the parameters and see what textures are being used.
	      _lodash2.default.each(shaderFeatures, function (feature, featureName) {
	        if (this.isFeatureEnabled(featureName)) {
	          _lodash2.default.each(feature.parameters, function (param) {
	            var textureId;
	            var textureAsset;
	            if (shaderParams[param].type === 't') {
	              if (this.isParameterUsed(param)) {
	                textureId = this.getProperty(param);
	              }
	              if (textureId) {
	                textureAsset = this.getAssetById(textureId);
	                if (!refTextureMap[textureId]) {
	                  refTextureMap[textureId] = textureAsset;
	                  refTextures.push(textureAsset);
	                } else if (allowDuplicates) {
	                  refTextures.push(textureAsset);
	                }
	              }
	            }
	          }, this);
	        }
	      }, this);

	      _lodash2.default.each(shaderUniforms, function (uniform) {
	        if (uniform.type === 't' && uniform.default) {
	          if (this.getAssetById(uniform.default)) {
	            if (!refTextureMap[uniform.default]) {
	              refTextureMap[uniform.default] = this.getAssetById(uniform.default);
	              refTextures.push(this.getAssetById(uniform.default));
	            } else if (allowDuplicates) {
	              refTextures.push(this.getAssetById(uniform.default));
	            }
	          }
	        }
	      }, this);

	      return refTextures;
	    }

	    /**
	     * Get shader returns the shader asset associated with this material. This will return a default
	     * shader if either the shader isn't specified in the material properties OR the specified shader
	     * doesn't exist.
	     * @return {Box3D.ShaderAsset} The shader asset used to build this material asset.
	     */

	  }, {
	    key: 'getShader',
	    value: function getShader() {
	      // Calling super to avoid an infinite loop because Material.getProperty will fallback to looking
	      // in the shader for default property values.
	      var shaderId = _get(Object.getPrototypeOf(MaterialAsset.prototype), 'getProperty', this).call(this, 'shader');
	      // If the shader asset doesn't exist, get the default shader asset.
	      if (!this.getAssetById(shaderId)) {
	        shaderId = this.getDefaultProperty('shader');
	      }
	      return this.getAssetById(shaderId);
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      var shaderAsset = this.getShader();

	      shaderAsset.when('load', function () {
	        this.runtimeData = {};
	        _lodash2.default.each(Box3D.MaterialRegistry.materialObjectTypes, function (type, typeName) {
	          var matParams = {};
	          matParams.vertexShader = shaderAsset.runtimeData.vertexShader;
	          matParams.fragmentShader = shaderAsset.runtimeData.fragmentShader;
	          // Copy the uniforms from the source shader
	          matParams.uniforms = _three2.default.UniformsUtils.clone(shaderAsset.runtimeData.uniforms);
	          // Add the uniforms that are shared between all materials
	          this._addSharedUniforms(matParams.uniforms);

	          this.runtimeData[typeName] = new _three2.default.ShaderMaterial(matParams);
	          this.runtimeData[typeName].name = this.getName();
	          this.runtimeData[typeName].box3DEntityId = this.id;

	          // Assign default renderParams for shader.
	          for (var key in shaderAsset.runtimeData.renderParams) {
	            if (this.runtimeData[typeName].hasOwnProperty(key)) {
	              if (this.isParameterUsed(key)) {
	                this.runtimeData[typeName][key] = shaderAsset.runtimeData.renderParams[key];
	              } else {
	                delete this.runtimeData[typeName][key];
	              }
	            }
	          }

	          // Assign override renderParams from material object type.
	          _lodash2.default.each(type, function (value, key) {
	            if (this.runtimeData[typeName].hasOwnProperty(key)) {
	              this.runtimeData[typeName][key] = value;
	            }
	          }, this);
	        }, this);

	        // Rebuild list of preprocessor defines for each material type
	        this._updateMaterialDefines();

	        // Done.
	        callback();
	      }, this);

	      shaderAsset.load();
	    }
	  }, {
	    key: '_convertToDefine',
	    value: function _convertToDefine(name) {
	      function unCamelCase(str) {
	        return str
	        // insert an underscore between lower & upper
	        .replace(/([a-z])([A-Z])/g, '$1_$2')
	        // underscore before last upper in a sequence followed by lower
	        .replace(/([A-Z]+)([A-Z])([a-z])/, '$1_$2$3')
	        // uppercase the first character
	        .toUpperCase();
	      }

	      var friendlyStr = _lodash2.default.isString(name) ? name : '';

	      friendlyStr = friendlyStr.replace(/_([a-z])/gi, function (m, w) {
	        return '_' + w.toUpperCase();
	      });

	      friendlyStr = friendlyStr.replace(/\s+/g, '_');

	      // Find where a number follows a letter and insert an underscore
	      friendlyStr = friendlyStr.replace(/([a-z])([0-9])/g, '$1_$2');

	      // Find where a letter follows a number and insert an underscore
	      // friendlyStr = friendlyStr.replace(/([0-9])([A-z])/g, '$1_$2');

	      friendlyStr = unCamelCase(friendlyStr);

	      return friendlyStr;
	    }
	  }, {
	    key: '_testParameterCondition',
	    value: function _testParameterCondition(param, condition) {
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      if (!shaderParams[param]) {
	        return false;
	      }
	      var value = this.getProperty(param);

	      // If this parameter is a texture and is assigned a texture that no longer
	      // exists, consider its value as null.
	      if (shaderParams[param].type === 't') {
	        if (!this.getAssetById(value)) {
	          value = null;
	        }
	      }
	      for (var i in condition) {
	        if (condition.hasOwnProperty(i)) {
	          switch (i) {
	            case 'equal':
	              if (value !== condition[i]) {
	                return false;
	              }
	              break;
	            case 'notEqual':
	              if (value === condition[i]) {
	                return false;
	              }
	              break;
	            case 'equalDefault':
	              if (value !== shaderParams[param].default) {
	                return false;
	              }
	              break;
	            case 'notEqualDefault':
	              if (value === shaderParams[param].default) {
	                return false;
	              }
	              break;
	            default:
	              return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * Test whether the conditions specified for a parameter are satisfied or not. Performs
	     * a logic AND on all properties in the given object
	     * @method  testParameterConditions
	     * @param  {Object} conditions Json object structure specifying the AND conditional
	     * @return {Boolean}            True if the result of the test is true
	     */

	  }, {
	    key: 'testParameterConditions',
	    value: function testParameterConditions(conditions) {
	      var i;
	      var result = true;

	      //Loop through and test each conditional
	      for (i in conditions) {
	        if (conditions.hasOwnProperty(i)) {
	          if (i === 'or') {
	            if (!this._testParameterConditionsOr(conditions[i])) {
	              result = false;
	              break;
	            }
	          } else if (!this._testParameterCondition(i, conditions[i])) {
	            result = false;
	            break;
	          }
	        }
	      }
	      return result;
	    }
	  }, {
	    key: '_testParameterConditionsOr',
	    value: function _testParameterConditionsOr(conditions) {
	      var i;
	      var result = false;

	      //Loop through and test each conditional
	      for (i = 0; i < conditions.length; i++) {
	        if (this.testParameterConditions(conditions[i])) {
	          result = true;
	          break;
	        }
	      }
	      return result;
	    }

	    /**
	     * Calculate and return all of the defines for this material based
	     * on the features enabled and the conditions for each parameter.
	     * @return {Object} The defines for this material.
	     */

	  }, {
	    key: '_getPreprocessorDefines',
	    value: function _getPreprocessorDefines() {
	      var shaderAsset = this.getShader();
	      var shaderFeatures = shaderAsset.getProperty('features');
	      var shaderParams = shaderAsset.getProperty('parameters');
	      var defines = {};
	      _lodash2.default.each(shaderFeatures, function (feature, featureName) {
	        // If the feature is enabled, go through each parameter and
	        // build a list of defines
	        if (this.isFeatureEnabled(featureName)) {
	          // Add a define for the feature itself.
	          defines[this._convertToDefine(featureName)] = 0;

	          // Add defines for each enabled parameter.
	          _lodash2.default.each(feature.parameters, function (paramName) {
	            var useDefines = false;
	            if (shaderParams[paramName].enabledWhen) {
	              // Handle conditional logic
	              if (this.testParameterConditions(shaderParams[paramName].enabledWhen)) {
	                useDefines = true;
	              }
	            } else if (!shaderParams[paramName].isRenderParam) {
	              useDefines = true;
	            }
	            if (useDefines) {
	              var defineName = this._convertToDefine(paramName);
	              defines[defineName] = 0;
	              if (shaderParams[paramName].type === 'opt') {
	                defines[defineName] = shaderParams[paramName].options[this.getProperty(paramName)];
	              } else if (shaderParams[paramName].type === 't') {
	                var texId = this.getProperty(paramName);
	                var texture = this.getAssetById(texId);
	                var mipsDefine = defineName + '_NUM_MIPS';
	                if (texture) {
	                  defines[mipsDefine] = texture.getNumMips();
	                } else {
	                  defines[mipsDefine] = 0;
	                }
	              }
	              if (shaderParams[paramName].defines) {
	                _lodash2.default.extend(defines, shaderParams[paramName].defines);
	              }
	            }
	          }, this);
	        }
	      }, this);
	      return defines;
	    }
	  }, {
	    key: '_updateMaterialDefines',
	    value: function _updateMaterialDefines() {
	      var defines = this._getPreprocessorDefines();
	      _lodash2.default.each(Box3D.MaterialRegistry.materialObjectTypes, function (type, typeName) {
	        var matDefines = _lodash2.default.clone(defines);
	        for (var y in type) {
	          if (type.hasOwnProperty(y) && y === 'defines') {
	            for (var d in type.defines) {
	              if (type.defines.hasOwnProperty(d)) {
	                matDefines[d] = type.defines[d];
	              }
	            }
	          } else {
	            matDefines[y] = type[y];
	          }
	        }

	        this.runtimeData[typeName].defines = matDefines;
	        this.runtimeData[typeName].needsUpdate = true;
	      }, this);
	    }

	    //Link up a uniform that is shared between materials
	    //For now, just hardcode this for the 'time' uniform...

	  }, {
	    key: '_addSharedUniforms',
	    value: function _addSharedUniforms(uniforms) {
	      uniforms.time = this.registry.getSharedUniform('time');
	      uniforms.screenDimensions = this.registry.getSharedUniform('screenDimensions');
	    }
	  }, {
	    key: '_updateAllShaderParameters',
	    value: function _updateAllShaderParameters() {
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      var allParams = {};
	      // Build a list of all parameters. Supplying undefined values forces update
	      // to default shader param values.
	      _lodash2.default.each(shaderParams, function (param, key) {
	        allParams[key] = undefined;
	      }, this);
	      allParams = _lodash2.default.extend(allParams, this.getProperties());
	      this._updateShaderParameters(allParams);
	    }
	  }, {
	    key: '_updateShaderParameters',
	    value: function _updateShaderParameters(changes) {
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      _lodash2.default.each(changes, function (value, key) {
	        if (shaderParams[key]) {
	          this._updateShaderParameter(key);
	        }
	      }, this);
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      var _this2 = this;

	      _get(Object.getPrototypeOf(MaterialAsset.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      if (changes.hasOwnProperty('shader')) {
	        (function () {
	          // TODO - we could store and compare previously-enabled features so that
	          // we can maintain state for the user after switching shaders. This, of course,
	          // assumes that there would be overlapping features between shaders...

	          var shaderAsset = _this2.getShader();
	          shaderAsset.when('load', function onShaderLoad() {
	            for (var x in Box3D.MaterialRegistry.materialObjectTypes) {
	              if (this.runtimeData.hasOwnProperty(x)) {
	                var material = this.runtimeData[x];
	                material.fragmentShader = shaderAsset.runtimeData.fragmentShader;
	                material.vertexShader = shaderAsset.runtimeData.vertexShader;
	                material.uniforms = _three2.default.UniformsUtils.clone(shaderAsset.runtimeData.uniforms);

	                for (var key in shaderAsset.runtimeData.renderParams) {
	                  if (this.runtimeData[x].hasOwnProperty(key)) {
	                    if (this.isParameterUsed(key)) {
	                      this.runtimeData[x][key] = shaderAsset.runtimeData.renderParams[key];
	                    } else {
	                      delete this.runtimeData[x][key];
	                    }
	                  }
	                }

	                this.runtimeData[x].needsUpdate = true;
	                this._updateMaterialDefines();
	                this._updateAllShaderParameters();
	                this._updateTransparency();
	                this._updateDerivatives();
	                this.box3DRuntime.needsRender = true;
	              }
	            }
	          }, _this2);

	          if (shaderAsset.isUnloaded()) {
	            shaderAsset.load();
	          }
	        })();
	      } else if (changes.hasOwnProperty('enabledFeatures')) {
	        this._updateMaterialDefines();
	        this._updateShaderParameters(changes);
	        this._updateTransparency();
	        this._updateDerivatives();
	        this.box3DRuntime.needsRender = true;
	      } else {
	        var shaderAsset = this.getShader();
	        var shaderParams = shaderAsset.getProperty('parameters');
	        var transparencyNeedsUpdate = false;
	        var derivativesNeedsUpdate = false;
	        var definesNeedUpdate = false;

	        for (var p in changes) {
	          if (changes.hasOwnProperty(p)) {
	            if (shaderParams[p]) {
	              if (shaderParams[p].transparency) {
	                transparencyNeedsUpdate = true;
	              }
	              if (!_lodash2.default.isUndefined(shaderParams[p].derivatives)) {
	                derivativesNeedsUpdate = true;
	              }
	              // If there are any parameters that are dependent on the value
	              // of this one, we'll need to break out and rebuild preprocessor
	              // defines.
	              if (shaderAsset.getDependentParameters(p).length || shaderParams[p].forceUpdate) {
	                definesNeedUpdate = true;
	                break;
	              }
	              this._updateShaderParameter(p);
	            }
	          }
	        }

	        if (definesNeedUpdate) {
	          this._updateMaterialDefines();
	          this._updateAllShaderParameters();
	          // Merge defines with existing set and force materials to update.
	          transparencyNeedsUpdate = true;
	          derivativesNeedsUpdate = true;
	        }

	        if (transparencyNeedsUpdate) {
	          this._updateTransparency();
	        }

	        if (derivativesNeedsUpdate) {
	          this._updateDerivatives();
	        }

	        this.box3DRuntime.needsRender = true;
	      }
	    }
	  }, {
	    key: '_applyPropertiesUnloaded',
	    value: function _applyPropertiesUnloaded(changes) {
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      var value, prevValue;
	      var dependenciesNeedUpdate = false;

	      if (changes) {
	        _lodash2.default.each(changes, function (param, key) {
	          if (shaderParams[key]) {
	            //If a texture has changed, update the size of all objects that rely on this material.
	            if (shaderParams[key].type === 't') {
	              value = this.getProperty(key);
	              prevValue = this.getPreviousProperty(key);
	              // Only register the dependency if the parameter is actually being used.
	              if (this.isParameterUsed(key)) {
	                if (prevValue !== value) {
	                  this.registerDependency(value);
	                  this.unregisterDependency(prevValue);
	                }
	                // If the parameter isn't currently used, we can't be absolutely sure whether it was
	                // previously used (and therefore previously registered) so just rebuild all of the
	                // dependencies.
	              } else if (prevValue !== value) {
	                  dependenciesNeedUpdate = true;
	                }
	            }
	            // If there are any parameters that are dependent on the value
	            // of this one, we'll need to rebuild dependencies
	            if (shaderAsset.getDependentParameters(key).length || shaderParams[key].forceUpdate) {
	              dependenciesNeedUpdate = true;
	            }
	          }
	        }, this);

	        if (changes.enabledFeatures || dependenciesNeedUpdate) {
	          this._resetDependencies();
	        }
	      }
	    }

	    /**
	     * Rebuild a fresh list of dependencies for this material and reregister them.
	     * @method
	     * @private
	     */

	  }, {
	    key: '_resetDependencies',
	    value: function _resetDependencies() {
	      this.unregisterDependencies();
	      this.registerDependencies();
	    }
	  }, {
	    key: '_updateDerivatives',
	    value: function _updateDerivatives() {
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      var useDerivatives = false;

	      for (var paramName in shaderParams) {
	        if (shaderParams.hasOwnProperty(paramName)) {
	          if (shaderParams[paramName].derivatives && this.isParameterUsed(paramName)) {
	            useDerivatives = true;
	            break;
	          }
	        }
	      }

	      this.setExtension('derivatives', useDerivatives);
	    }

	    /**
	     * Go through all the properties of the material that affect transparency and make
	     * sure the 'transparent' flag in Three.JS is appropriately set.
	     */

	  }, {
	    key: '_updateTransparency',
	    value: function _updateTransparency() {
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      var transparencyOn = false;

	      for (var paramName in shaderParams) {
	        if (shaderParams.hasOwnProperty(paramName)) {
	          transparencyOn = this._testParameterTransparency(paramName);
	          if (transparencyOn) {
	            break;
	          }
	        }
	      }

	      this.setRenderParam('transparent', transparencyOn);
	    }

	    /**
	     * Test whether transparency should be enabled based on the conditions
	     * specified for the given parameter.
	     * @param  {String} paramName The name of the parameter to check.
	     * @return {Boolean}           True if the value of the parameter should result
	     * in this material being transparent (assuming that this parameter is currently
	     * being used.)
	     */

	  }, {
	    key: '_testParameterTransparency',
	    value: function _testParameterTransparency(paramName) {
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      var transparencyCondition;

	      if (shaderParams.hasOwnProperty(paramName)) {
	        transparencyCondition = shaderParams[paramName].transparency;
	        if (transparencyCondition && this.isParameterUsed(paramName)) {
	          if (transparencyCondition === 'LessThanOne') {
	            if (this.getProperty(paramName) < 1.0) {
	              return true;
	            }
	          } else if (transparencyCondition === 'GreaterThanOne') {
	            if (this.getProperty(paramName) > 1.0) {
	              return true;
	            }
	          }
	        }
	      }
	      return false;
	    }

	    /**
	     * Given a parameter name, determine whether it is currently being used
	     * for this material, taking into account enabled features and conditional
	     * logic for the parameter.
	     * @param  {String}  name Parameter name
	     * @return {Boolean}     True if the parameter is being used in the current material.
	     */

	  }, {
	    key: 'isParameterUsed',
	    value: function isParameterUsed(name) {
	      var shader = this.getShader();
	      var shaderParams, shaderFeatures;
	      var result = false;
	      if (shader) {
	        shaderParams = shader.getProperty('parameters');
	        shaderFeatures = shader.getProperty('features');
	        if (shaderParams[name]) {
	          _lodash2.default.each(shaderFeatures, function (feature, featureName) {
	            // If the param is part of this feature and this feature is enabled
	            if (feature.parameters.indexOf(name) !== -1 && this.isFeatureEnabled(featureName)) {
	              // If there are additional conditions for this parameter, test them.
	              if (shaderParams[name].enabledWhen) {
	                result = this.testParameterConditions(shaderParams[name].enabledWhen);
	              } else {
	                result = true;
	              }
	            }
	          }, this);
	        }
	      }
	      return result;
	    }
	  }, {
	    key: 'isParameterEditable',
	    value: function isParameterEditable(name) {
	      var shader = this.getShader();
	      var shaderParams, shaderFeatures;
	      var result = false;
	      if (shader) {
	        shaderParams = shader.getProperty('parameters');
	        shaderFeatures = shader.getProperty('features');
	        if (shaderParams[name]) {
	          _lodash2.default.each(shaderFeatures, function (feature, featureName) {
	            // If the param is part of this feature and this feature is enabled
	            if (feature.parameters.indexOf(name) !== -1 && this.isFeatureEnabled(featureName)) {
	              // If there are additional conditions for this parameter, test them.
	              if (shaderParams[name].displayWhen) {
	                result = this.testParameterConditions(shaderParams[name].displayWhen);
	              } else {
	                result = true;
	              }
	            }
	          }, this);
	        }
	      }
	      return result;
	    }

	    // Update a uniform (or other type of parameter) for the Three.JS material from a key and
	    // value pair. The key is checked against the material definition for the given type.

	  }, {
	    key: '_updateShaderParameter',
	    value: function _updateShaderParameter(key) {
	      var shaderAsset = this.getShader();
	      var shaderParams = shaderAsset.getProperty('parameters');
	      var value;

	      var onTexLoaded = function (textureAsset) {
	        // If the texture failed to load, the runtimeData will be empty
	        // and we don't want to overwrite the stand-in texture assigned already.
	        if (!textureAsset.isLoadFailed()) {
	          this.setUniform(key, textureAsset.runtimeData);
	          this.box3DRuntime.needsRender = true;
	        }
	      }.bind(this);

	      if (shaderParams[key]) {
	        if (shaderParams[key].isUniform) {
	          value = this.getProperty(key);
	          switch (shaderParams[key].type.charAt(0)) {
	            case 't':
	              var tex;
	              var prevTex;
	              tex = this.box3DRuntime.assetRegistry.Textures.getAssetById(value);
	              if (tex && this.isParameterUsed(key)) {
	                prevTex = this.getPreviousProperty(key);
	                if (prevTex !== this.getProperty(key)) {
	                  prevTex = this.box3DRuntime.getEntityById(prevTex);
	                  if (prevTex) {
	                    this.stopListening(prevTex, 'load', onTexLoaded);
	                  }
	                }
	                //Unbind before binding to catch cases where this texture is already bound.
	                //This probably shouldn't be needed but will require a bit of a refactor to avoid.
	                this.stopListening(tex, 'load', onTexLoaded);
	                this.listenTo(tex, 'load', onTexLoaded);
	                if (!tex.isLoaded()) {
	                  //Assign the missing texture so that this material can render cleanly until
	                  //the real texture loads.
	                  var standinTex = undefined;
	                  if (!shaderParams[key].textureUsage) {
	                    if (!shaderParams[key].textureType) {
	                      standinTex = MaterialAsset.STANDIN_TEXTURE_WHITE;
	                    } else {
	                      standinTex = MaterialAsset.STANDIN_TEXTURE_WHITE_CUBE;
	                    }
	                  } else if (shaderParams[key].textureUsage === 'normal') {
	                    standinTex = MaterialAsset.STANDIN_TEXTURE_NORMAL;
	                  } else if (shaderParams[key].textureUsage === 'bump') {
	                    standinTex = MaterialAsset.STANDIN_TEXTURE_BLACK;
	                  }
	                  this.setUniform(key, this.registry.getStandInTexture(standinTex));
	                  this.box3DRuntime.needsRender = true;
	                  tex.load();
	                } else {
	                  onTexLoaded.call(this, tex);
	                }
	              } else if (!tex) {
	                this.setUniform(key, null);
	              }
	              break;
	            case 'c':
	              if (this.box3DRuntime.getThreeRenderer().gammaInput) {
	                var gammaValue = {};
	                gammaValue.r = Math.pow(value.r, 2.2);
	                gammaValue.g = Math.pow(value.g, 2.2);
	                gammaValue.b = Math.pow(value.b, 2.2);
	                this.setUniform(key, gammaValue);
	              } else {
	                this.setUniform(key, value);
	              }
	              break;
	            case 'b':
	              if (shaderParams[key].animation && value) {
	                this.registry.timeValueInUse = true;
	              }
	              this.setUniform(key, value ? 1 : 0);
	              break;
	            case 'v':
	              if (shaderParams[key].animation && (value.x || value.y || value.z || value.w)) {
	                this.registry.timeValueInUse = true;
	              }
	              this.setUniform(key, value);
	              break;
	            case 'opt':
	              this.setUniform(key, shaderParams[key].options[value]);
	              break;
	            default:
	              this.setUniform(key, value);
	          }
	        } else if (shaderParams[key].isRenderParam) {
	          value = this.isParameterUsed(key) ? this.getProperty(key) : undefined;
	          this.setRenderParam(key, value);
	        }
	        // If the parameter changing always requires a material update, do it.
	        if (shaderParams[key].forceUpdate) {
	          _lodash2.default.each(Box3D.MaterialRegistry.materialObjectTypes, function (def, matObjType) {
	            this.runtimeData[matObjType].needsUpdate = true;
	          }, this);
	        }
	      }
	    }
	  }, {
	    key: 'setUniform',
	    value: function setUniform(uniformName, value) {
	      if (this.runtimeData) {
	        _lodash2.default.each(Box3D.MaterialRegistry.materialObjectTypes, function (def, matObjType) {
	          if (!def.uniforms || def.uniforms && def.uniforms[uniformName] === undefined) {
	            if (this.runtimeData[matObjType].uniforms[uniformName]) {
	              var uniform = this.runtimeData[matObjType].uniforms[uniformName];
	              if (uniform.type === 'c') {
	                if (!uniform.value) {
	                  uniform.value = new _three2.default.Color();
	                }
	                uniform.value.setRGB(value.r, value.g, value.b);
	              } else if (uniform.type.charAt(0) === 'v') {
	                if (!uniform.value) {
	                  switch (uniform.type.charAt(1)) {
	                    case '4':
	                      uniform.value = new _three2.default.Vector4(value.x, value.y, value.z, value.w);
	                      break;
	                    case '3':
	                      uniform.value = new _three2.default.Vector3(value.x, value.y, value.z);
	                      break;
	                    case '2':
	                      uniform.value = new _three2.default.Vector2(value.x, value.y);
	                  }
	                } else {
	                  switch (uniform.type.charAt(1)) {
	                    case '4':
	                      uniform.value.w = value.w;
	                    //fallthrough
	                    case '3':
	                      uniform.value.z = value.z;
	                    //fallthrough
	                    case '2':
	                      uniform.value.x = value.x;
	                      uniform.value.y = value.y;
	                  }
	                }
	              } else {
	                uniform.value = value;
	              }
	            } else {
	              _log2.default.warn('MaterialAsset.setUniform - Trying to set non-existent uniform, ' + uniformName);
	            }
	          }
	        }, this);
	      }
	    }
	  }, {
	    key: 'setRenderParam',
	    value: function setRenderParam(key, value) {
	      if (this.runtimeData) {
	        _lodash2.default.each(Box3D.MaterialRegistry.materialObjectTypes, function (def, matObjType) {
	          if (this.runtimeData[matObjType].hasOwnProperty(key)) {
	            this.runtimeData[matObjType][key] = value;
	          }
	        }, this);
	      }
	    }
	  }, {
	    key: 'setExtension',
	    value: function setExtension(key, value) {
	      if (this.runtimeData) {
	        _lodash2.default.each(Box3D.MaterialRegistry.materialObjectTypes, function (def, matObjType) {
	          if (this.runtimeData[matObjType].extensions.hasOwnProperty(key)) {
	            this.runtimeData[matObjType].extensions[key] = value;
	          }
	        }, this);
	      }
	    }

	    /**
	     * Returns whether the specified feature is currently enabled.
	     * @method isFeatureEnabled
	     * @param  {String}  featureName The name of the material feature
	     * @return {Boolean}             True is the feature is enabled.
	     */

	  }, {
	    key: 'isFeatureEnabled',
	    value: function isFeatureEnabled(featureName) {
	      var shaderAsset = this.getShader();
	      var enabledFeatures = this.getProperty('enabledFeatures');
	      var features = shaderAsset.getProperty('features');
	      if (_lodash2.default.isUndefined(features[featureName])) {
	        return false;
	      }
	      if (enabledFeatures && enabledFeatures[featureName] !== undefined) {
	        return enabledFeatures[featureName];
	      }
	      return features[featureName].defaultEnabled || features[featureName].alwaysEnabled;
	    }

	    /**
	     * Programmatically turn a material feature on or off. Changing a material feature
	     * requires a material compilation so a slight pause will accompany a call to this
	     * function.
	     * @method enableFeature
	     * @param  {String} featureName  Name of the primary feature to toggle.
	     * @param  {Boolean} on          Are we turning the feature on or off.
	     */

	  }, {
	    key: 'enableFeature',
	    value: function enableFeature(featureName, on) {

	      on = !!on;
	      var shaderAsset = this.getShader();
	      var enabledFeatures = this.getProperty('enabledFeatures');
	      var features = shaderAsset.getProperty('features');
	      var newFeatures = _lodash2.default.clone(enabledFeatures) || {};
	      if (_lodash2.default.isUndefined(features[featureName])) {
	        return;
	      }
	      newFeatures[featureName] = on;
	      this.setProperty('enabledFeatures', newFeatures);
	    }
	  }, {
	    key: 'unload',
	    value: function unload() {
	      if (this.runtimeData) {
	        this.box3DRuntime.trigger('materialUnloaded', this.id);
	        _log2.default.info(this.box3DRuntime.engineName + ' - Unloading material, ' + this.getName());
	        for (var x in this.runtimeData) {
	          if (this.runtimeData.hasOwnProperty(x)) {
	            this.runtimeData[x].dispose();
	            delete this.runtimeData[x];
	          }
	        }
	        this.runtimeData = null;

	        _get(Object.getPrototypeOf(MaterialAsset.prototype), 'unload', this).call(this);
	      }
	    }
	  }], [{
	    key: 'hexColorToVector',
	    value: function hexColorToVector(hex, obj) {
	      hex = Math.floor(hex);
	      obj = obj ? obj : {};
	      obj.r = (hex >> 16 & 255) / 255;
	      obj.g = (hex >> 8 & 255) / 255;
	      obj.b = (hex & 255) / 255;
	      return obj;
	    }
	  }]);

	  return MaterialAsset;
	}(_Box3DAsset3.default);

	MaterialAsset.builtInAssetDescriptors = {
	  missingMaterial: {
	    id: 'missingMaterial',
	    type: 'material',
	    name: 'Missing Material',
	    properties: {
	      baseAlbedo: { r: 0.8275, g: 0.8275, b: 0.8275 }
	    }
	  }
	};
	MaterialAsset.STANDIN_TEXTURE_WHITE = 'STANDIN_TEXTURE_WHITE';
	MaterialAsset.STANDIN_TEXTURE_WHITE_CUBE = 'STANDIN_TEXTURE_WHITE_CUBE';
	MaterialAsset.STANDIN_TEXTURE_BLACK = 'STANDIN_TEXTURE_BLACK';
	MaterialAsset.STANDIN_TEXTURE_BLACK_CUBE = 'STANDIN_TEXTURE_BLACK_CUBE';
	MaterialAsset.STANDIN_TEXTURE_NORMAL = 'STANDIN_TEXTURE_NORMAL';
	MaterialAsset.schema = _lodash2.default.extend({}, _Box3DAsset3.default.schema, {
	  shader: {
	    type: 'id',
	    description: '',
	    default: 'box3d_pbr_spec_gloss_shader'
	  },
	  enabledFeatures: {
	    type: 'object',
	    description: '',
	    default: null
	  }
	});

	window.Box3D.MaterialAsset = MaterialAsset;
	// export default MaterialAsset;
	module.exports = MaterialAsset;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseRegistry2 = __webpack_require__(15);

	var _BaseRegistry3 = _interopRequireDefault(_BaseRegistry2);

	var _BaseTextureAsset = __webpack_require__(19);

	var _BaseTextureAsset2 = _interopRequireDefault(_BaseTextureAsset);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * All TextureAssets are manged by this registry.
	 * @class TextureRegistry
	 * @constructor
	 */

	var TextureRegistry = function (_BaseRegistry) {
	  _inherits(TextureRegistry, _BaseRegistry);

	  function TextureRegistry() {
	    _classCallCheck(this, TextureRegistry);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextureRegistry).call(this, _BaseTextureAsset2.default));

	    _this.missingTexture2d = undefined;
	    _this.missingTextureCube = undefined;
	    return _this;
	  }

	  _createClass(TextureRegistry, [{
	    key: 'uninitialize',
	    value: function uninitialize() {
	      if (this.missingTexture2d) {
	        this.missingTexture2d.dispose();
	      }
	      if (this.missingTextureCube) {
	        this.missingTextureCube.dispose();
	      }
	    }

	    /**
	     * Create a 2D Three.js texture with the specified colour.
	     * @param  {Number} r Red value (0-255)
	     * @param  {Number} g Green value (0-255)
	     * @param  {Number} b Blue value (0-255)
	     * @param  {Number} a Alpha value (0-255). If undefined, an RGB texture will be created.
	     * @return {Object}   A THREE.DataTexture
	     */

	  }, {
	    key: 'createColorTexture',
	    value: function createColorTexture() {
	      var r = arguments.length <= 0 || arguments[0] === undefined ? 255 : arguments[0];
	      var g = arguments.length <= 1 || arguments[1] === undefined ? 255 : arguments[1];
	      var b = arguments.length <= 2 || arguments[2] === undefined ? 255 : arguments[2];
	      var a = arguments[3];

	      var format = _three2.default.RGBFormat;
	      var byteSize = a !== undefined ? 4 : 3;
	      var data = new Uint8Array(byteSize);
	      data[0] = r;
	      data[1] = g;
	      data[2] = b;
	      if (byteSize === 4) {
	        data[3] = a;
	        format = _three2.default.RGBAFormat;
	      }

	      var texture = new _three2.default.DataTexture(data, 1, 1, format);
	      texture.needsUpdate = true;
	      return texture;
	    }

	    /**
	     * Create a cubemap Three.js texture with the specified colour.
	     * @param  {Number} r Red value (0-255)
	     * @param  {Number} g Green value (0-255)
	     * @param  {Number} b Blue value (0-255)
	     * @param  {Number} a Alpha value (0-255). If undefined, an RGB texture will be created.
	     * @return {Object}   A THREE.CubeTexture
	     */

	  }, {
	    key: 'createColorTextureCube',
	    value: function createColorTextureCube() {
	      var r = arguments.length <= 0 || arguments[0] === undefined ? 255 : arguments[0];
	      var g = arguments.length <= 1 || arguments[1] === undefined ? 255 : arguments[1];
	      var b = arguments.length <= 2 || arguments[2] === undefined ? 255 : arguments[2];
	      var a = arguments[3];

	      var sides = new Array(6);
	      for (var i = 0; i < sides.length; i++) {
	        sides[i] = this.createColorTexture(r, g, b, a);
	      }
	      var texture = new _three2.default.CubeTexture(sides);
	      texture.generateMipmaps = false;
	      texture.format = sides[0].format;
	      texture.minFilter = _three2.default.NearestFilter;
	      texture.magFilter = _three2.default.NearestFilter;
	      texture.needsUpdate = true;
	      return texture;
	    }

	    /**
	     * Returns a 2D texture to be used in place of missing assets.
	     * @return {Object} THREE.Texture
	     */

	  }, {
	    key: 'getMissingTexture',
	    value: function getMissingTexture() {
	      if (!this.missingTexture2d) {
	        this.missingTexture2d = this.createColorTexture();
	      }

	      return this.missingTexture2d;
	    }

	    /**
	     * Returns a cube texture to be used in place of missing assets.
	     * @return {Object} THREE.CubeTexture
	     */

	  }, {
	    key: 'getMissingTextureCube',
	    value: function getMissingTextureCube() {
	      if (!this.missingTextureCube) {
	        this.missingTextureCube = this.createColorTextureCube();
	      }

	      return this.missingTextureCube;
	    }
	  }]);

	  return TextureRegistry;
	}(_BaseRegistry3.default);

	exports.default = TextureRegistry;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Box3D = window.Box3D = window.Box3D || {};

	var BaseTextureAsset = function (_Box3DAsset) {
	  _inherits(BaseTextureAsset, _Box3DAsset);

	  function BaseTextureAsset(json) {
	    _classCallCheck(this, BaseTextureAsset);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BaseTextureAsset).call(this, json));

	    _this.loadedBytes = 0;
	    return _this;
	  }

	  _createClass(BaseTextureAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(BaseTextureAsset.prototype), 'initialize', this).call(this, properties);

	      this.loadComponents = true;
	    }
	  }, {
	    key: 'unload',
	    value: function unload(options) {
	      // abort any xhr request associated with this
	      this.box3DRuntime.resourceLoader.abortRequest(this.id);

	      if (this.runtimeData) {
	        this.box3DRuntime.trigger('textureUnloaded', this.id);

	        _log2.default.info(this.box3DRuntime.engineName + ' - Unloading texture, ' + this.getName());

	        this.runtimeData.dispose();
	      }

	      _get(Object.getPrototypeOf(BaseTextureAsset.prototype), 'unload', this).call(this, options);
	      this.loadedBytes = 0;
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _get(Object.getPrototypeOf(BaseTextureAsset.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      var texture = this.runtimeData instanceof _three2.default.WebGLRenderTarget ? this.runtimeData.texture : this.runtimeData;

	      // Textures should always have flipY turned off because it can't be applied to all
	      // texture types (e.g. hardware compressed textures). Our shaders will always do
	      // the y-flip for us.
	      texture.flipY = false;

	      if (changes.hasOwnProperty('uMapping')) {
	        texture.wrapS = BaseTextureAsset.ADDRESS_MODE[this.getProperty('uMapping')];
	      }

	      if (changes.hasOwnProperty('vMapping')) {
	        texture.wrapT = BaseTextureAsset.ADDRESS_MODE[this.getProperty('vMapping')];
	      }

	      if (changes.hasOwnProperty('anisotropy')) {
	        texture.anisotropy = this.getProperty('anisotropy');
	      }

	      if (changes.hasOwnProperty('premultiplyAlpha')) {
	        texture.premultiplyAlpha = this.getProperty('premultiplyAlpha');
	      }

	      if (changes.hasOwnProperty('generateMipmaps')) {
	        var generateMipmaps = this.getProperty('generateMipmaps');
	        texture.generateMipmaps = generateMipmaps && this.isPowerOfTwo() && !this.isCompressed();
	      }

	      if (changes.hasOwnProperty('minFilter')) {
	        texture.minFilter = BaseTextureAsset.FILTER[this.getProperty('minFilter')];
	      }
	      if (changes.hasOwnProperty('magFilter')) {
	        texture.magFilter = BaseTextureAsset.FILTER[this.getProperty('magFilter')];
	      }

	      if (this.isHdr() && this.packingFormat) {
	        this._unpackToHdr();
	      }

	      this.box3DRuntime.needsRender = true;
	    }
	  }, {
	    key: '_applyPropertiesUnloaded',
	    value: function _applyPropertiesUnloaded(changes) {
	      if (changes.useHardwareCompression !== undefined) {
	        this.defaultResource = undefined;
	        this.defaultResources = undefined;
	      }
	      this.box3DRuntime.trigger('textureChanged', this.id, changes);
	    }
	  }, {
	    key: '_unpackToHdr',
	    value: function _unpackToHdr() {
	      _log2.default.warn('Must implement _unpackToHdr for this texture type.');
	      return;
	    }

	    /**
	     * Returns the byte size of the data that has already been loaded by this asset and its
	     * hierarchy.
	     * @public
	     * @method getDataSizeLoaded
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeLoaded',
	    value: function getDataSizeLoaded(dependencyType) {
	      if (!dependencyType || dependencyType === 'textures') {
	        return this.loadedBytes;
	      } else {
	        return 0;
	      }
	    }

	    /**
	     * Returns the download size of this texture. Specify filters to query the
	     * desired texture. If no filters are specified, the default texture for the
	     * current device will be queried.
	     * @method getDataSizeDownload
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @param {Object} params Specify parameters to narrow down the type of asset to
	     * return values for. e.g. for textures, you might specify {compression: 'dxt'}.
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeDownload',
	    value: function getDataSizeDownload(dependencyType) {
	      if (!dependencyType || dependencyType === 'textures') {
	        return this.get('bufferSize') || 1024;
	      } else {
	        return 0;
	      }
	    }

	    /**
	     * Returns the total amount of GPU memory occupied by this texture. Specify
	     * filters to query the desired texture. If no filters are specified, the
	     * default texture for the current device will be queried.
	     * @method getDataSizeTextureInMemory
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @param {Object} overrideParams Specify parameters to narrow down the type of asset to
	     * return values for. e.g. for textures, you might specify {compression: 'dxt'}.
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeInMemory',
	    value: function getDataSizeInMemory(dependencyType, overrideParams) {
	      var width;
	      var height;
	      var compression;
	      var numChannels;
	      var channelSize;
	      var dataType;

	      if (dependencyType && dependencyType !== 'textures') {
	        return 0;
	      }

	      width = this.getWidth();
	      height = this.getHeight();
	      overrideParams = overrideParams || {};
	      compression = overrideParams.compression || this.getCompressionFormat();

	      if (compression !== 'none') {
	        return this.getDataSizeDownload();
	      }

	      numChannels = this.getNumChannels(overrideParams.format);
	      dataType = overrideParams.type || this.getDataType();

	      switch (dataType) {
	        case 'float':
	        case 'uInt':
	        case 'int':
	          channelSize = 4;
	          break;

	        case 'short':
	        case 'uShort':
	          channelSize = 2;
	          break;

	        case 'uByte':
	        case 'byte':
	          channelSize = 1;
	          break;

	        // The following types dictate the bpp directly.
	        case 'uShort4444':
	        case 'uShort5551':
	        case 'uShort565':
	          return width * height * 2;
	      }
	      return width * height * channelSize * numChannels;
	    }

	    /** Returns the maximum texture size supported by the device.
	     * @return {Integer} The maximum texture size.
	     */

	  }, {
	    key: 'getMaxTextureSize',
	    value: function getMaxTextureSize() {
	      return Box3D.isMobile() ? 1024 : this.box3DRuntime.getGPUCapability('MAX_TEXTURE_SIZE');
	    }

	    /**
	     * Returns the pixel format of the texture. e.g. THREE.RGBAFormat, THREE.LuminanceFormat, etc.
	     * @return {String} The texture pixel format.
	     */

	  }, {
	    key: 'getFormat',
	    value: function getFormat() {
	      var format = this.getProperty('format');
	      return format;
	    }

	    /**
	     * Returns the data type of the texture. e.g. THREE.UnsignedByteType, THREE.FloatType, etc.
	     * @return {Number} The texture pixel type.
	     */

	  }, {
	    key: 'getDataType',
	    value: function getDataType() {
	      var dataType = this.getProperty('type');
	      return dataType;
	    }

	    /**
	     * Return the number of color or luminance channels in the texture. An optional override lets
	     * you query the value for a different pixel format.
	     * @method getNumChannels
	     * @public
	     * @param {Number} overrideFormat Query the number of channels for a different pixel format
	     * by specifying a format here.
	     * @return {Number} Returns the number of color or luminance channels in the texture.
	     */

	  }, {
	    key: 'getNumChannels',
	    value: function getNumChannels(overrideFormat) {
	      var format = overrideFormat || this.getFormat();
	      switch (format) {
	        case 'alpha':
	        case 'luminance':
	          return 1;
	        case 'luminanceAlpha':
	          return 2;
	        case 'rgb':
	          return 3;
	        case 'rgba':
	          return 4;
	        default:
	          return 0;
	      }
	    }

	    /**
	     * @public
	     * @return {Number} Returns the total number of mip levels used by this texture.
	     */

	  }, {
	    key: 'getNumMips',
	    value: function getNumMips() {
	      var width = this.getWidth();
	      var height = this.getHeight();
	      var max = Math.max(width, height);
	      max = Math.max(max, 1);
	      return Math.floor(Math.log2(max));
	    }

	    /**
	     * @public
	     * @return {Boolean} True iff the texture contains high dynamic range, floating point data
	     */

	  }, {
	    key: 'isHdr',
	    value: function isHdr() {
	      return !!this.getProperty('isHdr');
	    }

	    /**
	     * @public
	     * @return {Boolean} True iff the texture is using a hardware compression format.
	     */

	  }, {
	    key: 'isCompressed',
	    value: function isCompressed() {
	      if (this.runtimeData) {
	        return this.runtimeData instanceof _three2.default.CompressedTexture;
	      } else {
	        return this.getProperty('useHardwareCompression');
	      }
	    }

	    /**
	     * @public
	     * @return {Boolean} True iff both dimensions of the texture are a power of two.
	     */

	  }, {
	    key: 'isPowerOfTwo',
	    value: function isPowerOfTwo() {
	      var width = this.getWidth();
	      var height = this.getHeight();
	      return _three2.default.Math.isPowerOfTwo(width) && _three2.default.Math.isPowerOfTwo(height);
	    }

	    /**
	    * Returns the preferred texture compression format for the device.
	    * @return {String} 'atc', 'dxt', 'pvrtc' or 'none'
	    */

	  }, {
	    key: 'getCompressionFormat',
	    value: function getCompressionFormat() {
	      var compression = 'none';

	      // If a compressed format is preferred, get one based on the device caps.
	      if (this.getProperty('useHardwareCompression')) {
	        if (this.box3DRuntime.supportsCompressedTextureS3TC()) {
	          compression = 'dxt';
	        } else if (this.box3DRuntime.supportsCompressedTexturePVRTC()) {
	          compression = 'pvrtc';
	        } else if (this.box3DRuntime.supportsCompressedTextureATC()) {
	          compression = 'atc';
	        }
	      }
	      return compression;
	    }

	    /**
	     * Returns the width of the texture.
	     * @return {Integer} The texture width.
	     */

	  }, {
	    key: 'getWidth',
	    value: function getWidth() {
	      var width = this.getProperty('width');
	      if (_lodash2.default.isUndefined(width)) {
	        width = this.getProperty('originalWidth');
	        if (_lodash2.default.isUndefined(width) && this.runtimeData) {
	          width = this.runtimeData.width;
	        }
	        if (width > this.getMaxTextureSize()) {
	          width = this.getMaxTextureSize();
	        }
	      }
	      return width || 1;
	    }

	    /**
	     * Returns the height of the texture.
	     * @return {Integer} The texture height.
	     */

	  }, {
	    key: 'getHeight',
	    value: function getHeight() {
	      var height = this.getProperty('height');
	      if (_lodash2.default.isUndefined(height)) {
	        height = this.getProperty('originalHeight');
	        if (_lodash2.default.isUndefined(height) && this.runtimeData) {
	          height = this.runtimeData.height;
	        }
	        if (height > this.getMaxTextureSize()) {
	          height = this.getMaxTextureSize();
	        }
	      }
	      return height || 1;
	    }
	  }, {
	    key: 'createCompressedTextureData',
	    value: function createCompressedTextureData(buffer) {
	      var texture = new _three2.default.CompressedTexture(),
	          dds = this._parseDDS(buffer, true),
	          iFace,
	          iMip,
	          nFaces;

	      texture.format = dds.format;
	      texture.generateMipmaps = false;
	      texture.needsUpdate = true;

	      if (dds.isCubemap) {
	        texture.flipY = false;
	        texture.image = [];

	        nFaces = dds.mipmaps.length / dds.mipmapCount;

	        for (iFace = 0; iFace < nFaces; iFace += 1) {
	          texture.image[iFace] = {
	            mipmaps: []
	          };

	          for (iMip = 0; iMip < dds.mipmapCount; iMip += 1) {
	            texture.image[iFace].mipmaps.push(dds.mipmaps[iFace * dds.mipmapCount + iMip]);

	            texture.image[iFace].format = dds.format;
	            texture.image[iFace].width = dds.width;
	            texture.image[iFace].height = dds.height;
	          }
	        }
	      } else {
	        texture.mipmaps = dds.mipmaps;
	        texture.image.width = dds.width;
	        texture.image.height = dds.height;
	      }
	      return texture;
	    }
	  }, {
	    key: '_parseDDS',
	    value: function _parseDDS(buffer, loadMipmaps) {
	      // Adapted from @toji's DDS utils
	      //  https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js

	      // All values and structures referenced from:
	      // http://msdn.microsoft.com/en-us/library/bb943991.aspx/

	      function fourCCToInt32(value) {
	        return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);
	      }

	      function int32ToFourCC(value) {
	        return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);
	      }

	      function loadARGBMip(buffer, dataOffset, width, height) {
	        var dataLength = width * height * 4,
	            srcBuffer = new Uint8Array(buffer, dataOffset, dataLength),
	            byteArray = new Uint8Array(dataLength),
	            dst = 0,
	            src = 0,
	            x,
	            y,
	            r,
	            g,
	            b,
	            a;

	        for (y = 0; y < height; y += 1) {
	          for (x = 0; x < width; x += 1) {
	            b = srcBuffer[src];
	            g = srcBuffer[src + 1];
	            r = srcBuffer[src + 2];
	            a = srcBuffer[src + 3];
	            byteArray[dst] = r; // r
	            byteArray[dst + 1] = g; // g
	            byteArray[dst + 2] = b; // b
	            byteArray[dst + 3] = a; // a
	            src += 4;
	            dst += 4;
	          }
	        }

	        return byteArray;
	      }

	      var DDS_MAGIC = 0x20534444,

	      //DDSD_CAPS = 0x1,
	      //DDSD_HEIGHT = 0x2,
	      //DDSD_WIDTH = 0x4,
	      //DDSD_PITCH = 0x8,
	      //DDSD_PIXELFORMAT = 0x1000,
	      DDSD_MIPMAPCOUNT = 0x20000,

	      //DDSD_LINEARSIZE = 0x80000,
	      //DDSD_DEPTH = 0x800000,

	      //DDSCAPS_COMPLEX = 0x8,
	      //DDSCAPS_MIPMAP = 0x400000,
	      //DDSCAPS_TEXTURE = 0x1000,

	      DDSCAPS2_CUBEMAP = 0x200,

	      //DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,
	      //DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,
	      //DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,
	      //DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,
	      //DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,
	      //DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,
	      //DDSCAPS2_VOLUME = 0x200000,

	      //DDPF_ALPHAPIXELS = 0x1,
	      //DDPF_ALPHA = 0x2,
	      DDPF_FOURCC = 0x4,

	      //DDPF_RGB = 0x40,
	      //DDPF_YUV = 0x200,
	      //DDPF_LUMINANCE = 0x20000,

	      FOURCC_DXT1 = fourCCToInt32('DXT1'),
	          FOURCC_DXT3 = fourCCToInt32('DXT3'),
	          FOURCC_DXT5 = fourCCToInt32('DXT5'),
	          headerLengthInt = 31,
	          // The header length in 32 bit ints

	      // Offsets into the header array
	      off_magic = 0,
	          off_size = 1,
	          off_flags = 2,
	          off_height = 3,
	          off_width = 4,
	          off_mipmapCount = 7,
	          off_pfFlags = 20,
	          off_pfFourCC = 21,
	          off_RGBBitCount = 22,
	          off_RBitMask = 23,
	          off_GBitMask = 24,
	          off_BBitMask = 25,
	          off_ABitMask = 26,

	      //off_caps = 27,
	      off_caps2 = 28,

	      //off_caps3 = 29,
	      //off_caps4 = 30,

	      header,
	          blockBytes,
	          fourCC,
	          isRGBAUncompressed,
	          dataOffset,
	          width,
	          height,
	          iFace,
	          nFaces,
	          iMip,
	          byteArray,
	          dataLength,
	          dds = {
	        mipmaps: [],
	        width: 0,
	        height: 0,
	        format: null,
	        mipmapCount: 1
	      };

	      header = new Int32Array(buffer, 0, headerLengthInt);

	      // Parse header

	      if (header[off_magic] !== DDS_MAGIC) {
	        _log2.default.error('THREE.DDSLoader.parse: Invalid magic number in DDS ' + 'header.');
	        return dds;
	      }

	      if (!header[off_pfFlags] & DDPF_FOURCC) {
	        _log2.default.error('THREE.DDSLoader.parse: Unsupported format, must ' + 'contain a FourCC code.');
	        return dds;
	      }

	      fourCC = header[off_pfFourCC];
	      isRGBAUncompressed = false;

	      switch (fourCC) {
	        case FOURCC_DXT1:
	          blockBytes = 8;
	          dds.format = _three2.default.RGB_S3TC_DXT1_Format;
	          break;

	        case FOURCC_DXT3:
	          blockBytes = 16;
	          dds.format = _three2.default.RGBA_S3TC_DXT3_Format;
	          break;

	        case FOURCC_DXT5:
	          blockBytes = 16;
	          dds.format = _three2.default.RGBA_S3TC_DXT5_Format;
	          break;

	        default:
	          if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {
	            isRGBAUncompressed = true;
	            blockBytes = 64;
	            dds.format = _three2.default.RGBAFormat;
	          } else {
	            _log2.default.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));
	            return dds;
	          }
	      }

	      dds.mipmapCount = 1;

	      if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {
	        dds.mipmapCount = Math.max(1, header[off_mipmapCount]);
	      }

	      // TODO: Verify that all faces of the cubemap are present with
	      // DDSCAPS2_CUBEMAP_POSITIVEX, etc.

	      dds.isCubemap = header[off_caps2] & DDSCAPS2_CUBEMAP ? true : false;

	      dds.width = header[off_width];
	      dds.height = header[off_height];

	      dataOffset = header[off_size] + 4;

	      // Extract mipmaps buffers

	      width = dds.width;
	      height = dds.height;

	      nFaces = dds.isCubemap ? 6 : 1;

	      for (iFace = 0; iFace < nFaces; iFace += 1) {
	        for (iMip = 0; iMip < dds.mipmapCount; iMip += 1) {
	          if (isRGBAUncompressed) {
	            byteArray = loadARGBMip(buffer, dataOffset, width, height);
	            dataLength = byteArray.length;
	          } else {
	            dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;
	            byteArray = new Uint8Array(buffer, dataOffset, dataLength);
	          }

	          dds.mipmaps.push({
	            data: byteArray,
	            width: width,
	            height: height
	          });

	          dataOffset += dataLength;

	          width = Math.max(width * 0.5, 1);
	          height = Math.max(height * 0.5, 1);
	        }

	        width = dds.width;
	        height = dds.height;
	      }

	      return dds;
	    }
	  }]);

	  return BaseTextureAsset;
	}(_Box3DAsset3.default);

	BaseTextureAsset.LAYOUT = {
	  normal: 101,
	  stereo2dOverUnder: 102, // ABOVE-BELOW
	  stereo2dLeftRight: 103, // PARALLEL-EYED
	  stereo2dRightLeft: 104, // CROSS-EYED
	  stereoCubeHorizontal: 105
	};
	BaseTextureAsset.FORMAT = {
	  alpha: _three2.default.AlphaFormat,
	  rgb: _three2.default.RGBFormat,
	  rgba: _three2.default.RGBAFormat,
	  rgbe: _three2.default.RGBEFormat,
	  luminance: _three2.default.LuminanceFormat,
	  luminanceAlpha: _three2.default.LuminanceAlphaFormat
	};
	BaseTextureAsset.ADDRESS_MODE = {
	  wrap: _three2.default.RepeatWrapping,
	  clamp: _three2.default.ClampToEdgeWrapping,
	  mirror: _three2.default.MirroredRepeatWrapping
	};
	BaseTextureAsset.FILTER = {
	  nearest: _three2.default.NearestFilter,
	  nearestWithNearestMipmap: _three2.default.NearestMipMapNearestFilter,
	  nearestWithLinearMipmap: _three2.default.NearestMipMapLinearFilter,
	  linear: _three2.default.LinearFilter,
	  linearWithNearestMipmap: _three2.default.LinearMipMapNearestFilter,
	  linearWithLinearMipmap: _three2.default.LinearMipMapLinearFilter
	};
	BaseTextureAsset.TYPE = {
	  uByte: _three2.default.UnsignedByteType,
	  byte: _three2.default.ByteType,
	  short: _three2.default.ShortType,
	  uShort: _three2.default.UnsignedShortType,
	  int: _three2.default.IntType,
	  uInt: _three2.default.UnsignedIntType,
	  float: _three2.default.FloatType,
	  halfFloat: _three2.default.HalfFloatType,
	  uShort4444: _three2.default.UnsignedShort4444Type,
	  uShort5551: _three2.default.UnsignedShort5551Type,
	  uShort565: _three2.default.UnsignedShort565Type
	};
	BaseTextureAsset.schema = _lodash2.default.extend({}, _Box3DAsset3.default.schema, {
	  format: {
	    type: 'string',
	    description: '',
	    default: 'rgba'
	  },
	  type: {
	    type: 'string',
	    description: '',
	    default: 'uByte'
	  },
	  uMapping: {
	    type: 'string',
	    description: '',
	    default: 'wrap'
	  },
	  vMapping: {
	    type: 'string',
	    description: '',
	    default: 'wrap'
	  },
	  minFilter: {
	    type: 'string',
	    description: '',
	    default: 'linearWithLinearMipmap'
	  },
	  magFilter: {
	    type: 'string',
	    description: '',
	    default: 'linear'
	  },
	  anisotropy: {
	    type: 'float',
	    description: '',
	    default: 8.0
	  },
	  generateMipmaps: {
	    type: 'boolean',
	    description: '',
	    default: true
	  },
	  premultiplyAlpha: {
	    type: 'boolean',
	    description: '',
	    default: false
	  },
	  layout: {
	    type: 'string',
	    description: '',
	    default: 'normal'
	  },
	  stream: {
	    type: 'boolean',
	    description: '',
	    default: true
	  },
	  isHdr: {
	    type: 'boolean',
	    default: false
	  },
	  originalWidth: {
	    type: 'integer',
	    description: 'The width, in pixels, of the original image file.',
	    default: undefined
	  },
	  originalHeight: {
	    type: 'integer',
	    description: 'The height, in pixels, of the original image file.',
	    default: undefined
	  },
	  // Properties for defining where the data is loaded from
	  // TODO - Clean this up. Perhaps a single 'location' property that
	  // contains the necessary info inside.
	  isLocal: {
	    type: 'boolean',
	    default: false
	  },
	  filename: {
	    type: 'string',
	    default: ''
	  }
	});

	window.Box3D.BaseTextureAsset = BaseTextureAsset;
	exports.default = BaseTextureAsset;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*
	* NAMING CONVENTION FOR EVENTS
	* play  <-- to start an event, is an action
	* pause <-- to pause an event, is an action
	* stop  <-- to stop an event, is an action
	*
	* enable  <-- , is an action
	* disable <-- , is an action
	* toggle  <-- , is an action
	*
	* begin  <-- triggered when event started, not an action
	* end    <-- triggered when event complete, not an action
	*
	* Naming convention goes as follows
	* <one of the above or one of your own><describing the event>
	*
	* Examples:
	* playAnimateAlongCurve <-- start the curve animation
	* stopKeyframeAnimation <-- stop a keyframe animation from playing
	* pauseAudio            <-- pause a sound
	* enableFreeCameraController   <-- turn on the free camera controller
	* disableOrbitCameraController <-- turn off the orbit camera controller
	* toggleVisibility             <-- toggle the visibility of an object
	* beginShot                    <-- a shot has begun
	* endExplode                   <-- the exploder has finished animating
	*
	* hideAnnotationPin    <-- hides just the pin for the annotation
	* setViewport
	*/
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _BaseRegistry2 = __webpack_require__(15);

	var _BaseRegistry3 = _interopRequireDefault(_BaseRegistry2);

	var _componentsBuiltin = __webpack_require__(21);

	var _componentsBuiltin2 = _interopRequireDefault(_componentsBuiltin);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var componentsAdded = false;
	var scripts = {};

	/* global Box3D */
	/**
	 * All SceneAssets are manged by this registry.
	 * @class ScriptRegistry
	 * @constructor
	 */

	var ScriptRegistry = function (_BaseRegistry) {
	  _inherits(ScriptRegistry, _BaseRegistry);

	  function ScriptRegistry() {
	    _classCallCheck(this, ScriptRegistry);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(ScriptRegistry).call(this, Box3D.ScriptAsset));
	  }

	  /**
	   * registerScript
	   * registers a script globally for use by all engines which initialize after
	   * this call
	   * @method
	   * @param  {Object} componentDef    The component definition
	   * @param  {Function} constructor   The constructor function
	   */

	  _createClass(ScriptRegistry, [{
	    key: 'initialize',
	    value: function initialize(box3DRuntime) {
	      _get(Object.getPrototypeOf(ScriptRegistry.prototype), 'initialize', this).call(this, box3DRuntime);

	      if (!componentsAdded) {
	        componentsAdded = true;
	        (0, _componentsBuiltin2.default)(window.Box3D);
	      }
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      _get(Object.getPrototypeOf(ScriptRegistry.prototype), 'uninitialize', this).call(this);
	    }
	  }, {
	    key: 'initSystemAssets',
	    value: function initSystemAssets() {
	      _lodash2.default.each(scripts, function (script) {
	        var componentDef = script.def,
	            constructor = script.constructor.default,
	            json;

	        json = _lodash2.default.extend({}, componentDef, { type: 'script' });
	        var scriptAsset = this.box3DRuntime.assetRegistry.createAsset(json);
	        scriptAsset.sharedData.classConstructor = constructor;
	      }, this);
	    }
	  }, {
	    key: 'find',
	    value: function find(properties) {
	      var matches = [];

	      _lodash2.default.filter(this.assets, function (asset) {
	        var match = true;
	        _lodash2.default.each(properties, function (v, path) {
	          if (asset.get(path) !== v) {
	            match = false;
	          }
	        }, this);
	        if (match) {
	          matches.push(asset);
	        }
	      }, this);

	      return matches;
	    }
	  }], [{
	    key: 'registerScript',
	    value: function registerScript(componentDef, constructor) {
	      if (!componentDef.id) {
	        throw new Error('Component definition is lacking an id attribute!');
	      }

	      if (!constructor) {
	        throw new Error('A constructor must be provided!');
	      }

	      scripts[componentDef.id] = {
	        def: componentDef,
	        constructor: constructor
	      };
	    }
	  }]);

	  return ScriptRegistry;
	}(_BaseRegistry3.default);

	window.Box3D.ScriptRegistry = ScriptRegistry;
	exports.default = ScriptRegistry;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	  __webpack_require__(24),__webpack_require__(41),__webpack_require__(25),__webpack_require__(26),__webpack_require__(27),__webpack_require__(28),__webpack_require__(29),__webpack_require__(30),__webpack_require__(31),__webpack_require__(32),__webpack_require__(33),__webpack_require__(34),__webpack_require__(35),__webpack_require__(36),__webpack_require__(37),__webpack_require__(38),__webpack_require__(39),__webpack_require__(40),__webpack_require__(22),__webpack_require__(42),__webpack_require__(43),__webpack_require__(44),__webpack_require__(45),__webpack_require__(46),__webpack_require__(47),__webpack_require__(48),__webpack_require__(49),__webpack_require__(50),__webpack_require__(51),__webpack_require__(52),__webpack_require__(53),__webpack_require__(54),__webpack_require__(55),__webpack_require__(56),__webpack_require__(57),__webpack_require__(58) 
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(
	  ComponentAudioListener,ComponentAudioSource,ComponentCubeMapCapture,ComponentCurve,ComponentDebugConsoleDisplay,ComponentDebugTextureViewer,ComponentDefaultFilters,ComponentEnvironment,ComponentEventHandler,ComponentExploder,ComponentFreeCamera,ComponentFullscreen,ComponentHMDEffect,ComponentInputController,ComponentKeyframeAnimation,ComponentLookAtTarget,ComponentNormalMapGenerator,ComponentObjectAnimator,ComponentObjectPicker,ComponentOrbitCameraController,ComponentPanoramaToCubeMap,ComponentPreviewAxisRotation,ComponentPreviewCameraController,ComponentPreviewCameraFocus,ComponentPreviewVRControls,ComponentReflectionCapturePlane,ComponentRenderFilters,ComponentRenderModes,ComponentRenderView,ComponentRenderer,ComponentRotate,ComponentSceneLoader,ComponentSimplexNoiseGenerator,ComponentSkybox,ComponentTextRenderer,ComponentTexture2dToCubeMap
	) { return function(Box3D) {
	   Box3D.ScriptRegistry.registerScript({
	  "id": "audio_listener",
	  "name": "Audio Listener",
	  "properties": {
	    "description": "Audio listener for 3D, positional sound effects",
	    "attributes": {},
	    "attributesOrder": [],
	    "events": {},
	    "externalDependencies": [],
	    "category": "Audio",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/AudioListener"
	  }
	}, ComponentAudioListener);  Box3D.ScriptRegistry.registerScript({
	  "id": "audio_source",
	  "name": "Audio Source",
	  "properties": {
	    "description": "Controls playback of audio assets",
	    "attributes": {
	      "gain": {
	        "name": "gain",
	        "type": "f",
	        "description": "Volume control",
	        "default": 1,
	        "min": 0,
	        "max": 100
	      },
	      "autoPlay": {
	        "name": "autoPlay",
	        "type": "b",
	        "description": "Play the audio once loaded",
	        "default": true
	      },
	      "loop": {
	        "name": "loop",
	        "type": "b",
	        "description": "Continuously replay the audio",
	        "default": true
	      },
	      "preload": {
	        "name": "preload",
	        "type": "b",
	        "description": "Load the audio when the component is initialized",
	        "default": true
	      },
	      "positional": {
	        "name": "positional",
	        "type": "b",
	        "description": "Enable/disable 3D, positional audio effects",
	        "default": false
	      },
	      "stream": {
	        "name": "stream",
	        "type": "b",
	        "description": "Stream the audio",
	        "default": false
	      },
	      "asset": {
	        "name": "asset",
	        "type": "asset",
	        "description": "Audio or video asset",
	        "default": null,
	        "filter": {
	          "audio": true,
	          "textureVideo": true
	        }
	      }
	    },
	    "attributesOrder": [
	      "gain",
	      "autoPlay",
	      "loop",
	      "preload",
	      "positional",
	      "stream",
	      "asset"
	    ],
	    "events": {
	      "playAudio": {
	        "scope": "local",
	        "name": "playAudio",
	        "action": true,
	        "category": "Audio",
	        "parameters": [
	          {
	            "name": "offset",
	            "type": "f",
	            "description": "Defined in seconds",
	            "default": 0
	          }
	        ]
	      },
	      "pauseAudio": {
	        "scope": "local",
	        "name": "pauseAudio",
	        "action": true,
	        "category": "Audio",
	        "parameters": []
	      },
	      "stopAudio": {
	        "scope": "local",
	        "name": "stopAudio",
	        "action": true,
	        "category": "Audio",
	        "parameters": []
	      },
	      "toggleAudio": {
	        "scope": "local",
	        "name": "toggleAudio",
	        "action": true,
	        "category": "Audio",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "category": "Audio",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/AudioSource"
	  }
	}, ComponentAudioSource);  Box3D.ScriptRegistry.registerScript({
	  "id": "cubemap_capture",
	  "name": "Cube-Map Capture",
	  "properties": {
	    "attributes": {
	      "cubeTexture": {
	        "name": "cubeTexture",
	        "type": "asset",
	        "description": "The RenderTextureCube to render the reflection to.",
	        "filter": {
	          "renderTextureCube": true
	        },
	        "default": null
	      },
	      "near": {
	        "name": "near",
	        "type": "f",
	        "description": "The closest distance to this object to render. Adjust this to avoid   rendering local geometry to the texture.",
	        "default": 25
	      },
	      "far": {
	        "name": "far",
	        "type": "f",
	        "description": "The furthest distance from this object to render.",
	        "default": 160000
	      },
	      "updateFrameInterval": {
	        "name": "updateFrameInterval",
	        "type": "i",
	        "description": "The number of frames to skip in between updates of the reflection.   Default is 0.",
	        "default": 0
	      },
	      "renderPosX": {
	        "name": "renderPosX",
	        "type": "b",
	        "description": "Render this side of the cube.",
	        "default": true
	      },
	      "renderNegX": {
	        "name": "renderNegX",
	        "type": "b",
	        "description": "Render this side of the cube.",
	        "default": true
	      },
	      "renderPosY": {
	        "name": "renderPosY",
	        "type": "b",
	        "description": "Render this side of the cube.",
	        "default": true
	      },
	      "renderNegY": {
	        "name": "renderNegY",
	        "type": "b",
	        "description": "Render this side of the cube.",
	        "default": true
	      },
	      "renderPosZ": {
	        "name": "renderPosZ",
	        "type": "b",
	        "description": "Render this side of the cube.",
	        "default": true
	      },
	      "renderNegZ": {
	        "name": "renderNegZ",
	        "type": "b",
	        "description": "Render this side of the cube.",
	        "default": true
	      }
	    },
	    "attributesOrder": [
	      "cubeTexture",
	      "near",
	      "far",
	      "updateFrameInterval",
	      "renderPosX",
	      "renderNegX",
	      "renderPosY",
	      "renderNegY",
	      "renderPosZ",
	      "renderNegZ"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "Object"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/CubeMapCapture"
	  }
	}, ComponentCubeMapCapture);  Box3D.ScriptRegistry.registerScript({
	  "id": "curve_component",
	  "name": "Curve",
	  "properties": {
	    "description": "Creates a spline curve that can be used for various things, including making objects follow it. Add controls points to shape the curve.",
	    "attributes": {
	      "controlPoints": {
	        "name": "controlPoints",
	        "type": "a",
	        "subType": {
	          "type": "object"
	        },
	        "description": "The list of objects that define the curve shape."
	      },
	      "closed": {
	        "name": "closed",
	        "type": "b",
	        "description": "If toggled, the start and end of the curve will be smoothly joined.",
	        "default": false
	      }
	    },
	    "attributesOrder": [
	      "controlPoints",
	      "closed"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "object"
	    ],
	    "category": "General",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/Curve"
	  }
	}, ComponentCurve);  Box3D.ScriptRegistry.registerScript({
	  "id": "debug_console_display",
	  "name": "Debug Console Display",
	  "properties": {
	    "attributes": {},
	    "attributesOrder": [],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "Application"
	    ],
	    "category": "Debug",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/DebugConsoleDisplay"
	  }
	}, ComponentDebugConsoleDisplay);  Box3D.ScriptRegistry.registerScript({
	  "id": "debug_texture_viewer",
	  "name": "Debug Texture Viewer",
	  "properties": {
	    "attributes": {
	      "viewportLeft": {
	        "name": "viewportLeft",
	        "type": "s",
	        "description": "Left position of the viewport to be rendered by this camera.",
	        "default": "50%"
	      },
	      "viewportBottom": {
	        "name": "viewportBottom",
	        "type": "s",
	        "description": "Bottom position of the viewport to be rendered by this camera.",
	        "default": "0px"
	      },
	      "viewportWidth": {
	        "name": "viewportWidth",
	        "type": "s",
	        "description": "Width of the viewport to be rendered by this camera.",
	        "default": "50%"
	      },
	      "viewportHeight": {
	        "name": "viewportHeight",
	        "type": "s",
	        "description": "Height of the viewport to be rendered by this camera.",
	        "default": "50%"
	      },
	      "renderGroup": {
	        "name": "renderGroup",
	        "type": "i",
	        "description": "Render passes are done in order, based on the 'render group' value. Lower numbers render first.",
	        "default": 9
	      }
	    },
	    "attributesOrder": [
	      "viewportLeft",
	      "viewportBottom",
	      "viewportWidth",
	      "viewportHeight",
	      "renderGroup"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "Application"
	    ],
	    "category": "Debug",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/DebugTextureViewer"
	  }
	}, ComponentDebugTextureViewer);  Box3D.ScriptRegistry.registerScript({
	  "id": "render_filters_component",
	  "name": "Default Filters",
	  "properties": {
	    "description": "Stores the default filter settings that cameras will use when rendering.",
	    "attributes": {
	      "bloom": {
	        "name": "bloom",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "strength": {
	            "type": "f",
	            "default": 1,
	            "min": 0.1,
	            "max": 4,
	            "step": 0.001
	          },
	          "sigma": {
	            "type": "f",
	            "default": 4,
	            "min": 1,
	            "max": 8,
	            "step": 0.001,
	            "advanced": true
	          },
	          "resolution": {
	            "type": "i",
	            "default": 256,
	            "min": 64,
	            "max": 1024,
	            "step": 1,
	            "advanced": true
	          }
	        }
	      },
	      "toneMapping": {
	        "name": "toneMapping",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "enabled": {
	            "type": "b",
	            "default": false,
	            "description": "Enable tone-mapping."
	          },
	          "adaptive": {
	            "type": "b",
	            "description": "Automatically adjusts the tone-mapping every frame based on the average luminance of the scene.",
	            "default": true
	          },
	          "adaptSpeed": {
	            "type": "f",
	            "description": "The speed at which adaptive tone-mapping works. Higher number is faster.",
	            "default": 0.5,
	            "min": 0.1,
	            "max": 20
	          },
	          "exposureBias": {
	            "type": "f",
	            "description": "Adjusts the overall brightness of the image. Use this to tweak the final result of tone-mapping.",
	            "default": 1,
	            "min": 0.0001,
	            "max": 5
	          },
	          "maxLuminance": {
	            "type": "f",
	            "description": "Sets the maximum brightness reached before pixels become white after tone-mapping.",
	            "default": 16,
	            "min": 0.01,
	            "max": 25
	          },
	          "luminance": {
	            "type": "f",
	            "description": "When the 'Adaptive' feature is turned off, this will set the scene luminance to be used by tone-mapping.",
	            "default": 1,
	            "min": 0.0001,
	            "max": 16
	          }
	        }
	      },
	      "fxaa": {
	        "name": "fxaa",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "enabled": {
	            "type": "b",
	            "default": false
	          }
	        }
	      },
	      "vignette": {
	        "name": "vignette",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "offset": {
	            "type": "f",
	            "default": 1,
	            "min": 0,
	            "max": 1,
	            "step": 0.001
	          },
	          "darkness": {
	            "type": "f",
	            "default": 1,
	            "min": 0,
	            "max": 5,
	            "step": 0.001
	          }
	        }
	      },
	      "ssao": {
	        "name": "ssao",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "fogEnabled": {
	            "type": "i",
	            "default": 1,
	            "advanced": true
	          },
	          "depthScale": {
	            "type": "f",
	            "default": 2000,
	            "min": 100,
	            "max": 50000,
	            "step": 0.001,
	            "advanced": true
	          },
	          "onlyAO": {
	            "type": "i",
	            "default": 0
	          },
	          "aoClamp": {
	            "type": "f",
	            "default": 0.75,
	            "advanced": true
	          },
	          "lumInfluence": {
	            "type": "f",
	            "default": 0.75,
	            "advanced": true
	          },
	          "noiseAmount": {
	            "type": "f",
	            "default": 0.0002
	          },
	          "radius": {
	            "type": "f",
	            "default": 16
	          },
	          "diffArea": {
	            "type": "f",
	            "default": 0.4,
	            "advanced": true
	          },
	          "gDisplace": {
	            "type": "f",
	            "default": 0.4,
	            "advanced": true
	          }
	        }
	      },
	      "dof": {
	        "name": "dof",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "aspect": {
	            "type": "f",
	            "default": 1,
	            "min": 0,
	            "max": 1,
	            "step": 0.001,
	            "advanced": true
	          },
	          "aperture": {
	            "type": "f",
	            "default": 0.4,
	            "min": 0,
	            "max": 1,
	            "step": 0.001
	          },
	          "focus": {
	            "type": "f",
	            "default": 0.98,
	            "min": 0,
	            "max": 1,
	            "step": 0.001
	          }
	        }
	      },
	      "sepia": {
	        "name": "sepia",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "amount": {
	            "type": "f",
	            "default": 0.9,
	            "min": 0,
	            "max": 1,
	            "step": 0.001
	          }
	        }
	      },
	      "video": {
	        "name": "video",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "nIntensity": {
	            "type": "f",
	            "default": 0.15
	          },
	          "sIntensity": {
	            "type": "f",
	            "default": 0.05
	          },
	          "sCount": {
	            "type": "f",
	            "default": 512
	          },
	          "grayscale": {
	            "type": "b",
	            "default": false
	          }
	        }
	      }
	    },
	    "attributesOrder": [
	      "bloom",
	      "toneMapping",
	      "fxaa",
	      "vignette",
	      "ssao",
	      "dof",
	      "sepia",
	      "video"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "application"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/DefaultFilters"
	  }
	}, ComponentDefaultFilters);  Box3D.ScriptRegistry.registerScript({
	  "id": "environment",
	  "name": "Environment",
	  "properties": {
	    "attributes": {
	      "enableSceneLights": {
	        "name": "enableSceneLights",
	        "type": "b",
	        "description": "",
	        "default": true
	      },
	      "envDiffuseTexture": {
	        "name": "envDiffuseTexture",
	        "type": "asset",
	        "description": "",
	        "filter": {
	          "textureCube": true,
	          "texture2D": true,
	          "renderTexture2D": true,
	          "renderTextureCube": true
	        },
	        "default": null
	      },
	      "envSpecularTexture": {
	        "name": "envSpecularTexture",
	        "type": "asset",
	        "description": "",
	        "filter": {
	          "textureCube": true,
	          "texture2D": true,
	          "renderTexture2D": true,
	          "renderTextureCube": true
	        },
	        "default": null
	      }
	    },
	    "attributesOrder": [
	      "enableSceneLights",
	      "envDiffuseTexture",
	      "envSpecularTexture"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "scene"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/Environment"
	  }
	}, ComponentEnvironment);  Box3D.ScriptRegistry.registerScript({
	  "id": "event_handler_component",
	  "name": "Event Handler",
	  "properties": {
	    "attributes": {
	      "listen": {
	        "name": "listen",
	        "type": "event",
	        "description": "The event to listen for. When this event is captured, all of the defined trigger events will be fired."
	      },
	      "triggers": {
	        "name": "triggers",
	        "type": "a",
	        "subType": {
	          "type": "event"
	        },
	        "description": "Fire each of these events in response to the captured listen event."
	      }
	    },
	    "attributesOrder": [
	      "listen",
	      "triggers"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "category": "Interaction",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/EventHandler"
	  }
	}, ComponentEventHandler);  Box3D.ScriptRegistry.registerScript({
	  "id": "exploder_component",
	  "name": "Exploder",
	  "properties": {
	    "description": "Explodes your objects and their hierarchies into different formations. Great for showing off parts in a model!",
	    "attributes": {
	      "Time": {
	        "name": "Time",
	        "type": "f",
	        "default": 1.5,
	        "description": "The amount of time to explode and contract the child meshes"
	      },
	      "Scale": {
	        "name": "Scale",
	        "type": "v3",
	        "default": {
	          "x": 2,
	          "y": 2,
	          "z": 2
	        },
	        "description": "The scale of the explosion"
	      },
	      "Formation": {
	        "name": "Formation",
	        "type": "dd",
	        "description": "Formation to use when exploding the hierarchy of this object.",
	        "default": "Scale",
	        "options": {
	          "Circle": "Circle",
	          "Square Grid": "Grid",
	          "Scale Out": "Scale"
	        }
	      }
	    },
	    "attributesOrder": [
	      "Time",
	      "Scale",
	      "Formation"
	    ],
	    "events": {
	      "playExplode": {
	        "scope": "local",
	        "name": "playExplode",
	        "action": true,
	        "category": "Exploder",
	        "parameters": []
	      },
	      "playContract": {
	        "scope": "local",
	        "name": "playContract",
	        "action": true,
	        "category": "Exploder",
	        "parameters": []
	      },
	      "toggleExploder": {
	        "scope": "local",
	        "name": "toggleExploder",
	        "action": true,
	        "category": "Exploder",
	        "parameters": []
	      },
	      "resetExploder": {
	        "scope": "local",
	        "name": "resetExploder",
	        "action": true,
	        "category": "Exploder",
	        "parameters": []
	      },
	      "useCircleExplode": {
	        "scope": "local",
	        "name": "useCircleExplode",
	        "action": true,
	        "category": "Exploder",
	        "parameters": [
	          {
	            "name": "Scale",
	            "type": "v3",
	            "description": "The scale to apply to the explosion",
	            "default": {
	              "x": 1,
	              "y": 1,
	              "z": 1
	            }
	          }
	        ]
	      },
	      "useGridExplode": {
	        "scope": "local",
	        "name": "useGridExplode",
	        "action": true,
	        "category": "Exploder",
	        "parameters": [
	          {
	            "name": "Scale",
	            "type": "v3",
	            "description": "The scale to apply to the explosion",
	            "default": {
	              "x": 1,
	              "y": 1,
	              "z": 1
	            }
	          }
	        ]
	      },
	      "useScaleOutExplode": {
	        "scope": "local",
	        "name": "useScaleOutExplode",
	        "action": true,
	        "category": "Exploder",
	        "parameters": [
	          {
	            "name": "Scale",
	            "type": "v3",
	            "description": "The scale to apply to the explosion",
	            "default": {
	              "x": 2,
	              "y": 2,
	              "z": 2
	            }
	          }
	        ]
	      },
	      "beginExplode": {
	        "scope": "other",
	        "name": "beginExplode",
	        "action": false,
	        "category": "Exploder",
	        "parameters": []
	      },
	      "endExplode": {
	        "scope": "other",
	        "name": "endExplode",
	        "action": false,
	        "category": "Exploder",
	        "parameters": []
	      },
	      "beginContract": {
	        "scope": "other",
	        "name": "beginContract",
	        "action": false,
	        "category": "Exploder",
	        "parameters": []
	      },
	      "endContract": {
	        "scope": "other",
	        "name": "endContract",
	        "action": false,
	        "category": "Exploder",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "object"
	    ],
	    "category": "Animation",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/Exploder"
	  }
	}, ComponentExploder);  Box3D.ScriptRegistry.registerScript({
	  "id": "free_camera_controller",
	  "name": "Free Camera Controller",
	  "properties": {
	    "attributes": {
	      "inertialDamping": {
	        "name": "inertialDamping",
	        "type": "f",
	        "default": 0.2,
	        "min": 0,
	        "max": 1
	      },
	      "usePointerLock": {
	        "name": "usePointerLock",
	        "type": "b",
	        "description": "",
	        "default": false
	      },
	      "invertX": {
	        "name": "invertX",
	        "type": "b",
	        "default": false
	      },
	      "invertY": {
	        "name": "invertY",
	        "type": "b",
	        "default": false
	      },
	      "invertZoom": {
	        "name": "invertZoom",
	        "type": "b",
	        "default": false
	      },
	      "lookSpeed": {
	        "name": "lookSpeed",
	        "type": "f",
	        "default": 1,
	        "min": 0.0001,
	        "max": 1000
	      },
	      "movementSpeed": {
	        "name": "movementSpeed",
	        "type": "f",
	        "default": 300,
	        "max": 1000,
	        "min": 0.01
	      },
	      "pitchAngleBounds": {
	        "name": "pitchAngleBounds",
	        "type": "v2",
	        "default": {
	          "max": 75,
	          "min": -75
	        },
	        "max": {
	          "max": 90,
	          "min": 90
	        },
	        "min": {
	          "max": -90,
	          "min": -90.01
	        }
	      },
	      "enablePan": {
	        "name": "enablePan",
	        "type": "b",
	        "default": true
	      },
	      "enableZoom": {
	        "name": "enableZoom",
	        "type": "b",
	        "default": true
	      }
	    },
	    "attributesOrder": [
	      "inertialDamping",
	      "usePointerLock",
	      "invertX",
	      "invertY",
	      "invertZoom",
	      "lookSpeed",
	      "movementSpeed",
	      "pitchAngleBounds",
	      "enablePan",
	      "enableZoom"
	    ],
	    "events": {
	      "enableFreeCameraController": {
	        "scope": "local",
	        "name": "enableFreeCameraController",
	        "parameters": []
	      },
	      "disableFreeCameraController": {
	        "scope": "local",
	        "name": "disableFreeCameraController",
	        "parameters": []
	      },
	      "toggleFreeCameraController": {
	        "scope": "local",
	        "name": "toggleFreeCameraController",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "camera"
	    ],
	    "category": "Camera-Controllers",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/FreeCamera"
	  }
	}, ComponentFreeCamera);  Box3D.ScriptRegistry.registerScript({
	  "id": "fullscreen_script",
	  "name": "Fullscreen",
	  "properties": {
	    "description": "ses fullscreen API to make your app fullscreen! This will fullscreen the canvas' parent element, so your UI can be fullscreened as well! If a selector is provided, then we will fullscreen that element instead.",
	    "attributes": {},
	    "attributesOrder": [],
	    "events": {
	      "toggleFullscreen": {
	        "scope": "local",
	        "name": "toggleFullscreen",
	        "action": true,
	        "category": "Rendering",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "application"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/Fullscreen"
	  }
	}, ComponentFullscreen);  Box3D.ScriptRegistry.registerScript({
	  "id": "hmd_renderer_script",
	  "name": "HMD Effect",
	  "properties": {
	    "description": "Enables a head-mounted display effect (e.g. for Oculus Rift) on this camera.",
	    "attributes": {},
	    "attributesOrder": [],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "camera"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/HMDEffect"
	  }
	}, ComponentHMDEffect);  Box3D.ScriptRegistry.registerScript({
	  "id": "input_controller_component",
	  "name": "Input Controller",
	  "properties": {
	    "attributes": {
	      "mouseEvents": {
	        "name": "mouseEvents",
	        "type": "custom",
	        "attributes": {
	          "enable": {
	            "type": "b",
	            "default": true,
	            "description": "Enable mouse events?"
	          },
	          "scroll": {
	            "type": "b",
	            "default": true,
	            "description": "Listen to scroll events?"
	          },
	          "scroll_preventDefault": {
	            "type": "b",
	            "default": false,
	            "description": "Prevent default scroll behaviour?"
	          },
	          "move": {
	            "type": "b",
	            "default": true,
	            "description": "Listen to mouse move events?"
	          },
	          "down": {
	            "type": "b",
	            "default": true,
	            "description": "Listen to mouse down event?"
	          },
	          "down_preventDefault": {
	            "type": "b",
	            "default": false,
	            "description": "Prevent default mouse down behaviour?"
	          },
	          "up": {
	            "type": "b",
	            "default": true,
	            "description": "Listen to mouse up event?"
	          },
	          "double_click": {
	            "type": "b",
	            "default": true,
	            "description": "Listen to double click event?"
	          },
	          "leave": {
	            "type": "b",
	            "default": true,
	            "description": "Listen to mouse leave event"
	          },
	          "contextMenu": {
	            "type": "b",
	            "default": true,
	            "description": "Listen for the context menu event? (ie, right click)"
	          },
	          "contextMenu_preventDefault": {
	            "type": "b",
	            "default": true,
	            "description": "Prevent context menu default behaviour (ie, the context menu popping open)"
	          },
	          "eventHandler": {
	            "type": "b",
	            "default": true,
	            "description": "Events fired from the mouse are picked up by the Event Handler"
	          }
	        }
	      },
	      "touchEvents": {
	        "name": "touchEvents",
	        "type": "custom",
	        "attributes": {
	          "enable": {
	            "type": "b",
	            "default": true,
	            "description": "Enable touch events?"
	          },
	          "start": {
	            "type": "b",
	            "default": true,
	            "description": "Listen for Touch Start"
	          },
	          "start_preventDefault": {
	            "type": "b",
	            "default": true,
	            "description": "Prevent default behaviour of touch start event"
	          },
	          "end": {
	            "type": "b",
	            "default": true,
	            "description": "Listen for touch end event"
	          },
	          "cancel": {
	            "type": "b",
	            "default": true,
	            "description": "Listen for touch cancel event"
	          },
	          "leave": {
	            "type": "b",
	            "default": true,
	            "description": "Listen for touch leave event"
	          },
	          "move": {
	            "type": "b",
	            "default": true,
	            "description": "Listen for touch move event"
	          },
	          "move_preventDefault": {
	            "type": "b",
	            "default": true,
	            "description": "Prevent default move behaviour (ie, dragging the window)"
	          },
	          "dragBufferDistance": {
	            "type": "f",
	            "default": 4,
	            "name": "Drag Buffer Distance",
	            "description": "The distance from initial touch down that you need to move your finger before a drag event is fired, in pixels"
	          },
	          "eventHandler": {
	            "type": "b",
	            "default": true,
	            "description": "Events fired from the touches are picked up by the Event Handler"
	          }
	        }
	      },
	      "keyEvents": {
	        "name": "keyEvents",
	        "type": "custom",
	        "attributes": {
	          "enable": {
	            "type": "b",
	            "default": true,
	            "description": "Enable keyboard events"
	          },
	          "down": {
	            "type": "b",
	            "default": true,
	            "description": "Listen to key down events"
	          },
	          "up": {
	            "type": "b",
	            "default": true,
	            "description": "Listen to key up events"
	          },
	          "preventDefault": {
	            "type": "b",
	            "default": false,
	            "description": "Prevent default keypress behaviour"
	          },
	          "eventHandler": {
	            "type": "b",
	            "default": true,
	            "description": "Events fired from the keys are picked up by the Event Handler"
	          }
	        }
	      },
	      "vrEvents": {
	        "name": "vrEvents",
	        "type": "custom",
	        "attributes": {
	          "enable": {
	            "type": "b",
	            "default": true,
	            "description": "Enable events from VR devices"
	          },
	          "position": {
	            "type": "b",
	            "default": true,
	            "description": "Enable events for sensor position changes (when available from device)"
	          },
	          "orientation": {
	            "type": "b",
	            "default": true,
	            "description": "Enable events for sensor orientation changes"
	          }
	        }
	      }
	    },
	    "attributesOrder": [
	      "mouseEvents",
	      "touchEvents",
	      "keyEvents",
	      "vrEvents"
	    ],
	    "events": {
	      "mouse_down_left": {
	        "scope": "global",
	        "name": "mouse_down_left",
	        "action": false,
	        "category": "Input - Mouse",
	        "parameters": []
	      },
	      "mouse_down_right": {
	        "scope": "global",
	        "name": "mouse_down_right",
	        "action": false,
	        "category": "Input - Mouse",
	        "parameters": []
	      },
	      "mouse_down_middle": {
	        "scope": "global",
	        "name": "mouse_down_middle",
	        "action": false,
	        "category": "Input - Mouse",
	        "parameters": []
	      },
	      "mouse_up_left": {
	        "scope": "global",
	        "name": "mouse_up_left",
	        "action": false,
	        "category": "Input - Mouse",
	        "parameters": []
	      },
	      "mouse_up_right": {
	        "scope": "global",
	        "name": "mouse_up_right",
	        "action": false,
	        "category": "Input - Mouse",
	        "parameters": []
	      },
	      "mouse_up_middle": {
	        "scope": "global",
	        "name": "mouse_up_middle",
	        "action": false,
	        "category": "Input - Mouse",
	        "parameters": []
	      },
	      "keypress_a": {
	        "scope": "global",
	        "name": "keypress_a",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_b": {
	        "scope": "global",
	        "name": "keypress_b",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_c": {
	        "scope": "global",
	        "name": "keypress_c",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_d": {
	        "scope": "global",
	        "name": "keypress_d",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_f": {
	        "scope": "global",
	        "name": "keypress_f",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_g": {
	        "scope": "global",
	        "name": "keypress_g",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_e": {
	        "scope": "global",
	        "name": "keypress_e",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_h": {
	        "scope": "global",
	        "name": "keypress_h",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_i": {
	        "scope": "global",
	        "name": "keypress_i",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_j": {
	        "scope": "global",
	        "name": "keypress_j",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_k": {
	        "scope": "global",
	        "name": "keypress_k",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_l": {
	        "scope": "global",
	        "name": "keypress_l",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_m": {
	        "scope": "global",
	        "name": "keypress_m",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_n": {
	        "scope": "global",
	        "name": "keypress_n",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_o": {
	        "scope": "global",
	        "name": "keypress_o",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_p": {
	        "scope": "global",
	        "name": "keypress_p",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_q": {
	        "scope": "global",
	        "name": "keypress_q",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_r": {
	        "scope": "global",
	        "name": "keypress_r",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_s": {
	        "scope": "global",
	        "name": "keypress_s",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_t": {
	        "scope": "global",
	        "name": "keypress_t",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_u": {
	        "scope": "global",
	        "name": "keypress_u",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_v": {
	        "scope": "global",
	        "name": "keypress_v",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_w": {
	        "scope": "global",
	        "name": "keypress_w",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_x": {
	        "scope": "global",
	        "name": "keypress_x",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_y": {
	        "scope": "global",
	        "name": "keypress_y",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_z": {
	        "scope": "global",
	        "name": "keypress_z",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_up_arrow": {
	        "scope": "global",
	        "name": "keypress_up_arrow",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_down_arrow": {
	        "scope": "global",
	        "name": "keypress_down_arrow",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_left_arrow": {
	        "scope": "global",
	        "name": "keypress_left_arrow",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_right_arrow": {
	        "scope": "global",
	        "name": "keypress_right_arrow",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "keypress_space": {
	        "scope": "global",
	        "name": "keypress_space",
	        "action": false,
	        "category": "Input - Keys",
	        "parameters": []
	      },
	      "touch_start": {
	        "scope": "global",
	        "name": "touch_start",
	        "action": false,
	        "category": "Input - Touch",
	        "parameters": []
	      },
	      "touch_end": {
	        "scope": "global",
	        "name": "touch_end",
	        "action": false,
	        "category": "Input - Touch",
	        "parameters": []
	      },
	      "vr_orientation": {
	        "scope": "global",
	        "name": "vr_orientation",
	        "action": false,
	        "category": "Input - VR",
	        "parameters": []
	      },
	      "vr_position": {
	        "scope": "global",
	        "name": "vr_position",
	        "action": false,
	        "category": "Input - VR",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "application"
	    ],
	    "category": "Input",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/InputController"
	  }
	}, ComponentInputController);  Box3D.ScriptRegistry.registerScript({
	  "id": "animation",
	  "name": "Keyframe Animation",
	  "properties": {
	    "attributes": {
	      "autoPlay": {
	        "name": "autoPlay",
	        "type": "b",
	        "description": "Play the animation once loaded",
	        "default": true
	      },
	      "loop": {
	        "name": "loop",
	        "type": "b",
	        "description": "Continuously replay the animation",
	        "default": true
	      },
	      "speed": {
	        "name": "speed",
	        "type": "f",
	        "description": "Playback speed",
	        "default": 1,
	        "min": 0,
	        "max": 100
	      },
	      "startTime": {
	        "name": "startTime",
	        "type": "f",
	        "description": "Begin playback at this time offset",
	        "default": 0,
	        "min": 0
	      },
	      "weight": {
	        "name": "weight",
	        "type": "f",
	        "description": "Blending weight",
	        "default": 1,
	        "min": 0,
	        "max": 1
	      },
	      "asset": {
	        "name": "asset",
	        "type": "asset",
	        "description": "Animation asset",
	        "default": null,
	        "filter": {
	          "animation": true
	        }
	      },
	      "take": {
	        "name": "take",
	        "type": "ddfn",
	        "description": "The name of the animation take",
	        "default": null,
	        "optionsFn": "getTakes"
	      }
	    },
	    "attributesOrder": [
	      "autoPlay",
	      "loop",
	      "speed",
	      "startTime",
	      "weight",
	      "asset",
	      "take"
	    ],
	    "events": {
	      "playKeyframeAnimation": {
	        "scope": "local",
	        "name": "playKeyframeAnimation",
	        "action": true,
	        "category": "Animation",
	        "parameters": [
	          {
	            "name": "asset",
	            "type": "asset",
	            "description": "The animation asset to play.",
	            "default": null,
	            "filter": {
	              "animation": true
	            }
	          },
	          {
	            "name": "take",
	            "type": "s",
	            "description": "The animation take to play.",
	            "default": null
	          },
	          {
	            "name": "loop",
	            "type": "b",
	            "description": "Continuously replay the animation.",
	            "default": true
	          },
	          {
	            "name": "speed",
	            "type": "f",
	            "description": "Playback speed.",
	            "default": 1,
	            "min": 0,
	            "max": 100
	          },
	          {
	            "name": "startTime",
	            "type": "f",
	            "description": "Begin playback at this time offset.",
	            "default": 0,
	            "min": 0
	          }
	        ]
	      },
	      "endKeyframeAnimation": {
	        "scope": "local",
	        "name": "endKeyframeAnimation",
	        "action": false,
	        "category": "Animation",
	        "parameters": []
	      },
	      "pauseKeyframeAnimation": {
	        "scope": "local",
	        "name": "pauseKeyframeAnimation",
	        "action": true,
	        "category": "Animation",
	        "parameters": []
	      },
	      "stopKeyframeAnimation": {
	        "scope": "local",
	        "name": "stopKeyframeAnimation",
	        "action": true,
	        "category": "Animation",
	        "parameters": []
	      },
	      "toggleKeyframeAnimation": {
	        "scope": "local",
	        "name": "toggleKeyframeAnimation",
	        "action": true,
	        "category": "Animation",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "object"
	    ],
	    "category": "Animation",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/KeyframeAnimation"
	  }
	}, ComponentKeyframeAnimation);  Box3D.ScriptRegistry.registerScript({
	  "id": "lookat_component",
	  "name": "Look At Target",
	  "properties": {
	    "description": "A component that automatically points the object at a target. This can be used for billboarding an object to the camera, making a character look at another, etc.",
	    "attributes": {
	      "target": {
	        "name": "target",
	        "type": "object",
	        "description": "The object that you want this object to point towards. e.g. for billboarding, this would be the camera used to render the scene."
	      },
	      "local": {
	        "name": "local",
	        "type": "b",
	        "description": "If toggled, whatever rotation you have already applied to this object will be taken into account.",
	        "default": false
	      },
	      "showPreview": {
	        "name": "showPreview",
	        "type": "b",
	        "description": "Run the lookAt in the editor.",
	        "default": true
	      }
	    },
	    "attributesOrder": [
	      "target",
	      "local",
	      "showPreview"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "Object"
	    ],
	    "category": "General",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/LookAtTarget"
	  }
	}, ComponentLookAtTarget);  Box3D.ScriptRegistry.registerScript({
	  "id": "normal_map_generator_component",
	  "name": "Normal Map Generator",
	  "properties": {
	    "attributes": {
	      "bumpTexture": {
	        "name": "bumpTexture",
	        "type": "asset",
	        "filter": {
	          "renderTexture2D": true,
	          "texture2D": true
	        }
	      },
	      "smoothness": {
	        "name": "smoothness",
	        "type": "f",
	        "slider": true,
	        "default": 0.25,
	        "min": 0.0001,
	        "max": 1
	      },
	      "spread": {
	        "name": "spread",
	        "type": "f",
	        "slider": true,
	        "default": 4,
	        "min": 1,
	        "max": 10
	      },
	      "autoLoad": {
	        "name": "autoLoad",
	        "type": "b",
	        "default": true
	      }
	    },
	    "attributesOrder": [
	      "bumpTexture",
	      "smoothness",
	      "spread",
	      "autoLoad"
	    ],
	    "events": {
	      "renderNormalMap": {
	        "scope": "local",
	        "name": "renderNormalMap",
	        "action": true,
	        "category": "Rendering",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "renderTexture2D"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/NormalMapGenerator"
	  }
	}, ComponentNormalMapGenerator);  Box3D.ScriptRegistry.registerScript({
	  "id": "object_animator_component",
	  "name": "Object Animator",
	  "properties": {
	    "attributes": {},
	    "attributesOrder": [],
	    "events": {
	      "playAnimateAlongCurve": {
	        "scope": "local",
	        "name": "playAnimateAlongCurve",
	        "action": true,
	        "category": "Animation",
	        "parameters": [
	          {
	            "name": "curve",
	            "type": "object",
	            "componentFilter": {
	              "Curve": true
	            }
	          },
	          {
	            "name": "animationTime",
	            "type": "f",
	            "description": "Time to animate to object. Defined in seconds",
	            "default": 3
	          },
	          {
	            "name": "easeIn",
	            "type": "f",
	            "description": "The percentage of animation time spent speeding up.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "easeOut",
	            "type": "f",
	            "description": "The percentage of animation time spent slowing down.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "orientation",
	            "description": "Orient the object following the curve to either the direction of the curve or to the objects defining the curve.",
	            "type": "opt",
	            "default": "toCurve",
	            "options": {
	              "None": "None",
	              "To Curve": "toCurve",
	              "To Nodes": "toNode"
	            }
	          },
	          {
	            "name": "loop",
	            "type": "b",
	            "description": "",
	            "default": false
	          }
	        ]
	      },
	      "playAnimateToObject": {
	        "scope": "local",
	        "name": "playAnimateToObject",
	        "action": true,
	        "category": "Animation",
	        "parameters": [
	          {
	            "name": "object",
	            "type": "object",
	            "default": null
	          },
	          {
	            "name": "animationTime",
	            "type": "f",
	            "description": "Total time that the animation will take. Defined in seconds",
	            "default": 3
	          },
	          {
	            "name": "easeIn",
	            "type": "f",
	            "description": "The percentage of animation time spent speeding up.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "easeOut",
	            "type": "f",
	            "description": "The percentage of animation time spent slowing down.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "update orientation",
	            "type": "b",
	            "default": true
	          }
	        ]
	      },
	      "playAnimateTranslation": {
	        "scope": "local",
	        "name": "playAnimateTranslation",
	        "action": true,
	        "category": "Animation",
	        "parameters": [
	          {
	            "name": "animationTime",
	            "type": "f",
	            "description": "Time to animate. Defined in seconds",
	            "default": 3
	          },
	          {
	            "name": "easeIn",
	            "type": "f",
	            "description": "The percentage of animation time spent speeding up.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "easeOut",
	            "type": "f",
	            "description": "The percentage of animation time spent slowing down.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "velocity",
	            "description": "",
	            "type": "v3",
	            "default": {
	              "x": 0,
	              "y": 0,
	              "z": 1
	            },
	            "min": -1,
	            "max": 1
	          },
	          {
	            "name": "objectUsage",
	            "type": "opt",
	            "description": "Specify what part of the animation the current object's position represents.",
	            "default": "beginning",
	            "options": {
	              "Beginning": "beginning",
	              "Middle": "middle",
	              "End": "end"
	            }
	          }
	        ]
	      },
	      "playAnimateRotation": {
	        "scope": "local",
	        "name": "playAnimateRotation",
	        "action": true,
	        "category": "Animation",
	        "parameters": [
	          {
	            "name": "animationTime",
	            "type": "f",
	            "description": "Time to animate to object. Defined in seconds",
	            "default": 3
	          },
	          {
	            "name": "easeIn",
	            "type": "f",
	            "description": "The percentage of animation time spent speeding up.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "easeOut",
	            "type": "f",
	            "description": "The percentage of animation time spent slowing down.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "angularVelocity",
	            "description": "",
	            "type": "v3",
	            "default": {
	              "x": 0,
	              "y": 0,
	              "z": 1
	            },
	            "min": -100,
	            "max": 100
	          },
	          {
	            "name": "objectUsage",
	            "type": "opt",
	            "description": "Specify what part of the animation the current object's rotation represents.",
	            "default": "beginning",
	            "options": {
	              "Beginning": "beginning",
	              "Middle": "middle",
	              "End": "end"
	            }
	          },
	          {
	            "name": "axisOrder",
	            "type": "opt",
	            "description": "Specify the axis order that the angular velocity will be applied in.",
	            "default": "YXZ",
	            "options": {
	              "XYZ": "XYZ",
	              "YXZ": "YXZ",
	              "ZXY": "ZXY",
	              "XZY": "XZY",
	              "YZX": "YZX",
	              "ZYX": "ZYX"
	            }
	          }
	        ]
	      },
	      "playAnimateScale": {
	        "scope": "local",
	        "name": "playAnimateScale",
	        "action": true,
	        "category": "Animation",
	        "parameters": [
	          {
	            "name": "animationTime",
	            "type": "f",
	            "description": "Time to animate to object. Defined in seconds",
	            "default": 3
	          },
	          {
	            "name": "easeIn",
	            "type": "f",
	            "description": "The percentage of animation time spent speeding up.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "easeOut",
	            "type": "f",
	            "description": "The percentage of animation time spent slowing down.",
	            "default": 0.25,
	            "min": 0,
	            "max": 1
	          },
	          {
	            "name": "velocity",
	            "description": "",
	            "type": "v3",
	            "default": {
	              "x": 0,
	              "y": 0,
	              "z": 1
	            },
	            "min": -10,
	            "max": 10
	          },
	          {
	            "name": "objectUsage",
	            "type": "opt",
	            "description": "Specify what part of the animation the current object's scale represents.",
	            "default": "beginning",
	            "options": {
	              "Beginning": "beginning",
	              "Middle": "middle",
	              "End": "end"
	            }
	          }
	        ]
	      },
	      "pauseCurveAnimation": {
	        "scope": "local",
	        "name": "pauseCurveAnimation",
	        "action": true,
	        "category": "Animation",
	        "parameters": []
	      },
	      "stopCurveAnimation": {
	        "scope": "local",
	        "name": "stopCurveAnimation",
	        "action": true,
	        "category": "Animation",
	        "parameters": []
	      },
	      "unpauseCurveAnimation": {
	        "scope": "local",
	        "name": "unpauseCurveAnimation",
	        "action": true,
	        "category": "Animation",
	        "parameters": []
	      },
	      "endAnimateAlongCurve": {
	        "scope": "local",
	        "name": "endAnimateAlongCurve",
	        "action": false,
	        "category": "Animation",
	        "parameters": []
	      },
	      "endAnimateToObject": {
	        "scope": "local",
	        "name": "endAnimateToObject",
	        "action": false,
	        "category": "Animation",
	        "parameters": []
	      },
	      "endAnimateTranslation": {
	        "scope": "lcoal",
	        "name": "endAnimateTranslation",
	        "action": false,
	        "category": "Animation",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "Object"
	    ],
	    "category": "Animation",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/ObjectAnimator"
	  }
	}, ComponentObjectAnimator);  Box3D.ScriptRegistry.registerScript({
	  "id": "object_picker",
	  "name": "Object Picker",
	  "properties": {
	    "attributes": {
	      "pickTrigger": {
	        "name": "pickTrigger",
	        "type": "dd",
	        "description": "What mouse action will trigger the pick?",
	        "default": "leftMouseClick",
	        "options": {
	          "Left Mouse Click": "leftMouseClick",
	          "Middle Mouse Click": "middleMouseClick",
	          "Right Mouse Click": "rightMouseClick",
	          "Left Mouse Down": "leftMouseDown",
	          "Middle Mouse Down": "middleMouseDown",
	          "Right Mouse Down": "rightMouseDown",
	          "Left Mouse Up": "leftMouseUp",
	          "Middle Mouse Up": "middleMouseUp",
	          "Right Mouse Up": "rightMouseUp"
	        }
	      },
	      "enableHoverByDefault": {
	        "name": "enableHoverByDefault",
	        "type": "b",
	        "default": false,
	        "advanced": true,
	        "description": "Enable hover detection when mouse cursor is over a mesh. Note that this has a potential performance impact."
	      },
	      "hoverFrameSkip": {
	        "name": "hoverFrameSkip",
	        "type": "i",
	        "description": "Skip this many frames inbetween hover checks.",
	        "default": 1,
	        "min": 0,
	        "max": 60
	      }
	    },
	    "attributesOrder": [
	      "pickTrigger",
	      "enableHoverByDefault",
	      "hoverFrameSkip"
	    ],
	    "events": {
	      "pick": {
	        "scope": "other",
	        "name": "pick",
	        "action": false,
	        "category": "General",
	        "parameters": []
	      },
	      "beginHover": {
	        "scope": "other",
	        "name": "beginHover",
	        "action": false,
	        "category": "General",
	        "parameters": []
	      },
	      "endHover": {
	        "scope": "other",
	        "name": "endHover",
	        "action": false,
	        "category": "General",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "Scene"
	    ],
	    "category": "General",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/ObjectPicker"
	  }
	}, ComponentObjectPicker);  Box3D.ScriptRegistry.registerScript({
	  "id": "orbit_camera_controller",
	  "name": "Orbit Camera Controller",
	  "properties": {
	    "description": "A controller that allows a camera to easily orbit a target object.",
	    "attributes": {
	      "targetObject": {
	        "name": "targetObject",
	        "type": "object",
	        "default": null,
	        "description": "The object that the camera orbit point will be relative to."
	      },
	      "targetOffset": {
	        "name": "targetOffset",
	        "type": "v3",
	        "default": {
	          "x": 0,
	          "y": 0,
	          "z": 0
	        },
	        "description": "An offset relative to the target object. This will allow you to target a specific point on an object."
	      },
	      "inertialDamping": {
	        "name": "inertialDamping",
	        "type": "f",
	        "default": 0.4,
	        "description": "How quickly the camera stops moving when input stops.",
	        "min": 0,
	        "max": 1
	      },
	      "invertX": {
	        "name": "invertX",
	        "type": "b",
	        "default": false,
	        "description": "Reverse the default direction that the camera moves horizontally."
	      },
	      "invertY": {
	        "name": "invertY",
	        "type": "b",
	        "default": false,
	        "description": "Reverse the default direction that the camera moves vertically."
	      },
	      "invertZoom": {
	        "name": "invertZoom",
	        "type": "b",
	        "default": false,
	        "description": "Reverse the default direction that the camera moves when zooming."
	      },
	      "lookSpeed": {
	        "name": "lookSpeed",
	        "type": "f",
	        "description": "The speed that the camera orbits the target",
	        "default": 1,
	        "max": 1000,
	        "min": 0.0001
	      },
	      "movementSpeed": {
	        "name": "movementSpeed",
	        "type": "f",
	        "description": "The speed that the camera moves when panning",
	        "default": 800,
	        "max": 20000,
	        "min": 0.1
	      },
	      "autoOrbit": {
	        "name": "autoOrbit",
	        "type": "b",
	        "default": false,
	        "description": "Automatically orbit the camera when the user is not controlling it."
	      },
	      "autoOrbitSpeed": {
	        "name": "autoOrbitSpeed",
	        "type": "f",
	        "description": "The speed of the automatic orbit.",
	        "default": 1,
	        "max": 1000,
	        "min": -1000
	      },
	      "autoOrbitDelay": {
	        "name": "autoOrbitDelay",
	        "type": "f",
	        "description": "The period of time with no mouse input before the auto-orbit starts (in seconds).",
	        "default": 1,
	        "max": 1000,
	        "min": 0.0001
	      },
	      "orbitDistanceMin": {
	        "name": "orbitDistanceMin",
	        "type": "f",
	        "description": "The closest that the camera is allowed to get to the target.",
	        "default": 10,
	        "max": 1000,
	        "min": 0.001
	      },
	      "orbitDistanceMax": {
	        "name": "orbitDistanceMax",
	        "type": "f",
	        "description": "The furthest that the camera is allowed to get from the target.",
	        "default": 500,
	        "max": 100000,
	        "min": 1
	      },
	      "pitchAngleBounds": {
	        "name": "pitchAngleBounds",
	        "type": "v2",
	        "description": "Allows you to set how far the camera can pitch (tilt) from horizontal. Defined in degrees with horizontal being 0.",
	        "default": {
	          "x": 75,
	          "y": -75
	        },
	        "max": {
	          "x": 90,
	          "y": 90
	        },
	        "min": {
	          "x": -90,
	          "y": -90.001
	        }
	      },
	      "enablePan": {
	        "name": "enablePan",
	        "type": "b",
	        "default": true,
	        "description": "Allow the user to pan side-to-side and up and down with the camera."
	      },
	      "enableZoom": {
	        "name": "enableZoom",
	        "type": "b",
	        "default": true,
	        "description": "Allow the user to zoom in and out with the camera."
	      },
	      "interpolation": {
	        "name": "interpolation",
	        "type": "b",
	        "default": true,
	        "description": "When enabled, the camera will smoothly interpolate toward its desired state. e.g. If something else moves the camera, interpolation will cause the camera to smoothly focus on the target again. Otherwise, it will snap back."
	      },
	      "interpSpeed": {
	        "name": "interpSpeed",
	        "type": "f",
	        "description": "The speed at which the orbiting camera locks on to its target, if set to point away from it.",
	        "default": 0.5,
	        "max": 10,
	        "min": 0.01
	      },
	      "usePointerLock": {
	        "name": "usePointerLock",
	        "type": "b",
	        "default": false,
	        "description": "The mouse cursor will be hidden during camera control and won't move. Requires the user to accept pointer lock message in web browser."
	      },
	      "useKeyboard": {
	        "name": "useKeyboard",
	        "type": "b",
	        "default": true,
	        "description": "Allow the camera to be controlled via keyboard input. This allows for movement with W,A,S,D/arrow keys as well as modifiers."
	      }
	    },
	    "attributesOrder": [
	      "targetObject",
	      "targetOffset",
	      "inertialDamping",
	      "invertX",
	      "invertY",
	      "invertZoom",
	      "lookSpeed",
	      "movementSpeed",
	      "autoOrbit",
	      "autoOrbitSpeed",
	      "autoOrbitDelay",
	      "orbitDistanceMin",
	      "orbitDistanceMax",
	      "pitchAngleBounds",
	      "enablePan",
	      "enableZoom",
	      "interpolation",
	      "interpSpeed",
	      "usePointerLock",
	      "useKeyboard"
	    ],
	    "events": {
	      "enableOrbitCameraController": {
	        "scope": "local",
	        "name": "enableOrbitCameraController",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": []
	      },
	      "disableOrbitCameraController": {
	        "scope": "local",
	        "name": "disableOrbitCameraController",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": []
	      },
	      "toggleOrbitCameraController": {
	        "scope": "local",
	        "name": "toggleOrbitCameraController",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": []
	      },
	      "setOrbitDistance": {
	        "scope": "local",
	        "name": "setOrbitDistance",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": [
	          {
	            "name": "newDistance",
	            "type": "f",
	            "description": "The new distance that the camera will orbit at.",
	            "default": 1
	          }
	        ]
	      },
	      "setTarget": {
	        "scope": "local",
	        "name": "setTarget",
	        "description": "Sets the camera to orbit the given object",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": [
	          {
	            "name": "newTarget",
	            "type": "object",
	            "description": "The new target that the camera will orbit.",
	            "default": null
	          },
	          {
	            "name": "center",
	            "type": "b",
	            "description": "Whether or not to target the center of the object. If false, the camera will orbit the origin of the object.",
	            "default": true
	          }
	        ]
	      },
	      "focusOnTarget": {
	        "scope": "local",
	        "name": "focusOnTarget",
	        "description": "Look at the center of the current target and zoom so that the object nicely fills the field of view.",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "camera"
	    ],
	    "category": "Camera Controllers",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/OrbitCameraController"
	  }
	}, ComponentOrbitCameraController);  Box3D.ScriptRegistry.registerScript({
	  "id": "panorama_to_cubemap_script",
	  "name": "Panorama To Cube Map",
	  "properties": {
	    "description": "A controller that allows a camera to easily orbit a target object.",
	    "attributes": {
	      "inputTexture": {
	        "name": "inputTexture",
	        "type": "asset",
	        "default": null,
	        "filter": {
	          "texture2D": true,
	          "renderTexture2D": true
	        },
	        "description": "The texture to convert to a cube map."
	      }
	    },
	    "attributesOrder": [
	      "inputTexture"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "renderTextureCube"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/PanoramaToCubeMap"
	  }
	}, ComponentPanoramaToCubeMap);  Box3D.ScriptRegistry.registerScript({
	  "id": "preview_axis_rotation",
	  "name": "Preview Axis Rotation",
	  "properties": {
	    "description": "Set the rotation of any axis.",
	    "attributes": {
	      "speed": {
	        "name": "speed",
	        "type": "f",
	        "description": "The speed that we rotate the object, if a transition is triggered",
	        "default": 0.4,
	        "max": 100,
	        "min": 0.1
	      }
	    },
	    "attributesOrder": [
	      "speed"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "object"
	    ],
	    "category": "User Defined",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/PreviewAxisRotation"
	  }
	}, ComponentPreviewAxisRotation);  Box3D.ScriptRegistry.registerScript({
	  "id": "preview_camera_controller",
	  "name": "Preview Camera Controller",
	  "properties": {
	    "description": "A controller that allows a camera to easily orbit a target object.",
	    "attributes": {
	      "targetObject": {
	        "name": "targetObject",
	        "type": "object",
	        "default": null,
	        "description": "The object that the camera orbit point will be relative to."
	      },
	      "targetOffset": {
	        "name": "targetOffset",
	        "type": "v3",
	        "default": {
	          "x": 0,
	          "y": 0,
	          "z": 0
	        },
	        "description": "An offset relative to the target object. This will allow you to target a specific point on an object."
	      },
	      "inertialDamping": {
	        "name": "inertialDamping",
	        "type": "f",
	        "default": 0.2,
	        "description": "How quickly the camera stops moving when input stops.",
	        "min": 0,
	        "max": 1
	      },
	      "invertX": {
	        "name": "invertX",
	        "type": "b",
	        "default": false,
	        "description": "Reverse the default direction that the camera moves horizontally."
	      },
	      "invertY": {
	        "name": "invertY",
	        "type": "b",
	        "default": false,
	        "description": "Reverse the default direction that the camera moves vertically."
	      },
	      "invertZoom": {
	        "name": "invertZoom",
	        "type": "b",
	        "default": false,
	        "description": "Reverse the default direction that the camera moves when zooming."
	      },
	      "lookSpeed": {
	        "name": "lookSpeed",
	        "type": "f",
	        "description": "The speed that the camera orbits the target",
	        "default": 1,
	        "max": 1000,
	        "min": 0.0001
	      },
	      "movementSpeed": {
	        "name": "movementSpeed",
	        "type": "f",
	        "description": "The speed that the camera moves when panning",
	        "default": 800,
	        "max": 20000,
	        "min": 0.1
	      },
	      "autoOrbit": {
	        "name": "autoOrbit",
	        "type": "b",
	        "default": false,
	        "description": "Automatically orbit the camera when the user is not controlling it."
	      },
	      "autoOrbitSpeed": {
	        "name": "autoOrbitSpeed",
	        "type": "f",
	        "description": "The speed of the automatic orbit.",
	        "default": 1,
	        "max": 1000,
	        "min": -1000
	      },
	      "autoOrbitDelay": {
	        "name": "autoOrbitDelay",
	        "type": "f",
	        "description": "The period of time with no mouse input before the auto-orbit starts (in seconds).",
	        "default": 1,
	        "max": 1000,
	        "min": 0.0001
	      },
	      "orbitDistanceMin": {
	        "name": "orbitDistanceMin",
	        "type": "f",
	        "description": "The closest that the camera is allowed to get to the target.",
	        "default": 10,
	        "max": 1000,
	        "min": 0.001
	      },
	      "orbitDistanceMax": {
	        "name": "orbitDistanceMax",
	        "type": "f",
	        "description": "The furthest that the camera is allowed to get from the target.",
	        "default": 500,
	        "max": 100000,
	        "min": 1
	      },
	      "pitchAngleBounds": {
	        "name": "pitchAngleBounds",
	        "type": "v2",
	        "description": "Allows you to set how far the camera can pitch (tilt) from horizontal. Defined in degrees with horizontal being 0.",
	        "default": {
	          "x": 75,
	          "y": -75
	        },
	        "max": {
	          "x": 90,
	          "y": 90
	        },
	        "min": {
	          "x": -90,
	          "y": -90.001
	        }
	      },
	      "enablePan": {
	        "name": "enablePan",
	        "type": "b",
	        "default": true,
	        "description": "Allow the user to pan side-to-side and up and down with the camera."
	      },
	      "enableZoom": {
	        "name": "enableZoom",
	        "type": "b",
	        "default": true,
	        "description": "Allow the user to zoom in and out with the camera."
	      },
	      "interpolation": {
	        "name": "interpolation",
	        "type": "b",
	        "default": true,
	        "description": "When enabled, the camera will smoothly interpolate toward its desired state. e.g. If something else moves the camera, interpolation will cause the camera to smoothly focus on the target again. Otherwise, it will snap back."
	      },
	      "interpSpeed": {
	        "name": "interpSpeed",
	        "type": "f",
	        "description": "The speed at which the orbiting camera locks on to its target, if set to point away from it.",
	        "default": 0.5,
	        "max": 10,
	        "min": 0.01
	      },
	      "usePointerLock": {
	        "name": "usePointerLock",
	        "type": "b",
	        "default": false,
	        "description": "The mouse cursor will be hidden during camera control and won't move. Requires the user to accept pointer lock message in web browser."
	      },
	      "useKeyboard": {
	        "name": "useKeyboard",
	        "type": "b",
	        "default": true,
	        "description": "Allow the camera to be controlled via keyboard input. This allows for movement with W,A,S,D/arrow keys as well as modifiers."
	      }
	    },
	    "attributesOrder": [
	      "targetObject",
	      "targetOffset",
	      "inertialDamping",
	      "invertX",
	      "invertY",
	      "invertZoom",
	      "lookSpeed",
	      "movementSpeed",
	      "autoOrbit",
	      "autoOrbitSpeed",
	      "autoOrbitDelay",
	      "orbitDistanceMin",
	      "orbitDistanceMax",
	      "pitchAngleBounds",
	      "enablePan",
	      "enableZoom",
	      "interpolation",
	      "interpSpeed",
	      "usePointerLock",
	      "useKeyboard"
	    ],
	    "events": {
	      "enableOrbitCameraController": {
	        "scope": "local",
	        "name": "enableOrbitCameraController",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": []
	      },
	      "disableOrbitCameraController": {
	        "scope": "local",
	        "name": "disableOrbitCameraController",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": []
	      },
	      "toggleOrbitCameraController": {
	        "scope": "local",
	        "name": "toggleOrbitCameraController",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": []
	      },
	      "resetOrbitCameraController": {
	        "scope": "local",
	        "name": "resetOrbitCameraController",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": []
	      },
	      "setOrbitDistance": {
	        "scope": "local",
	        "name": "setOrbitDistance",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": [
	          {
	            "name": "newDistance",
	            "type": "f",
	            "description": "The new distance that the camera will orbit at.",
	            "default": 1
	          }
	        ]
	      },
	      "setTarget": {
	        "scope": "local",
	        "name": "setTarget",
	        "description": "Sets the camera to orbit the given object",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": [
	          {
	            "name": "newTarget",
	            "type": "object",
	            "description": "The new target that the camera will orbit.",
	            "default": null
	          },
	          {
	            "name": "center",
	            "type": "b",
	            "description": "Whether or not to target the center of the object. If false, the camera will orbit the origin of the object.",
	            "default": true
	          }
	        ]
	      },
	      "focusOnTarget": {
	        "scope": "local",
	        "name": "focusOnTarget",
	        "description": "Look at the center of the current target and zoom so that the object nicely fills the field of view.",
	        "action": true,
	        "category": "Orbit Camera",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "camera"
	    ],
	    "category": "Camera Controllers",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/PreviewCameraController"
	  }
	}, ComponentPreviewCameraController);  Box3D.ScriptRegistry.registerScript({
	  "id": "preview_camera_focus",
	  "name": "Preview Camera Focus",
	  "properties": {
	    "description": "A controller that allows a camera to easily orbit a target object.",
	    "attributes": {
	      "speed": {
	        "name": "speed",
	        "type": "f",
	        "description": "The speed that we move to focus on the target",
	        "default": 0.8,
	        "max": 100,
	        "min": 0.1
	      }
	    },
	    "attributesOrder": [
	      "speed"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "camera"
	    ],
	    "category": "Camera Controllers",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/PreviewCameraFocus"
	  }
	}, ComponentPreviewCameraFocus);  Box3D.ScriptRegistry.registerScript({
	  "id": "preview_vr_controls",
	  "name": "Preview VR Controls",
	  "properties": {
	    "description": "A controller for the preview camera when using a VR device.",
	    "attributes": {
	      "cameraControllerName": {
	        "name": "cameraControllerName",
	        "type": "s",
	        "default": "Preview Camera Controller",
	        "description": "The name of the camera controller component that this component will override."
	      }
	    },
	    "attributesOrder": [
	      "cameraControllerName"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "camera"
	    ],
	    "category": "Camera Controllers",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/PreviewVRControls"
	  }
	}, ComponentPreviewVRControls);  Box3D.ScriptRegistry.registerScript({
	  "id": "reflection_capture_planar",
	  "name": "Reflection Capture Plane",
	  "properties": {
	    "attributes": {
	      "reflectionTexture": {
	        "name": "reflectionTexture",
	        "type": "asset",
	        "description": "The RenderTexture2D to render the reflection to.",
	        "filter": {
	          "renderTexture2D": true
	        }
	      },
	      "clipBias": {
	        "name": "clipBias",
	        "type": "f",
	        "description": "Pushes the rendered scene forward or backwards to adjust clipping with reflection plane.",
	        "default": 0.01
	      },
	      "updateFrameInterval": {
	        "name": "updateFrameInterval",
	        "type": "i",
	        "description": "The number of frames to skip in between updates of the reflection. Default is 0.",
	        "default": 0
	      }
	    },
	    "attributesOrder": [
	      "reflectionTexture",
	      "clipBias",
	      "updateFrameInterval"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "Object"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/ReflectionCapturePlane"
	  }
	}, ComponentReflectionCapturePlane);  Box3D.ScriptRegistry.registerScript({
	  "id": "camera_filters_script",
	  "name": "Render Filters",
	  "properties": {
	    "description": "Overrides the filter settings that cameras will use when rendering.",
	    "attributes": {
	      "bloom": {
	        "name": "bloom",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "override": {
	            "type": "b",
	            "default": false,
	            "description": "Override the default behaviour of this filter."
	          },
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "strength": {
	            "type": "f",
	            "default": 1,
	            "min": 0.1,
	            "max": 4,
	            "step": 0.001
	          },
	          "sigma": {
	            "type": "f",
	            "default": 4,
	            "min": 1,
	            "max": 8,
	            "step": 0.001,
	            "advanced": true
	          },
	          "resolution": {
	            "type": "i",
	            "default": 256,
	            "min": 64,
	            "max": 1024,
	            "step": 1,
	            "advanced": true
	          }
	        }
	      },
	      "toneMapping": {
	        "name": "toneMapping",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "override": {
	            "type": "b",
	            "default": false,
	            "description": "Override the default behaviour of this filter."
	          },
	          "adaptive": {
	            "type": "b",
	            "description": "Automatically adjusts the tone-mapping every frame based on the average luminance of the scene.",
	            "default": true
	          },
	          "adaptSpeed": {
	            "type": "f",
	            "description": "The speed at which adaptive tone-mapping works. Higher number is faster.",
	            "default": 0.5,
	            "min": 0.1,
	            "max": 20
	          },
	          "exposureBias": {
	            "type": "f",
	            "description": "Adjusts the overall brightness of the image. Use this to tweak the final result of tone-mapping.",
	            "default": 1,
	            "min": 0.0001,
	            "max": 5
	          },
	          "maxLuminance": {
	            "type": "f",
	            "description": "Sets the maximum brightness reached before pixels become white after tone-mapping.",
	            "default": 16,
	            "min": 0.01,
	            "max": 25
	          },
	          "luminance": {
	            "type": "f",
	            "description": "When the \"Adaptive\" feature is turned off, this will set the scene luminance to be used by tone-mapping.",
	            "default": 1,
	            "min": 0.0001,
	            "max": 16
	          }
	        }
	      },
	      "fxaa": {
	        "name": "fxaa",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "override": {
	            "type": "b",
	            "default": false,
	            "description": "Override the default behaviour of this filter."
	          },
	          "enabled": {
	            "type": "b",
	            "default": false
	          }
	        }
	      },
	      "vignette": {
	        "name": "vignette",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "override": {
	            "type": "b",
	            "default": false,
	            "description": "Override the default behaviour of this filter."
	          },
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "offset": {
	            "type": "f",
	            "default": 1,
	            "min": 0,
	            "max": 1,
	            "step": 0.001
	          },
	          "darkness": {
	            "type": "f",
	            "default": 1,
	            "min": 0,
	            "max": 5,
	            "step": 0.001
	          }
	        }
	      },
	      "ssao": {
	        "name": "ssao",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "override": {
	            "type": "b",
	            "default": false,
	            "description": "Override the default behaviour of this filter."
	          },
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "fogEnabled": {
	            "type": "i",
	            "default": 1,
	            "advanced": true
	          },
	          "depthScale": {
	            "type": "f",
	            "default": 2000,
	            "min": 100,
	            "max": 50000,
	            "step": 0.001,
	            "advanced": true
	          },
	          "onlyAO": {
	            "type": "i",
	            "default": 0
	          },
	          "aoClamp": {
	            "type": "f",
	            "default": 0.75,
	            "advanced": true
	          },
	          "lumInfluence": {
	            "type": "f",
	            "default": 0.75,
	            "advanced": true
	          },
	          "noiseAmount": {
	            "type": "f",
	            "default": 0.0002
	          },
	          "radius": {
	            "type": "f",
	            "default": 16
	          },
	          "diffArea": {
	            "type": "f",
	            "default": 0.4,
	            "advanced": true
	          },
	          "gDisplace": {
	            "type": "f",
	            "default": 0.4,
	            "advanced": true
	          }
	        }
	      },
	      "dof": {
	        "name": "dof",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "override": {
	            "type": "b",
	            "default": false,
	            "description": "Override the default behaviour of this filter."
	          },
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "aspect": {
	            "type": "f",
	            "default": 1,
	            "min": 0,
	            "max": 1,
	            "step": 0.001,
	            "advanced": true
	          },
	          "aperture": {
	            "type": "f",
	            "default": 0.4,
	            "min": 0,
	            "max": 1,
	            "step": 0.001
	          },
	          "focus": {
	            "type": "f",
	            "default": 0.98,
	            "min": 0,
	            "max": 1,
	            "step": 0.001
	          }
	        }
	      },
	      "sepia": {
	        "name": "sepia",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "override": {
	            "type": "b",
	            "default": false,
	            "description": "Override the default behaviour of this filter."
	          },
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "amount": {
	            "type": "f",
	            "default": 0.9,
	            "min": 0,
	            "max": 1,
	            "step": 0.001
	          }
	        }
	      },
	      "video": {
	        "name": "video",
	        "type": "custom",
	        "description": "",
	        "attributes": {
	          "override": {
	            "type": "b",
	            "default": false,
	            "description": "Override the default behaviour of this filter."
	          },
	          "enabled": {
	            "type": "b",
	            "default": false
	          },
	          "nIntensity": {
	            "type": "f",
	            "default": 0.15
	          },
	          "sIntensity": {
	            "type": "f",
	            "default": 0.05
	          },
	          "sCount": {
	            "type": "f",
	            "default": 512
	          },
	          "grayscale": {
	            "type": "b",
	            "default": false
	          }
	        }
	      }
	    },
	    "attributesOrder": [
	      "bloom",
	      "toneMapping",
	      "fxaa",
	      "vignette",
	      "ssao",
	      "dof",
	      "sepia",
	      "video"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "object"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/RenderFilters"
	  }
	}, ComponentRenderFilters);  Box3D.ScriptRegistry.registerScript({
	  "id": "render_modes",
	  "name": "Render Modes",
	  "properties": {
	    "attributes": {},
	    "attributesOrder": [],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "Application"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/RenderModes"
	  }
	}, ComponentRenderModes);  Box3D.ScriptRegistry.registerScript({
	  "id": "render_view_component",
	  "name": "Render View",
	  "properties": {
	    "attributes": {
	      "viewportLeft": {
	        "name": "viewportLeft",
	        "type": "s",
	        "description": "Left position of the viewport to be rendered by this camera.",
	        "default": "0px"
	      },
	      "viewportBottom": {
	        "name": "viewportBottom",
	        "type": "s",
	        "description": "Bottom position of the viewport to be rendered by this camera.",
	        "default": "0px"
	      },
	      "viewportWidth": {
	        "name": "viewportWidth",
	        "type": "s",
	        "description": "Width of the viewport to be rendered by this camera.",
	        "default": "100%"
	      },
	      "viewportHeight": {
	        "name": "viewportHeight",
	        "type": "s",
	        "description": "Height of the viewport to be rendered by this camera.",
	        "default": "100%"
	      },
	      "renderGroup": {
	        "name": "renderGroup",
	        "type": "i",
	        "description": "Render passes are done in order, based on the 'render group' value. Lower numbers render first.",
	        "default": 0
	      },
	      "clearColor": {
	        "name": "clearColor",
	        "type": "b",
	        "description": "",
	        "default": false,
	        "advanced": false
	      },
	      "clearDepth": {
	        "name": "clearDepth",
	        "type": "b",
	        "description": "",
	        "default": true,
	        "advanced": false
	      },
	      "renderTarget": {
	        "name": "renderTarget",
	        "type": "asset",
	        "description": "",
	        "filter": {
	          "renderTexture2D": true
	        },
	        "default": null,
	        "advanced": false
	      },
	      "enablePreRenderFunctions": {
	        "name": "enablePreRenderFunctions",
	        "type": "b",
	        "description": "Run pre-render functions with this view. These include things like real-time reflections, which need to be rendered for each view separately.",
	        "default": true,
	        "advanced": true
	      },
	      "enableShadows": {
	        "name": "enableShadows",
	        "type": "b",
	        "description": "Render shadows for this view.",
	        "default": true,
	        "advanced": true
	      }
	    },
	    "attributesOrder": [
	      "viewportLeft",
	      "viewportBottom",
	      "viewportWidth",
	      "viewportHeight",
	      "renderGroup",
	      "clearColor",
	      "clearDepth",
	      "renderTarget",
	      "enablePreRenderFunctions",
	      "enableShadows"
	    ],
	    "events": {
	      "enableRenderView": {
	        "scope": "local",
	        "name": "enableRenderView",
	        "category": "Rendering",
	        "parameters": [
	          {
	            "name": "fade",
	            "type": "f",
	            "description": "Defined in seconds",
	            "default": 0
	          }
	        ]
	      },
	      "setViewport": {
	        "scope": "local",
	        "name": "setViewport",
	        "category": "Rendering",
	        "parameters": [
	          {
	            "name": "viewportLeft",
	            "description": "Left position of the viewport to be rendered by this camera.",
	            "type": "s",
	            "default": "0px"
	          },
	          {
	            "name": "viewportBottom",
	            "description": "Bottom position of the viewport to be rendered by this camera.",
	            "type": "s",
	            "default": "0px"
	          },
	          {
	            "name": "viewportWidth",
	            "description": "Width of the viewport to be rendered by this camera.",
	            "type": "s",
	            "default": "100%"
	          },
	          {
	            "name": "viewportHeight",
	            "description": "Height of the viewport to be rendered by this camera.",
	            "type": "s",
	            "default": "100%"
	          },
	          {
	            "name": "animationTime",
	            "type": "f",
	            "description": "Animate the change in viewport over this many seconds.",
	            "default": 0
	          }
	        ]
	      },
	      "disableRenderView": {
	        "scope": "local",
	        "name": "disableRenderView",
	        "category": "Rendering",
	        "parameters": [
	          {
	            "name": "fade",
	            "type": "f",
	            "description": "Defined in seconds",
	            "default": 0
	          }
	        ]
	      },
	      "toggleRenderView": {
	        "scope": "local",
	        "name": "toggleRenderView",
	        "category": "Rendering",
	        "parameters": [
	          {
	            "name": "fade",
	            "type": "f",
	            "description": "Defined in seconds",
	            "default": 0
	          }
	        ]
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "camera"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/RenderView"
	  }
	}, ComponentRenderView);  Box3D.ScriptRegistry.registerScript({
	  "id": "box3d_renderer",
	  "name": "Renderer",
	  "properties": {
	    "attributes": {
	      "renderOnDemand": {
	        "name": "renderOnDemand",
	        "type": "b",
	        "description": "When this is enabled, rendering will only happen when requested instead of every frame.",
	        "defualt": true
	      },
	      "antialias": {
	        "name": "antialias",
	        "type": "b",
	        "description": "Enable or disable antialiasing of the rendered scene.",
	        "default": true
	      },
	      "preserveDrawingBuffer": {
	        "name": "preserveDrawingBuffer",
	        "type": "b",
	        "description": "Tells the browser to preserve drawing buffers between frames so that they are available to be read by the application.",
	        "default": true
	      },
	      "autoClear": {
	        "name": "autoClear",
	        "type": "b",
	        "description": "Automatically clear the render target before each render.",
	        "default": false
	      },
	      "devicePixelRatio": {
	        "name": "devicePixelRatio",
	        "type": "dd",
	        "default": 0,
	        "options": {
	          "Device Default": 0,
	          "One": 1,
	          "Two": 2
	        },
	        "description": "Override the default pixel ratio of the system. Higher values will cause rendering at higher resolution while lower values will force rendering at lower resolutions. You can also set this to use the device default (mobile devices usually have values greater than 1)."
	      },
	      "clearColor": {
	        "name": "clearColor",
	        "type": "c",
	        "description": "When the render target is cleared, this colour will be used",
	        "default": {
	          "r": 0,
	          "g": 0,
	          "b": 0
	        }
	      },
	      "clearAlpha": {
	        "name": "clearAlpha",
	        "type": "f",
	        "description": "When the render target is cleared, this value will be used to clear the transparency",
	        "default": 0,
	        "min": 0,
	        "max": 1,
	        "step": 0.001
	      },
	      "precision": {
	        "name": "precision",
	        "type": "dd",
	        "description": "The default floating point and integer precision to be used by the GPU.",
	        "default": "mediump",
	        "options": {
	          "Low": "lowp",
	          "Medium": "mediump",
	          "High": "highp"
	        }
	      },
	      "shadowsEnabled": {
	        "name": "shadowsEnabled",
	        "type": "b",
	        "description": "Enable or disable rendering of shadows.",
	        "default": true
	      },
	      "shadowsEnabledMobile": {
	        "name": "shadowsEnabledMobile",
	        "type": "b",
	        "description": "Enable or disable rendering of shadows on mobile devices.",
	        "default": false
	      },
	      "shadowType": {
	        "name": "shadowType",
	        "type": "dd",
	        "options": {
	          "Soft PCF": 2,
	          "PCF": 1,
	          "No Filtering": 0
	        },
	        "default": 2
	      },
	      "shadowCullFace": {
	        "name": "shadowCullFace",
	        "type": "dd",
	        "description": "Shadows will or will not automatically be updated every frame.",
	        "options": {
	          "None": 0,
	          "Front": 2,
	          "Back": 1
	        },
	        "default": 2
	      },
	      "shadowDebug": {
	        "name": "shadowDebug",
	        "type": "b",
	        "description": "Enable or disable debug rendering, showing the different shadow cascade sizes.",
	        "default": false
	      },
	      "logarithmicDepthBuffer": {
	        "name": "logarithmicDepthBuffer",
	        "type": "b",
	        "description": "Use logarithmic z values while rendering.",
	        "default": false
	      }
	    },
	    "attributesOrder": [
	      "renderOnDemand",
	      "antialias",
	      "preserveDrawingBuffer",
	      "autoClear",
	      "devicePixelRatio",
	      "clearColor",
	      "clearAlpha",
	      "precision",
	      "shadowsEnabled",
	      "shadowsEnabledMobile",
	      "shadowType",
	      "shadowCullFace",
	      "shadowDebug",
	      "logarithmicDepthBuffer"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "application"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/Renderer"
	  }
	}, ComponentRenderer);  Box3D.ScriptRegistry.registerScript({
	  "id": "rotate_component",
	  "name": "Rotate",
	  "properties": {
	    "description": "A simple component to rotate an object.",
	    "attributes": {
	      "autoRotate": {
	        "name": "autoRotate",
	        "type": "b",
	        "description": "Automatically start the rotation upon load.",
	        "default": true
	      },
	      "previewRotation": {
	        "name": "previewRotation",
	        "type": "b",
	        "description": "Show the rotation in the editor.",
	        "default": true
	      },
	      "rotation": {
	        "name": "rotation",
	        "type": "v3",
	        "description": "Amount of rotation per second about the x, y and z axes.",
	        "default": {
	          "x": 0,
	          "y": 0.5,
	          "z": 0
	        }
	      },
	      "local": {
	        "name": "local",
	        "type": "b",
	        "description": "Rotate relative to the local quaternion of the object. If false, the rotation will be relative to the world.",
	        "default": false
	      }
	    },
	    "attributesOrder": [
	      "autoRotate",
	      "previewRotation",
	      "rotation",
	      "local"
	    ],
	    "events": {
	      "startRotate": {
	        "scope": "local",
	        "name": "startRotate",
	        "action": true,
	        "category": "Rotate",
	        "parameters": []
	      },
	      "stopRotate": {
	        "scope": "local",
	        "name": "stopRotate",
	        "action": true,
	        "category": "Rotate",
	        "parameters": []
	      },
	      "toggleRotate": {
	        "scope": "local",
	        "name": "toggleRotate",
	        "action": true,
	        "category": "Rotate",
	        "parameters": []
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "object"
	    ],
	    "category": "Animation",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/Rotate"
	  }
	}, ComponentRotate);  Box3D.ScriptRegistry.registerScript({
	  "id": "loader_component",
	  "name": "Scene Loader",
	  "properties": {
	    "description": "A simple component to load a scene and display progress for it.",
	    "attributes": {
	      "scene": {
	        "name": "scene",
	        "type": "asset",
	        "description": "The scene to load.",
	        "filter": {
	          "scene": true
	        }
	      }
	    },
	    "attributesOrder": [
	      "scene"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "Application"
	    ],
	    "category": "Loading",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/SceneLoader"
	  }
	}, ComponentSceneLoader);  Box3D.ScriptRegistry.registerScript({
	  "id": "simplex_noise_component",
	  "name": "Simplex Noise Generator",
	  "properties": {
	    "attributes": {
	      "layerAmplitude": {
	        "name": "layerAmplitude",
	        "type": "v4",
	        "default": {
	          "x": 0.5,
	          "y": 0.4,
	          "z": 0.3,
	          "w": 0.125
	        }
	      },
	      "layerScale": {
	        "name": "layerScale",
	        "type": "v4",
	        "default": {
	          "x": 0.5,
	          "y": 2,
	          "z": 3,
	          "w": 4
	        }
	      },
	      "scale": {
	        "name": "scale",
	        "type": "v2",
	        "default": {
	          "x": 1,
	          "y": 1
	        }
	      },
	      "offset": {
	        "name": "offset",
	        "type": "v2",
	        "default": {
	          "x": 0,
	          "y": 0
	        }
	      },
	      "autoLoad": {
	        "name": "autoLoad",
	        "type": "b",
	        "default": true
	      }
	    },
	    "attributesOrder": [
	      "layerAmplitude",
	      "layerScale",
	      "scale",
	      "offset",
	      "autoLoad"
	    ],
	    "events": {
	      "renderNoise": {
	        "scope": "local",
	        "name": "renderNoise",
	        "action": true,
	        "category": "Rendering",
	        "parameters": []
	      },
	      "changeNoiseValues": {
	        "scope": "local",
	        "name": "changeNoiseValues",
	        "action": true,
	        "category": "Rendering",
	        "parameters": [
	          {
	            "name": "layerAmplitude",
	            "type": "v4",
	            "description": "",
	            "default": {
	              "x": 0.5,
	              "y": 0.4,
	              "z": 0.3,
	              "w": 0.125
	            }
	          },
	          {
	            "name": "layerScale",
	            "type": "v4",
	            "description": "",
	            "default": {
	              "x": 0.5,
	              "y": 2,
	              "z": 3,
	              "w": 4
	            }
	          },
	          {
	            "name": "scale",
	            "type": "v2",
	            "description": "",
	            "default": {
	              "x": 1,
	              "y": 1
	            }
	          },
	          {
	            "name": "offset",
	            "type": "v2",
	            "description": "",
	            "default": {
	              "x": 0,
	              "y": 0
	            }
	          }
	        ]
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "renderTexture2D"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/SimplexNoiseGenerator"
	  }
	}, ComponentSimplexNoiseGenerator);  Box3D.ScriptRegistry.registerScript({
	  "id": "skybox_renderer",
	  "name": "Skybox",
	  "properties": {
	    "attributes": {
	      "size": {
	        "name": "size",
	        "type": "f",
	        "default": 100000,
	        "min": 1,
	        "max": 1000000
	      },
	      "leftEye": {
	        "name": "leftEye",
	        "type": "b",
	        "default": true
	      },
	      "skyboxTexture": {
	        "name": "skyboxTexture",
	        "type": "asset",
	        "description": "",
	        "filter": {
	          "textureCube": true,
	          "texture2D": true,
	          "renderTexture2D": true,
	          "renderTextureCube": true
	        },
	        "default": "white_cube"
	      },
	      "skyboxFogPower": {
	        "name": "skyboxFogPower",
	        "type": "f",
	        "description": "Controls the rate that fog decreases with height in the skybox.",
	        "default": 0.8,
	        "min": 0,
	        "max": 1
	      },
	      "skyboxFogScale": {
	        "name": "skyboxFogScale",
	        "type": "f",
	        "description": "Uniformly scales the amount of fog in the skybox.",
	        "default": 0.5,
	        "min": 0,
	        "max": 1
	      }
	    },
	    "attributesOrder": [
	      "size",
	      "leftEye",
	      "skyboxTexture",
	      "skyboxFogPower",
	      "skyboxFogScale"
	    ],
	    "events": {
	      "setSkyboxTexture": {
	        "scope": "local",
	        "name": "setSkyboxTexture",
	        "action": true,
	        "parameters": [
	          {
	            "name": "texture",
	            "type": "asset",
	            "filter": {
	              "textureCube": true,
	              "texture2D": true,
	              "renderTexture2D": true,
	              "renderTextureCube": true
	            },
	            "description": "The new skybox texture to use.",
	            "default": null
	          }
	        ]
	      }
	    },
	    "externalDependencies": [],
	    "filter": [
	      "scene"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/Skybox"
	  }
	}, ComponentSkybox);  Box3D.ScriptRegistry.registerScript({
	  "id": "text_renderer_component",
	  "name": "Text Renderer",
	  "properties": {
	    "description": "Render the desired text to the texture we are attached to",
	    "attributes": {
	      "text": {
	        "name": "text",
	        "type": "s",
	        "default": "My Text",
	        "description": "Text you want to display"
	      },
	      "fontColor": {
	        "name": "fontColor",
	        "type": "c",
	        "default": {
	          "r": 1,
	          "g": 1,
	          "b": 1
	        },
	        "description": "Color of the text"
	      },
	      "fontFamily": {
	        "name": "fontFamily",
	        "type": "s",
	        "default": "Calibri",
	        "description": "Font family to render"
	      },
	      "pointSize": {
	        "name": "pointSize",
	        "type": "i",
	        "default": 48,
	        "description": "Font size",
	        "min": 2,
	        "max": 100
	      }
	    },
	    "attributesOrder": [
	      "text",
	      "fontColor",
	      "fontFamily",
	      "pointSize"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "renderTexture2D"
	    ],
	    "category": "Text",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/TextRenderer"
	  }
	}, ComponentTextRenderer);  Box3D.ScriptRegistry.registerScript({
	  "id": "texture2d_to_cubemap_script",
	  "name": "Texture To Cube Map",
	  "properties": {
	    "description": "A controller that allows a camera to easily orbit a target object.",
	    "attributes": {
	      "inputTexture": {
	        "name": "inputTexture",
	        "type": "asset",
	        "default": null,
	        "filter": {
	          "texture2D": true,
	          "renderTexture2D": true
	        },
	        "description": "The texture to convert to a cube map."
	      }
	    },
	    "attributesOrder": [
	      "inputTexture"
	    ],
	    "events": {},
	    "externalDependencies": [],
	    "filter": [
	      "renderTextureCube"
	    ],
	    "category": "Rendering",
	    "parsedComments": true,
	    "flags": {
	      "addremove": true,
	      "disable": true,
	      "persist": true,
	      "unique": false,
	      "display": true
	    },
	    "path": "Box3DRuntime/Components/BuiltIn/Texture2dToCubeMap"
	  }
	}, ComponentTexture2dToCubeMap); 
	}
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid object_picker
	 * @vname Object Picker
	 * @vfilter Scene
	 * @vcategory General
	 * @vattr Dropdown pickTrigger {
	 *   description: 'What mouse action will trigger the pick?',
	 *   default: 'leftMouseClick',
	 *   options: {
	 *     'Left Mouse Click': 'leftMouseClick',
	 *     'Middle Mouse Click': 'middleMouseClick',
	 *     'Right Mouse Click': 'rightMouseClick',
	 *     'Left Mouse Down': 'leftMouseDown',
	 *     'Middle Mouse Down': 'middleMouseDown',
	 *     'Right Mouse Down': 'rightMouseDown',
	 *     'Left Mouse Up': 'leftMouseUp',
	 *     'Middle Mouse Up': 'middleMouseUp',
	 *     'Right Mouse Up': 'rightMouseUp'
	 *   }
	 * }
	 * @vattr Boolean enableHoverByDefault {
	 *   default: false,
	 *   advanced: true,
	 *   description: 'Enable hover detection when mouse cursor is over a mesh. Note that this has a potential performance impact.'
	 * }
	 * @vattr Integer hoverFrameSkip {
	 *   description: 'Skip this many frames inbetween hover checks.',
	 *   default: 1,
	 *   min: 0,
	 *   max: 60
	 * }
	 * @vevent other pick { action: false, category: 'General', parameters: [] }
	 * @vevent other beginHover { action: false, category: 'General', parameters: [] }
	 * @vevent other endHover { action: false, category: 'General', parameters: []}
	 */
	/* eslint-enable */
	/* global Box3D */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ObjectPicker = function (_Box3DComponent) {
	  _inherits(ObjectPicker, _Box3DComponent);

	  function ObjectPicker() {
	    _classCallCheck(this, ObjectPicker);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ObjectPicker).call(this));

	    _this.pickingMaterialDef = undefined;
	    _this.meshRegistry = {};
	    _this.meshList = [];
	    _this.pickingTexture = undefined;
	    _this.currentHoverObject = undefined;
	    _this.currentFrame = 0;

	    _this.enableHoverByDefault = false;
	    _this.pickTrigger = null;
	    _this.hoverEnabled = false;
	    return _this;
	  }

	  _createClass(ObjectPicker, [{
	    key: 'awake',
	    value: function awake() {
	      this.getRuntime().once('endHover:bound', this._enableHover, this);
	      this.getRuntime().once('beginHover:bound', this._enableHover, this);
	    }
	    /**
	     * Called immediately after after component creation
	     */

	  }, {
	    key: 'init',
	    value: function init() {
	      // this.box3DEntity is available
	      this.getRuntime().on('resize', this.resize, this);

	      this.initPickingEvents();
	      this.initPickingMaterial();
	      this.initMeshRegistry();

	      //listen to register objects
	      this.getGlobalEvents().on('registerPickingObject', this.registerObject, this);
	      this.getGlobalEvents().on('unregisterPickingObject', this.unregisterObject, this);

	      this.resize();
	    }

	    /**
	     * Called when a verold object is destroyed or this component is removed
	     * from a verold object.
	     */

	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      // make sure to clean up any events or other bindings that you have created
	      // to avoid memory leaks
	      this.uninitPickingEvents();

	      this.getRuntime().off('resize', this.resize, this);
	      this.getGlobalEvents().off('registerPickingObject', this.registerObject, this);
	      this.getGlobalEvents().off('unregisterPickingObject', this.unregisterObject, this);

	      var parentAsset = this.getEntity().getParentAsset();
	      parentAsset.off('meshLoaded', this.registerMesh, this);
	      parentAsset.off('meshUnloaded', this.unregisterMesh, this);
	      if (this.pickingTexture) {
	        this.pickingTexture.dispose();
	        this.pickingTexture = undefined;
	      }
	      for (var x in this.meshRegistry) {
	        if (this.meshRegistry[x].pickingMaterial) {
	          this.meshRegistry[x].pickingMaterial.dispose();
	        }
	      }
	      this.meshRegistry = {};
	      this.meshList = [];
	    }
	  }, {
	    key: 'initPickingEvents',
	    value: function initPickingEvents() {
	      if (this.pickTrigger.substr(-2) === 'Up') {
	        if (Box3D.isMobile()) {
	          this.getRuntime().on('touchEnd', this.touchPick, this);
	        } else {
	          this.getRuntime().on('mouseUp', this.pick, this);
	        }
	      } else if (this.pickTrigger.substr(-4) === 'Down') {
	        if (Box3D.isMobile()) {
	          this.getRuntime().on('touchStart', this.touchPick, this);
	        } else {
	          this.getRuntime().on('mouseDown', this.pick, this);
	        }
	      } else if (this.pickTrigger.substr(-5) === 'Click') {
	        if (Box3D.isMobile()) {
	          this.getRuntime().on('touchEnd', this.touchPickNoDrag, this);
	        } else {
	          this.getRuntime().on('mouseUp', this.pickNoDrag, this);
	        }
	      }

	      if (this.enableHoverByDefault && !Box3D.isMobile()) {
	        this._enableHover();
	      }
	    }
	  }, {
	    key: 'uninitPickingEvents',
	    value: function uninitPickingEvents() {
	      if (this.pickTrigger.substr(-2) === 'Up') {
	        if (Box3D.isMobile()) {
	          this.getRuntime().off('touchEnd', this.touchPick, this);
	        } else {
	          this.getRuntime().off('mouseUp', this.pick, this);
	        }
	      } else {
	        if (Box3D.isMobile()) {
	          this.getRuntime().off('touchStart', this.touchPick, this);
	        } else {
	          this.getRuntime().off('mouseDown', this.pick, this);
	        }
	      }

	      if (this.enableHoverByDefault && !Box3D.isMobile()) {
	        this.getRuntime().off('postRender', this.hoverUpdate, this);
	      }
	    }
	  }, {
	    key: 'initPickingMaterial',
	    value: function initPickingMaterial() {
	      this.pickingMaterialDef = {

	        depthTest: true,
	        depthWrite: true,
	        transparent: false,
	        side: _three2.default.DoubleSide,

	        uniforms: {
	          color: {
	            type: 'c',
	            value: 0xff0000
	          }
	        },

	        vertexShader: [_three2.default.ShaderChunk['skinning_pars_vertex'], _three2.default.ShaderChunk['logdepthbuf_pars_vertex'], 'void main() {', _three2.default.ShaderChunk['skinbase_vertex'], _three2.default.ShaderChunk['skinnormal_vertex'], _three2.default.ShaderChunk['defaultnormal_vertex'], _three2.default.ShaderChunk['skinning_vertex'], _three2.default.ShaderChunk['project_vertex'], _three2.default.ShaderChunk['logdepthbuf_vertex'], '}'].join('\n'),

	        fragmentShader: ['uniform vec3 color;', _three2.default.ShaderChunk['logdepthbuf_pars_fragment'], 'void main() {', _three2.default.ShaderChunk['logdepthbuf_fragment'], 'gl_FragColor = vec4( color, 1.0 );', '}'].join('\n')

	      };
	    }
	  }, {
	    key: 'initMeshRegistry',
	    value: function initMeshRegistry() {
	      var parentAsset = this.getEntity().getParentAsset();
	      parentAsset.on('meshLoaded', this.registerMesh, this);
	      parentAsset.on('meshUnloaded', this.unregisterMesh, this);

	      var that = this;
	      parentAsset.traverse(function (obj) {
	        if (obj.type === 'mesh' || obj.type === 'skinnedMesh') {
	          that.registerMesh(obj);
	        }
	      });
	    }
	  }, {
	    key: '_enableHover',
	    value: function _enableHover() {
	      if (!this.hoverEnabled && !Box3D.isMobile()) {
	        this.getRuntime().on('postRender', this.hoverUpdate, this);
	        this.hoverEnabled = true;
	      }
	    }

	    /**
	    * reset the size of the texture used to test against geometry picking parameters
	    * @method resize
	    */

	  }, {
	    key: 'resize',
	    value: function resize() {
	      var oldPickingTexture = this.pickingTexture;
	      var width = this.getRenderer().getWidth();
	      var height = this.getRenderer().getHeight();
	      this.pickingTexture = new _three2.default.WebGLRenderTarget(Math.floor(width / 4.0), Math.floor(height / 4.0), {
	        minFilter: _three2.default.LinearFilter
	      });
	      this.pickingTexture.texture.generateMipmaps = false;
	      if (oldPickingTexture) {
	        oldPickingTexture.dispose();
	      }
	    }
	  }, {
	    key: 'registerObject',
	    value: function registerObject(box3DObject, runtimeData) {

	      if (!this.meshRegistry[runtimeData.id]) {
	        this.meshRegistry[runtimeData.id] = {
	          box3DEntity: box3DObject,
	          runtimeData: runtimeData,
	          prevMaterial: null,
	          pickingMaterial: new _three2.default.ShaderMaterial(this.pickingMaterialDef)
	        };
	        //Array for fast iteration
	        this.meshList.push(this.meshRegistry[runtimeData.id]);
	        this.meshRegistry[runtimeData.id].index = this.meshList.length - 1;
	        var material = this.meshRegistry[runtimeData.id].pickingMaterial;
	        material.uniforms = _three2.default.UniformsUtils.clone(this.pickingMaterialDef.uniforms);
	        material.uniforms.color.value = new _three2.default.Color(runtimeData.id);

	        if (runtimeData instanceof _three2.default.SkinnedMesh) {
	          material.skinning = true;
	        }
	      }
	    }
	  }, {
	    key: 'unregisterObject',
	    value: function unregisterObject(box3DObject, runtimeData) {
	      if (runtimeData) {
	        //remove the enitity data from the pick history, if it's there
	        this.removeFromHistory(runtimeData.id);
	        //The meshUnloaded event should fire just before the runtimeData is deleted.
	        if (this.meshRegistry[runtimeData.id]) {
	          this.meshRegistry[runtimeData.id].box3DEntity = null;
	          this.meshRegistry[runtimeData.id].pickingMaterial.dispose();
	          this.meshList.splice(this.meshRegistry[runtimeData.id].index, 1);
	          delete this.meshRegistry[runtimeData.id];
	        }
	      }
	    }
	  }, {
	    key: 'registerMesh',
	    value: function registerMesh(veroldMesh) {
	      //When the THREE.Mesh is created, register it so that it can be selected.
	      veroldMesh.when('loadBase', function (mesh) {
	        this.registerObject(mesh, mesh.runtimeData);
	      }, this);
	    }
	  }, {
	    key: 'unregisterMesh',
	    value: function unregisterMesh(veroldMesh) {
	      if (veroldMesh) {
	        this.unregisterObject(veroldMesh.runtimeData);
	      }
	    }
	  }, {
	    key: 'getThreeObjects',
	    value: function getThreeObjects(objects) {
	      var sceneObjects = [];
	      _lodash2.default.each(objects, function (object) {
	        if (object && object.runtimeData) {
	          sceneObjects.push(object.runtimeData);
	        }
	      });

	      return sceneObjects;
	    }
	  }, {
	    key: 'touchPickNoDrag',
	    value: function touchPickNoDrag(event, callback) {
	      //Check drag state
	      if (!this.getInput().touchDragStatePrevious) {
	        this.touchPick(event, callback);
	      }
	    }
	  }, {
	    key: 'touchPick',
	    value: function touchPick(event, callback) {

	      if (!this.isEnabled()) {
	        return;
	      }

	      // if ( this.getInput().touchPosition.x ) {
	      var x = this.getInput().touchPosition.x;
	      var y = this.getInput().touchPosition.y;

	      var mesh = this.pickMesh(x, y);
	      if (mesh) {

	        mesh.trigger('pick');
	        var parent = mesh.getParentObject();
	        while (parent) {
	          parent.trigger('pick');
	          parent = parent.getParentObject();
	        }
	        if (_lodash2.default.isFunction(callback)) {
	          callback(mesh);
	        }
	      }
	    }
	  }, {
	    key: 'pickNoDrag',
	    value: function pickNoDrag(event, callback) {
	      //Check drag state
	      if (!this.getInput().mouseDragStatePrevious[event.button]) {
	        this.pick(event, callback);
	      }
	    }
	  }, {
	    key: 'pick',
	    value: function pick(event, callback) {
	      if (!this.isEnabled()) {
	        return;
	      }
	      if (this.pickTrigger.substr(0, 4) === 'left') {
	        if (event.button !== 0) {
	          return;
	        }
	      } else if (this.pickTrigger.substr(0, 4) === 'right') {
	        if (event.button !== 2) {
	          return;
	        }
	      } else if (event.button !== 1) {
	        return;
	      }
	      var x = event.clientX;
	      var y = event.clientY;
	      var mesh = this.pickMesh(x, y);
	      if (mesh) {
	        mesh.trigger('pick');
	        var parent = mesh.getParentObject();
	        while (parent) {
	          parent.trigger('pick');
	          parent = parent.getParentObject();
	        }
	        if (_lodash2.default.isFunction(callback)) {
	          callback(mesh);
	        }
	      }
	    }
	  }, {
	    key: 'hoverUpdate',
	    value: function hoverUpdate() {
	      if (!this.isEnabled()) {
	        return;
	      }
	      if (this.currentFrame < this.hoverFrameSkip) {
	        this.currentFrame++;
	        return;
	      }
	      this.currentFrame = 0;
	      var x = this.getInput().mousePosition.x;
	      var y = this.getInput().mousePosition.y;
	      var parent;
	      var mesh = this.pickMesh(x, y);
	      if (mesh !== this.currentHoverObject) {
	        if (this.currentHoverObject) {

	          this.currentHoverObject.trigger('endHover');
	          parent = this.currentHoverObject.getParentObject();
	          while (parent) {
	            parent.trigger('endHover');
	            parent = parent.getParentObject();
	          }
	        }
	        if (mesh) {
	          this.currentHoverObject = mesh;

	          mesh.trigger('beginHover');
	          parent = mesh.getParentObject();
	          while (parent) {
	            parent.trigger('beginHover');
	            parent = parent.getParentObject();
	          }
	        } else {
	          this.currentHoverObject = null;
	        }
	      }
	    }
	  }, {
	    key: 'pickMesh',
	    value: function pickMesh(x, y) {

	      var that = this;
	      var scenes = this.getRuntime().assetRegistry.getAssetsByType('scene');
	      var i;
	      var pickedMesh = null;
	      _lodash2.default.each(scenes, function (scene) {
	        var cameras = scene.getObjectsByType('camera');

	        var renderViews = [];
	        _lodash2.default.each(cameras, function (camera) {
	          var renderViewComponents = camera.getByScriptId('render_view_component');
	          _lodash2.default.each(renderViewComponents, function (renderViewComponent) {
	            if (renderViewComponent.isEnabled()) {
	              if (renderViews.length > 0) {
	                for (i = 0; i < renderViews.length; i++) {
	                  var renderView = renderViews[i];
	                  if (renderViewComponent.renderGroup >= renderView.renderGroup) {
	                    renderViews.splice(i, 0, renderViewComponent);
	                    break;
	                  }
	                }
	              } else {
	                renderViews.push(renderViewComponent);
	              }
	            }
	          });
	        }, this);

	        for (i = 0; i < renderViews.length; i++) {
	          var renderView = renderViews[i];
	          var canvas_height = that.getRenderer().getHeight();
	          var viewport_offset = canvas_height - renderView._height - renderView._y;
	          //Get the percentage x,y positions of the mouse on the viewport
	          var mouseX = (x - renderView._x) / renderView._width;
	          var mouseY = (y - viewport_offset) / renderView._height;

	          // pickedMesh = this.doRaycastPick( scene, renderView.box3DEntity, mouseX, mouseY );
	          pickedMesh = this.doGPUPick(scene, renderView.box3DEntity, mouseX, mouseY);
	          if (pickedMesh) {
	            return;
	          }
	        }
	      }, this);

	      return pickedMesh;
	    }
	  }, {
	    key: 'doRaycastPick',
	    value: function doRaycastPick(scene, camera, mouseX, mouseY) {
	      var x = mouseX * 2 - 1;
	      var y = -mouseY * 2 + 1;

	      var vector = new _three2.default.Vector3(x, y, 0.5);

	      vector.unproject(camera.runtimeData);

	      var raycaster = new _three2.default.Raycaster(camera.runtimeData.position, vector.sub(camera.runtimeData.position).normalize());

	      var sceneObjects = this.getThreeObjects(scene.getObjects());
	      var intersections = raycaster.intersectObjects(sceneObjects, false);

	      if (intersections.length > 0) {
	        for (var i = 0; i < intersections.length; i++) {
	          var parent = intersections[i].object.parent;
	          var entityId = intersections[i].object.box3DEntityId;
	          var isVisible = true;
	          if (!intersections[i].object.visible) {
	            isVisible = false;
	            continue;
	          }
	          while (parent) {

	            if (!parent.visible) {
	              isVisible = false;
	              break;
	            }

	            parent = parent.parent;
	          }

	          if (isVisible) {
	            return this.getRuntime().getEntityById(entityId);
	          }
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'doGPUPick',
	    value: function doGPUPick(scene, camera, mouseX, mouseY) {

	      if (mouseX < 0.0 || mouseY < 0.0 || mouseX > 1.0 || mouseY > 1.0) {
	        return null;
	      }

	      var i = 0;
	      var material;
	      for (i = 0; i < this.meshList.length; i++) {
	        if (this.meshList[i].runtimeData) {
	          material = this.meshList[i].runtimeData.material;
	          this.meshList[i].prevMaterial = material;
	          this.meshList[i].runtimeData.material = this.meshList[i].pickingMaterial;
	        }
	      }
	      var renderer = this.getThreeRenderer();
	      var currentShadowMapEnabled = renderer.shadowMap.enabled;
	      renderer.shadowMap.enabled = false;
	      // renderer.enableScissorTest( true );
	      renderer.setViewport(0, 0, this.pickingTexture.width, this.pickingTexture.height);
	      //render the picking scene off-screen
	      var gl = renderer.getContext();
	      renderer.render(scene.runtimeData, camera.runtimeData, this.pickingTexture, true);

	      //Return materials to their previous state
	      for (i = 0; i < this.meshList.length; i++) {
	        if (this.meshList[i].runtimeData) {
	          this.meshList[i].runtimeData.material = this.meshList[i].prevMaterial;
	        }
	      }

	      var pixelBuffer = new Uint8Array(4);
	      //read the pixel under the mouse from the texture
	      gl.readPixels(mouseX * this.pickingTexture.width, this.pickingTexture.height * (1.0 - mouseY), 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixelBuffer);

	      //interpret the pixel as an ID
	      var id = pixelBuffer[0] << 16 | pixelBuffer[1] << 8 | pixelBuffer[2];

	      renderer.shadowMap.enabled = currentShadowMapEnabled;
	      renderer.setRenderTarget(null);

	      if (this.meshRegistry[id]) {
	        var entityId = this.meshRegistry[id].box3DEntity.id;
	        return this.getRuntime().getEntityById(entityId);
	      }
	      return null;
	    }
	  }]);

	  return ObjectPicker;
	}(_Box3DComponent3.default);

	exports.default = ObjectPicker;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _RuntimeEvents2 = __webpack_require__(4);

	var _RuntimeEvents3 = _interopRequireDefault(_RuntimeEvents2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Registry which manages all prefab assets
	 * @class PrefabRegistry
	 * @param {Object} [properties] Prefab registry properties
	 * @constructor
	 */

	var Box3DComponent = function (_RuntimeEvents) {
	  _inherits(Box3DComponent, _RuntimeEvents);

	  function Box3DComponent() {
	    _classCallCheck(this, Box3DComponent);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Box3DComponent).call(this));

	    _this.inputController = null;
	    return _this;
	  }

	  /**
	   * Get the unique key of this component
	   * @method getId
	   * @return {String} the key for this component
	   */

	  _createClass(Box3DComponent, [{
	    key: 'getId',
	    value: function getId() {
	      return this.__box3d__.id;
	    }

	    /**
	     * Get the script asset for this component
	     * @method getScriptAsset
	     * @return {Box3D.ScriptAsset} the script asset
	     */

	  }, {
	    key: 'getScriptAsset',
	    value: function getScriptAsset() {
	      return this.getAssetRegistry().getAssetById(this.getScriptId());
	    }

	    /**
	     * Get the script name of this component
	     * @method getScriptName
	     * @return {String} the script name
	     */

	  }, {
	    key: 'getScriptName',
	    value: function getScriptName() {
	      var script = this.getScriptAsset();
	      return script.getName();
	    }

	    /**
	     * Get the script id of this component
	     * @method getScriptId
	     * @return {String} the script id
	     */

	  }, {
	    key: 'getScriptId',
	    value: function getScriptId() {
	      return this.__box3d__.scriptId;
	    }

	    /**
	     * Return the complete set of attribute values for this component, including inherited values
	     * (from a prefab) and default values, if not overridden.
	     * @method getAttributes
	     * @public
	     * @return {Object} All attribute values.
	     */

	  }, {
	    key: 'getAttributes',
	    value: function getAttributes() {
	      var returnObj = {};
	      // Get default data
	      var defaults = this.getDefaultAttributes();
	      _lodash2.default.extend(returnObj, defaults);
	      var prefabObj = this.getEntity().getPrefabObject();
	      if (prefabObj) {
	        var prefComp = prefabObj.componentRegistry.getById(this.getId());
	        if (prefComp) {
	          var prefabComponentData = prefComp.getAttributes();
	          _lodash2.default.extend(returnObj, _lodash2.default.cloneDeep(prefabComponentData));
	        }
	      }
	      var compDesc = this.getEntity().componentRegistry.getDescriptorById(this.getId());
	      _lodash2.default.extend(returnObj, _lodash2.default.cloneDeep(compDesc.componentData));

	      // TODO - PREFABS - re-enable this functionality when putting prefab logic back in.
	      // this._linkupComponentReferences(returnObj);
	      return returnObj;
	    }

	    /**
	     * Return the complete set of previous attribute values for this component, including
	     * inherited values (from a prefab) and default values, if not overridden.
	     * @method getPreviousAttributes
	     * @public
	     * @return {Object} All previous attribute values.
	     */

	  }, {
	    key: 'getPreviousAttributes',
	    value: function getPreviousAttributes() {
	      var returnObj = {};
	      // Get default data
	      var defaults = this.getDefaultAttributes();
	      _lodash2.default.extend(returnObj, defaults);
	      var prefabObj = this.getEntity().getPrefabObject();
	      if (prefabObj) {
	        var prefComp = prefabObj.componentRegistry.getById(this.getId());
	        if (prefComp) {
	          var prefabComponentData = prefComp.getPreviousAttributes();
	          _lodash2.default.extend(returnObj, _lodash2.default.cloneDeep(prefabComponentData));
	        }
	      }
	      var compDesc = this.getEntity().componentRegistry.getPreviousDescriptorById(this.getId());
	      if (compDesc) {
	        _lodash2.default.extend(returnObj, _lodash2.default.cloneDeep(compDesc.componentData));
	      }
	      // TODO - PREFABS - re-enable this functionality when putting prefab logic back in.
	      // this._linkupComponentReferences(returnObj);
	      return returnObj;
	    }

	    /**
	     * Set the specified attribute to the specified value. This works across engine instances.
	     * @method getDefaultAttributes
	     * @public
	     * @param  {String} attrib  The attribute name
	     * @param {Mixed} value   The new value of the attribute.
	     */

	  }, {
	    key: 'getDefaultAttributes',
	    value: function getDefaultAttributes() {
	      var scriptAsset = this.getAssetRegistry().getAssetById(this.getScriptId());
	      var scriptAttributes = scriptAsset.getProperty('attributes') || {};
	      var returnVal = {};
	      Object.keys(scriptAttributes).forEach(function (name) {
	        var attr = scriptAttributes[name];
	        if (attr.hasOwnProperty('default')) {
	          returnVal[name] = attr.default;
	        } else if (attr.type === 'custom') {
	          returnVal[name] = {};
	          Object.keys(attr.attributes).forEach(function (subName) {
	            returnVal[name][subName] = attr.attributes[subName].default;
	          });
	        }
	      });
	      return returnVal;
	    }

	    /**
	     * Set the specified attribute to the specified value. This works across engine instances.
	     * @method setAttribute
	     * @public
	     * @param  {String} attrib  The attribute name
	     * @param {Mixed} value   The new value of the attribute.
	     */

	  }, {
	    key: 'setAttribute',
	    value: function setAttribute(attrib, value) {
	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      if (this.getEntity() && _lodash2.default.isString(attrib)) {
	        var componentJson = this.getEntity().sharedData.components[this.getId()];
	        var changedComponent = {};
	        var entityDispatcher = this.getRuntime().entityDispatcher;

	        changedComponent[this.getId()] = componentJson;
	        if (!componentJson.componentData) {
	          componentJson.componentData = {};
	        }
	        componentJson.componentData[attrib] = value;
	        // Dispatch events for changes
	        if (!options.silent) {
	          entityDispatcher.dispatchComponentsChanged(this.box3DEntity, changedComponent);
	        }
	      }
	    }

	    /**
	     * Get the value of the specified attribute. Note that if the attribute has been
	     * directly changed on this instance of the component, the returned value will give
	     * you the saved value (i.e. the same value that a 'resetAttribute' call would yield)
	     * @method getAttribute
	     * @public
	     * @param  {String} attrib  The attribute name
	     * @return {Mixed}        The saved attribute value.
	     */

	  }, {
	    key: 'getAttribute',
	    value: function getAttribute(attrib) {
	      if (this.box3DEntity && _lodash2.default.isString(attrib)) {
	        var compData = this.getAttributes();
	        return compData[attrib];
	      }
	    }

	    /**
	     * Get the previous value of the specified attribute.
	     * @method getPreviousAttribute
	     * @public
	     * @param  {String} attrib  The attribute name
	     * @return {Mixed}        The previous attribute value.
	     */

	  }, {
	    key: 'getPreviousAttribute',
	    value: function getPreviousAttribute(attrib) {
	      if (this.box3DEntity && _lodash2.default.isString(attrib)) {
	        var compData = this.getPreviousAttributes();
	        return compData[attrib];
	      }
	    }

	    /**
	     * Reset the specified attribute to the saved value.
	     * @param  {String} attrib  The attribute name
	     */

	  }, {
	    key: 'resetAttribute',
	    value: function resetAttribute(attrib) {
	      if (this.box3DEntity && _lodash2.default.isString(attrib)) {
	        var value = this.getAttribute(attrib);
	        this.setAttribute(attrib, value);
	      }
	    }

	    /**
	     * Returns the Box3DEntity that the component is attached to
	     * @method getEntity
	     * @return {Box3D.Box3DEntity} the Box3DEntity which this component is attached to
	     */

	  }, {
	    key: 'getEntity',
	    value: function getEntity() {
	      return this.box3DEntity;
	    }
	  }, {
	    key: 'getObject',
	    value: function getObject() {
	      _log2.default.warn('Box3DComponent.getObject() is deprecated. Please use Box3DComponent.getEntity().');
	      return this.box3DEntity;
	    }

	    /**
	     * Get the component manager for this Box3DEntity
	     * @method getComponentRegistry
	     * @return {Box3D.ComponentRegistry} This Box3DEntity's component manager
	     */

	  }, {
	    key: 'getComponentRegistry',
	    value: function getComponentRegistry() {
	      return this.box3DEntity.componentRegistry;
	    }

	    /**
	     * Removes this component from the attached Box3DEntity
	     * @method remove
	     */

	  }, {
	    key: 'remove',
	    value: function remove() {
	      this.getComponentRegistry().remove(this);
	    }

	    /**
	     * Returns the Box3DRuntime that thecomponent is running in
	     * @method getRuntime
	     * @return {Box3D.Engine} the Engine object
	     */

	  }, {
	    key: 'getRuntime',
	    value: function getRuntime() {
	      return this.box3DEntity.box3DRuntime;
	    }

	    /**
	     * Enables the component
	     * @method enable
	     */

	  }, {
	    key: 'enable',
	    value: function enable() {
	      if (!this.__box3d__.enabled) {
	        this.__box3d__.enabled = true;
	        this.trigger('enable');
	      }
	    }

	    /**
	     * Disables the component
	     * @method disable
	     */

	  }, {
	    key: 'disable',
	    value: function disable() {
	      if (this.__box3d__.enabled) {
	        this.__box3d__.enabled = false;
	        this.trigger('disable');
	      }
	    }

	    /**
	     * Register a dependent asset on the entity that owns this component.
	     * This will include the dependency in the loading progress of the parent
	     * asset of this component.
	     * @method registerDependency
	     * @param  {Box3D.Box3DAsset} asset A dependent asset of this component.
	     * @return {void}
	     */

	  }, {
	    key: 'registerDependency',
	    value: function registerDependency(asset) {
	      this.getEntity().registerDependency(asset);
	    }

	    /**
	     * Unregister a dependent asset on the entity that owns this component.
	     * This will exclude the dependency in the loading progress of the parent
	     * asset of this component.
	     * @method unregisterDependency
	     * @param  {Box3D.Box3DAsset} asset A dependent asset of this component.
	     * @return {void}
	     */

	  }, {
	    key: 'unregisterDependency',
	    value: function unregisterDependency(asset) {
	      this.getEntity().unregisterDependency(asset);
	    }

	    /**
	     * Check whether the component is enabled or not
	     * @method isEnabled
	     * @return {Boolean}
	     */

	  }, {
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.__box3d__.enabled;
	    }

	    /**
	     * Check if runtimeData exists
	     * @method hasThreeData
	     * @return {Boolean} Whether or not the runtimeData object exists
	     */

	  }, {
	    key: 'hasThreeData',
	    value: function hasThreeData() {
	      return !!(this.box3DEntity && this.box3DEntity.runtimeData);
	    }

	    /**
	     * Returns the three.js data attached to the object
	     * @method getRuntimeData
	     * @return {mixed}
	     */

	  }, {
	    key: 'getRuntimeData',
	    value: function getRuntimeData() {
	      return this.box3DEntity.runtimeData;
	    }

	    /**
	     * Returns the global event system
	     * @method getGlobalEvents
	     * @return {RuntimeEvents} the global RuntimeEvents instance
	     */

	  }, {
	    key: 'getGlobalEvents',
	    value: function getGlobalEvents() {
	      return this.box3DEntity.box3DRuntime.globalEvents;
	    }

	    /**
	     * Returns the Box3D rendering component currently being used by the Box3D engine
	     * @method getRenderer
	     * @return {Object} the Renderer component
	     */

	  }, {
	    key: 'getRenderer',
	    value: function getRenderer() {
	      return this.getRuntime().getRenderer();
	    }

	    /**
	     * Returns the WebGLRenderer currently being used by the Box3D engine
	     * @method getThreeRenderer
	     * @return {THREE.WebGLRenderer} the THREE.WebGLRenderer object
	     */

	  }, {
	    key: 'getThreeRenderer',
	    value: function getThreeRenderer() {
	      var threeRenderer = this.getRuntime().getRenderer().threeRenderer;

	      return threeRenderer;
	    }

	    /**
	     * Returns the Input handler being used by the object's engine
	     * @method getInput
	     * @return {Box3D.Input} [description]
	     */

	  }, {
	    key: 'getInput',
	    value: function getInput() {
	      if (!this.input) {
	        var compRegistry = this.getRuntime().getApplication().componentRegistry;
	        this.input = compRegistry.getFirstByScriptName('Input Controller');
	      }
	      return this.input;
	    }

	    /**
	     * Returns the scene that this component is a part of
	     * @method getScene
	     * @return {Box3D.SceneAsset} the SceneAsset object
	     */

	  }, {
	    key: 'getScene',
	    value: function getScene() {
	      return this.box3DEntity.getParentAsset();
	    }

	    /**
	     * Returns the THREE.Scene object that this entity is a part of.
	     * @method getThreeScene
	     * @return {THREE.Scene} the THREE.Scene object
	     */

	  }, {
	    key: 'getThreeScene',
	    value: function getThreeScene() {
	      return this.box3DEntity.getParentAsset().runtimeData;
	    }

	    /**
	     * Returns the global asset registry
	     * @return {Box3D.AssetRegistry} the global asset registry
	     */

	  }, {
	    key: 'getAssetRegistry',
	    value: function getAssetRegistry() {
	      return this.getRuntime().assetRegistry;
	    }

	    /***
	     * Forces the component to remove and re-add itself
	     */

	  }, {
	    key: 'reload',
	    value: function reload() {
	      var params = [this.getScriptId(), this.getAttributes(), this.getName()];
	      this.getComponentRegistry().remove(this);
	      this.getComponentRegistry().add(params[0], params[1], params[2]);
	    }

	    /**
	     * Called when the component is created.
	     * @return {[type]} [description]
	     */

	  }, {
	    key: 'awake',
	    value: function awake() {}

	    /**
	     * Called after the entity that this component is attached to starts to load.
	     * @method init
	     */

	  }, {
	    key: 'init',
	    value: function init() {}

	    /**
	     * Called when the component or entity is unloaded
	     * @method shutdown
	     */

	  }, {
	    key: 'shutdown',
	    value: function shutdown() {}

	    /**
	     * Earlier version of update
	     * @param {float} delta the amount of time since the last call
	     * @method preUpdate
	     */

	  }, {
	    key: 'preUpdate',
	    value: function preUpdate() {}

	    /**
	     * Main update
	     * @param {float} delta the amount of time since the last call
	     * @method update
	     */

	  }, {
	    key: 'update',
	    value: function update() {}

	    /**
	     * Later version of update
	     * @param {float} delta the amount of time since the last call
	     * @method postUpdate
	     */

	  }, {
	    key: 'postUpdate',
	    value: function postUpdate() {}

	    /**
	     * @method  render
	     * @param {float} delta the amount of time since the last call
	     */

	  }, {
	    key: 'render',
	    value: function render() {}

	    /**
	     * Called when the application loses focus
	     * @method supsend
	     */

	  }, {
	    key: 'suspend',
	    value: function suspend() {}

	    /**
	     * Called when the application regains focus
	     * @method resume
	     */

	  }, {
	    key: 'resume',
	    value: function resume() {}

	    /**
	     * Called when a component's attribute values change
	     * in the editor.
	     * @method attributesChanged
	     * @param  {Object} attributes An object containing all of the attributes whose values
	     * have changed.
	     */

	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged() {}

	    /**
	     * Called when the Three.JS object data is available
	     * @method  entityCreated
	     */

	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {}

	    /**
	     * Called when the Three.JS object is completely loaded, including all of it's children
	     * and dependencies like textures, geometry, etc.
	     * @method  entityLoaded
	     */

	  }, {
	    key: 'entityLoaded',
	    value: function entityLoaded() {}

	    /**
	     * Called when the parent asset is fully loaded
	     * @method assetLoaded
	     */

	  }, {
	    key: 'assetLoaded',
	    value: function assetLoaded() {}
	  }]);

	  return Box3DComponent;
	}(_RuntimeEvents3.default);

	window.Box3D.Box3DComponent = Box3DComponent;
	exports.default = Box3DComponent;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @vid audio_listener
	 * @vname Audio Listener
	 * @vcategory Audio
	 * @vdescription Audio listener for 3D, positional sound effects
	 */

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AudioListener = function (_Box3DComponent) {
	  _inherits(AudioListener, _Box3DComponent);

	  function AudioListener() {
	    _classCallCheck(this, AudioListener);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AudioListener).call(this));

	    _this.context = null;
	    return _this;
	  }

	  _createClass(AudioListener, [{
	    key: 'init',
	    value: function init() {
	      this.context = this.getEntity().box3DRuntime.getAudioContext();

	      if (!this.context) {
	        _log2.default.warn('Failed to create Web Audio context.');
	        return;
	      }
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      if (this.hasThreeData() && this.context) {
	        var xform = this.getRuntimeData().matrixWorld,
	            objPos = new _three2.default.Vector3(0, 0, 0).applyMatrix4(xform),
	            objDir = new _three2.default.Vector3(0, 0, -1).applyMatrix4(xform).sub(objPos).normalize(),
	            objUp = new _three2.default.Vector3(0, 1, 0).applyMatrix4(xform).sub(objPos).normalize();

	        this.context.listener.setPosition(objPos.x, objPos.y, objPos.z);
	        this.context.listener.setOrientation(objDir.x, objDir.y, objDir.z, objUp.x, objUp.y, objUp.z);
	      }
	    }
	  }]);

	  return AudioListener;
	}(_Box3DComponent3.default);

	exports.default = AudioListener;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @vid cubemap_capture
	 * @vname Cube-Map Capture
	 * @vcategory Rendering
	 * @vreserved
	 * @vfilter Object
	 * @vattr Asset cubeTexture {
	 *   description: 'The RenderTextureCube to render the reflection to.',
	 *   filter: { renderTextureCube: true },
	 *   default: null
	 * }
	 * @vattr Float near {
	 *   description: 'The closest distance to this object to render. Adjust this to avoid
	 *   rendering local geometry to the texture.',
	 *   default: 25
	 * }
	 * @vattr Float far {
	 *   description: 'The furthest distance from this object to render.',
	 *   default: 160000.00
	 *  }
	 * @vattr Integer updateFrameInterval {
	 *   description: 'The number of frames to skip in between updates of the reflection.
	 *   Default is 0.',
	 *   default: 0
	 * }
	 * @vattr Boolean renderPosX {
	 *   description: 'Render this side of the cube.',
	 *   default: true
	 * }
	 * @vattr Boolean renderNegX {
	 *   description: 'Render this side of the cube.',
	 *   default: true
	 * }
	 * @vattr Boolean renderPosY {
	 *   description: 'Render this side of the cube.',
	 *   default: true
	 * }
	 * @vattr Boolean renderNegY {
	 *   description: 'Render this side of the cube.',
	 *   default: true
	 * }
	 * @vattr Boolean renderPosZ {
	 *   description: 'Render this side of the cube.',
	 *   default: true
	 * }
	 * @vattr Boolean renderNegZ {
	 *   description: 'Render this side of the cube.',
	 *   default: true
	 * }
	 */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @author Mike Bond
	 * A component to make rendering to a cube map easier.
	 *
	 * @class CubeMapCapture
	 */

	var CubeMapCapture = function (_Box3DComponent) {
	  _inherits(CubeMapCapture, _Box3DComponent);

	  function CubeMapCapture() {
	    _classCallCheck(this, CubeMapCapture);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CubeMapCapture).call(this));

	    _this.framesElapsed = 0;

	    _this.near = 1.0;
	    _this.far = 12000.0;
	    _this.updateFrameInterval = 0.0;

	    _this.cubeMaterial = undefined;
	    _this.tempRenderTexture = undefined;

	    _this.cubeMaterialDef = {

	      uniforms: {
	        tCube: {
	          type: 't',
	          value: null
	        },
	        tFlip: {
	          type: 'f',
	          value: 1
	        }
	      },

	      vertexShader: ['varying vec3 vWorldPosition;', _three2.default.ShaderChunk['logdepthbuf_pars_vertex'], 'void main() {', ' vec4 worldPosition = vec4( position, 1.0 );', ' vWorldPosition = worldPosition.xyz;', ' gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', _three2.default.ShaderChunk['logdepthbuf_vertex'], '}'].join('\n'),

	      fragmentShader: ['uniform samplerCube tCube;', 'uniform float tFlip;', 'varying vec3 vWorldPosition;', _three2.default.ShaderChunk['logdepthbuf_pars_fragment'], 'void main() {', ' gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, ', '   vWorldPosition.yz ) );', _three2.default.ShaderChunk['logdepthbuf_fragment'], '}'].join('\n')

	    };
	    return _this;
	  }

	  _createClass(CubeMapCapture, [{
	    key: 'init',
	    value: function init() {

	      this.initCameras();
	    }
	  }, {
	    key: 'editorInit',
	    value: function editorInit() {
	      this.isEditor = true;
	      this.init();
	      this.box3DEntity.getParentAsset().once('load', this.initEditorObject, this);
	      if (this.box3DEntity.isBaseLoaded()) {
	        this.box3DEntity.load();
	      }
	      this.getRuntime().on('preRender', this.preRender, this);
	      // this.getRuntime().on( 'postUpdate', this.postUpdate, this );
	      this.getEntity().on('editorSelected', this.onSelected, this);
	      this.getEntity().on('editorUnselected', this.onUnselected, this);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      var that = this;
	      this.cubeCamera.traverse(function (obj) {
	        if (obj instanceof _three2.default.PerspectiveCamera) {
	          if (obj.cameraHelper) {
	            that.getThreeScene().remove(obj.cameraHelper);
	            obj.cameraHelper.dispose();
	            obj.cameraHelper = undefined;
	          }
	        }
	      });
	      this.getThreeScene().remove(this.cubeCamera);
	      this.getThreeObject().remove(this.boxMesh);
	      this.boxMesh.geometry.dispose();
	      this.boxMesh.material.dispose();
	      this.boxMesh = undefined;
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {

	      this.getEntity().off('editorSelected', this.onSelected, this);
	      this.getEntity().off('editorUnselected', this.onUnselected, this);
	      this.getRuntime().off('preRender', this.preRender, this);
	      // this.getRuntime().off( 'postUpdate', this.postUpdate, this );
	      this.shutdown();
	    }
	  }, {
	    key: 'onSelected',
	    value: function onSelected() {
	      var that = this;
	      this.cubeCamera.traverse(function (obj) {
	        if (obj instanceof _three2.default.PerspectiveCamera) {
	          if (!obj.cameraHelper) {
	            obj.cameraHelper = new _three2.default.CameraHelper(obj);
	            // obj.cameraHelper.matrixAutoUpdate = true;
	            that.getThreeScene().add(obj.cameraHelper);
	          }
	          obj.cameraHelper.visible = true;
	        }
	      });
	    }
	  }, {
	    key: 'onUnselected',
	    value: function onUnselected() {
	      this.cubeCamera.traverse(function (obj) {
	        if (obj instanceof _three2.default.PerspectiveCamera) {
	          if (obj.cameraHelper) {
	            obj.cameraHelper.visible = false;
	          }
	        }
	      });
	    }
	  }, {
	    key: 'entityLoaded',
	    value: function entityLoaded() {

	      var threeScene = this.getThreeScene();
	      threeScene.add(this.cubeCamera);
	      this.cubeCamera.matrix = this.getRuntimeData().matrixWorld;
	      this.cubeCamera.matrixAutoUpdate = false;
	    }
	  }, {
	    key: 'initEditorObject',
	    value: function initEditorObject() {
	      this.entityLoaded();

	      this.boxGeometry = new _three2.default.BoxGeometry(25, 25, 25, 1, 1, 1);

	      this.boxGeometry.dynamic = true;
	      this.boxMesh = new _three2.default.Mesh(this.boxGeometry);
	      this.boxMesh.castShadow = false;
	      this.boxMesh.receiveShadow = false;
	      this.boxMesh.name = 'CubeMapCapturePlane';
	      this.getThreeObject().add(this.boxMesh);
	      this.getRuntime().globalEvents.trigger('studioApp::registerPickingObject', this.getEntity(), this.boxMesh);

	      if (!this.cubeTexture) {
	        this.createTempRenderTexture();
	      } else {
	        this.cubeTexture.load();
	      }

	      this.cubeMaterialDef.uniforms['tCube'].value = this.cubeTexture ? this.cubeTexture.runtimeData : this.tempRenderTexture.runtimeData;
	      this.cubeMaterial = new _three2.default.ShaderMaterial(this.cubeMaterialDef);
	      this.boxMesh.material = this.cubeMaterial;
	    }
	  }, {
	    key: 'createTempRenderTexture',
	    value: function createTempRenderTexture() {
	      this.tempRenderTexture = this.getAssetRegistry().createAsset({
	        type: 'renderTextureCube',
	        id: 'render_tex_cube',
	        properties: {
	          width: 512,
	          height: 512,
	          format: _three2.default.RGBAFormat,
	          type: _three2.default.UnsignedByteType
	        }
	      });
	      this.tempRenderTexture.load();
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      if (changes.indexOf('cubeTexture') !== -1) {
	        if (this.cubeTexture) {
	          var that = this;
	          this.cubeTexture.when('load', function () {
	            if (that.tempRenderTexture) {
	              that.tempRenderTexture.unload();
	            }
	            var pars = {
	              format: that.cubeTexture.runtimeData.format,
	              minFilter: that.cubeTexture.runtimeData.minFilter,
	              magFilter: that.cubeTexture.runtimeData.magFilter
	            };
	            pars.type = that.cubeTexture.runtimeData.type;

	            var renderTarget = new _three2.default.WebGLRenderTarget(that.cubeTexture.getWidth(), that.cubeTexture.getHeight(), pars);
	            renderTarget.name = that.getEntity().getName() + ': Reflection Capture Render Buffer';
	            if (!that.composer) {
	              that.composer = new _three2.default.EffectComposer(that.getThreeRenderer(), renderTarget);
	              that.gammaPass = new _three2.default.ShaderPass(_three2.default.GammaShader);
	              that.gammaPass.renderToScreen = true;
	              that.composer.addPass(that.gammaPass);
	            } else {
	              that.composer.reset(renderTarget);
	            }
	            that.composer.enabled = true;
	            that.composer.renderPassesNeedUpdate = true;
	            that.cubeMaterial.uniforms['tCube'].value = that.cubeTexture.runtimeData;
	          });
	          this.cubeTexture.load();
	        } else if (!this.tempRenderTexture) {
	          this.createTempRenderTexture();
	          this.cubeMaterial.uniforms['tCube'].value = this.tempRenderTexture.runtimeData;
	        }
	      }
	      if (changes.indexOf('near') !== -1 || changes.indexOf('far') !== -1) {
	        this.cameraPX.near = this.near;
	        this.cameraPX.far = this.far;
	        this.cameraPX.updateProjectionMatrix();
	        this.cameraNX.near = this.near;
	        this.cameraNX.far = this.far;
	        this.cameraNX.updateProjectionMatrix();
	        this.cameraPY.near = this.near;
	        this.cameraPY.far = this.far;
	        this.cameraPY.updateProjectionMatrix();
	        this.cameraNY.near = this.near;
	        this.cameraNY.far = this.far;
	        this.cameraNY.updateProjectionMatrix();
	        this.cameraPZ.near = this.near;
	        this.cameraPZ.far = this.far;
	        this.cameraPZ.updateProjectionMatrix();
	        this.cameraNZ.near = this.near;
	        this.cameraNZ.far = this.far;
	        this.cameraNZ.updateProjectionMatrix();
	        this.cubeCamera.traverse(function (obj) {
	          if (obj instanceof _three2.default.PerspectiveCamera) {
	            if (obj.cameraHelper) {
	              obj.cameraHelper.update();
	            }
	          }
	        });
	      }
	    }

	    /**
	     * Called immediately after after component creation
	     */

	  }, {
	    key: 'initCameras',
	    value: function initCameras() {
	      this.cubeCamera = new _three2.default.Object3D();
	      // this.cubeCamera.position.copy( this.getEntity().getPosition() );

	      var fov = 90,
	          aspect = 1;

	      this.cameraPX = new _three2.default.PerspectiveCamera(fov, aspect, this.near, this.far);
	      this.cameraPX.up.set(0, -1, 0);
	      this.cameraPX.lookAt(new _three2.default.Vector3(1, 0, 0));
	      this.cameraPX.rotationAutoUpdate = false;
	      this.cubeCamera.add(this.cameraPX);

	      this.cameraNX = new _three2.default.PerspectiveCamera(fov, aspect, this.near, this.far);
	      this.cameraNX.up.set(0, -1, 0);
	      this.cameraNX.lookAt(new _three2.default.Vector3(-1, 0, 0));
	      this.cameraNX.rotationAutoUpdate = true;
	      this.cubeCamera.add(this.cameraNX);

	      this.cameraPY = new _three2.default.PerspectiveCamera(fov, aspect, this.near, this.far);
	      this.cameraPY.up.set(0, 0, 1);
	      this.cameraPY.lookAt(new _three2.default.Vector3(0, 1, 0));
	      this.cameraPY.rotationAutoUpdate = true;
	      this.cubeCamera.add(this.cameraPY);

	      this.cameraNY = new _three2.default.PerspectiveCamera(fov, aspect, this.near, this.far);
	      this.cameraNY.up.set(0, 0, -1);
	      this.cameraNY.lookAt(new _three2.default.Vector3(0, -1, 0));
	      this.cameraNY.rotationAutoUpdate = true;
	      this.cubeCamera.add(this.cameraNY);

	      this.cameraPZ = new _three2.default.PerspectiveCamera(fov, aspect, this.near, this.far);
	      this.cameraPZ.up.set(0, -1, 0);
	      this.cameraPZ.lookAt(new _three2.default.Vector3(0, 0, 1));
	      this.cameraPZ.rotationAutoUpdate = true;
	      this.cubeCamera.add(this.cameraPZ);

	      this.cameraNZ = new _three2.default.PerspectiveCamera(fov, aspect, this.near, this.far);
	      this.cameraNZ.up.set(0, -1, 0);
	      this.cameraNZ.lookAt(new _three2.default.Vector3(0, 0, -1));
	      this.cameraNZ.rotationAutoUpdate = true;
	      this.cubeCamera.add(this.cameraNZ);
	    }

	    // postUpdate( delta ) {
	    //   if ( this.cubeCamera && this.hasThreeData() && this.isEnabled() ) {
	    //     this.cubeCamera.position.setFromMatrixPosition( this.getThreeObject().matrixWorld );
	    //   }
	    // };

	  }, {
	    key: 'preRender',
	    value: function preRender() {
	      this.framesElapsed++;
	      if (this.framesElapsed >= this.updateFrameInterval && this.isEnabled()) {
	        this.framesElapsed = 0.0;
	        var renderer = this.getRenderer();
	        var scene = this.getScene().runtimeData;

	        if (this.cubeTexture || this.tempRenderTexture) {

	          var renderTarget = this.cubeTexture ? this.cubeTexture.runtimeData : this.tempRenderTexture.runtimeData;
	          var generateMipmaps = renderTarget.generateMipmaps;

	          renderTarget.texture.generateMipmaps = false;

	          if (this.renderPosX) {
	            renderTarget.activeCubeFace = 0;
	            renderer.renderView(scene, this.cameraPX, {
	              renderTarget: renderTarget,
	              clearColor: true,
	              composer: this.getThreeRenderer().gammaOutput ? null : this.composer
	            });
	          }

	          if (this.renderNegX) {
	            renderTarget.activeCubeFace = 1;
	            renderer.renderView(scene, this.cameraNX, {
	              renderTarget: renderTarget,
	              clearColor: true,
	              composer: this.getThreeRenderer().gammaOutput ? null : this.composer
	            });
	          }

	          if (this.renderPosY) {
	            renderTarget.activeCubeFace = 2;
	            renderer.renderView(scene, this.cameraPY, {
	              renderTarget: renderTarget,
	              clearColor: true,
	              composer: this.getThreeRenderer().gammaOutput ? null : this.composer
	            });
	          }

	          if (this.renderNegY) {
	            renderTarget.activeCubeFace = 3;
	            renderer.renderView(scene, this.cameraNY, {
	              renderTarget: renderTarget,
	              clearColor: true,
	              composer: this.getThreeRenderer().gammaOutput ? null : this.composer
	            });
	          }

	          if (this.renderPosZ) {
	            renderTarget.activeCubeFace = 4;
	            renderer.renderView(scene, this.cameraPZ, {
	              renderTarget: renderTarget,
	              clearColor: true,
	              composer: this.getThreeRenderer().gammaOutput ? null : this.composer
	            });
	          }

	          renderTarget.texture.generateMipmaps = generateMipmaps;

	          if (this.renderNegZ) {
	            renderTarget.activeCubeFace = 5;
	            renderer.renderView(scene, this.cameraNZ, {
	              renderTarget: renderTarget,
	              clearColor: true,
	              composer: this.getThreeRenderer().gammaOutput ? null : this.composer
	            });
	          }
	          renderTarget.needsUpdate = true;
	        }
	      }
	      if (this.isEditor) {
	        this.cubeCamera.matrixWorldNeedsUpdate = true;
	        this.cubeCamera.traverse(function (obj) {
	          if (obj instanceof _three2.default.PerspectiveCamera) {
	            if (obj.cameraHelper && obj.cameraHelper.visible) {
	              obj.cameraHelper.matrixWorldNeedsUpdate = true;
	            }
	          }
	        });
	      }
	    }
	  }]);

	  return CubeMapCapture;
	}(_Box3DComponent3.default);

	exports.default = CubeMapCapture;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid curve_component
	 * @vname Curve
	 * @vfilter object
	 * @vreserved
	 * @vdescription Creates a spline curve that can be used for various things, including making objects follow it. Add controls points to shape the curve.
	 * @vcategory General
	 * @vattr Object[] controlPoints {
	 *   description: 'The list of objects that define the curve shape.'
	 * }
	 * @vattr Boolean closed {
	 *   description: 'If toggled, the start and end of the curve will be smoothly joined.',
	 *   default: false
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @author Mike Bond
	 * A component to render spline curves.
	 *
	 * @class Curve
	 */

	var Curve = function (_Box3DComponent) {
	  _inherits(Curve, _Box3DComponent);

	  function Curve() {
	    _classCallCheck(this, Curve);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Curve).call(this));

	    _this.isEditor = false;
	    _this.controlPoints = undefined;
	    _this.prevControlPointsLength = 0;
	    _this.closed = false;

	    //Editor
	    _this.cameraPosition = new _three2.default.Vector3();
	    _this.tempPosition = new _three2.default.Vector3();
	    _this.tempVector = new _three2.default.Vector3();
	    _this.tempVector4 = new _three2.default.Vector4();
	    _this.tempMatrix = new _three2.default.Matrix4();
	    _this.editorCurveColour = 0x222222;
	    _this.editorCurveSelectedColour = 0x0d56a6;
	    _this.orientationHelpers = [];
	    _this.canTryUpdateAgain = true;

	    _this.curveMaterial = undefined;
	    _this.curveGeometry = undefined;
	    _this.curveMesh = undefined;
	    _this.curveTesselation = 200;
	    _this.selected = false;
	    _this.updateStarted = false;
	    return _this;
	  }

	  _createClass(Curve, [{
	    key: 'init',
	    value: function init() {
	      this.initCurve();
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {}
	  }, {
	    key: 'onSelected',
	    value: function onSelected() {
	      this.selected = true;
	      if (this.curveMaterial) {
	        this.curveMaterial.color.setHex(this.editorCurveSelectedColour);
	      }
	      function show(obj) {
	        obj.visible = true;
	      }
	      for (var i = 0; i < this.orientationHelpers.length; i++) {
	        this.orientationHelpers[i].traverse(show);
	      }
	    }
	  }, {
	    key: 'onUnselected',
	    value: function onUnselected() {
	      this.selected = false;
	      if (this.curveMaterial) {
	        this.curveMaterial.color.setHex(this.editorCurveColour);
	      }
	      function hide(obj) {
	        obj.visible = false;
	      }
	      for (var i = 0; i < this.orientationHelpers.length; i++) {
	        this.orientationHelpers[i].traverse(hide);
	      }
	    }
	  }, {
	    key: 'initCurve',
	    value: function initCurve() {
	      if (!this.updateStarted && this.controlPoints && this.controlPoints.length) {

	        this.updateStarted = true;

	        this.cleanupCurveMesh();
	        this.cleanupOrientationHelpers();

	        this.prevControlPointsLength = this.controlPoints.length;

	        this.createCurve();
	      }
	    }
	  }, {
	    key: 'isCurveInit',
	    value: function isCurveInit() {
	      return this.curve.points.length > 0;
	    }
	  }, {
	    key: 'createCurve',
	    value: function createCurve() {
	      for (var i in this.controlPoints) {
	        if (this.controlPoints[i]) {
	          this.controlPoints[i].off('propertyChanges', this.updateCurve, this);
	        }
	      }

	      if (this.closed) {
	        this.curve = new _three2.default.ClosedSplineCurve3();
	      } else {
	        this.curve = new _three2.default.SplineCurve3();
	      }

	      var that = this;
	      var scene = this.getEntity().getParentAsset();
	      scene.when('loadChildren', function (scene) {
	        scene.runtimeData.updateMatrixWorld(true);
	        _lodash2.default.each(that.controlPoints, function (point) {
	          if (point) {
	            var newPos = new _three2.default.Vector3();
	            this.curve.points.push(newPos);
	            this.tempMatrix.makeRotationFromQuaternion(point.runtimeData.quaternion);
	            var matArray = this.tempMatrix.toArray();
	            this.tempVector.set(matArray[0], matArray[1], matArray[2]);
	            this.orientationHelpers.push(new _three2.default.ArrowHelper(this.tempVector, newPos, 1, 0xff0000));
	            this.tempVector.set(matArray[4], matArray[5], matArray[6]);
	            this.orientationHelpers.push(new _three2.default.ArrowHelper(this.tempVector, newPos, 1, 0x00ff00));
	            this.tempVector.set(matArray[8], matArray[9], matArray[10]);
	            this.orientationHelpers.push(new _three2.default.ArrowHelper(this.tempVector, newPos, 1, 0x0000ff));

	            point.on('propertyChanges', that.updateCurve, that);
	          } else {
	            this.tempVector.set(0, 0, 0);
	            this.orientationHelpers.push(new _three2.default.ArrowHelper(this.tempVector, this.tempVector, 1, 0xff0000));
	            this.orientationHelpers.push(new _three2.default.ArrowHelper(this.tempVector, this.tempVector, 1, 0xff0000));
	            this.orientationHelpers.push(new _three2.default.ArrowHelper(this.tempVector, this.tempVector, 1, 0xff0000));
	          }
	        }, that);

	        that.updateCurve();

	        that.updateStarted = false;
	        if (!this.selected) {
	          this.onUnselected();
	        }
	        that.trigger('curveInit');
	      }, this);
	    }
	  }, {
	    key: 'updateCurve',
	    value: function updateCurve(changes) {
	      var index = 0;
	      if (changes.hasOwnProperty('position')) {
	        _lodash2.default.each(this.controlPoints, function (point) {
	          if (point) {
	            if (point.runtimeData.parent) {
	              point.getPosition(this.tempVector);
	              this.tempVector4.set(this.tempVector.x, this.tempVector.y, this.tempVector.z, 1.0);
	              this.tempVector4.applyMatrix4(point.runtimeData.parent.matrixWorld);
	              this.curve.points[index].set(this.tempVector4.x, this.tempVector4.y, this.tempVector4.z);

	              index++;
	            } else if (this.canTryUpdateAgain) {
	              this.canTryUpdateAgain = false;
	              setTimeout(function () {
	                _log2.default.log('Trying again');
	                this.updateCurve();
	              }.bind(this), 10);
	            }
	          }
	        }, this);

	        if (this.isEditor) {
	          this.cleanupCurveMesh();
	          this.createCurveMesh();
	        }

	        this.canTryUpdateAgain = true;
	      }
	      if (changes.hasOwnProperty('quaternion')) {
	        this.updateOrientationHelpers();
	      }
	    }
	  }, {
	    key: 'cleanupCurveMaterial',
	    value: function cleanupCurveMaterial() {
	      if (this.curveMaterial) {
	        this.curveMaterial.dispose();
	        this.curveMaterial = undefined;
	      }
	    }
	  }, {
	    key: 'cleanupOrientationHelpers',
	    value: function cleanupOrientationHelpers() {
	      var i = 0;
	      for (i in this.orientationHelpers) {
	        this.getThreeScene().remove(this.orientationHelpers[i]);
	      }
	      this.orientationHelpers = [];
	    }
	  }, {
	    key: 'cleanupCurveMesh',
	    value: function cleanupCurveMesh() {
	      if (this.isEditor && this.curveMesh) {
	        this.getRuntime().globalEvents.trigger('studioApp::unregisterPickingObject', this.getEntity(), this.curveMesh);
	        this.getThreeScene().remove(this.curveMesh);
	        this.curveGeometry.dispose();
	        this.curveMesh.material = undefined;
	      }
	    }
	  }, {
	    key: 'createCurveMesh',
	    value: function createCurveMesh() {
	      if (!this.curveMaterial) {
	        this.curveMaterial = new _three2.default.MeshBasicMaterial({
	          color: this.editorCurveColour,
	          transparent: true,
	          opacity: 0.75,
	          blending: _three2.default.AdditiveBlending
	        });
	      }
	      if (this.curve.points.length) {
	        this.curveGeometry = new _three2.default.TubeGeometry(this.curve, this.curveTesselation, 2.5, 8, this.closed);
	        this.curveMesh = new _three2.default.Mesh(this.curveGeometry, this.curveMaterial);

	        this.getScene().once('loadBase', function () {
	          this.getThreeScene().add(this.curveMesh);
	          _lodash2.default.each(this.orientationHelpers, function (helper) {
	            this.getThreeScene().add(helper);
	          }, this);
	        }, this);

	        this.getScene().once('load', function () {
	          this.getRuntime().globalEvents.trigger('studioApp::registerPickingObject', this.getEntity(), this.curveMesh);
	          this.getGlobalEvents().on('studioApp::toggleVisualization', this.toggleVisualization, this);
	        }, this);

	        this.getScene().load();

	        this.updateOrientationHelpers();
	      }
	    }

	    //Update arrow helpers when a control point's quaternion changes

	  }, {
	    key: 'updateOrientationHelpers',
	    value: function updateOrientationHelpers() {
	      for (var i in this.controlPoints) {
	        if (this.controlPoints[i]) {
	          var obj = this.controlPoints[i].runtimeData;

	          this.orientationHelpers[i * 3].position.copy(this.curve.points[i]);
	          this.orientationHelpers[i * 3 + 1].position.copy(this.curve.points[i]);
	          this.orientationHelpers[i * 3 + 2].position.copy(this.curve.points[i]);
	          this.tempMatrix.makeRotationFromQuaternion(obj.quaternion);
	          var matArray = this.tempMatrix.toArray();
	          this.tempVector.set(matArray[0], matArray[1], matArray[2]);
	          this.orientationHelpers[i * 3].setDirection(this.tempVector);
	          this.tempVector.set(matArray[4], matArray[5], matArray[6]);
	          this.orientationHelpers[i * 3 + 1].setDirection(this.tempVector);
	          this.tempVector.set(matArray[8], matArray[9], matArray[10]);
	          this.orientationHelpers[i * 3 + 2].setDirection(this.tempVector);
	        }
	      }
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged() {
	      this.initCurve();
	    }
	  }, {
	    key: 'editorInit',
	    value: function editorInit() {
	      this.isEditor = true;
	      this.init();

	      this.getRuntime().on('update', this.editorUpdate, this);
	      this.getRuntime().on('mouseUp', this.onMouseUp, this);
	      this.getEntity().on('editorSelected', this.onSelected, this);
	      this.getEntity().on('editorUnselected', this.onUnselected, this);

	      var that = this;
	      this.getRuntime().globalEvents.trigger('studioApp::getCurrentCamera', function (camera) {
	        if (camera) {
	          camera.once('loadBase', function () {
	            that.editorCamera = camera.runtimeData;
	          }, that);
	          camera.loadBase();
	        }
	      });

	      this.getEntity().on('propertyChanges', that.initCurve, this);
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {
	      this.getRuntime().off('update', this.editorUpdate, this);
	      this.getRuntime().off('mouseUp', this.onMouseUp, this);
	      this.getEntity().off('editorSelected', this.onSelected, this);
	      this.getEntity().off('editorUnselected', this.onUnselected, this);
	      this.getEntity().off('propertyChanges', this.initCurve, this);
	      this.getGlobalEvents().off('studioApp::toggleVisualization', this.toggleVisualization, this);

	      this.cleanupCurveMesh();
	      this.cleanupOrientationHelpers();
	      this.cleanupCurveMaterial();
	    }
	  }, {
	    key: 'editorUpdate',
	    value: function editorUpdate() {
	      if (this.editorCamera) {
	        this.cameraPosition.setFromMatrixPosition(this.editorCamera.matrixWorld);
	        var scale = 1.0;
	        for (var i = 0; i < this.orientationHelpers.length; i++) {
	          this.tempPosition.setFromMatrixPosition(this.orientationHelpers[i].matrixWorld);
	          scale = this.tempPosition.distanceTo(this.cameraPosition) / 12;
	          this.orientationHelpers[i].scale.set(scale, scale, scale);
	        }
	      }
	    }
	  }, {
	    key: 'toggleVisualization',
	    value: function toggleVisualization() {
	      var that = this;
	      this.curveMesh.visible = !this.curveMesh.visible;

	      function toggle(obj) {
	        obj.visible = that.selected && !obj.visible;
	      }
	      for (var i = 0; i < this.orientationHelpers.length; i++) {
	        this.orientationHelpers[i].traverse(toggle);
	      }
	    }
	  }]);

	  return Curve;
	}(_Box3DComponent3.default);

	exports.default = Curve;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid debug_console_display
	 * @vname Debug Console Display
	 * @vcategory Debug
	 * @vfilter Application
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DebugConsoleDisplay = function (_Box3DComponent) {
	  _inherits(DebugConsoleDisplay, _Box3DComponent);

	  function DebugConsoleDisplay() {
	    _classCallCheck(this, DebugConsoleDisplay);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(DebugConsoleDisplay).call(this));
	  }

	  _createClass(DebugConsoleDisplay, [{
	    key: 'init',
	    value: function init() {

	      var logTag = document.createElement('div');
	      logTag.id = 'consoleLogger';
	      logTag.style.position = 'absolute';
	      logTag.style.top = 0;
	      logTag.style.left = 0;
	      logTag.style.width = '100%';
	      logTag.style.height = '100%';
	      logTag.style.margin = 0;
	      logTag.style.padding = 0;
	      logTag.style.color = '#fff';
	      logTag.style.fontWeight = 'bold';
	      logTag.style.textAlign = 'left';
	      logTag.style.overflow = 'scroll';
	      logTag.style['pointer-events'] = 'none';
	      window.document.body.appendChild(logTag);

	      window.console = window.console || {};
	      window.console.log = window.console.error = window.console.warn = function (text) {
	        logTag.innerHTML += text + '<br>';
	      };
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.getRuntime().off(this.renderEventName, this.renderView, this);
	      this.getRuntime().off('resize', this.resize, this);
	    }
	  }]);

	  return DebugConsoleDisplay;
	}(_Box3DComponent3.default);

	exports.default = DebugConsoleDisplay;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid debug_texture_viewer
	 * @vname Debug Texture Viewer
	 * @vreserved
	 * @vcategory Debug
	 * @vfilter Application
	 * @vattr String viewportLeft {
	 *   description: 'Left position of the viewport to be rendered by this camera.',
	 *   default : '50%'
	 * }
	 * @vattr String viewportBottom {
	 *   description: 'Bottom position of the viewport to be rendered by this camera.',
	 *   default: '0px'
	 * }
	 * @vattr String viewportWidth {
	 *   description: 'Width of the viewport to be rendered by this camera.',
	 *   default: '50%'
	 * }
	 * @vattr String viewportHeight {
	 *   description: 'Height of the viewport to be rendered by this camera.',
	 *   default: '50%'
	 * }
	 * @vattr Integer renderGroup {
	 *   description: 'Render passes are done in order, based on the \'render group\' value. Lower numbers render first.',
	 *   default: 9
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var EL_CSS = {
	  'position': 'absolute',
	  'left': 0,
	  'top': 0,
	  'padding': '8px',
	  'border-radius': '5px',
	  'font-family': 'proxima_nova_regular,Helvetica,Arial,sans-serif',
	  'max-width': '25%',
	  'min-width': '25px',
	  'transition': 'opacity 0.1s ease-in-out, background 0.1s ease-in-out',
	  'cursor': 'pointer'
	};

	var DebugTextureViewer = function (_Box3DComponent) {
	  _inherits(DebugTextureViewer, _Box3DComponent);

	  function DebugTextureViewer() {
	    _classCallCheck(this, DebugTextureViewer);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DebugTextureViewer).call(this));

	    _this.renderEventName = 'render';
	    _this.textureRegistryById = {};
	    _this.tempViewport = new _three2.default.Vector4();
	    return _this;
	  }

	  _createClass(DebugTextureViewer, [{
	    key: 'awake',
	    value: function awake() {
	      this.getRuntime().on('assetLoaded', this.registerTexture, this);
	      this.getRuntime().on('assetUnloaded', this.unregisterTexture, this);
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      var _this2 = this;

	      this.init2dScene();
	      this.initCubeScene();

	      var renderEvent = parseInt(this.renderGroup, 10);
	      if (renderEvent) {
	        this.renderEventName += 'Group' + renderEvent;
	      }
	      this.getRuntime().on(this.renderEventName, this.renderView, this);
	      this.getRuntime().on('resize', this.resize, this);

	      var textures = this.getAssetRegistry().Textures.assets;
	      _lodash2.default.each(textures, function (tex) {
	        _this2.registerTexture(tex);
	      });

	      this.resize();
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.getRuntime().off('assetLoaded', this.registerTexture, this);
	      this.getRuntime().off('assetUnloaded', this.unregisterTexture, this);
	      this.getRuntime().off(this.renderEventName, this.renderView, this);
	      this.getRuntime().off('resize', this.resize, this);
	    }
	  }, {
	    key: 'init2dScene',
	    value: function init2dScene() {
	      this.camera2D = new _three2.default.OrthographicCamera(-1, 1, 1, -1, 0, 1);
	      this.scene2D = new _three2.default.Scene();

	      this.material2D = new _three2.default.ShaderMaterial(_three2.default.CopyShader);

	      this.mesh2D = new _three2.default.Mesh(new _three2.default.PlaneGeometry(2, 2), this.material2D);
	      this.scene2D.add(this.mesh2D);
	    }
	  }, {
	    key: 'initCubeScene',
	    value: function initCubeScene() {
	      var fov = 90;
	      var aspect = 1;
	      var cubeShader = _three2.default.ShaderLib.cube;

	      this.sceneCube = new _three2.default.Scene();
	      this.geoCube = new _three2.default.BoxGeometry(100, 100, 100);

	      this.materialCube = new _three2.default.ShaderMaterial({
	        fragmentShader: cubeShader.fragmentShader,
	        vertexShader: cubeShader.vertexShader,
	        uniforms: cubeShader.uniforms,
	        depthWrite: false,
	        depthTest: false,
	        side: _three2.default.BackSide
	      });
	      this.meshCube = new _three2.default.Mesh(this.geoCube, this.materialCube);

	      this.cameraPX = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameraPX.up.set(0, 1, 0);
	      this.cameraPX.lookAt(new _three2.default.Vector3(1, 0, 0));
	      this.sceneCube.add(this.cameraPX);

	      this.cameraNX = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameraNX.up.set(0, 1, 0);
	      this.cameraNX.lookAt(new _three2.default.Vector3(-1, 0, 0));
	      this.sceneCube.add(this.cameraNX);

	      this.cameraPY = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameraPY.up.set(0, 0, -1);
	      this.cameraPY.lookAt(new _three2.default.Vector3(0, 1, 0));
	      this.sceneCube.add(this.cameraPY);

	      this.cameraNY = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameraNY.up.set(0, 0, 1);
	      this.cameraNY.lookAt(new _three2.default.Vector3(0, -1, 0));
	      this.sceneCube.add(this.cameraNY);

	      this.cameraPZ = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameraPZ.up.set(0, 1, 0);
	      this.cameraPZ.lookAt(new _three2.default.Vector3(0, 0, 1));
	      this.sceneCube.add(this.cameraPZ);

	      this.cameraNZ = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameraNZ.up.set(0, 1, 0);
	      this.cameraNZ.lookAt(new _three2.default.Vector3(0, 0, -1));
	      this.sceneCube.add(this.cameraNZ);

	      this.sceneCube.add(this.meshCube);
	    }
	  }, {
	    key: 'registerTexture',
	    value: function registerTexture(texture) {
	      if (!texture) {
	        return;
	      }

	      switch (texture.type) {
	        case 'renderTextureCube':
	        case 'textureCube':
	        case 'texture2D':
	        case 'renderTexture2D':
	        case 'textureVideo':
	          this.textureRegistryById[texture.id] = texture;
	      }
	    }
	  }, {
	    key: 'unregisterTexture',
	    value: function unregisterTexture(texture) {
	      if (texture) {
	        if (this.textureRegistryById[texture.id]) {
	          delete this.textureRegistryById[texture.id];
	        }
	      }
	    }
	  }, {
	    key: 'setTexture',
	    value: function setTexture(textureId) {
	      this.currentTexture = null;

	      this.currentTexture = this.textureRegistryById[textureId];
	      if (this.currentTexture) {
	        switch (this.currentTexture.type) {
	          case 'renderTextureCube':
	          case 'textureCube':
	            this.materialCube.uniforms.tCube.value = this.currentTexture.runtimeData;
	            break;

	          case 'texture2D':
	          case 'renderTexture2D':
	          case 'textureVideo':
	            this.material2D.uniforms.tDiffuse.value = this.currentTexture.runtimeData;
	            break;
	        }

	        this.mesh2D.visible = true;
	        this.meshCube.visible = true;
	      } else {
	        this.mesh2D.visible = false;
	        this.meshCube.visible = false;
	      }
	    }
	  }, {
	    key: 'setViewport',
	    value: function setViewport(x, y, width, height) {
	      this.viewportLeft = x;
	      this.viewportBottom = y;
	      this.viewportWidth = width;
	      this.viewportHeight = height;

	      this.oldX = this._x;
	      this.oldY = this._y;
	      this.oldWidth = this._width;
	      this.oldHeight = this._height;

	      this.updateViewport();

	      this.targetX = this._x;
	      this.targetY = this._y;
	      this.targetWidth = this._width;
	      this.targetHeight = this._height;

	      this._x = this.oldX;
	      this._y = this.oldY;
	      this._width = this.oldWidth;
	      this._height = this.oldHeight;
	    }
	  }, {
	    key: 'updateViewport',
	    value: function updateViewport() {
	      var percent = undefined;
	      var cWidth = this.getRuntime().getRenderer().getWidth();
	      var cHeight = this.getRuntime().getRenderer().getHeight();

	      if (this.viewportBottom.slice(-1) === '%') {
	        percent = parseFloat(this.viewportBottom.slice(0, -1)) * 0.01;
	        this._y = parseInt(percent * cHeight, 10);
	      } else {
	        this._y = parseInt(this.viewportBottom);
	      }
	      if (this.viewportLeft.slice(-1) === '%') {
	        percent = parseFloat(this.viewportLeft.slice(0, -1)) * 0.01;
	        this._x = parseInt(percent * cWidth, 10);
	      } else {
	        this._x = parseInt(this.viewportLeft);
	      }
	      if (this.viewportWidth.slice(-1) === '%') {
	        percent = parseFloat(this.viewportWidth.slice(0, -1)) * 0.01;
	        this._width = parseInt(percent * cWidth, 10);
	      } else {
	        this._width = parseInt(this.viewportWidth);
	      }
	      if (this.viewportHeight.slice(-1) === '%') {
	        percent = parseFloat(this.viewportHeight.slice(0, -1)) * 0.01;
	        this._height = parseInt(percent * cHeight, 10);
	      } else {
	        this._height = parseInt(this.viewportHeight);
	      }

	      if (this._x < 0) {
	        this._x += cWidth;
	      }
	      if (this._y < 0) {
	        this._y += cHeight;
	      }
	    }
	  }, {
	    key: 'updateTextureDropdown',
	    value: function updateTextureDropdown() {
	      var _this3 = this;

	      if (this.isEnabled()) {
	        setTimeout(function () {
	          var newOption;

	          if (!_this3.textureDropDown) {
	            _this3.textureDropDown = document.createElement('select');
	            _this3.textureDropDown.name = 'Poop';
	            _this3.textureDropDown.id = 'Poop';
	            DebugTextureViewer.addClass(_this3.textureDropDown, 'debugger-dropdown');
	            DebugTextureViewer.css(_this3.textureDropDown, EL_CSS);
	            var canvas = _this3.getThreeRenderer().domElement;
	            if (canvas.parentElement) {
	              canvas.parentElement.appendChild(_this3.textureDropDown);
	            } else {
	              canvas.appendChild(_this3.textureDropDown);
	            }
	            _this3.textureDropDown.onchange = function () {
	              _this3.setTexture(_this3.textureDropDown.value);
	            };
	          }

	          _this3.textureDropDown.options.length = 0;
	          newOption = document.createElement('option');
	          newOption.value = 0;
	          newOption.text = 'None';
	          _this3.textureDropDown.appendChild(newOption);

	          _lodash2.default.each(_this3.textureRegistryById, function (tex, id) {
	            newOption = document.createElement('option');
	            newOption.value = id;
	            newOption.text = tex.name !== '' ? tex.getName() : id;
	            this.textureDropDown.appendChild(newOption);
	          }, _this3);
	          _this3.textureDropDown.style.top = _this3.getRuntime().getRenderer().getHeight() - _this3._y - _this3._height + 'px';
	          _this3.textureDropDown.style.left = _this3._x + 'px';
	          _this3.textureDropDown.style.zIndex = 200;
	        }, 0);
	      }
	    }
	  }, {
	    key: 'resize',
	    value: function resize() {
	      if (this.isEnabled()) {
	        this.updateTextureDropdown();
	        this.updateViewport();
	      }
	    }
	  }, {
	    key: 'renderView',
	    value: function renderView() {
	      var renderer = this.getThreeRenderer();

	      if (this.isEnabled() && this.currentTexture) {
	        renderer.getViewport(this.tempViewport);
	        renderer.setRenderTarget(null);

	        switch (this.currentTexture.type) {
	          case 'texture2D':
	          case 'renderTexture2D':
	          case 'textureVideo':
	            renderer.setViewport(this._x, this._y, this._width, this._height);
	            renderer.render(this.scene2D, this.camera2D);
	            break;

	          case 'textureCube':
	          case 'renderTextureCube':
	            var portWidthInc = 0.25 * this._width;
	            var portHeightInc = 0.3333 * this._height;
	            renderer.setViewport(this._x, this._y + portHeightInc, portWidthInc, portHeightInc);
	            renderer.render(this.sceneCube, this.cameraPX, null, false);
	            renderer.setViewport(this._x + 1.999 * portWidthInc, this._y + portHeightInc, portWidthInc, portHeightInc);
	            renderer.render(this.sceneCube, this.cameraNX, null, false);
	            renderer.setViewport(this._x + portWidthInc, this._y + 1.99 * portHeightInc, portWidthInc, portHeightInc);
	            renderer.render(this.sceneCube, this.cameraPY, null, false);
	            renderer.setViewport(this._x + portWidthInc, this._y, portWidthInc, portHeightInc);
	            renderer.render(this.sceneCube, this.cameraNY, null, false);
	            renderer.setViewport(this._x + portWidthInc, this._y + portHeightInc, portWidthInc, portHeightInc);
	            renderer.render(this.sceneCube, this.cameraPZ, null, false);
	            renderer.setViewport(this._x + 2.99 * portWidthInc, this._y + portHeightInc, portWidthInc, portHeightInc);
	            renderer.render(this.sceneCube, this.cameraNZ, null, false);
	        }
	        renderer.setViewport(this.tempViewport.x, this.tempViewport.y, this.tempViewport.z, this.tempViewport.w);
	      }
	    }
	  }], [{
	    key: 'css',
	    value: function css(el, styles) {
	      // if args length is 3, then el, property, value

	      if (!el || !el.style) {
	        return;
	      }

	      if (typeof styles === 'string') {
	        if (arguments.length === 2) {
	          return el.style[arguments[1]];
	        } else {
	          el.style[arguments[1]] = arguments[2];
	        }
	      }
	      for (var i in styles) {
	        if (styles.hasOwnProperty(i)) {
	          el.style[i] = styles[i];
	        }
	      }
	    }
	  }, {
	    key: 'addClass',
	    value: function addClass(el, className) {
	      if (el.classList) {
	        el.classList.add(className);
	      } else {
	        el.className += ' ' + className;
	      }
	    }
	  }]);

	  return DebugTextureViewer;
	}(_Box3DComponent3.default);

	exports.default = DebugTextureViewer;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	@vname Default Filters
	@vid render_filters_component
	@vdescription Stores the default filter settings that cameras will use when rendering.
	@vfilter application
	@vcategory Rendering
	@vreserved
	@vtype bloom {
	  'attributes': {
	    'enabled': { type: 'b', default: false },
	    'strength': { type: 'f', default: 1.0, min: 0.1, max: 4.0, step: 0.001 },
	    'sigma': { type: 'f', default: 4, min: 1, max: 8, step: 0.001, advanced: true },
	    'resolution': { type: 'i', default: 256, min: 64, max: 1024, step: 1, advanced: true },
	  }
	}
	@vtype tonemapping {
	  'attributes': {
	    'enabled': { type: 'b', default: false, description: 'Enable tone-mapping.' },
	    'adaptive': { type: 'b', 'description': 'Automatically adjusts the tone-mapping every frame based on the average luminance of the scene.',default: true },
	    'adaptSpeed': { type: 'f', 'description': 'The speed at which adaptive tone-mapping works. Higher number is faster.', default: 0.5, min: 0.1, max: 20.0 },
	    'exposureBias':     { type: 'f', 'description': 'Adjusts the overall brightness of the image. Use this to tweak the final result of tone-mapping.', default: 1.0, min: 0.0001, max: 5.0 },
	    'maxLuminance':  { type: 'f', 'description': 'Sets the maximum brightness reached before pixels become white after tone-mapping.', default: 16, min: 0.01, max: 25.0 },
	    'luminance':  { type: 'f', 'description': 'When the \'Adaptive\' feature is turned off, this will set the scene luminance to be used by tone-mapping.', default: 1.0, min: 0.0001, max: 16.0 },
	  },
	}
	@vtype fxaa {
	  'attributes': {
	    'enabled': { type: 'b', default: false },
	  }
	}
	@vtype vignette {
	  'attributes': {
	    'enabled': { type: 'b', default: false },
	    'offset': { type: 'f', default: 1.0, min: 0.0, max: 1.0, step: 0.001 },
	    'darkness': { type: 'f', default: 1.0, min: 0.0, max: 5.0, step: 0.001 }
	  }
	}
	@vtype ssao {
	  'attributes': {
	    'enabled': { type: 'b', default: false },
	    'fogEnabled': { type: 'i', default: 1, advanced: true },
	    'depthScale': { type: 'f', default: 2000.0, min: 100.0, max: 50000.0, step: 0.001, advanced: true },
	    'onlyAO':       { type: 'i', default: 0 },
	    'aoClamp':      { type: 'f', default: 0.75, advanced: true },
	    'lumInfluence': { type: 'f', default: 0.75, advanced: true },
	    'noiseAmount': { type: 'f', default: 0.0002 },
	    'radius': { type: 'f', default: 16.0 },
	    'diffArea': { type: 'f', default: 0.4, advanced: true },
	    'gDisplace': { type: 'f', default: 0.4, advanced: true }
	  }
	}
	@vtype dof {
	  'attributes': {
	    'enabled': { type: 'b', default: false },
	    'aspect': { type: 'f', default: 1.0, min: 0.0, max: 1.0, step: 0.001, advanced: true },
	    'aperture': { type: 'f', default: 0.4, min: 0.0, max: 1.0, step: 0.001 },
	    'focus': { type: 'f', default: 0.980, min: 0.0, max: 1.0, step: 0.001 },
	  }
	}
	@vtype sepia {
	  'attributes': {
	    'enabled': { type: 'b', default: false },
	    'amount': { type: 'f', default: 0.9, min: 0.0, max: 1.0, step: 0.001 }
	  }
	}
	@vtype video {
	  'attributes': {
	    'enabled': { type: 'b', default: false },
	    'nIntensity': { type: 'f', default: 0.15 },
	    'sIntensity': { type: 'f', default: 0.05 },
	    'sCount':     { type: 'f', default: 512 },
	    'grayscale':  { type: 'b', default: false }
	  },
	}
	@vattr bloom bloom { description: '' }
	@vattr tonemapping toneMapping { description: '' }
	@vattr fxaa fxaa { description: '' }
	@vattr vignette vignette { description: '' }
	@vattr ssao ssao { description: '' }
	@vattr dof dof { description: '' }
	@vattr sepia sepia { description: '' }
	@vattr video video { description: '' }
	*/
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DefaultFilters = function (_Box3DComponent) {
	  _inherits(DefaultFilters, _Box3DComponent);

	  function DefaultFilters() {
	    _classCallCheck(this, DefaultFilters);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(DefaultFilters).call(this));
	  }

	  _createClass(DefaultFilters, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.init();
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.getRuntime().on('getDefaultFilters', this.getDefaultFilters, this);
	      this.updateFilters();
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {
	      this.shutdown();
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.getRuntime().off('getDefaultFilters', this.getDefaultFilters, this);
	    }
	  }, {
	    key: 'getDefaultFilters',
	    value: function getDefaultFilters(callback) {
	      if (_lodash2.default.isFunction(callback)) {
	        return callback(this);
	      }
	    }
	  }, {
	    key: 'onEnable',
	    value: function onEnable() {
	      this.updateFilters();
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      this.updateFilters();
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged() {
	      this.updateFilters();
	    }
	  }, {
	    key: 'updateFilters',
	    value: function updateFilters() {

	      var that = this;

	      var toneMapping = this.toneMapping;
	      if (toneMapping && toneMapping.enabled && this.isEnabled()) {

	        setTimeout(function () {
	          var renderer = that.getComponentRegistry().getFirstByScriptId('box3d_renderer');
	          if (renderer) {
	            renderer.setAttribute('gammaOutput', false);
	          }
	        }, 0);
	      } else {
	        setTimeout(function () {
	          var renderer = that.getComponentRegistry().getFirstByScriptId('box3d_renderer');
	          if (renderer) {
	            renderer.setAttribute('gammaOutput', true);
	          }
	        }, 0);
	      }

	      this.getRuntime().trigger('defaultFiltersChanged');
	    }
	  }]);

	  return DefaultFilters;
	}(_Box3DComponent3.default);

	exports.default = DefaultFilters;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid environment
	 * @vname Environment
	 * @vcategory Rendering
	 * @vfilter scene
	 * @vattr Boolean enableSceneLights {
	 *   'description': '', 'type': 'b',
	 *   'default': true
	 * }
	 * @vattr Asset envDiffuseTexture {
	 *   'description': '', 'type': 'asset',
	 *   'filter': {
	 *     'textureCube': true,
	 *     'texture2D': true,
	 *     'renderTexture2D': true,
	 *     'renderTextureCube': true
	 *   },
	 *   'default': null
	 * }
	 * @vattr Asset envSpecularTexture {
	 *   'description': '', 'type': 'asset',
	 *   'filter': {
	 *     'textureCube': true,
	 *     'texture2D': true,
	 *     'renderTexture2D': true,
	 *     'renderTextureCube': true
	 *   },
	 *   'default': null
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Environment = function (_Box3DComponent) {
	  _inherits(Environment, _Box3DComponent);

	  function Environment() {
	    _classCallCheck(this, Environment);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Environment).call(this));
	  }

	  _createClass(Environment, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.init();
	    }
	  }, {
	    key: 'init',
	    value: function init() {}
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {

	      this.shutdown();
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {}
	  }, {
	    key: 'addIblToMaterials',
	    value: function addIblToMaterials() {
	      var materials = this.getRuntime().assetRegistry.Materials.assets;
	      var mat, i, tex;
	      for (i in materials) {
	        if (materials.hasOwnProperty(i)) {
	          mat = materials[i];
	          mat.setProperty('useSceneLights', this.enableSceneLights);
	          _log2.default.error('Refactor me for new HDR environment map setup.');
	          mat.setProperty('useEnvironmentMap', !!(this.envDiffuseTexture || this.envSpecularTexture));
	          tex = this.envDiffuseTexture;
	          mat.setProperty('diffuseEnvironmentMap2D', tex ? tex.id : null);
	          tex = this.envSpecularTexture;
	          mat.setProperty('specularEnvironmentMap2D', tex ? tex.id : null);
	        }
	      }
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged() {
	      this.addIblToMaterials();
	    }
	  }]);

	  return Environment;
	}(_Box3DComponent3.default);

	exports.default = Environment;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid event_handler_component
	 * @vname Event Handler
	 * @vcategory Interaction
	 * @vattr Event listen {
	 *   description: 'The event to listen for. When this event is captured, all of the defined trigger events will be fired.'
	 * }
	 * @vattr Event[] triggers {
	 *   description: 'Fire each of these events in response to the captured listen event.'
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function callEvent(object, eventName, parameters) {
	  var events,
	      data = [],
	      i;

	  if (object.getEvents) {
	    events = object.getEvents();
	    data.push(eventName);

	    if (events[eventName]) {
	      for (i in events[eventName].params) {
	        if (!_lodash2.default.isUndefined(parameters[i]) && !_lodash2.default.isNull(parameters[i])) {
	          data.push(parameters[i]);
	        } else {
	          data.push(events[eventName].params[i].default);
	        }
	      }
	    }

	    object.trigger.apply(object, data);
	  } else {
	    data.push(eventName);
	    object.trigger.apply(object, data.concat(parameters));
	  }
	}

	var EventHandler = function (_Box3DComponent) {
	  _inherits(EventHandler, _Box3DComponent);

	  function EventHandler() {
	    _classCallCheck(this, EventHandler);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(EventHandler).call(this));
	  }

	  /**
	   * Called immediately after after component creation
	   */

	  _createClass(EventHandler, [{
	    key: 'init',
	    value: function init() {
	      // this.box3DEntity is available
	      var local = 'this ' + this.getEntity().getType();
	      var sourceEvent = this.listen;
	      var entity;
	      var bindEventName;

	      if (sourceEvent && this.isEnabled()) {
	        if (sourceEvent.eventScope === local) {
	          entity = this.getEntity();
	          this.listenTo(entity, sourceEvent.event, this.onEvent);
	        } else if (sourceEvent.eventScope === 'object') {
	          entity = this.getRuntime().getEntityById(sourceEvent.object);
	          if (entity) {
	            this.listenTo(entity, sourceEvent.event, this.onEvent);
	          }
	        } else if (sourceEvent.eventScope === 'asset') {
	          entity = this.getRuntime().getEntityById(sourceEvent.asset);
	          if (entity) {
	            this.listenTo(entity, sourceEvent.event, this.onEvent);
	          }
	        } else {
	          entity = this.getGlobalEvents();
	          this.listenTo(entity, sourceEvent.event, this.onEvent);
	        }
	        bindEventName = sourceEvent.event + ':bound';
	        this.getRuntime().trigger(bindEventName, entity);
	      }
	    }
	  }, {
	    key: 'onEvent',
	    value: function onEvent() {
	      if (this.isEnabled()) {
	        var local = 'this ' + this.getEntity().getType();
	        var actions = this.triggers;
	        _lodash2.default.each(actions, _lodash2.default.bind(function (action) {
	          if (action) {
	            var eventName = action.event;
	            var parameters = action.parameters;
	            var entity;
	            if (action.eventScope === local) {
	              callEvent(this.getEntity(), eventName, parameters);
	            } else if (action.eventScope === 'object') {
	              entity = this.getRuntime().getEntityById(action.object);
	              if (entity) {
	                callEvent(entity, eventName, parameters);
	              }
	            } else if (action.eventScope === 'asset') {
	              entity = this.getRuntime().getEntityById(action.asset);
	              if (entity) {
	                callEvent(entity, eventName, parameters);
	              }
	            } else {
	              callEvent(this.getGlobalEvents(), eventName, parameters);
	            }
	          }
	        }, this));
	      }
	    }

	    /**
	     * Called when a verold object is destroyed or this component is removed
	     * from a verold object.
	     */

	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      // make sure to clean up any events or other bindings that you have created
	      // to avoid memory leaks
	    }
	  }]);

	  return EventHandler;
	}(_Box3DComponent3.default);

	exports.default = EventHandler;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	@vid exploder_component
	@vname Exploder
	@vreserved
	@vdescription Explodes your objects and their hierarchies into different formations. Great for showing off parts in a model!
	@vfilter object
	@vcategory Animation
	@vattr float Time {default: 1.5, 'description': 'The amount of time to explode and contract the child meshes' }
	@vattr v3 Scale {default: { 'x' : 2.0, 'y' : 2.0, 'z' : 2.0 }, 'description': 'The scale of the explosion'}
	@vattr dd Formation {
	  'description' : 'Formation to use when exploding the hierarchy of this object.',
	  'default' : 'Scale',
	  'options': { 'Circle' : 'Circle', 'Square Grid': 'Grid', 'Scale Out' : 'Scale' },
	}
	@vevent local playExplode { 'action':true, 'category':'Exploder', 'parameters' : [] }
	@vevent local playContract { 'action':true, 'category':'Exploder', 'parameters' : [] }
	@vevent local toggleExploder { 'action':true, 'category':'Exploder', 'parameters' : [] }
	@vevent local resetExploder { 'action':true, 'category':'Exploder', 'parameters' : [] }
	@vevent local useCircleExplode { 'action':true, 'category':'Exploder', 'parameters' : [ {'name':'Scale','type':'v3', 'description':'The scale to apply to the explosion', 'default':{ 'x':1, 'y':1, 'z':1 } } ] }
	@vevent local useGridExplode { 'action':true, 'category':'Exploder', 'parameters' : [ {'name':'Scale','type':'v3', 'description':'The scale to apply to the explosion', 'default':{ 'x':1, 'y':1, 'z':1 } } ] }
	@vevent local useScaleOutExplode { 'action':true, 'category':'Exploder', 'parameters' : [ {'name':'Scale','type':'v3', 'description':'The scale to apply to the explosion', 'default':{ 'x':2, 'y':2, 'z':2 } } ] }
	@vevent other beginExplode { 'action':false, 'category':'Exploder', 'parameters' : [] }
	@vevent other endExplode { 'action':false, 'category':'Exploder', 'parameters' : [] }
	@vevent other beginContract { 'action':false, 'category':'Exploder', 'parameters' : [] }
	@vevent other endContract { 'action':false, 'category':'Exploder', 'parameters' : [] }
	*/
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var tmpVec = new _three2.default.Vector3();
	function back(progress, x) {
	  return Math.pow(progress, 2) * ((x + 1) * progress - x);
	}

	function makeEaseInOut(progress) {
	  if (progress < .5) {
	    return back(2 * progress, 2.0) / 2;
	  } else {
	    return (2 - back(2 * (1 - progress), 2.0)) / 2;
	  }
	}

	var Exploder = function (_Box3DComponent) {
	  _inherits(Exploder, _Box3DComponent);

	  function Exploder() {
	    _classCallCheck(this, Exploder);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Exploder).call(this));

	    _this.m_fTime = 99999999.0;
	    _this.m_vDestTest = null;

	    //dest and src positions
	    _this.m_objects = [];
	    _this.m_sources = [];
	    _this.m_destinations = [];

	    _this.m_nDirection = -1;
	    return _this;
	  }

	  _createClass(Exploder, [{
	    key: 'init',
	    value: function init() {
	      //event listeners
	      this.listenTo(this.getEntity(), 'playExplode', this.explode.bind(this));
	      this.listenTo(this.getEntity(), 'playContract', this.contract.bind(this));
	      this.listenTo(this.getEntity(), 'toggleExploder', this.toggle.bind(this));
	      this.listenTo(this.getEntity(), 'resetExploder', this.reset.bind(this));
	      this.listenTo(this.getEntity(), 'useCircleExplode', this.explode.bind(this, 'Circle'));
	      this.listenTo(this.getEntity(), 'useGridExplode', this.explode.bind(this, 'Grid'));
	      this.listenTo(this.getEntity(), 'useScaleOutExplode', this.explode.bind(this, 'Scale'));
	    }
	  }, {
	    key: 'update',
	    value: function update(delta) {
	      if (this.hasThreeData() && this.m_fTime < this.Time) {
	        this.m_fTime += delta;

	        var percent = this.m_fTime > this.Time ? 1.0 : makeEaseInOut(Math.max(0.0, Math.min(1.0, this.m_fTime / this.Time)));

	        for (var i = 0; i < this.m_objects.length; ++i) {

	          var obj = this.m_objects[i];

	          var dst = obj.runtimeData.parent.worldToLocal(tmpVec.copy(this.m_destinations[i])).clone();
	          var srcPos = this.m_nDirection > 0 ? this.m_sources[i] : dst;
	          var destPos = this.m_nDirection > 0 ? dst : this.m_sources[i];
	          this.lerpVec(srcPos, destPos, percent, tmpVec);

	          obj.alignToPosition(tmpVec, {
	            x: 0.0,
	            y: 0.0,
	            z: 0.0
	          });
	        }

	        if (this.m_fTime > this.Time) {
	          this.getEntity().trigger(this.m_nDirection > 0 ? 'endExplode' : 'endContract');
	        }
	      }
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      for (var i = 0; i < this.m_objects.length; ++i) {
	        var obj = this.m_objects[i];
	        obj.alignToPosition(this.m_sources[i], {
	          x: 0.0,
	          y: 0.0,
	          z: 0.0
	        });
	      }

	      this.m_objects.length = 0;
	      this.m_sources.length = 0;
	      this.m_destinations.length = 0;
	      this.m_fTime = this.Time; //KILL IT
	    }
	  }, {
	    key: 'contract',
	    value: function contract() {
	      if (!this.isEnabled()) return;

	      this.m_nDirection = -1;
	      this.m_fTime = 0;
	      this.getEntity().trigger('beginContract');
	    }
	  }, {
	    key: 'explode',
	    value: function explode(formation, scale) {
	      if (!this.isEnabled()) return;

	      this.reset();

	      var children = this.getEntity().getObjects({
	        type: 'mesh'
	      });
	      var center = this.getEntity().getCenterInWorldSpace();
	      var rotation = this.getEntity().getQuaternionInWorldSpace();
	      var length = children.length;
	      var formationFunc = this.getFormationFunc(formation || this.Formation, center, rotation, length, scale || this.Scale).bind(this);

	      // Explode each child mesh...
	      for (var i = 0; i < length; ++i) {
	        formationFunc(i, tmpVec, children[i]);

	        this.m_objects.push(children[i]);
	        this.m_sources.push(children[i].getCenterInParentSpace());
	        this.m_destinations.push(tmpVec.clone());
	      }

	      this.m_fTime = 0;
	      this.m_nDirection = 1;
	      this.getEntity().trigger('beginExplode');
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle() {
	      if (this.m_nDirection > 0) {
	        this.contract();
	      } else {
	        this.explode();
	      }
	    }
	  }, {
	    key: 'getFormationFunc',
	    value: function getFormationFunc(formation, center, rotation, length, scale) {
	      var func = null;

	      switch (formation) {
	        case 'Grid':
	          //get the length of both sides of the grid! All grids want to be square
	          var square = Math.floor(Math.sqrt(length));
	          var xInc = 1 / square;
	          var yInc = 1 / square;
	          var startX = -xInc * (square - 1) * 0.5;
	          var startY = (square - 1) / 2 * yInc;
	          var row = 0;
	          func = function func(index, outVec) {
	            var x = startX + index % square * xInc;
	            var y = startY - row * yInc;
	            outVec.set(x, y, 0).applyQuaternion(rotation);

	            outVec.copy(center.clone().add(outVec.multiply(scale)));

	            if (index % square === square - 1) row++;
	          };
	          break;
	        case 'Scale':

	          func = function func(index, outVec, child) {

	            child.getCenterInWorldSpace(outVec);

	            var distVec = outVec.clone().sub(center);

	            outVec.copy(center).add(distVec.multiply(scale));
	          };
	          break;
	        case 'Circle':
	        default:
	          func = function func(index, outVec) {
	            var x = center.x + scale.x * Math.cos(2 * Math.PI * index / length);
	            var y = center.y + scale.y * Math.sin(2 * Math.PI * index / length);
	            outVec.set(x, y, center.z).applyQuaternion(rotation);
	          };

	      }

	      return func;
	    }
	  }, {
	    key: 'lerpVec',
	    value: function lerpVec(src, dst, val, out) {

	      var x = src.x + (dst.x - src.x) * val;
	      var y = src.y + (dst.y - src.y) * val;
	      var z = src.z + (dst.z - src.z) * val;

	      out.set(x, y, z);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {}
	  }]);

	  return Exploder;
	}(_Box3DComponent3.default);

	exports.default = Exploder;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid free_camera_controller
	 * @vname Free Camera Controller
	 * @vcategory Camera-Controllers
	 * @vfilter camera
	 * @vattr Float inertialDamping {
	 *   default: 0.20,
	 *   min: 0.0,
	 *   max: 1.0,
	 *   type: 'f'
	 * }
	 * @vattr Boolean usePointerLock {
	 *   description: '',
	 *   default: false
	 * }
	 * @vattr Boolean invertX { default: false }
	 * @vattr Boolean invertY { default: false }
	 * @vattr Boolean invertZoom { default: false }
	 * @vattr Float lookSpeed { default: 1.0, min: 0.0001, max: 1000 }
	 * @vattr Float movementSpeed { default: 300, max: 1000, min: 0.01 }
	 * @vattr Vector2 pitchAngleBounds { default: { max: 75.0, min: -75 }, max: { max: 90.0, min: 90.0 }, min: { max: -90, min: -90.01 }}
	 * @vattr Boolean enablePan { default: true }
	 * @vattr Boolean enableZoom { default: true }
	 * @vevent local enableFreeCameraController { parameters: [] }
	 * @vevent local disableFreeCameraController { parameters: [] }
	 * @vevent local toggleFreeCameraController { parameters: [] }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var FreeCamera = function (_Box3DComponent) {
	  _inherits(FreeCamera, _Box3DComponent);

	  function FreeCamera() {
	    _classCallCheck(this, FreeCamera);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FreeCamera).call(this));

	    _this._moveVector = new _three2.default.Vector3();
	    _this._tempVector = new _three2.default.Vector3();
	    _this._tempVector2 = new _three2.default.Vector3();

	    _this.tempCamera = new _three2.default.PerspectiveCamera();
	    _this.tempEuler = new _three2.default.Euler();
	    _this.tempQuaternion = new _three2.default.Quaternion();

	    _this._currentMoveSpeed = new _three2.default.Vector3();

	    _this.ellapsedTimeSinceInput = 0;
	    _this.enablePan = undefined;
	    _this.enableZoom = undefined;

	    _this.invertX = false;
	    _this.invertY = false;
	    _this.invertZoom = false;
	    _this.touchState = 'none';
	    _this.touchLast = new _three2.default.Vector2();
	    _this.touchLastPinchDist = 0.0;
	    _this.touchYStart = 0.0;
	    _this.lookDelta = new _three2.default.Vector2();
	    _this.moveDelta = new _three2.default.Vector3();
	    _this.zoomDelta = 0.0;
	    _this.currentLookSpeed = new _three2.default.Vector2();
	    _this.currentMoveSpeed = new _three2.default.Vector3();
	    _this.currentZoomSpeed = 0.0;
	    _this.lookDeltaLength = 0.0;
	    _this.moveDeltaLength = 0.0;

	    _this.pitchAngleBoundsRadians = {
	      max: 0.0,
	      min: 0.0
	    };

	    _this.onMouseDown_PointerLock = _this.onMouseDown_PointerLock.bind(_this);
	    _this.onMouseUp_PointerLock = _this.onMouseUp_PointerLock.bind(_this);
	    return _this;
	  }

	  /**
	   * Called immediately after after component creation
	   */

	  _createClass(FreeCamera, [{
	    key: 'init',
	    value: function init() {

	      if (this.usePointerLock) {
	        this.togglePointerLock(true);
	      }
	      var engine = this.getRuntime();

	      this.pitchAngleBoundsRadians.max = Math.PI * this.pitchAngleBounds.max / 180.0;
	      this.pitchAngleBoundsRadians.min = Math.PI * this.pitchAngleBounds.min / 180.0;

	      if (window.Box3D.isMobile()) {
	        engine.on('touchStart', this.onTouchStart, this);
	        engine.on('touchMove', this.onTouchMove, this);
	        engine.on('touchEnd', this.onTouchEnd, this);
	      } else {
	        engine.on('mouseMove', this.onMouseMove, this);
	        engine.on('mouseScroll', this.onMouseScroll, this);
	      }

	      this.getEntity().on('enableFreeCameraController', this.freeCameraEnable, this);
	      this.getEntity().on('disableFreeCameraController', this.freeCameraDisable, this);
	      this.getEntity().on('toggleFreeCameraController', this.freeCameraToggle, this);
	    }

	    /**
	     * Called when a verold object is destroyed or this component is removed
	     * from a verold object.
	     */

	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      // make sure to clean up any events or other bindings that you have created
	      // to avoid memory leaks
	      var engine = this.getRuntime();

	      if (window.Box3D.isMobile()) {
	        engine.off('touchStart', this.onTouchStart, this);
	        engine.off('touchMove', this.onTouchMove, this);
	        engine.off('touchEnd', this.onTouchEnd, this);
	      } else {
	        engine.off('mouseMove', this.onMouseMove, this);
	        engine.off('mouseScroll', this.onMouseScroll, this);
	      }
	      this.getEntity().off('enableFreeCameraController', this.freeCameraEnable, this);
	      this.getEntity().off('disableFreeCameraController', this.freeCameraDisable, this);
	      this.getEntity().off('toggleFreeCameraController', this.freeCameraToggle, this);

	      this.togglePointerLock(false);
	    }
	  }, {
	    key: 'setTargetByID',
	    value: function setTargetByID(targetID, interpTime) {
	      var targetObj = this.getEntity().getParentAsset().getObjectById(targetID);
	      this.setTarget(targetObj, interpTime);
	    }
	  }, {
	    key: 'setTarget',
	    value: function setTarget(targetObj) {
	      if (targetObj) {
	        var that = this;
	        var targetPos = new _three2.default.Vector3();
	        if (targetObj.isBox3DEntity) {
	          this.getScene().once('loadChildren', function () {
	            targetObj.getCenterInWorldSpace(targetPos);
	            var dist;
	            var bb = targetObj.getBounds();
	            if (bb) {
	              dist = this.adjustDistanceForObject(targetObj);
	            } else {
	              targetObj.traverse(function (obj) {
	                bb = obj.getBounds();
	                if (bb) {
	                  dist = that.adjustDistanceForObject(obj);
	                  return true;
	                }
	              });
	            }
	            var runtimeData = this.getRuntimeData();
	            runtimeData.lookAt(targetPos);
	            var distanceVector = new _three2.default.Vector3(0, 0, dist);
	            distanceVector.applyQuaternion(runtimeData.quaternion);
	            targetPos.add(distanceVector);
	            runtimeData.position.copy(targetPos);
	          }, this);
	          this.getScene().loadChildren();
	        }
	      }
	    }
	  }, {
	    key: 'adjustDistanceForObject',
	    value: function adjustDistanceForObject(targetObj) {
	      var bb = targetObj.getBounds();
	      if (bb) {
	        var dist = new _three2.default.Vector3();
	        dist.set(bb.max.x - bb.min.x, bb.max.y - bb.min.y, bb.max.z - bb.min.z);
	        var scale = new _three2.default.Vector3();
	        scale.setFromMatrixScale(targetObj.runtimeData.matrixWorld);
	        dist.multiply(scale);
	        var size = dist.length();
	        var newDist = Math.abs(size / (2.0 * Math.tan(this.getRuntimeData().fov * Math.PI / 360.0)));
	        return newDist;
	      }
	    }

	    /**
	     * Called per Box3DRuntime update (per frame)
	     * @param  {float} delta The number of seconds since the last call to `update`
	     */

	  }, {
	    key: 'preUpdate',
	    value: function preUpdate(delta) {

	      if (this.hasThreeData() && this.isEnabled()) {

	        //Check WASD state and move camera appropriately
	        //Also check for modifier keys like ctrl and cmd. If these are pressed,
	        //don't move the camera.
	        var input = this.getInput();
	        var modKey = input.keyDown('ctrl') || input.keyDown('cmd');
	        var forwardKey = input.keyDown('upArrow') || input.keyDown('W');
	        var backwardKey = input.keyDown('downArrow') || input.keyDown('S');
	        var leftKey = input.keyDown('leftArrow') || input.keyDown('A');
	        var rightKey = input.keyDown('rightArrow') || input.keyDown('D');

	        if (!modKey && (forwardKey || backwardKey || leftKey || rightKey)) {

	          if (this.enableZoom) {
	            if (forwardKey) {
	              this.moveDelta.z = -delta;
	            } else if (backwardKey) {
	              this.moveDelta.z = delta;
	            }
	          }
	          if (this.enablePan) {
	            if (rightKey) {
	              this.moveDelta.x = -delta;
	            } else if (leftKey) {
	              this.moveDelta.x = delta;
	            }
	          }
	        }
	        this.updateCamera(delta);
	      }
	    }
	  }, {
	    key: 'postUpdate',
	    value: function postUpdate() {
	      this.hasChanged = false;
	    }
	  }, {
	    key: 'updateCamera',
	    value: function updateCamera(delta) {

	      //Handle inverting the controls
	      if (this.invertX) {
	        this.lookDelta.x *= -1.0;
	        this.moveDelta.x *= -1.0;
	      }
	      if (this.invertY) {
	        this.lookDelta.y *= -1.0;
	        this.moveDelta.y *= -1.0;
	      }
	      if (this.invertZoom) {
	        this.zoomDelta *= -1.0;
	      }

	      //Handle speed modifier keys
	      var speedMod = 1.0;
	      if (this.getInput().keyDown('shift')) {
	        speedMod = 5.0;
	      }
	      // else if ( this.getInput().keyDown( 'ctrl' ) ) {
	      //   speedMod = 0.25;
	      // }

	      var damping = Math.min((delta - 0.017) * 33.3 + this.inertialDamping, 1.0);
	      var oneMinusDamping = 1.0 - damping;

	      this.currentLookSpeed.x = oneMinusDamping * this.currentLookSpeed.x + damping * 6.0 * speedMod * this.lookSpeed * this.lookDelta.x;
	      this.currentLookSpeed.y = oneMinusDamping * this.currentLookSpeed.y + damping * 6.0 * speedMod * this.lookSpeed * this.lookDelta.y;

	      //If the movement controls have been used, update the movement speed.
	      this.currentMoveSpeed.x = oneMinusDamping * this.currentMoveSpeed.x + damping * speedMod * this.movementSpeed * this.moveDelta.x;
	      this.currentMoveSpeed.y = oneMinusDamping * this.currentMoveSpeed.y + damping * speedMod * this.movementSpeed * this.moveDelta.y;
	      this.currentMoveSpeed.z = oneMinusDamping * this.currentMoveSpeed.z + damping * speedMod * this.movementSpeed * this.moveDelta.z;

	      //Handle zoom
	      this.currentMoveSpeed.z += oneMinusDamping * this.currentZoomSpeed + damping * speedMod * this.movementSpeed * this.zoomDelta;

	      //Update the three camera based on the current movement speed.
	      var runtimeData = this.getRuntimeData();

	      //Using current x,y rotation speed, determine the new quaternion for the camera
	      //New position is based on the distance and direction to target

	      this.tempEuler.set(this.currentLookSpeed.y, this.currentLookSpeed.x, 0.0);
	      this.tempQuaternion.setFromEuler(this.tempEuler);
	      runtimeData.quaternion.multiply(this.tempQuaternion);

	      //Set bounds on the pitch angle
	      this.tempEuler.setFromQuaternion(runtimeData.quaternion, 'YXZ');
	      if (-this.tempEuler.x > this.pitchAngleBoundsRadians.max) {
	        this.tempEuler.x = -this.pitchAngleBoundsRadians.max;
	        runtimeData.quaternion.setFromEuler(this.tempEuler);
	        this.currentLookSpeed.y = 0.0;
	      } else if (-this.tempEuler.x < this.pitchAngleBoundsRadians.min) {
	        this.tempEuler.x = -this.pitchAngleBoundsRadians.min;
	        runtimeData.quaternion.setFromEuler(this.tempEuler);
	        this.currentLookSpeed.y = 0.0;
	      }

	      //Handle linear movement of the camera
	      this._tempVector.copy(this.currentMoveSpeed);
	      this._tempVector.x *= -1.0;
	      this._tempVector.applyQuaternion(runtimeData.quaternion);
	      runtimeData.position.add(this._tempVector);

	      //Set the camera's position using the orientation and
	      this._tempVector.set(0.0, 0.0, -10.0);
	      this._tempVector.applyQuaternion(runtimeData.quaternion);
	      this._tempVector.add(runtimeData.position);

	      runtimeData.lookAt(this._tempVector);

	      if (this.currentZoomSpeed || this.currentLookSpeed.x || this.currentLookSpeed.y || this.currentMoveSpeed.x || this.currentMoveSpeed.y || this.currentMoveSpeed.z) {
	        this.getRuntime().needsRender = true;
	        this.hasChanged = true;
	      }

	      this.lookDelta.set(0.0, 0.0);
	      this.moveDelta.set(0.0, 0.0, 0.0);
	      this.zoomDelta = 0.0;
	    }
	  }, {
	    key: 'freeCameraEnable',
	    value: function freeCameraEnable() {
	      this.enable();
	    }
	  }, {
	    key: 'freeCameraDisable',
	    value: function freeCameraDisable() {
	      this.disable();
	    }
	  }, {
	    key: 'freeCameraToggle',
	    value: function freeCameraToggle() {
	      if (this.isEnabled()) {
	        this.disable();
	      } else {
	        this.enable();
	      }
	      if (this.usePointerLock && !this.isEnabled()) {
	        document.exitPointerLock();
	      }
	    }
	  }, {
	    key: 'getEulerAngles',
	    value: function getEulerAngles(outEuler) {
	      var returnVector = outEuler;
	      if (!outEuler) {
	        returnVector = new _three2.default.Euler();
	      }
	      returnVector.setFromQuaternion(this.getRuntimeData().quaternion, 'YXZ');

	      return returnVector;
	    }
	  }, {
	    key: 'setEulerAngles',
	    value: function setEulerAngles(euler) {
	      this.getRuntimeData().quaternion.setFromEuler(euler);
	    }
	  }, {
	    key: 'togglePointerLock',
	    value: function togglePointerLock(on) {
	      var renderer = this.getThreeRenderer();
	      if (!renderer) {
	        return;
	      }
	      this.usePointerLock = on;

	      if (this.usePointerLock) {
	        renderer.domElement.addEventListener('mousedown', this.onMouseDown_PointerLock);
	      } else {
	        renderer.domElement.removeEventListener('mousedown', this.onMouseDown_PointerLock);
	      }
	    }
	  }, {
	    key: 'onMouseDown_PointerLock',
	    value: function onMouseDown_PointerLock(event) {
	      if (this.isEnabled() && event.button === 0 || event.button === 2) {
	        this.getThreeRenderer().domElement.requestPointerLock();

	        this.getThreeRenderer().domElement.addEventListener('mouseup', this.onMouseUp_PointerLock);
	      }
	    }
	  }, {
	    key: 'onMouseUp_PointerLock',
	    value: function onMouseUp_PointerLock(event) {
	      if (this.box3DEntity) {
	        if (event.button === 2 && this.getInput().mouseButtonUp('left') || event.button === 0 && this.getInput().mouseButtonUp('right')) {
	          this.getThreeRenderer().domElement.removeEventListener('mouseup', this.onMouseUp_PointerLock);
	          document.exitPointerLock();
	        }
	      }
	    }
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      if (this.isEnabled()) {
	        var rightButton = this.getInput().mouseButtonDown('right');
	        var leftButton = this.getInput().mouseButtonDown('left');

	        if (rightButton && this.enablePan) {
	          this.moveDelta.x = event.scenePercentDeltaX;
	          this.moveDelta.y = event.scenePercentDeltaY;
	        } else if (leftButton) {
	          this.lookDelta.x = -event.scenePercentDeltaX;
	          this.lookDelta.y = -event.scenePercentDeltaY;
	        }
	      }
	    }
	  }, {
	    key: 'onMouseScroll',
	    value: function onMouseScroll(delta) {
	      if (this.isEnabled() && _lodash2.default.isNumber(delta) && this.enableZoom) {
	        this.zoomDelta = -delta * 0.1;
	      }
	    }
	  }, {
	    key: 'onTouchStart',
	    value: function onTouchStart(event) {

	      if (this.isEnabled()) {

	        var touches = event.touches;
	        if (!touches) {
	          return;
	        }

	        switch (touches.length) {

	          case 1:
	            // one-fingered touch: rotate
	            this.touchState = 'rotate';
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);

	            break;

	          case 2:
	            // two-fingered touch: dolly
	            this.touchState = 'zoom';

	            var dx = touches[0].scenePercentX - touches[1].scenePercentX;
	            var dy = touches[0].scenePercentY - touches[1].scenePercentY;
	            var distance = Math.sqrt(dx * dx + dy * dy);

	            this.touchLastPinchDist = distance;
	            this.touchYStart = touches[0].scenePercentY;
	            break;

	          case 3:
	            // three-fingered touch: pan
	            this.touchState = 'pan';

	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            break;

	          default:
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            this.touchLastPinchDist = -1;
	        }
	      }
	    }
	  }, {
	    key: 'onTouchMove',
	    value: function onTouchMove(event) {

	      var touches = event.touches;
	      if (!touches) {
	        return;
	      }
	      // var speedMod = 0.3;
	      var dx, dy;
	      switch (touches.length) {

	        case 1:
	          // one-fingered touch: rotate
	          if (this.touchLast.x >= 0) {
	            dx = -0.5 * (this.touchLast.x - touches[0].scenePercentX);
	            dy = -0.5 * (this.touchLast.y - touches[0].scenePercentY);
	          } else {
	            dx = 0.0;
	            dy = 0.0;
	          }

	          this.touchLast.x = touches[0].scenePercentX;
	          this.touchLast.y = touches[0].scenePercentY;

	          this.ellapsedTimeSinceInput = 0;

	          this.lookDelta.set(dx, dy);

	          break;

	        case 2:
	          // two-fingered touch: dolly

	          dx = touches[0].scenePercentX - touches[1].scenePercentX;
	          dy = touches[0].scenePercentY - touches[1].scenePercentY;
	          var distance = Math.sqrt(dx * dx + dy * dy);

	          if (this.touchLast.x >= 0.0) {
	            var pinchChange = this.touchLastPinchDist - distance;
	            var scrollChange = this.touchLast.y - touches[0].scenePercentY;
	            if (Math.abs(pinchChange) > Math.abs(scrollChange)) {
	              this.zoomDelta = 20.0 * pinchChange;
	            } else {
	              this.zoomDelta = 20.0 * scrollChange;
	            }
	          }

	          this.touchLastPinchDist = distance;
	          this.touchLast.x = touches[0].scenePercentX;
	          this.touchLast.y = touches[0].scenePercentY;

	          break;

	        case 3:
	          // three-fingered touch: pan
	          dx = touches[0].scenePercentX - this.touchLast.x;
	          dy = touches[0].scenePercentY - this.touchLast.y;

	          if (this.touchLast.x >= 0.0) {
	            this.moveDelta.set(dx, dy, 0.0);
	          }

	          this.touchLast.x = touches[0].scenePercentX;
	          this.touchLast.y = touches[0].scenePercentY;
	          break;
	      }
	    }
	  }, {
	    key: 'onTouchEnd',
	    value: function onTouchEnd() /* event */{
	      this.touchLast.set(-1.0, -1.0);
	      this.touchLastPinchDist = -1;
	      this.touchState = 'none';
	    }
	  }]);

	  return FreeCamera;
	}(_Box3DComponent3.default);

	exports.default = FreeCamera;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid fullscreen_script
	 * @vname Fullscreen
	 * @vfilter application
	 * @vdescription ses fullscreen API to make your app fullscreen!
	  * This will fullscreen the canvas' parent element, so your UI can be
	  * fullscreened as well! If a selector is provided, then we will fullscreen that element instead.
	 * @vcategory Rendering
	 * @vevent local toggleFullscreen {'scope' : 'local', 'action':true, 'category':'Rendering', 'parameters' : []}
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Fullscreen = function (_Box3DComponent) {
	  _inherits(Fullscreen, _Box3DComponent);

	  function Fullscreen() {
	    _classCallCheck(this, Fullscreen);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Fullscreen).call(this));

	    _this.el = null;
	    _this.fsEnabled = false;
	    return _this;
	  }

	  _createClass(Fullscreen, [{
	    key: 'init',
	    value: function init() {
	      this.toggle = this.toggle.bind(this);
	      this.onEnable = this.onEnable.bind(this);
	      this.onDisable = this.onDisable.bind(this);

	      this.getEntity().on('toggleFullscreen', this.toggle, this);
	      this.on('enable', this.onEnable, this);
	      this.on('disable', this.onDisable, this);

	      this.listenTo(this.getGlobalEvents(), 'fullscreen::toggle', this.toggle);
	      this.listenTo(this.getGlobalEvents(), 'fullscreen::enable', this.enable);
	      this.listenTo(this.getGlobalEvents(), 'fullscreen::disable', this.disable);
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle() {
	      if (this.fsEnabled) {
	        this.onDisable();
	      } else {
	        this.onEnable();
	      }
	    }

	    //@param vrDisplay : in the case that we have a VR device, let's feed directly into it :D

	  }, {
	    key: 'onEnable',
	    value: function onEnable(vrDisplay) {
	      if (!this.el) {
	        this.attachFullscreenAPI();
	      }

	      this.el.requestFullscreen({
	        vrDisplay: vrDisplay
	      });
	      this.fsEnabled = true;
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      if (!this.el) {
	        this.attachFullscreenAPI();
	      }

	      if (this.fsEnabled) {
	        document.exitFullscreen();
	      }
	      this.fsEnabled = false;
	    }
	  }, {
	    key: 'attachFullscreenAPI',
	    value: function attachFullscreenAPI() {

	      this.el = this.getRuntime().container;

	      this.el.requestFullscreen = this.el.requestFullscreen || this.el.requestFullScreen || this.el.mozRequestFullscreen || this.el.mozRequestFullScreen || this.el.webkitRequestFullscreen || this.el.webkitRequestFullScreen || this.el.msRequestFullscreen || this.el.msRequestFullScreen;

	      document.exitFullscreen = document.exitFullscreen || document.exitFullScreen || document.mozCancelFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.webkitExitFullScreen || document.msExitFullscreen || document.msExitFullScreen;

	      document.addEventListener('fullscreenchange', this.onFullscreenChange.bind(this), false);
	      document.addEventListener('mozfullscreenchange', this.onFullscreenChange.bind(this), false);
	      document.addEventListener('webkitfullscreenchange', this.onFullscreenChange.bind(this), false);
	      document.addEventListener('msfullscreenchange', this.onFullscreenChange.bind(this), false);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {}
	  }]);

	  return Fullscreen;
	}(_Box3DComponent3.default);

	exports.default = Fullscreen;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid hmd_renderer_script
	 * @vname HMD Effect
	 * @vfilter camera
	 * @vdescription Enables a head-mounted display effect (e.g. for Oculus Rift) on this camera.
	 * @vcategory Rendering
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function fovToNDCScaleOffset(fov) {

	  var pxscale = 2.0 / (fov.leftTan + fov.rightTan);
	  var pxoffset = (fov.leftTan - fov.rightTan) * pxscale * 0.5;
	  var pyscale = 2.0 / (fov.upTan + fov.downTan);
	  var pyoffset = (fov.upTan - fov.downTan) * pyscale * 0.5;
	  return {
	    scale: [pxscale, pyscale],
	    offset: [pxoffset, pyoffset]
	  };
	}

	function fovPortToProjection(fov, rightHanded, zNear, zFar) {

	  rightHanded = rightHanded === undefined ? true : rightHanded;
	  zNear = zNear === undefined ? 0.01 : zNear;
	  zFar = zFar === undefined ? 10000.0 : zFar;

	  var handednessScale = rightHanded ? -1.0 : 1.0;

	  // start with an identity matrix
	  var mobj = new _three2.default.Matrix4();
	  var m = mobj.elements;

	  // and with scale/offset info for normalized device coords
	  var scaleAndOffset = fovToNDCScaleOffset(fov);

	  // X result, map clip edges to [-w,+w]
	  m[0 * 4 + 0] = scaleAndOffset.scale[0];
	  m[0 * 4 + 1] = 0.0;
	  m[0 * 4 + 2] = scaleAndOffset.offset[0] * handednessScale;
	  m[0 * 4 + 3] = 0.0;

	  // Y result, map clip edges to [-w,+w]
	  // Y offset is negated because this proj matrix transforms from world coords with Y=up,
	  // but the NDC scaling has Y=down (thanks D3D?)
	  m[1 * 4 + 0] = 0.0;
	  m[1 * 4 + 1] = scaleAndOffset.scale[1];
	  m[1 * 4 + 2] = -scaleAndOffset.offset[1] * handednessScale;
	  m[1 * 4 + 3] = 0.0;

	  // Z result (up to the app)
	  m[2 * 4 + 0] = 0.0;
	  m[2 * 4 + 1] = 0.0;
	  m[2 * 4 + 2] = zFar / (zNear - zFar) * -handednessScale;
	  m[2 * 4 + 3] = zFar * zNear / (zNear - zFar);

	  // W result (= Z in)
	  m[3 * 4 + 0] = 0.0;
	  m[3 * 4 + 1] = 0.0;
	  m[3 * 4 + 2] = handednessScale;
	  m[3 * 4 + 3] = 0.0;

	  mobj.transpose();

	  return mobj;
	}

	function fovToProjection(fov, rightHanded, zNear, zFar) {

	  var DEG2RAD = Math.PI / 180.0;

	  var fovPort = {
	    upTan: Math.tan(fov.upDegrees * DEG2RAD),
	    downTan: Math.tan(fov.downDegrees * DEG2RAD),
	    leftTan: Math.tan(fov.leftDegrees * DEG2RAD),
	    rightTan: Math.tan(fov.rightDegrees * DEG2RAD)
	  };

	  return fovPortToProjection(fovPort, rightHanded, zNear, zFar);
	}

	var HMDRenderEffect = function (_Box3DComponent) {
	  _inherits(HMDRenderEffect, _Box3DComponent);

	  function HMDRenderEffect() {
	    _classCallCheck(this, HMDRenderEffect);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(HMDRenderEffect).call(this));

	    _this.eyeFOVL = { upDegrees: 50, downDegrees: 50, leftDegrees: 50, rightDegrees: 50 };
	    _this.eyeFOVR = { upDegrees: 50, downDegrees: 50, leftDegrees: 50, rightDegrees: 50 };
	    _this.eyeTranslationL = { x: -0.032, y: 0.0, z: 0.0 };
	    _this.eyeTranslationR = { x: 0.032, y: 0.0, z: 0.0 };
	    _this.renderOptions = {
	      viewPort: {
	        x: 0,
	        y: 0,
	        width: 100,
	        height: 100
	      },
	      clearColor: false,
	      clearDepth: false,
	      delta: 0.16
	    };
	    return _this;
	  }

	  _createClass(HMDRenderEffect, [{
	    key: 'init',
	    value: function init() {
	      this.getRuntime().on('resize', this.resize, this);
	      this.on('enable', this.onEnabled, this);
	      this.on('disable', this.onDisabled, this);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.getRuntime().off('resize', this.resize, this);
	      this.off('enable', this.onEnabled, this);
	      this.off('disable', this.onDisabled, this);
	      if (this.hmdRenderTarget) {
	        this.hmdRenderTarget.dispose();
	      }
	    }
	  }, {
	    key: 'componentsLoaded',
	    value: function componentsLoaded() {
	      this.renderViewComp = this.getEntity().componentRegistry.getFirstByScriptId('render_view_component');
	      this.renderFiltersComp = this.getEntity().componentRegistry.getFirstByScriptId('camera_filters_script');
	    }
	  }, {
	    key: 'entityLoaded',
	    value: function entityLoaded() {
	      this.initHMDEffect();
	      if (this.isEnabled()) {
	        this.onEnabled();
	      }
	    }
	  }, {
	    key: 'resize',
	    value: function resize() {}
	  }, {
	    key: 'onEnabled',
	    value: function onEnabled() {

	      if (this.renderViewComp) {
	        this.renderViewComp.setRenderOverride(this.renderView, this);
	        this.resize();
	        this.getRuntime().needsRender = true;
	      }
	    }
	  }, {
	    key: 'onDisabled',
	    value: function onDisabled() {
	      if (this.renderViewComp) {
	        this.renderViewComp.setRenderOverride(null);
	        this.getRuntime().needsRender = true;
	      }
	    }
	  }, {
	    key: 'renderView',
	    value: function renderView(delta) {

	      var scene;
	      var renderer;
	      var threeRenderer;
	      var camera;
	      var cameraL = this.cameraL;
	      var cameraR = this.cameraR;

	      if (this.isEnabled()) {

	        scene = this.getThreeScene();
	        renderer = this.getRenderer();
	        threeRenderer = this.getThreeRenderer();
	        camera = this.getRuntimeData();

	        if (camera && scene) {

	          var size = threeRenderer.getSize();
	          size.width /= 2;

	          threeRenderer.enableScissorTest(true);
	          threeRenderer.clear();

	          if (camera.parent === null) camera.updateMatrixWorld();

	          cameraL.projectionMatrix = fovToProjection(this.eyeFOVL, true, camera.near, camera.far);
	          cameraR.projectionMatrix = fovToProjection(this.eyeFOVR, true, camera.near, camera.far);

	          camera.matrixWorld.decompose(cameraL.position, cameraL.quaternion, cameraL.scale);
	          camera.matrixWorld.decompose(cameraR.position, cameraR.quaternion, cameraR.scale);

	          this.cameraL.translateX(this.eyeTranslationL.x);
	          this.cameraR.translateX(this.eyeTranslationR.x);

	          this.renderOptions.viewPort.x = 0;
	          this.renderOptions.viewPort.y = 0;
	          this.renderOptions.viewPort.width = size.width;
	          this.renderOptions.viewPort.height = size.height;
	          this.renderOptions.delta = delta;
	          // render left eye
	          threeRenderer.setScissor(0, 0, size.width, size.height);
	          renderer.renderView(scene, cameraL, this.renderOptions);

	          // render right eye
	          this.renderOptions.viewPort.x = size.width;
	          threeRenderer.setScissor(size.width, 0, size.width, size.height);
	          renderer.renderView(scene, cameraR, this.renderOptions);
	          threeRenderer.enableScissorTest(false);
	        }
	      }
	    }
	  }, {
	    key: 'initHMDEffect',
	    value: function initHMDEffect() {
	      var that = this;
	      // Perspective cameras for each eye
	      this.cameraL = new _three2.default.PerspectiveCamera();
	      this.cameraR = new _three2.default.PerspectiveCamera();

	      this.getInput().whenVrDeviceAvailable(function onVrDevice(vrDevice) {
	        var eyeParamsL = vrDevice.getEyeParameters('left');
	        var eyeParamsR = vrDevice.getEyeParameters('right');
	        that.eyeTranslationL = eyeParamsL.eyeTranslation;
	        that.eyeTranslationR = eyeParamsR.eyeTranslation;
	        that.eyeFOVL = eyeParamsL.recommendedFieldOfView;
	        that.eyeFOVR = eyeParamsR.recommendedFieldOfView;
	      });

	      this.resize();
	    }
	  }]);

	  return HMDRenderEffect;
	}(_Box3DComponent3.default);

	exports.default = HMDRenderEffect;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	@vid input_controller_component
	@vname Input Controller
	@vfilter application
	@vcategory Input
	@vattr custom mouseEvents {
	  attributes : {
	    'enable' : { type: 'b', default: true, description: 'Enable mouse events?' },
	    'scroll' : { type: 'b', default: true, description: 'Listen to scroll events?' },
	    'scroll_preventDefault' : { type: 'b', default: false, description: 'Prevent default scroll behaviour?' },
	    'move' : { type: 'b', default: true, description: 'Listen to mouse move events?' },
	    'down' : { type: 'b', default: true, description: 'Listen to mouse down event?' },
	    'down_preventDefault' : { type: 'b', default: false, description: 'Prevent default mouse down behaviour?' },
	    'up' : { type: 'b', default: true, description: 'Listen to mouse up event?' },
	    'double_click' : { type: 'b', default: true, description: 'Listen to double click event?' },
	    'leave' : { type: 'b', default: true, description: 'Listen to mouse leave event' },
	    'contextMenu' : { type: 'b', default: true, description: 'Listen for the context menu event? (ie, right click)' },
	    'contextMenu_preventDefault' : { type: 'b', default: true, description: 'Prevent context menu default behaviour (ie, the context menu popping open)' },
	    'eventHandler' : { type: 'b', default: true, description: 'Events fired from the mouse are picked up by the Event Handler'  }
	  }
	}

	@vattr custom touchEvents {
	  attributes : {
	    'enable': { type: 'b', default: true, description: 'Enable touch events?' },
	    'start': { type: 'b', default: true, description: 'Listen for Touch Start' },
	    'start_preventDefault': { type: 'b', default: true, description: 'Prevent default behaviour of touch start event' },
	    'end': { type: 'b', default: true, description: 'Listen for touch end event' },
	    'cancel': { type: 'b', default: true, description: 'Listen for touch cancel event' },
	    'leave': { type: 'b', default: true, description: 'Listen for touch leave event' },
	    'move': { type: 'b', default: true, description: 'Listen for touch move event' },
	    'move_preventDefault': { type: 'b', default: true, description: 'Prevent default move behaviour (ie, dragging the window)' },
	    'dragBufferDistance' : {
	      type : 'float', default : 4.0,
	      name : 'Drag Buffer Distance',
	      description : 'The distance from initial touch down that you need to move your finger before a drag event is fired, in pixels'
	    },
	    'eventHandler' : { type: 'b', default: true, description: 'Events fired from the touches are picked up by the Event Handler'  }
	  }
	}

	@vattr custom keyEvents {
	  attributes : {
	    'enable': { type: 'b', default: true, description: 'Enable keyboard events' },
	    'down': { type: 'b', default: true, description: 'Listen to key down events' },
	    'up': { type: 'b', default: true, description: 'Listen to key up events' },
	    'preventDefault': { type: 'b', default: false, description: 'Prevent default keypress behaviour' },
	    'eventHandler' : { type: 'b', default: true, description: 'Events fired from the keys are picked up by the Event Handler'  }
	  }
	}

	@vattr custom vrEvents {
	  attributes : {
	    'enable': { type: 'b', default: true, description: 'Enable events from VR devices' },
	    'position': { type: 'b', default: true, description: 'Enable events for sensor position changes (when available from device)' },
	    'orientation': { type: 'b', default: true, description: 'Enable events for sensor orientation changes' },
	  }
	}

	@vevent global mouse_down_left { scope: 'global', action: false, 'category':'Input - Mouse', parameters: [] }
	@vevent global mouse_down_right { scope: 'global', action: false, 'category':'Input - Mouse', parameters: [] }
	@vevent global mouse_down_middle { scope: 'global', action: false, 'category':'Input - Mouse', parameters: [] }
	@vevent global mouse_up_left { scope: 'global', action: false, 'category':'Input - Mouse', parameters: [] }
	@vevent global mouse_up_right { scope: 'global', action: false, 'category':'Input - Mouse', parameters: [] }
	@vevent global mouse_up_middle { scope: 'global', action: false, 'category':'Input - Mouse', parameters: [] }
	@vevent global keypress_a { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_b { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_c { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_d { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_f { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_g { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_e { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_h { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_i { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_j { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_k { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_l { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_m { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_n { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_o { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_p { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_q { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_r { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_s { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_t { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_u { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_v { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_w { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_x { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_y { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_z { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_up_arrow { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_down_arrow { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_left_arrow { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_right_arrow { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global keypress_space { 'scope': 'global', 'action': false, 'category':'Input - Keys', 'parameters': [] }
	@vevent global touch_start { 'scope': 'global', 'action': false, 'category':'Input - Touch', 'parameters': [] }
	@vevent global touch_end { 'scope': 'global', 'action': false, 'category':'Input - Touch', 'parameters': [] }
	@vevent global vr_orientation { 'scope': 'global', 'action': false, 'category':'Input - VR', 'parameters': [] }
	@vevent global vr_position { 'scope': 'global', 'action': false, 'category':'Input - VR', 'parameters': [] }
	*/
	/* eslint-enable */
	/* global PositionSensorVRDevice, HMDVRDevice */
	/* global Box3D */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function Box3DMouseVector(x, y) {
	  this.x = x || 0;
	  this.y = y || 0;
	}

	function Box3DInputEvent(event, name) {
	  this.event = event;
	  this.name = name;
	}

	function oculusFilter(device) {
	  return device.deviceName.toLowerCase().indexOf('oculus') !== -1;
	}

	function cardboardFilter(device) {
	  return device.deviceName.toLowerCase().indexOf('cardboard') === -1;
	}

	var percents = {
	  scenePercentX: 0,
	  scenePercentY: 0
	};

	var pos = {
	  sceneX: 0,
	  sceneY: 0
	};

	var keyCodes = {
	  'tab': 9,
	  'shift': 16,
	  'ctrl': 17,
	  'alt': 18,
	  'esc': 27,
	  'space': 32,
	  'rightArrow': 39,
	  'leftArrow': 37,
	  'upArrow': 38,
	  'downArrow': 40,
	  'delete': 46,
	  '0': 48,
	  '1': 49,
	  '2': 50,
	  '3': 51,
	  '4': 52,
	  '5': 53,
	  '6': 54,
	  '7': 55,
	  '8': 56,
	  '9': 57,
	  'a': 65,
	  'b': 66,
	  'c': 67,
	  'd': 68,
	  'e': 69,
	  'f': 70,
	  'g': 71,
	  'h': 72,
	  'i': 73,
	  'j': 74,
	  'k': 75,
	  'l': 76,
	  'm': 77,
	  'n': 78,
	  'o': 79,
	  'p': 80,
	  'q': 81,
	  'r': 82,
	  's': 83,
	  't': 84,
	  'u': 85,
	  'v': 86,
	  'w': 87,
	  'x': 88,
	  'y': 89,
	  'z': 90,
	  'A': 65,
	  'B': 66,
	  'C': 67,
	  'D': 68,
	  'E': 69,
	  'F': 70,
	  'G': 71,
	  'H': 72,
	  'I': 73,
	  'J': 74,
	  'K': 75,
	  'L': 76,
	  'M': 77,
	  'N': 78,
	  'O': 79,
	  'P': 80,
	  'Q': 81,
	  'R': 82,
	  'S': 83,
	  'T': 84,
	  'U': 85,
	  'V': 86,
	  'W': 87,
	  'X': 88,
	  'Y': 89,
	  'Z': 90,
	  'cmd': 91,
	  'numpad_0': 96,
	  'numpad_1': 97,
	  'numpad_2': 98,
	  'numpad_3': 99,
	  'numpad_4': 100,
	  'numpad_5': 101,
	  'numpad_6': 102,
	  'numpad_7': 103,
	  'numpad_8': 104,
	  'numpad_9': 105,
	  '>': 187,
	  '<': 188,
	  '_': 189,
	  '.': 190,
	  '/': 191,
	  '[': 219,
	  ']': 221
	};

	var InputController = function (_Box3DComponent) {
	  _inherits(InputController, _Box3DComponent);

	  function InputController() {
	    _classCallCheck(this, InputController);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(InputController).call(this));

	    _this.inputQueue = [];
	    _this.inputPool = [];
	    _this.mouseButtonState = new Array(3);
	    _this.mouseButtonStatePrevious = new Array(3);
	    _this.mouseButtons = {
	      left: 0,
	      middle: 1,
	      right: 2
	    };

	    _this.mousePosition = new Box3DMouseVector();
	    _this.mousePositionPercent = new Box3DMouseVector();
	    _this.mousePreviousPosition = new Box3DMouseVector();

	    _this.mouseDragState = new Array(3);
	    _this.mouseDragStatePrevious = new Array(3);
	    _this.mouseDragDistance = [{}, {}, {}];

	    _this.touchPosition = new Box3DMouseVector();
	    _this.touchPositionPercent = new Box3DMouseVector();
	    _this.touchPreviousPosition = new Box3DMouseVector();
	    _this.touchDragState = false;
	    _this.touchDragStatePrevious = false;

	    _this.touchesStart = [];
	    _this.touchesOutOfBuffer = [];

	    _this.keyState = new Array(256);
	    _this.keyStatePrevious = new Array(256);

	    _this.canvas = null;
	    _this.pointerLockElement = null;
	    _this.pointerLockEnabled = false;

	    _this.vrDevice = null;
	    _this.vrInputs = [];
	    return _this;
	  }

	  _createClass(InputController, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.listenTo(this.getRuntime(), 'preUpdate', this.preUpdate.bind(this));
	      this.listenTo(this.getRuntime(), 'postUpdate', this.postUpdate.bind(this));
	      this.init();
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.canvas = this.getRuntime().canvas;
	      this.pointerLockElement = this.canvas;
	      this.pointerLockElement.requestPointerLock = this.pointerLockElement.requestPointerLock || this.pointerLockElement.mozRequestPointerLock || this.pointerLockElement.webkitRequestPointerLock;

	      document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;

	      this.clearKeyStates = this.clearKeyStates.bind(this);
	      this.onMouseMove = this.onMouseMove.bind(this);
	      this.onMouseDown = this.onMouseDown.bind(this);
	      this.onMouseUp = this.onMouseUp.bind(this);
	      this.onMouseWheel = this.onMouseWheel.bind(this);
	      this.onMouseLeave = this.onMouseLeave.bind(this);
	      this.onContextMenu = this.onContextMenu.bind(this);
	      this.onKeyDown = this.onKeyDown.bind(this);
	      this.onKeyUp = this.onKeyUp.bind(this);
	      this.onTouchStart = this.onTouchStart.bind(this);
	      this.onTouchEnd = this.onTouchEnd.bind(this);
	      this.onTouchCancel = this.onTouchCancel.bind(this);
	      this.onTouchLeave = this.onTouchLeave.bind(this);
	      this.onTouchMove = this.onTouchMove.bind(this);
	      this.onDoubleClick = this.onDoubleClick.bind(this);

	      window.addEventListener('blur', this.clearKeyStates, false);

	      if (this.isEnabled()) {
	        if (this.mouseEvents.enable) {
	          this.enableMouseEvents();
	        }
	        if (this.keyEvents.enable) {
	          this.enableKeyEvents();
	        }
	        if (this.touchEvents.enable) {
	          this.enableTouchEvents();
	        }
	        if (this.vrEvents.enable) {
	          // VR input devices
	          if (navigator.getVRDevices) {
	            navigator.getVRDevices().then(this.onInitVRDevices.bind(this));
	          }
	        }
	      }
	    }

	    /*UTILITIES*/
	    //if output is passed in, append scenePercent properties to it

	  }, {
	    key: 'getScenePercent',
	    value: function getScenePercent(event, output) {
	      output = output || percents;

	      this.getScenePos(event, event);
	      output.scenePercentX = event.sceneX / this.getRuntime().getRenderer().getWidth();
	      output.scenePercentY = event.sceneY / this.getRuntime().getRenderer().getHeight();

	      return output;
	    }

	    //if output is passed in, we are going to append sceneX and sceneY properties to it

	  }, {
	    key: 'getScenePos',
	    value: function getScenePos(event, output) {
	      output = output || pos;

	      var rect = event.target.getBoundingClientRect();
	      var top = rect.top + document.body.scrollTop;
	      var left = rect.left + document.body.scrollLeft;

	      output.sceneX = event.clientX - left;
	      output.sceneY = event.clientY - top;

	      return output;
	    }
	    /*END UTILITIES*/

	    //if mouse enabled, turn on specific listeners

	  }, {
	    key: 'enableMouseEvents',
	    value: function enableMouseEvents() {
	      if (this.mouseEvents.move) {
	        this.canvas.addEventListener('mousemove', this.onMouseMove);
	      }

	      if (this.mouseEvents.down) {
	        this.canvas.addEventListener('mousedown', this.onMouseDown);
	      }

	      if (this.mouseEvents.scroll) {
	        this.canvas.addEventListener('wheel', this.onMouseWheel);
	      }

	      if (this.mouseEvents.double_click) {
	        this.canvas.addEventListener('dblclick', this.onDoubleClick);
	      }

	      document.body.addEventListener('mouseleave', this.onMouseLeave);
	      this.canvas.addEventListener('contextmenu', this.onContextMenu);
	    }

	    //if keys enabled, turn on specific listeners

	  }, {
	    key: 'enableKeyEvents',
	    value: function enableKeyEvents() {
	      if (this.keyEvents.down) {
	        document.addEventListener('keydown', this.onKeyDown);
	      }
	      if (this.keyEvents.up) {
	        document.addEventListener('keyup', this.onKeyUp);
	      }
	    }

	    //if touches enabled, turn on specific listeners

	  }, {
	    key: 'enableTouchEvents',
	    value: function enableTouchEvents() {
	      if (this.touchEvents.start) {
	        this.canvas.addEventListener('touchstart', this.onTouchStart);
	      }

	      if (this.touchEvents.end) {
	        this.canvas.addEventListener('touchend', this.onTouchEnd);
	      }

	      if (this.touchEvents.cancel) {
	        this.canvas.addEventListener('touchcancel', this.onTouchCancel);
	      }

	      if (this.touchEvents.leave) {
	        this.canvas.addEventListener('touchleave', this.onTouchLeave);
	      }

	      if (this.touchEvents.move) {
	        this.canvas.addEventListener('touchmove', this.onTouchMove);
	      }
	    }
	  }, {
	    key: 'clearKeyStates',
	    value: function clearKeyStates() {
	      if (this.keyState) {
	        for (var code = 0; code < this.keyState.length; ++code) {
	          this.keyState[code] = false;
	        }
	      }
	    }
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(e) {

	      e.mouseDelta = {};
	      e.mouseDelta.x = e.movementX || e.mozMovementX || e.webkitMovementX || 0;
	      e.mouseDelta.y = e.movementY || e.mozMovementY || e.webkitMovementY || 0;

	      if (!e.mouseDelta.y && !e.mouseDelta.x) {
	        e.mouseDelta.x = this.mousePosition.x - this.mousePreviousPosition.x;
	        e.mouseDelta.y = this.mousePosition.y - this.mousePreviousPosition.y;
	      }

	      //If we use pointer lock, we need to use virtual mouse positioning
	      //as mouseDelta is one of the few props that updates in PointerLock mode
	      if (this.pointerLockEnabled) {

	        this.mousePosition.x += e.mouseDelta.x;
	        this.mousePosition.y += e.mouseDelta.y;

	        this.mousePositionPercent.x = e.scenePercentX = this.mousePosition.x / this.getRuntime().getRenderer().getWidth();
	        this.mousePositionPercent.y = e.scenePercentY = this.mousePosition.y / this.getRuntime().getRenderer().getHeight();
	      } else {

	        this.getScenePercent(e, e);

	        this.mousePosition.x = e.sceneX || e.clientX;
	        this.mousePosition.y = e.sceneY || e.clientY;

	        this.mousePositionPercent.x = e.scenePercentX;
	        this.mousePositionPercent.y = e.scenePercentY;
	      }

	      e.scenePercentDeltaX = e.mouseDelta.x / this.getRuntime().getRenderer().getWidth();
	      e.scenePercentDeltaY = e.mouseDelta.y / this.getRuntime().getRenderer().getHeight();

	      for (var b = 0; b < this.mouseButtonState.length; b++) {
	        if (this.mouseButtonState[b] === true) {
	          this.mouseDragDistance[b].x += e.mouseDelta.x;
	          this.mouseDragDistance[b].y += e.mouseDelta.y;
	          var distance = this.mouseDragDistance[b];
	          if (distance.x * distance.x + distance.y * distance.y > 12) {
	            this.mouseDragState[b] = true;
	          }
	        } else {
	          this.mouseDragState[b] = false;
	        }
	      }
	      this.inputQueue.push(this.getInputEvent(e, 'mouseMove'));
	    }
	  }, {
	    key: 'onMouseDown',
	    value: function onMouseDown(e) {
	      this.getScenePercent(e, e);

	      this.mouseDragDistance[e.button] = new Box3DMouseVector();
	      if (!this.mouseUpBound) {
	        this.mouseUpBound = true;
	        document.addEventListener('mouseup', this.onMouseUp);
	      }

	      Array.prototype.forEach.call(document.querySelectorAll('input, textarea, select, option'), function (el) {
	        el.blur();
	      });

	      if (this.mouseEvents.down_preventDefault) {
	        e.preventDefault();
	      }
	      this.mouseButtonState[e.button] = true;
	      //this.getRuntime().trigger('mouseDown', event );
	      this.inputQueue.push(this.getInputEvent(e, 'mouseDown'));

	      if (this.mouseEvents.eventHandler) {
	        var button = this.getKeyByValue(this.mouseButtons, e.button);
	        if (button) {
	          this.getGlobalEvents().trigger('mouse_down_' + button);
	        }
	      }
	    }
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp(e) {
	      this.getScenePercent(e, e);

	      this.mouseButtonState[e.button] = false;
	      this.mouseDragState[e.button] = false;

	      this.mouseDragDistance[e.button].x = 0;
	      this.mouseDragDistance[e.button].y = 0;

	      if (this.mouseButtonUp('left') && this.mouseButtonUp('right') && this.mouseButtonUp('middle')) {

	        this.mouseUpBound = false;
	        document.removeEventListener('mouseup', this.onMouseUp);
	      }

	      this.inputQueue.push(this.getInputEvent(e, 'mouseUp'));

	      if (this.mouseEvents.eventHandler) {
	        var button = this.getKeyByValue(this.mouseButtons, e.button);
	        if (button) {
	          this.getGlobalEvents().trigger('mouse_up_' + button);
	        }
	      }
	    }
	  }, {
	    key: 'onDoubleClick',
	    value: function onDoubleClick(e) {
	      this.getScenePercent(e, e);

	      Array.prototype.forEach.call(document.querySelectorAll('input, textarea, select, option'), function (el) {
	        el.blur();
	      });

	      this.inputQueue.push(this.getInputEvent(e, 'doubleClick'));
	    }
	  }, {
	    key: 'onMouseWheel',
	    value: function onMouseWheel(e) {
	      if (this.mouseEvents.scroll_preventDefault) {
	        e.preventDefault();
	      }
	      var delta;
	      if (e.wheelDeltaY !== undefined) {
	        delta = 1 / 40 * e.wheelDeltaY;
	      } else if (Box3D.isIE()) {
	        delta = -e.deltaY / 40;
	      } else {
	        delta = -e.deltaY;
	      }
	      this.inputQueue.push(this.getInputEvent(delta, 'mouseScroll'));
	    }
	  }, {
	    key: 'onMouseLeave',
	    value: function onMouseLeave(e) {

	      for (var b = 0; b < this.mouseButtonState.length; b++) {
	        //If a button is down, force the up event
	        if (this.mouseButtonState[b]) {
	          this.onMouseUp(e);
	        }
	      }
	      this.clearKeyStates();
	    }
	  }, {
	    key: 'onContextMenu',
	    value: function onContextMenu(e) {
	      if (this.mouseEvents.contextMenu_preventDefault) {
	        e.preventDefault();
	      }

	      this.inputQueue.push(this.getInputEvent(e, 'contextMenu'));
	    }
	  }, {
	    key: 'onKeyDown',
	    value: function onKeyDown(e) {
	      if (document.activeElement && (document.activeElement.getAttribute('contenteditable') === 'true' || document.activeElement.tagName === 'DIV' || document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'SELECT' || document.activeElement.tagName === 'OPTION' || document.activeElement.tagName === 'TEXTAREA')) {
	        return;
	      }

	      if (this.keyEvents.preventDefault) {
	        e.preventDefault();
	      }

	      this.keyState[e.keyCode] = true;
	      this.inputQueue.push(this.getInputEvent(e, 'keyDown'));

	      if (this.keyEvents.eventHandler) {
	        var button = this.getKeyByValue(keyCodes, e.keyCode);
	        if (button) {
	          this.getGlobalEvents().trigger('keypress_' + button);
	        }
	      }
	    }
	  }, {
	    key: 'onKeyUp',
	    value: function onKeyUp(e) {
	      this.keyState[e.keyCode] = false;
	      this.inputQueue.push(this.getInputEvent(e, 'keyUp'));
	    }
	  }, {
	    key: 'onTouchStart',
	    value: function onTouchStart(e) {
	      if (this.touchEvents.start_preventDefault) {
	        e.preventDefault();
	      }

	      var event = this.onTouchEvent(e, 'touchStart');
	      this.touchesStart = event.touches;
	      this.touchesOutOfBuffer.length = 0;

	      if (event.touches.length) {
	        this.touchPosition.x = event.touches[event.touches.length - 1].sceneX;
	        this.touchPosition.y = event.touches[event.touches.length - 1].sceneY;
	        this.touchPositionPercent.x = event.touches[event.touches.length - 1].scenePercentX;
	        this.touchPositionPercent.y = event.touches[event.touches.length - 1].scenePercentY;
	      }

	      if (this.touchEvents.eventHandler) {
	        this.getGlobalEvents().trigger('touch_start');
	      }
	    }
	  }, {
	    key: 'onTouchEnd',
	    value: function onTouchEnd(e) {
	      if (this.touchEvents.end_preventDefault) {
	        e.preventDefault();
	      }
	      this.touchDragState = false;
	      this.onTouchEvent(e, 'touchEnd');

	      if (this.touchEvents.eventHandler) {
	        this.getGlobalEvents().trigger('touch_end');
	      }
	    }
	  }, {
	    key: 'onTouchCancel',
	    value: function onTouchCancel(e) {
	      if (this.touchEvents.cancel_preventDefault) {
	        e.preventDefault();
	      }
	      this.touchDragState = false;

	      var event = {};
	      event.originalEvent = e;
	      event.touches = [];

	      this.inputQueue.push(this.getInputEvent(event, 'touchCancel'));
	    }
	  }, {
	    key: 'onTouchLeave',
	    value: function onTouchLeave(e) {
	      if (this.touchEvents.leave_preventDefault) {
	        e.preventDefault();
	      }
	      this.touchDragState = false;
	      this.onTouchEvent(e, 'touchLeave');
	    }
	  }, {
	    key: 'onTouchMove',
	    value: function onTouchMove(e) {
	      if (this.touchEvents.move_preventDefault) {
	        e.preventDefault();
	      }
	      // this.touchDragState = true;
	      var event = {};
	      event.originalEvent = e;
	      event.touches = [];

	      for (var i = 0; i < e.touches.length; ++i) {
	        var touchObj = {};
	        this.getScenePos(e.touches[i], touchObj);
	        this.getScenePercent(e.touches[i], touchObj);
	        touchObj.originalTouch = e.touches[i];

	        if (this.distance(e.touches[i], this.touchesStart[i]) > this.touchEvents.dragBufferDistance) {
	          this.touchDragState = true;
	        }

	        event.touches.push(touchObj);
	      }
	      //assign final touch to the position value
	      //#TODO: REFACTOR ALL REFERENCES TO THIS!
	      if (event.touches.length) {
	        this.touchPosition.x = event.touches[event.touches.length - 1].sceneX;
	        this.touchPosition.y = event.touches[event.touches.length - 1].sceneY;
	        this.touchPositionPercent.x = event.touches[event.touches.length - 1].scenePercentX;
	        this.touchPositionPercent.y = event.touches[event.touches.length - 1].scenePercentY;
	      }
	      //TODO need touch drag distance state
	      this.inputQueue.push(this.getInputEvent(event, 'touchMove'));
	    }
	  }, {
	    key: 'onTouchEvent',
	    value: function onTouchEvent(e, eventName) {

	      var event = {};
	      event.originalEvent = e;
	      event.touches = [];
	      for (var i = 0; i < e.touches.length; ++i) {
	        var touchObj = {};
	        //save pos and percents to object
	        this.getScenePos(e.touches[i], touchObj);
	        this.getScenePercent(e.touches[i], touchObj);
	        touchObj.originalTouch = e.touches[i];
	        event.touches.push(touchObj);
	      }

	      this.inputQueue.push(this.getInputEvent(event, eventName));

	      //if we need to do something with the end result (ie: touch start, )
	      return event;
	    }

	    //process input events!

	  }, {
	    key: 'preUpdate',
	    value: function preUpdate() {
	      if (this.isEnabled()) {
	        while (this.inputQueue.length > 0) {
	          this.getRuntime().trigger(this.inputQueue[0].name, this.inputQueue[0].event);
	          this.recycleInputEvent(this.inputQueue.splice(0, 1)[0]);
	        }
	      }
	    }
	  }, {
	    key: 'postUpdate',
	    value: function postUpdate() {
	      if (this.isEnabled()) {
	        if (this.keyEvents.enable) {
	          for (var code = 0; code < this.keyState.length; code++) {
	            this.keyStatePrevious[code] = this.keyState[code];
	          }
	        }

	        if (this.mouseEvents.enable) {
	          for (var id = 0; id < this.mouseButtonState.length; id++) {
	            this.mouseButtonStatePrevious[id] = this.mouseButtonState[id];
	            this.mouseDragStatePrevious[id] = this.mouseDragState[id];
	          }
	          this.mousePreviousPosition.x = this.mousePosition.x;
	          this.mousePreviousPosition.y = this.mousePosition.y;
	        }

	        if (this.touchEvents.enable) {
	          this.touchDragStatePrevious = this.touchDragState;
	        }
	      }
	    }
	  }, {
	    key: 'recycleInputEvent',
	    value: function recycleInputEvent(obj) {
	      obj.name = null;
	      obj.event = null;
	      this.inputPool.push(obj);
	    }
	  }, {
	    key: 'getInputEvent',
	    value: function getInputEvent(event, name) {
	      if (this.inputPool.length === 0) {
	        //make more, dag nabbit!!
	        this.inputPool.push(new Box3DInputEvent());
	      }
	      var vEvent = this.inputPool.pop();
	      vEvent.event = event;
	      vEvent.name = name;
	      return vEvent;
	    }
	  }, {
	    key: 'mouseButtonDown',
	    value: function mouseButtonDown(button) {
	      if (button === 'any') {
	        for (var i in this.mouseButtons) {
	          if (this.mouseButtonState[this.mouseButtons[i]]) {
	            return true;
	          }
	        }
	        return false;
	      }
	      return this.mouseButtonState[this.mouseButtons[button]];
	    }
	  }, {
	    key: 'mouseButtonUp',
	    value: function mouseButtonUp(button) {
	      return !this.mouseButtonState[this.mouseButtons[button]];
	    }
	  }, {
	    key: 'mouseButtonPressed',
	    value: function mouseButtonPressed(button) {
	      return this.mouseButtonState[this.mouseButtons[button]] && !this.mouseButtonStatePrevious[this.mouseButtons[button]] ? true : false;
	    }
	  }, {
	    key: 'mouseButtonReleased',
	    value: function mouseButtonReleased(button) {
	      return !this.mouseButtonState[this.mouseButtons[button]] && this.mouseButtonStatePrevious[this.mouseButtons[button]] ? true : false;
	    }
	  }, {
	    key: 'keyPressed',
	    value: function keyPressed(key) {
	      return this.keyState[keyCodes[key]] && !this.keyStatePrevious[keyCodes[key]] ? true : false;
	    }
	  }, {
	    key: 'keyReleased',
	    value: function keyReleased(key) {
	      return !this.keyState[keyCodes[key]] && this.keyStatePrevious[keyCodes[key]] ? true : false;
	    }
	  }, {
	    key: 'keyDown',
	    value: function keyDown(key) {
	      return !!this.keyState[keyCodes[key]];
	    }
	  }, {
	    key: 'keyUp',
	    value: function keyUp(key) {
	      return !this.keyState[keyCodes[key]];
	    }
	  }, {
	    key: 'distance',
	    value: function distance(eventA, eventB) {
	      var dx = eventA.sceneX - eventB.sceneX,
	          dy = eventA.sceneY - eventB.sceneY;
	      return Math.sqrt(dx * dx + dy * dy);
	    }
	  }, {
	    key: 'getKeyByValue',
	    value: function getKeyByValue(obj, value) {
	      for (var prop in obj) {
	        if (obj.hasOwnProperty(prop) && obj[prop] === value) {
	          return prop;
	        }
	      }

	      _log2.default.warn('Value not present in object: ', value);
	      return null;
	    }
	  }, {
	    key: 'enablePointerLock',
	    value: function enablePointerLock() {
	      this.pointerLockEnabled = true;
	      this.pointerLockElement.requestPointerLock();
	    }
	  }, {
	    key: 'disablePointerLock',
	    value: function disablePointerLock() {
	      this.pointerLockEnabled = false;
	      document.exitPointerLock();
	    }
	  }, {
	    key: 'togglePointerLock',
	    value: function togglePointerLock() {
	      if (this.pointerLockEnabled) {
	        this.enablePointerLock();
	      } else {
	        this.disablePointerLock();
	      }
	    }
	  }, {
	    key: 'resetVrSensor',
	    value: function resetVrSensor() {
	      var i, length;
	      for (i = 0, length = this.vrInputs.length; i < length; ++i) {
	        var vrInput = this.vrInputs[i];

	        if (vrInput.resetSensor !== undefined) {
	          vrInput.resetSensor();
	        } else if (vrInput.zeroSensor !== undefined) {
	          vrInput.zeroSensor();
	        }
	      }
	    }
	  }, {
	    key: 'filterInvalidDevices',
	    value: function filterInvalidDevices(devices) {
	      devices = devices.filter(oculusFilter);

	      if (devices.length >= 1) {
	        return devices.filter(cardboardFilter);
	      } else {
	        return devices;
	      }
	    }
	  }, {
	    key: 'onInitVRDevices',
	    value: function onInitVRDevices(devices) {
	      devices = this.filterInvalidDevices(devices);
	      devices.forEach(function eachVrDevice(device) {
	        if (device instanceof PositionSensorVRDevice) {
	          this.vrInputs.push(device);
	        } else if (device instanceof HMDVRDevice) {
	          this.vrDevice = device;
	        }
	      }, this);
	      this.trigger('vrDeviceAvailable', this.vrDevice);
	    }
	  }, {
	    key: 'whenVrDeviceAvailable',
	    value: function whenVrDeviceAvailable(callback) {
	      if (this.vrDevice && _lodash2.default.isFunction(callback)) {
	        callback(this.vrDevice);
	      } else {
	        this.once('vrDeviceAvailable', function (device) {
	          if (_lodash2.default.isFunction(callback)) {
	            callback(device);
	          }
	        });
	      }
	    }
	  }, {
	    key: 'getVrInput',
	    value: function getVrInput() {
	      // TODO: I'm sure that this function can be made to take some
	      // parameters to help decide what input to return...
	      return this.vrInputs.length ? this.vrInputs[0] : null;
	    }
	  }, {
	    key: 'getVrDevice',
	    value: function getVrDevice() {
	      return this.vrDevice;
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      if (this.isEnabled()) {
	        if (this.vrEvents.enable) {
	          this.vrInputs.forEach(function (device) {
	            var state = device.getState();

	            if (state.orientation && this.vrEvents.orientation) {
	              this.getGlobalEvents().trigger('vr_orientation', state.orientation);
	            }

	            if (state.position && this.vrEvents.position) {
	              this.getGlobalEvents().trigger('vr_position', state.position);
	            }
	            this.getRuntime().needsRender = true;
	          }, this);
	        }
	      }
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      window.removeEventListener('blur', this.onBlur, false);

	      if (this.canvas) {
	        this.canvas.removeEventListener('touchstart', this.onTouchStart);
	        this.canvas.removeEventListener('touchend', this.onTouchEnd);
	        this.canvas.removeEventListener('touchcancel', this.onTouchCancel, this);
	        this.canvas.removeEventListener('touchleave', this.onTouchLeave, this);
	        this.canvas.removeEventListener('touchmove', this.onTouchMove);
	        this.canvas.removeEventListener('mousemove', this.onMouseMove);
	        document.removeEventListener('mouseup', this.onMouseUp);
	        this.canvas.removeEventListener('mousedown', this.onMouseDown);
	        this.canvas.removeEventListener('wheel', this.onMouseWheel);
	        document.removeEventListener('keydown', this.onKeyDown);
	        document.removeEventListener('keyup', this.onKeyUp);
	        document.body.removeEventListener('mouseleave', this.onMouseLeave);
	        this.canvas.removeEventListener('contextmenu', this.onContextMenu);
	        this.canvas.removeEventListener('dblclick', this.onDoubleClick);
	      }
	      this.mouseButtonState = undefined;
	      this.mouseButtonStatePrevious = undefined;
	      this.mouseDragState = undefined;
	      this.mouseDragStatePrevious = undefined;
	      this.mousePosition = undefined;
	      this.mousePreviousPosition = undefined;
	      this.touchPosition = undefined;
	      this.touchPreviousPosition = undefined;
	      this.keyState = undefined;
	      this.keyStatePrevious = undefined;
	      this.vrInputs = undefined;
	    }
	  }]);

	  return InputController;
	}(_Box3DComponent3.default);

	exports.default = InputController;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid animation
	 * @vname Keyframe Animation
	 * @vfilter object
	 * @vcategory Animation
	 * @vattr Boolean autoPlay  {
	 *   description: 'Play the animation once loaded',
	 *   default: true
	 * }
	 * @vattr Boolean loop {
	 *   description: 'Continuously replay the animation',
	 *   default: true
	 * }
	 * @vattr Float speed {
	 *   description: 'Playback speed',
	 *   default: 1.0,
	 *   min: 0.0,
	 *   max: 100.0
	 * }
	 * @vattr Float startTime {
	 *   description: 'Begin playback at this time offset',
	 *   default: 0.0,
	 *   min: 0.0
	 * }
	 * @vattr Float weight {
	 *   description: 'Blending weight',
	 *   default: 1.0,
	 *   min: 0.0,
	 *   max: 1.0
	 * }
	 * @vattr Asset asset {
	 *   description: 'Animation asset',
	 *   default: null,
	 *   filter: { animation: true }
	 * }
	 * @vattr ddfn take {
	 *   description: 'The name of the animation take',
	 *   default: null,
	 *   optionsFn: 'getTakes'
	 * }
	 * @vevent local playKeyframeAnimation {
	 *  scope: 'local',
	 *  action: true,
	 *  category: 'Animation',
	 *  parameters: [{
	 *    name: 'asset',
	 *    type: 'asset',
	 *    description: 'The animation asset to play.',
	 *    default: null,
	 *    filter: { 'animation': true }
	 *  }, {
	 *    name: 'take',
	 *    type: 's',
	 *    description: 'The animation take to play.',
	 *    default: null
	 *  }, {
	 *    name: 'loop',
	 *    type: 'b',
	 *    description: 'Continuously replay the animation.',
	 *    default: true
	 *  }, {
	 *    name: 'speed',
	 *    type: 'f',
	 *    description: 'Playback speed.',
	 *    default: 1.0,
	 *    min: 0.0,
	 *    max: 100.0
	 *  }, {
	 *    name: 'startTime',
	 *    type: 'f',
	 *    description: 'Begin playback at this time offset.',
	 *    default: 0.0,
	 *    min: 0.0
	 *  }]
	 * }
	 * @vevent local endKeyframeAnimation {
	 *   'scope': 'local',
	 *   'action': false,
	 *   'category': 'Animation',
	 *   'parameters': []
	 * }
	 * @vevent local pauseKeyframeAnimation {
	 *   'scope': 'local',
	 *   'action': true,
	 *   'category': 'Animation',
	 *   'parameters': []
	 * }
	 * @vevent local stopKeyframeAnimation {
	 *   scope: 'local',
	 *   action: true,
	 *   category: 'Animation',
	 *   'parameters': []
	 * }
	 * @vevent local toggleKeyframeAnimation {
	 *   scope: 'local',
	 *   action: true,
	 *   category: 'Animation',
	 *   parameters: []
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Animation = function (_Box3DComponent) {
	  _inherits(Animation, _Box3DComponent);

	  function Animation() {
	    _classCallCheck(this, Animation);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Animation).call(this));

	    _this.state = 'stopped';
	    return _this;
	  }

	  _createClass(Animation, [{
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      if (changes.indexOf('asset') !== -1) {
	        this.getScene().unregisterAnimation(this.getPreviousAttribute('asset'));
	        if (this.asset) {
	          this.getScene().registerAnimation(this.asset.id);
	        }
	        // Reload the animation while resetting the play state and current time.
	        this.reload(true);
	      }
	    }
	  }, {
	    key: 'editorInit',
	    value: function editorInit() {
	      this.init();

	      if (this.getEntity().isChildrenLoaded()) {
	        this.entityLoaded();
	      } else {
	        this.getEntity().once('loadChildren', this.entityLoaded, this);
	      }

	      this.getRuntime().on('update', this.update, this);
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {
	      this.getRuntime().off('update', this.update, this);
	      this.shutdown();
	    }

	    /**
	     * Returns the currently assigned animation asset.
	     * @method getAsset
	     * @return {Object} The currently assigned animation asset.
	     */

	  }, {
	    key: 'getAsset',
	    value: function getAsset() {
	      return this.asset;
	    }

	    /**
	     * Returns the animation speed.
	     * @method getSpeed
	     * @return {Number} The animation speed.
	     */

	  }, {
	    key: 'getSpeed',
	    value: function getSpeed() {
	      return this.speed;
	    }

	    /**
	     * Returns the currently assigned animation take.
	     * @method getTake
	     * @return {String} The animation take.
	     */

	  }, {
	    key: 'getTake',
	    value: function getTake() {
	      return this.take;
	    }

	    /**
	     * Returns a dictionary of all take names.
	     * @method getTakes
	     * @return {Object} The take dictionary.
	     */

	  }, {
	    key: 'getTakes',
	    value: function getTakes() {
	      var takeDict = {};

	      if (this.asset) {
	        var takeNames = this.asset.getTakeNames();

	        for (var idx in takeNames) {
	          var takeName = takeNames[idx];
	          takeDict[takeName] = takeName;
	        }
	      }

	      return takeDict;
	    }

	    /**
	     * Returns the animation time.
	     * @method getTime
	     * @return {Number} The animation time.
	     */

	  }, {
	    key: 'getTime',
	    value: function getTime() {
	      if (this.animation) {
	        return this.animation.currentTime;
	      }

	      return 0.0;
	    }

	    /**
	     * Returns the animation weight.
	     * @method getWeight
	     * @return {Number} The animation weight.
	     */

	  }, {
	    key: 'getWeight',
	    value: function getWeight() {
	      return this.weight;
	    }

	    /**
	     * Called as soon as the Box3DEntity begins to load.
	     */

	  }, {
	    key: 'init',
	    value: function init() {
	      // Listen to changes on the animation asset.
	      this.onAssetChanged = function () {
	        this.reload();
	      }.bind(this);

	      if (this.asset) {
	        this.listenTo(this.asset, 'propertyChanges', this.onAssetChanged);
	        this.getScene().registerAnimation(this.asset.id);
	      }

	      // this.box3DEntity is available here but the Three.JS data isn't loaded yet
	      this.getEntity().on('playKeyframeAnimation', this.playKeyframeAnimation, this);
	      this.getEntity().on('pauseKeyframeAnimation', this.pause, this);
	      this.getEntity().on('stopKeyframeAnimation', this.stop, this);
	      this.getEntity().on('toggleKeyframeAnimation', this.toggle, this);
	    }

	    /**
	     * Returns true if the animation is enabled; otherwise, returns false. When
	     * disabled, an animation does not have any effect on the scene. In contrast, a
	     * paused or stopped (but enabled) animation may still be blended with other
	     * animations. Animations are initially disabled, until the first call to
	     * `play`. Use `stop` to disable an animation. Disabling unneeded animations
	     * may have performance benefits.
	     * @method isEnabled
	     * @return {Boolean} true if looping is enabled; otherwise, false.
	     */

	  }, {
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.animation && this.animation.isPlaying;
	    }

	    /**
	     * Returns true if looping is enabled; otherwise, returns false.
	     * @method isLoop
	     * @return {Boolean} true if looping is enabled; otherwise, false.
	     */

	  }, {
	    key: 'isLoop',
	    value: function isLoop() {
	      return this.loop;
	    }

	    /**
	     * Returns true if the animation is paused; otherwise, returns false.
	     * @method isPaused
	     * @return {Boolean} true if the animation is paused; otherwise, false.
	     */

	  }, {
	    key: 'isPaused',
	    value: function isPaused() {
	      return this.state === 'paused';
	    }

	    /**
	     * Returns true if the animation is playing; otherwise, returns false.
	     * @method isPlaying
	     * @return {Boolean} true if the animation is playing; otherwise, false.
	     */

	  }, {
	    key: 'isPlaying',
	    value: function isPlaying() {
	      return this.state === 'playing';
	    }

	    /**
	     * Returns true if the animation is stopped; otherwise, returns false.
	     * @method isStopped
	     * @return {Boolean} true if the animation is stopped; otherwise, false.
	     */

	  }, {
	    key: 'isStopped',
	    value: function isStopped() {
	      return this.state === 'stopped';
	    }

	    /**
	     * Called once the hierarchy is loaded.
	     */

	  }, {
	    key: 'entityLoaded',
	    value: function entityLoaded() {
	      this.reload(true);
	    }

	    /**
	     * Play the currently assigned animation asset and take.
	     * @method play
	     * @param {Function} fn Callback function that is triggered when the take finishes playing
	     */

	  }, {
	    key: 'play',
	    value: function play(fn) {
	      if (this.animation) {
	        if (this.state !== 'playing') {
	          this.animation.timeScale = this.speed;
	          this.animation.play(this.animation.currentTime, this.animation.weight);
	          this.state = 'playing';
	        }

	        this.onAnimationEnd = fn;
	      }
	    }

	    /**
	     * Play the specified animation, with the given playback settings.
	     * @method playKeyframeAnimation
	     * @param {String} assetId The ID of the animation asset
	     * @param {String} take The name of the take
	     * @param {Boolean} loop Whether or not to loop the animation
	     * @param {Number} speed The playback speed
	     * @param {Number} startTime The time offset to start the animation at
	     */

	  }, {
	    key: 'playKeyframeAnimation',
	    value: function playKeyframeAnimation(assetId, take, loop, speed, startTime) {
	      var playAnimation = function (animation) {
	        if (animation) {
	          loop = loop !== undefined ? loop : this.isLoop();
	          speed = speed !== undefined ? speed : this.getSpeed();
	          startTime = startTime !== undefined ? startTime : this.getTime();

	          this.setLoop(loop);
	          this.setSpeed(speed);
	          this.setTime(startTime);

	          this.play();
	        }
	      }.bind(this);

	      if (assetId !== undefined || take !== undefined) {
	        var asset = assetId ? this.getRuntime().getEntityById(assetId) : this.asset;
	        take = take ? take : this.take;

	        this.setAsset(asset, false);
	        this.setTake(take, false);

	        this.reload(false, function (err, animation) {
	          playAnimation(animation);
	        });
	      } else {
	        playAnimation(this.animation);
	      }
	    }

	    /**
	     * Pause the animation, without resetting the playhead.
	     * @method pause
	     */

	  }, {
	    key: 'pause',
	    value: function pause() {
	      if (this.animation && this.state === 'playing') {
	        this.animation.timeScale = 0;
	        this.state = 'paused';
	      }
	    }

	    /**
	     * Stop and release the current animation.
	     * @method release
	     */

	  }, {
	    key: 'release',
	    value: function release() {
	      this.stop();

	      if (this.animation) {
	        this.animation.stop();
	        this.animation = undefined;
	      }
	    }

	    /**
	     * Reload the currently assigned animation asset and take. This should be called
	     * when changes are made to the asset or take, for example.
	     * @method reload
	     * @param {Boolean} reset Reset the playhead and play state
	     * @param {Function} fn Callback function when asset loading completes
	     */

	  }, {
	    key: 'reload',
	    value: function reload(reset, fn) {
	      var time = reset ? this.startTime : this.getTime(),
	          isPlaying = reset ? this.autoPlay : this.isPlaying();

	      // Release the current animation (if there is one).
	      this.release();

	      // Load and create a new animation.
	      if (this.asset && this.take) {
	        this.asset.load(function () {
	          this.animation = this.asset.createAnimation(this.box3DEntity, this.take);

	          if (this.animation) {
	            this.animation.loop = this.loop;
	            this.animation.timeScale = this.speed;
	            this.animation.currentTime = time;
	            this.animation.weight = this.weight;

	            if (isPlaying) {
	              this.play();
	            }
	          }

	          if (fn) {
	            fn(null, this.animation);
	          }
	        }.bind(this));
	      } else if (fn) {
	        fn(null, null);
	      }
	    }

	    /**
	     * Set the current animation asset.
	     * @method setAsset
	     * @param {Object} asset The animation asset or null to unset the asset
	     * @param {Boolean} reload Whether or not to reload the animation
	     * @param {Function} fn Callback function when asset loading completes
	     */

	  }, {
	    key: 'setAsset',
	    value: function setAsset(asset, reload, fn) {
	      // Remove old change listener from the animation asset.
	      if (this.asset) {
	        this.stopListening(this.asset, 'propertyChanges', this.onAssetChanged);
	      }

	      this.asset = asset;

	      // Add new change listener to the animation asset.
	      if (this.asset) {
	        this.listenTo(this.asset, 'propertyChanges', this.onAssetChanged);
	      }

	      if (reload === undefined || reload) {
	        this.reload(false, fn);
	      }
	    }

	    /**
	     * Enable or disable looping.
	     * @method setLoop
	     * @param {Boolean} loop The loop state
	     */

	  }, {
	    key: 'setLoop',
	    value: function setLoop(loop) {
	      this.loop = loop;

	      if (this.animation) {
	        this.animation.loop = this.loop;
	      }
	    }

	    /**
	     * Set the animation speed.
	     * @method setSpeed
	     * @param {Number} speed The animation speed
	     */

	  }, {
	    key: 'setSpeed',
	    value: function setSpeed(speed) {
	      this.speed = speed;

	      // Only update the animation's timeScale when the animation is playing since
	      // the timeScale is also used to pause and stop the animation. In those cases,
	      // the timeScale will be updated on the next call to `play`.
	      if (this.isPlaying()) {
	        this.animation.timeScale = this.speed;
	      }
	    }

	    /**
	     * Set the current animation take.
	     * @method setTake
	     * @param {String} take The take name
	     * @param {Boolean} reload Whether or not to reload the animation
	     * @param {Function} fn Callback function when asset loading completes
	     */

	  }, {
	    key: 'setTake',
	    value: function setTake(take, reload, fn) {
	      this.take = take;

	      if (reload === undefined || reload) {
	        this.reload(false, fn);
	      }
	    }

	    /**
	     * Set the animation time.
	     * @method setTime
	     * @param {Number} time The animation time
	     */

	  }, {
	    key: 'setTime',
	    value: function setTime(time) {
	      if (this.animation) {
	        this.animation.currentTime = time;
	        this.animation.reset();
	      }
	    }

	    /**
	     * Set the animation weight.
	     * @method setWeight
	     * @param {Number} weight The animation weight
	     */

	  }, {
	    key: 'setWeight',
	    value: function setWeight(weight) {
	      this.weight = weight;

	      if (this.animation) {
	        this.animation.weight = this.weight;
	      }
	    }

	    /**
	     * Called when the Box3DEntity is unloaded or this component is removed.
	     * @method shutdown
	     */

	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      // Remove the change listener from the animation asset.
	      if (this.asset) {
	        this.stopListening(this.asset, 'stopListening', this.onAssetChanged);
	      }

	      // Release the animation.
	      this.release();

	      this.getEntity().off('playKeyframeAnimation', this.playKeyframeAnimation, this);
	      this.getEntity().off('pauseKeyframeAnimation', this.pause, this);
	      this.getEntity().off('stopKeyframeAnimation', this.stop, this);
	      this.getEntity().off('toggleKeyframeAnimation', this.toggle, this);
	    }

	    /**
	     * Stop the animation, resetting the playhead to 0, and optionally disable it.
	     * When disabled, an animation has no effect on the scene, whereas a stopped
	     * (but enabled) animation could still be blended with another animation. Before
	     * the first call to `play`, an animation is disabled. Once disabled, an
	     * animation remains disabled until `play` is called again. Disabling unneeded
	     * animations may have performance benefits.
	     * @method stop
	     * @param disable {Boolean} disable Cease updating the animation
	     */

	  }, {
	    key: 'stop',
	    value: function stop(disable) {
	      if (this.animation) {
	        if (this.state !== 'stopped') {
	          this.animation.timeScale = 0;
	          this.state = 'stopped';
	        }

	        this.setTime(0);

	        if (disable) {
	          this.animation.stop();
	        }
	      }
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle() {
	      if (this.animation) {
	        if (this.state === 'playing') {
	          this.pause();
	        } else {
	          this.play();
	        }
	      }
	    }

	    /**
	     * Called per Box3DRuntime update (once per frame).
	     * @method update
	     * @param {Number} delta The number of seconds since the last call to `update`
	     */

	  }, {
	    key: 'update',
	    value: function update() {
	      if (!this.loop && this.animation && this.animation.currentTime >= this.animation.data.length) {

	        this.stop(true);

	        if (this.onAnimationEnd) {
	          // Store the callback, then clear it so that it's not called twice.
	          var fn = this.onAnimationEnd;
	          this.onAnimationEnd = undefined;

	          // Invoke the callback.
	          fn(this);
	        }

	        this.getEntity().trigger('endKeyframeAnimation');
	      }
	    }
	  }]);

	  return Animation;
	}(_Box3DComponent3.default);

	exports.default = Animation;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid lookat_component
	 * @vname Look At Target
	 * @vdescription A component that automatically points the object at a target. This can be used for billboarding an object to the camera, making a character look at another, etc.
	 * @vcategory General
	 * @vfilter Object
	 * @vattr Object target {
	 *   description: 'The object that you want this object to point towards. e.g. for billboarding, this would be the camera used to render the scene.'
	 * }
	 * @vattr Boolean local {
	 *   description: 'If toggled, whatever rotation you have already applied to this object will be taken into account.',
	 *   default: false
	 * }
	 * @vattr Boolean showPreview {
	 *   description: 'Run the lookAt in the editor.',
	 *   default: true,
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LookAt = function (_Box3DComponent) {
	  _inherits(LookAt, _Box3DComponent);

	  function LookAt() {
	    _classCallCheck(this, LookAt);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LookAt).call(this));

	    _this.playing = true;
	    return _this;
	  }

	  _createClass(LookAt, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.init();
	      var engine = this.getRuntime();
	      engine.on('postUpdate', this.postUpdate, this);
	      this.on('enable', this.onEnable, this);
	      this.on('disable', this.onDisable, this);
	    }

	    /**
	     * Called when a verold object is destroyed or this component is removed
	     * from a verold object.
	     */

	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {
	      var engine = this.getRuntime();
	      engine.off('postUpdate', this.postUpdate, this);
	      this.shutdown();
	      this.off('enable', this.onEnable, this);
	      this.off('disable', this.onDisable, this);
	    }

	    /**
	     * Called immediately after after component creation
	     */

	  }, {
	    key: 'init',
	    value: function init() {
	      this.tempVec = new _three2.default.Vector3();
	      this.tempMatrix = new _three2.default.Matrix4();
	      this.tempQuaternion = new _three2.default.Quaternion();
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      if (changes.indexOf('showPreview') !== -1) {
	        this.playing = this.showPreview;
	      }
	      if (!this.playing) {
	        this.getRuntimeData().position.copy(this.getEntity().getPosition());
	        this.getRuntimeData().quaternion.copy(this.getEntity().getQuaternion());
	      }
	    }
	  }, {
	    key: 'onEnable',
	    value: function onEnable() {
	      this.playing = this.showPreview;
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      this.playing = false;
	      this.getRuntimeData().position.copy(this.getEntity().getPosition());
	      this.getRuntimeData().quaternion.copy(this.getEntity().getQuaternion());
	    }

	    /**
	     * Called per Box3DRuntime update (per frame)
	     * @param  {float} delta The number of seconds since the last call to `update`
	     */

	  }, {
	    key: 'postUpdate',
	    value: function postUpdate() {
	      var runtimeData;
	      if (this.hasThreeData() && this.playing && this.isEnabled()) {

	        runtimeData = this.getRuntimeData();
	        if (this.target && this.target.runtimeData) {
	          this.getRuntime().needsRender = true;
	          var lookAtObject = this.target.runtimeData;

	          this.tempVec.setFromMatrixPosition(lookAtObject.matrixWorld);
	          if (runtimeData.parent) {
	            this.tempMatrix.getInverse(runtimeData.parent.matrixWorld);
	          } else {
	            this.tempMatrix.identity();
	          }
	          this.tempVec.applyMatrix4(this.tempMatrix);

	          if (this.local) {
	            runtimeData.lookAt(this.tempVec);
	            runtimeData.quaternion.multiply(this.getEntity().getQuaternion());
	          } else {
	            runtimeData.lookAt(this.tempVec);
	          }
	        }
	      }
	    }

	    /**
	     * Called when a verold object is destroyed or this component is removed
	     * from a verold object.
	     */

	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      // make sure to clean up any events or other bindings that you have created
	      // to avoid memory leaks
	    }
	  }]);

	  return LookAt;
	}(_Box3DComponent3.default);

	exports.default = LookAt;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid normal_map_generator_component
	 * @vname Normal Map Generator
	 * @vcategory Rendering
	 * @vfilter renderTexture2D
	 * @vattr Asset bumpTexture { filter: { renderTexture2D: true, texture2D: true } }
	 * @vattr Float smoothness { slider: true, default: 0.25, min: 0.0001, max: 1.0 }
	 * @vattr Float spread { slider: true, default: 4, min: 1, max: 10 }
	 * @vattr Boolean autoLoad { default: true }
	 * @vevent local renderNormalMap { action: true, category: 'Rendering', parameters: []}
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Normal map shader
	 * - compute normals from bumpTexture
	 */

	var VertexShader = ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n');

	var FragmentShader = ['precision lowp float;', 'uniform float smoothness;', 'uniform float spread;', 'uniform vec2 resolution;', 'uniform sampler2D bumpTexture;', 'vec2 size = vec2( smoothness, 0.0 );', 'vec3 off = vec3(-spread / resolution.x, 0.0, spread / resolution.y);', 'varying vec2 vUv;', 'void main() {', 'vec4 wave = texture2D( bumpTexture, vUv);', 'float s11 = wave.x;', 'float s01 = texture2D( bumpTexture, vUv + off.xy ).x;', 'float s21 = texture2D( bumpTexture, vUv + off.zy ).x;', 'float s10 = texture2D( bumpTexture, vUv + off.yx ).x;', 'float s12 = texture2D( bumpTexture, vUv + off.yz ).x;', 'vec3 va = normalize(vec3( size.xy, s21-s01));', 'vec3 vb = normalize(vec3( size.yx, s12-s10));', 'vec3 norm = cross(va,vb);', 'gl_FragColor = vec4( norm * 0.5 + 0.5, s11 );', '}'].join('\n');

	var NormalMapGenerator = function (_Box3DComponent) {
	  _inherits(NormalMapGenerator, _Box3DComponent);

	  function NormalMapGenerator() {
	    _classCallCheck(this, NormalMapGenerator);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NormalMapGenerator).call(this));

	    _this.m_Uniforms = null;
	    _this.normalMaterial = null;
	    return _this;
	  }

	  _createClass(NormalMapGenerator, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.init();
	      this.getEntity().on('loadBase', this.entityCreated, this);
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {
	      this.getEntity().off('loadBase', this.entityCreated, this);
	      this.shutdown();
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.getEntity().on('renderNormalMap', this.renderNormalMap, this);
	      this.m_Uniforms = {
	        bumpTexture: {
	          type: 't',
	          value: null
	        },
	        resolution: {
	          type: 'v2',
	          value: new _three2.default.Vector2(256, 256)
	        },
	        smoothness: {
	          type: 'f',
	          value: 0.25
	        },
	        spread: {
	          type: 'f',
	          value: 4.0
	        }
	      };

	      //create noise material
	      this.normalMaterial = new _three2.default.ShaderMaterial({
	        uniforms: this.m_Uniforms,
	        vertexShader: VertexShader,
	        fragmentShader: FragmentShader,
	        blending: _three2.default.NoBlending
	      });

	      this.normalMaterial.depthTest = false;
	      this.normalMaterial.depthWrite = false;

	      this.cameraRTT = new _three2.default.OrthographicCamera(-0.5, 0.5, 0.5, -0.5, -10, 10);
	      this.cameraRTT.position.z = 1;
	      this.sceneRTT = new _three2.default.Scene();
	      this.sceneRTT.add(this.cameraRTT);

	      this.quadGeo = new _three2.default.PlaneGeometry(1, 1);
	      this.quadRTT = new _three2.default.Mesh(this.quadGeo, this.normalMaterial);
	      this.quadRTT.position.z = -5;
	      this.sceneRTT.add(this.quadRTT);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.getEntity().off('renderNormalMap', this.renderNormalMap, this);
	      this.sceneRTT.remove(this.cameraRTT);
	      this.sceneRTT.remove(this.quadRTT);
	      this.sceneRTT = undefined;
	      this.quadRTT = undefined;
	      this.quadGeo.dispose();
	      this.normalMaterial.dispose();
	      this.m_Uniforms = undefined;
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {

	      var that = this;
	      this.updateUniforms(function () {
	        if (that.autoLoad) {
	          that.renderNormalMap();
	        }
	      });
	    }
	  }, {
	    key: 'renderNormalMap',
	    value: function renderNormalMap(smoothness) {
	      if (smoothness !== undefined) {
	        this.m_Uniforms.smoothness.value = smoothness;
	      }
	      var renderer = this.getThreeRenderer();
	      renderer.render(this.sceneRTT, this.cameraRTT, this.getEntity().runtimeData, true);
	      this.getThreeRenderer().setRenderTarget(null);
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged() {
	      var that = this;
	      this.updateUniforms(function () {
	        that.renderNormalMap();
	      });
	    }
	  }, {
	    key: 'updateUniforms',
	    value: function updateUniforms(callback) {
	      this.m_Uniforms.smoothness.value = this.smoothness;
	      this.m_Uniforms.spread.value = this.spread;
	      if (this.bumpTexture) {
	        if (this.bumpTexture.runtimeData) {
	          this.m_Uniforms.bumpTexture.value = this.bumpTexture.runtimeData;
	          this.m_Uniforms.resolution.value.set(this.bumpTexture.getWidth(), this.bumpTexture.getHeight());
	          if (_lodash2.default.isFunction(callback)) {
	            callback();
	          }
	        } else {
	          this.bumpTexture.once('load', function () {
	            this.m_Uniforms.bumpTexture.value = this.bumpTexture.runtimeData;
	            this.m_Uniforms.resolution.value.set(this.bumpTexture.getWidth(), this.bumpTexture.getHeight());
	            if (_lodash2.default.isFunction(callback)) {
	              callback();
	            }
	          }, this);
	          this.bumpTexture.load();
	        }
	      }
	    }
	  }]);

	  return NormalMapGenerator;
	}(_Box3DComponent3.default);

	exports.default = NormalMapGenerator;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid object_animator_component
	 * @vname Object Animator
	 * @vcategory Animation
	 * @vfilter Object
	 * @vevent local playAnimateAlongCurve {
	 *   action: true,
	 *   category: 'Animation',
	 *   parameters: [
	 *     {name: 'curve', 'type' : 'object', 'componentFilter': { 'Curve' : true }},
	 *     {name: 'animationTime', 'type': 'f', 'description': 'Time to animate to object. Defined in seconds', 'default': 3},
	 *     {name: 'easeIn', 'type' : 'f', 'description': 'The percentage of animation time spent speeding up.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'easeOut', 'type' : 'f', 'description': 'The percentage of animation time spent slowing down.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'orientation', 'description': 'Orient the object following the curve to either the direction of the curve or to the objects defining the curve.', 'type': 'opt', 'default': 'toCurve', 'options' : { 'None': 'None', 'To Curve' : 'toCurve', 'To Nodes' : 'toNode'}},
	 *     {name: 'loop', 'type' : 'b', 'description': '', 'default': false}
	 *   ]
	 * }
	 * @vevent local playAnimateToObject {
	 *   action: true,
	 *   category: 'Animation',
	 *   parameters: [
	 *     {name: 'object', 'type' : 'object', 'default': null},
	 *     {name: 'animationTime', 'type': 'f', 'description': 'Total time that the animation will take. Defined in seconds', 'default': 3},
	 *     {name: 'easeIn', 'type' : 'f', 'description': 'The percentage of animation time spent speeding up.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'easeOut', 'type' : 'f', 'description': 'The percentage of animation time spent slowing down.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'update orientation', 'type' : 'b', 'default': true}
	 *   ]
	 * }
	 * @vevent local playAnimateTranslation {
	 *   action: true,
	 *   category: 'Animation',
	 *   parameters: [
	 *     {name: 'animationTime', 'type': 'f', 'description': 'Time to animate. Defined in seconds', 'default': 3},
	 *     {name: 'easeIn', 'type' : 'f', 'description': 'The percentage of animation time spent speeding up.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'easeOut', 'type' : 'f', 'description': 'The percentage of animation time spent slowing down.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'velocity', 'description': '', 'type': 'v3', 'default': {x:0,y:0,z:1.0}, 'min': -1.0, 'max': 1.0},
	 *     {name: 'objectUsage', 'type' : 'opt', 'description': 'Specify what part of the animation the current object\'s position represents.', 'default': 'beginning', 'options': { 'Beginning': 'beginning', 'Middle': 'middle', 'End': 'end' } },
	 *   ]
	 * }
	 * @vevent local playAnimateRotation {
	 *   action: true,
	 *   category: 'Animation',
	 *   parameters: [
	 *     {name: 'animationTime', 'type': 'f', 'description': 'Time to animate to object. Defined in seconds', 'default': 3},
	 *     {name: 'easeIn', 'type' : 'f', 'description': 'The percentage of animation time spent speeding up.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'easeOut', 'type' : 'f', 'description': 'The percentage of animation time spent slowing down.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'angularVelocity', 'description': '', 'type': 'v3', 'default': {x:0,y:0,z:1.0}, 'min': -100.0, 'max': 100.0},
	 *     {name: 'objectUsage', 'type' : 'opt', 'description': 'Specify what part of the animation the current object\'s rotation represents.', 'default': 'beginning', 'options': { 'Beginning': 'beginning', 'Middle': 'middle', 'End': 'end' } },
	 *     {name: 'axisOrder', 'type' : 'opt', 'description': 'Specify the axis order that the angular velocity will be applied in.', 'default': 'YXZ', 'options': {
	 *       'XYZ': 'XYZ',
	 *       'YXZ': 'YXZ',
	 *       'ZXY': 'ZXY',
	 *       'XZY': 'XZY',
	 *       'YZX': 'YZX',
	 *       'ZYX': 'ZYX'}
	 *     }
	 *   ]
	 * }
	 * @vevent local playAnimateScale {
	 *   action: true,
	 *   category: 'Animation',
	 *   parameters: [
	 *     {name: 'animationTime', 'type': 'f', 'description': 'Time to animate to object. Defined in seconds', 'default': 3},
	 *     {name: 'easeIn', 'type' : 'f', 'description': 'The percentage of animation time spent speeding up.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'easeOut', 'type' : 'f', 'description': 'The percentage of animation time spent slowing down.', 'default' : 0.25, 'min': 0.0, 'max': 1.0 },
	 *     {name: 'velocity', 'description': '', 'type': 'v3', 'default': {x:0,y:0,z:1.0}, 'min': -10.0, 'max': 10.0},
	 *     {name: 'objectUsage', 'type' : 'opt', 'description': 'Specify what part of the animation the current object\'s scale represents.', 'default': 'beginning', 'options': { 'Beginning': 'beginning', 'Middle': 'middle', 'End': 'end' } },
	 *   ]
	 * }
	 * @vevent local pauseCurveAnimation { 'action': true, 'category': 'Animation', 'parameters': []}
	 * @vevent local stopCurveAnimation {'action': true, 'category': 'Animation', 'parameters': []}
	 * @vevent local unpauseCurveAnimation {'action': true, 'category': 'Animation', 'parameters': []}
	 * @vevent local endAnimateAlongCurve {'action': false, 'category': 'Animation', 'parameters': []}
	 * @vevent local endAnimateToObject {'action': false, 'category': 'Animation', 'parameters': []}
	 * @vevent lcoal endAnimateTranslation {'action': false, 'category': 'Animation', 'parameters': []}
	 */
	/* eslint-enable*/
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ObjectAnimator = function (_Box3DComponent) {
	  _inherits(ObjectAnimator, _Box3DComponent);

	  function ObjectAnimator() {
	    _classCallCheck(this, ObjectAnimator);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ObjectAnimator).call(this));

	    _this.playingCurveAnimation = false;
	    _this.curveAnim = undefined;
	    return _this;
	  }

	  /**
	   * Called immediately after after component creation
	   */

	  _createClass(ObjectAnimator, [{
	    key: 'init',
	    value: function init() {
	      this.getEntity().on('playAnimateAlongCurve', this.animateAlongCurve, this);
	      this.getEntity().on('playAnimateToObject', this.animateToObject, this);
	      this.getEntity().on('playAnimateTranslation', this.animateTranslation, this);
	      this.getEntity().on('playAnimateRotation', this.animateRotation, this);
	      this.getEntity().on('playAnimateScale', this.animateScale, this);
	      this.getEntity().on('pauseCurveAnimation', this.onPauseCurveAnimation, this);
	      this.getEntity().on('unpauseCurveAnimation', this.onUnpauseCurveAnimation, this);
	      this.getEntity().on('stopCurveAnimation', this.stopCurveAnimation, this);

	      this.on('disable', this.onDisable, this);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.getEntity().off('playAnimateAlongCurve', this.animateAlongCurve, this);
	      this.getEntity().off('playAnimateToObject', this.animateToObject, this);
	      this.getEntity().off('playAnimateTranslation', this.animateTranslation, this);
	      this.getEntity().off('playAnimateRotation', this.animateRotation, this);
	      this.getEntity().off('playAnimateScale', this.animateScale, this);
	      this.getEntity().off('pauseCurveAnimation', this.onPauseCurveAnimation, this);
	      this.getEntity().off('unpauseCurveAnimation', this.onUnpauseCurveAnimation, this);
	      this.getEntity().off('stopCurveAnimation', this.stopCurveAnimation, this);

	      this.off('disable', this.onDisable, this);
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      this.getRuntimeData().position.copy(this.getEntity().getPosition());
	      this.getRuntimeData().quaternion.copy(this.getEntity().getQuaternion());
	      this.getRuntimeData().scale.copy(this.getEntity().getScale());
	    }
	  }, {
	    key: 'stopCurveAnimation',
	    value: function stopCurveAnimation() {
	      this.getRuntime().off('update', this.curveAnim, this);
	      this.curveAnim = undefined;
	    }
	  }, {
	    key: 'animateAlongCurve',
	    value: function animateAlongCurve(curveObjectId, animationTime, easeIn, easeOut, orientation, loop) {

	      function curveAnim(delta) {
	        if (!this.box3DEntity || !this.isEnabled()) {
	          engine.off('update', this.curveAnim, this);
	          this.curveAnim = undefined;
	          return;
	        }
	        if (curveComponent && this.playingCurveAnimation) {
	          this.getRuntime().needsRender = true;
	          currentTime += delta;
	          var currentTimePercent = currentTime / animationTime;
	          if (currentTimePercent >= 1.0) {
	            currentTimePercent -= 1.0;
	          }
	          var easeOutStart = 1 - easeOut;

	          //Ease in
	          if (easeIn && currentTimePercent < easeIn) {
	            var easeInProgress = currentTimePercent / easeIn;
	            curveProgressPercent += delta * fullSpeed / animationTime * (Math.cos(easeInProgress * Math.PI + Math.PI) * 0.5 + 0.5);
	          } else if (easeOut && currentTimePercent > easeOutStart) {
	            //Ease out
	            var easeOutProgress = 1.0 - (currentTimePercent - easeOutStart) / easeOut;
	            curveProgressPercent += delta * fullSpeed / animationTime * Math.max(Math.cos(easeOutProgress * Math.PI + Math.PI) * 0.5 + 0.5, 0.0);
	          } else {
	            //Full speed animation
	            curveProgressPercent += delta * fullSpeed / animationTime;
	          }

	          //If the animation is finished
	          if (curveProgressPercent >= 1.0 || curveProgressPercent < 0.0) {
	            curveProgressPercent %= 1.0;
	            currentTime = 0.0;
	            if (!loop) {
	              curveProgressPercent = 0.99999999;
	              this.playingCurveAnimation = false;

	              this.getRuntime().off('update', this.curveAnim, this);
	              this.curveAnim = undefined;
	            }
	            this.getEntity().trigger('endAnimateAlongCurve');
	          }

	          var curve = curveComponent.curve;
	          var curveProgress_NodeRelative = curve.getUtoTmapping(curveProgressPercent);
	          runtimeData.position.copy(curve.getPoint(curveProgress_NodeRelative));

	          if (orientation === 'toCurve') {
	            var tangent = curve.getTangent(curveProgress_NodeRelative);
	            tempVector1.set(0, -1, 0);
	            tempVector2.crossVectors(tangent, tempVector1);
	            tempVector3.crossVectors(tangent, tempVector2);
	            tempVector1.copy(runtimeData.position);
	            tempVector1.add(tangent);
	            tempMatrix.lookAt(runtimeData.position, tempVector1, tempVector3);
	            runtimeData.quaternion.setFromRotationMatrix(tempMatrix);
	          } else if (orientation === 'toNode') {
	            var curveSegments;
	            if (curveComponent.closed) {
	              curveSegments = curve.points.length;
	            } else {
	              curveSegments = curve.points.length - 1;
	            }
	            var prevNode = Math.floor(curveProgress_NodeRelative * curveSegments);
	            var nextNode = Math.ceil(curveProgress_NodeRelative * curveSegments) % curve.points.length;

	            if (prevNode !== currentPrevNode) {
	              if (prevNode > 0) {
	                curveComponent.controlPoints[prevNode].getQuaternionInWorldSpace(prevQuaternion);
	              } else {
	                curveComponent.controlPoints[0].getQuaternionInWorldSpace(prevQuaternion);
	              }
	            }
	            if (nextNode !== currentNextNode) {
	              if (nextNode > 0) {
	                curveComponent.controlPoints[nextNode].getQuaternionInWorldSpace(nextQuaternion);
	              } else {
	                curveComponent.controlPoints[0].getQuaternionInWorldSpace(nextQuaternion);
	              }
	            }
	            var interp = curveProgress_NodeRelative * curveSegments - prevNode;
	            runtimeData.quaternion.copy(prevQuaternion);
	            runtimeData.quaternion.slerp(nextQuaternion, interp);
	          }
	        }
	      }
	      var that = this;
	      var curveComponent;
	      var curveObject;

	      if (curveObjectId) {
	        curveObject = this.getRuntime().getEntityById(curveObjectId);
	        curveComponent = curveObject.getFirstByScriptId('curve_component');
	      }
	      if (!curveComponent) {
	        return;
	      }

	      var runtimeData = this.getRuntimeData();
	      var engine = this.getRuntime();
	      var currentTime = 0;
	      var curveProgressPercent = 0.0;

	      var tempVector1 = new _three2.default.Vector3();
	      var tempVector2 = new _three2.default.Vector3();
	      var tempVector3 = new _three2.default.Vector3();
	      var tempMatrix = new _three2.default.Matrix4();
	      var prevQuaternion = new _three2.default.Quaternion();
	      var nextQuaternion = new _three2.default.Quaternion();

	      if (easeIn + easeOut > 1.0) {
	        _log2.default.warn('Ease-In and Ease-Out value can\'t total more than 1.0.');
	        easeIn = 0.5;
	        easeOut = 0.5;
	      }

	      var fullSpeedTime = 1.0 - easeIn - easeOut;
	      var fullSpeed = 1.0 / (easeIn / 2 + easeOut / 2 + fullSpeedTime);

	      if (animationTime > 0) {
	        this.playingCurveAnimation = true;
	        var currentPrevNode = -1;
	        var currentNextNode = -1;
	        if (curveComponent.isCurveInit()) {

	          this.curveAnim = curveAnim;
	          this.getRuntime().on('update', this.curveAnim, this);
	        } else {
	          curveComponent.on('curveInit', function () {
	            this.curveAnim = curveAnim;
	            that.getRuntime().on('update', this.curveAnim, that);
	          }, this);
	        }
	      }
	    }
	  }, {
	    key: 'onPauseCurveAnimation',
	    value: function onPauseCurveAnimation() {
	      this.playingCurveAnimation = false;
	    }
	  }, {
	    key: 'onUnpauseCurveAnimation',
	    value: function onUnpauseCurveAnimation() {
	      this.playingCurveAnimation = true;
	    }
	  }, {
	    key: 'animateToObject',
	    value: function animateToObject(objectId, animationTime, easeIn, easeOut, orientation) {
	      var that = this;
	      var engine = this.getRuntime();

	      function _animateTo(threeObject) {

	        var entity_data = that.getRuntimeData();
	        var tempMatrix = new _three2.default.Matrix4();
	        var currTime = 0;
	        var curveProgressPercent = 0.0;

	        if (easeIn + easeOut > 1.0) {
	          _log2.default.warn('Ease-In and Ease-Out value can\'t total more than 1.0.');
	          easeIn = 0.5;
	          easeOut = 0.5;
	        }

	        var fullSpeedTime = 1.0 - easeIn - easeOut;
	        var fullSpeed = 1.0 / (easeIn / 2 + easeOut / 2 + fullSpeedTime);
	        //var easeInDistance = easeIn * fullSpeed / 2.0;
	        //var easeOutDistance = easeOut * fullSpeed / 2.0;

	        var startPos = new _three2.default.Vector3();
	        var startQuat;
	        startPos.copy(entity_data.position);

	        var targetPosition = threeObject.position;
	        var targetQuaternion = threeObject.quaternion;

	        if (targetQuaternion && orientation) {
	          startQuat = new _three2.default.Quaternion();
	          startQuat.copy(entity_data.quaternion);
	        }
	        threeObject.updateMatrixWorld();
	        targetPosition.setFromMatrixPosition(threeObject.matrixWorld);
	        tempMatrix.extractRotation(threeObject.matrixWorld);
	        targetQuaternion.setFromRotationMatrix(tempMatrix);

	        if (animationTime > 0) {
	          that.getRuntime().on('update', function objAnim(delta) {
	            if (!this.box3DEntity || !this.isEnabled()) {
	              engine.off('update', objAnim, this);
	              return;
	            }
	            that.getRuntime().needsRender = true;
	            currTime += delta;
	            var currentTimePercent = currTime / animationTime;
	            var easeOutStart = 1 - easeOut;

	            if (easeIn && currentTimePercent < easeIn) {
	              //Ease in
	              var easeInProgress = currentTimePercent / easeIn;
	              curveProgressPercent += delta * fullSpeed / animationTime * (Math.cos(easeInProgress * Math.PI + Math.PI) * 0.5 + 0.5);
	            } else if (easeOut && currentTimePercent > easeOutStart) {
	              //Ease out
	              var easeOutProgress = 1.0 - (currentTimePercent - easeOutStart) / easeOut;
	              curveProgressPercent += delta * fullSpeed / animationTime * Math.max(Math.cos(easeOutProgress * Math.PI + Math.PI) * 0.5 + 0.5, 0.0);
	            } else {
	              //Full speed animation
	              curveProgressPercent += delta * fullSpeed / animationTime;
	            }
	            //clamp at 1
	            curveProgressPercent = Math.min(curveProgressPercent, 1.0);

	            if (curveProgressPercent >= 1.0 || curveProgressPercent < 0.0) {
	              that.getRuntime().off('update', objAnim, that);
	              that.getEntity().trigger('endAnimateToObject');
	            }

	            entity_data.position.copy(startPos);
	            entity_data.position.lerp(targetPosition, curveProgressPercent);
	            if (targetQuaternion && orientation) {
	              entity_data.quaternion.copy(startQuat);
	              entity_data.quaternion.slerp(targetQuaternion, curveProgressPercent);
	            }
	          }, that);
	        } else {
	          entity_data.position.copy(targetPosition);
	          if (targetQuaternion) {
	            entity_data.quaternion.copy(targetQuaternion);
	          }

	          //complete
	          that.getEntity().trigger('endAnimateToObject');
	        }
	      }

	      var object = this.getRuntime().getEntityById(objectId);
	      if (object.runtimeData) {
	        _animateTo(object.runtimeData);
	      } else {
	        object.once('loadBase', function () {
	          _animateTo(object.runtimeData);
	        }, this);
	        object.load();
	      }
	    }
	  }, {
	    key: 'animateTranslation',
	    value: function animateTranslation(animationTime, easeIn, easeOut, velocity, objectUsage) {

	      var runtimeData = this.getRuntimeData();
	      runtimeData.position.copy(this.getEntity().getPosition());
	      runtimeData.quaternion.copy(this.getEntity().getQuaternion());
	      runtimeData.scale.copy(this.getEntity().getScale());

	      var currTime = 0;
	      var engine = this.getRuntime();

	      if (easeIn + easeOut > 1.0) {
	        _log2.default.warn('Ease-In and Ease-Out value can\'t total more than 1.0.');
	        easeIn = 0.5;
	        easeOut = 0.5;
	      }

	      var easeInTime = animationTime * easeIn;
	      // var easeOutTime = animationTime * easeOut;

	      var currentVelocity = new _three2.default.Vector3();
	      var direction = new _three2.default.Vector3();
	      direction.copy(velocity);
	      var speed = direction.length();
	      runtimeData.updateMatrixWorld();
	      // runtimeData.updateMatrix();
	      direction.applyQuaternion(runtimeData.quaternion);
	      direction.normalize();

	      if (objectUsage) {
	        var fullSpeedTime = (1.0 - easeIn - easeOut) * animationTime;
	        var halfSpeedTime = (easeIn + easeOut) * 0.5 * animationTime;
	        //Based on the object usage, set the original position so that the
	        //animation plays forward from there...
	        if (objectUsage === 'middle') {
	          //postiion - velocity * time * 0.5
	          currentVelocity.copy(velocity);
	          currentVelocity.multiplyScalar(-0.5 * (fullSpeedTime + halfSpeedTime));
	          runtimeData.position.add(currentVelocity);
	        } else if (objectUsage === 'end') {
	          currentVelocity.copy(velocity);
	          currentVelocity.multiplyScalar(-1.0 * (fullSpeedTime + halfSpeedTime));
	          runtimeData.position.add(currentVelocity);
	        }
	      }

	      if (animationTime > 0) {
	        this.getRuntime().on('update', function objAnim(delta) {
	          if (!this.box3DEntity || !this.isEnabled()) {
	            engine.off('update', objAnim, this);
	            return;
	          }
	          currentVelocity.copy(direction);

	          this.getRuntime().needsRender = true;
	          currTime += delta;
	          var currentTimePercent = Math.min(currTime / animationTime, 1.0); //clamp to 100%
	          var easeOutStart = 1.0 - easeOut;
	          var easeOutStartTime = animationTime * easeOutStart;

	          if (easeIn && currTime < easeInTime) {
	            //Ease in
	            var easeInProgress = currentTimePercent / easeIn;
	            currentVelocity.multiplyScalar(delta * speed * (Math.cos(easeInProgress * Math.PI + Math.PI) * 0.5 + 0.5));
	          } else if (easeOut && currTime > easeOutStartTime) {
	            //Ease out
	            var easeOutProgress = 1.0 - (currentTimePercent - easeOutStart) / easeOut;
	            currentVelocity.multiplyScalar(delta * speed * Math.max(Math.cos(easeOutProgress * Math.PI + Math.PI) * 0.5 + 0.5, 0.0));
	          } else {
	            //Full speed animation
	            currentVelocity.multiplyScalar(delta * speed);
	          }

	          if (currTime >= animationTime) {
	            this.getRuntime().off('update', objAnim, this);
	            this.getEntity().trigger('endAnimateTranslation');
	          }

	          runtimeData.position.add(currentVelocity);
	        }, this);
	      }
	    }
	  }, {
	    key: 'animateRotation',
	    value: function animateRotation(animationTime, easeIn, easeOut, velocity, objectUsage, axisOrder) {

	      var runtimeData = this.getRuntimeData();
	      runtimeData.position.copy(this.getEntity().getPosition());
	      runtimeData.quaternion.copy(this.getEntity().getQuaternion());
	      runtimeData.scale.copy(this.getEntity().getScale());

	      var currTime = 0;
	      var engine = this.getRuntime();

	      if (easeIn + easeOut > 1.0) {
	        _log2.default.warn('Ease-In and Ease-Out value can\'t total more than 1.0.');
	        easeIn = 0.5;
	        easeOut = 0.5;
	      }

	      var easeInTime = animationTime * easeIn;
	      // var easeOutTime = animationTime * easeOut;
	      var currentVelocity = new _three2.default.Quaternion();
	      var fullSpeedQuat = new _three2.default.Quaternion();

	      var tempVector1 = new _three2.default.Vector3();
	      var eulerVelocity = new _three2.default.Euler(axisOrder);
	      eulerVelocity.set(velocity.x, velocity.y, velocity.z);
	      //Convert the euler angles to quaternion
	      currentVelocity.setFromEuler(eulerVelocity);
	      fullSpeedQuat.copy(currentVelocity);

	      runtimeData.updateMatrixWorld();

	      if (objectUsage) {
	        var fullSpeedTime = (1.0 - easeIn - easeOut) * animationTime;
	        var halfSpeedTime = (easeIn + easeOut) * 0.5 * animationTime;
	        //Based on the object usage, set the original rotation so that the
	        //animation plays forward from there...
	        if (objectUsage === 'middle') {
	          //postiion - velocity * time * 0.5
	          tempVector1.copy(velocity);
	          tempVector1.multiplyScalar(-0.5 * (fullSpeedTime + halfSpeedTime));
	          eulerVelocity.set(tempVector1.x, tempVector1.y, tempVector1.z);
	          currentVelocity.setFromEuler(eulerVelocity);
	          runtimeData.quaternion.multiply(currentVelocity);
	        } else if (objectUsage === 'end') {
	          tempVector1.copy(velocity);
	          tempVector1.multiplyScalar(-1.0 * (fullSpeedTime + halfSpeedTime));
	          eulerVelocity.set(tempVector1.x, tempVector1.y, tempVector1.z);
	          currentVelocity.setFromEuler(eulerVelocity);
	          runtimeData.quaternion.multiply(currentVelocity);
	        }
	      }

	      if (animationTime > 0) {
	        this.getRuntime().on('update', function objAnim(delta) {
	          if (!this.box3DEntity || !this.isEnabled()) {
	            engine.off('update', objAnim, this);
	            return;
	          }
	          var speed = 1.0;

	          this.getRuntime().needsRender = true;
	          currTime += delta;
	          var currentTimePercent = Math.min(currTime / animationTime, 1.0);
	          var easeOutStart = 1.0 - easeOut;
	          var easeOutStartTime = animationTime * easeOutStart;

	          if (easeIn && currTime < easeInTime) {
	            //Ease in
	            var easeInProgress = currentTimePercent / easeIn;
	            speed *= delta * (Math.cos(easeInProgress * Math.PI + Math.PI) * 0.5 + 0.5);
	          } else if (easeOut && currTime > easeOutStartTime) {
	            //Ease out
	            var easeOutProgress = 1.0 - (currentTimePercent - easeOutStart) / easeOut;
	            speed *= delta * Math.max(Math.cos(easeOutProgress * Math.PI + Math.PI) * 0.5 + 0.5, 0.0);
	          } else {
	            //Full speed animation
	            speed *= delta;
	          }

	          if (currTime >= animationTime) {
	            this.getRuntime().off('update', objAnim, this);
	            this.getEntity().trigger('endAnimateTranslation');
	          }
	          currentVelocity.set(0.0, 0.0, 0.0, 1.0);
	          currentVelocity.slerp(fullSpeedQuat, speed);
	          runtimeData.quaternion.multiply(currentVelocity);
	        }, this);
	      }
	    }
	  }, {
	    key: 'animateScale',
	    value: function animateScale(animationTime, easeIn, easeOut, velocity, objectUsage) {

	      var runtimeData = this.getRuntimeData();
	      runtimeData.position.copy(this.getEntity().getPosition());
	      runtimeData.quaternion.copy(this.getEntity().getQuaternion());
	      runtimeData.scale.copy(this.getEntity().getScale());

	      var currTime = 0;
	      var engine = this.getRuntime();

	      if (easeIn + easeOut > 1.0) {
	        _log2.default.warn('Ease-In and Ease-Out value can\'t total more than 1.0.');
	        easeIn = 0.5;
	        easeOut = 0.5;
	      }

	      var easeInTime = animationTime * easeIn;
	      // var easeOutTime = animationTime * easeOut;

	      var currentVelocity = new _three2.default.Vector3();
	      runtimeData.updateMatrixWorld();

	      if (objectUsage) {
	        var fullSpeedTime = (1.0 - easeIn - easeOut) * animationTime;
	        var halfSpeedTime = (easeIn + easeOut) * 0.5 * animationTime;
	        //Based on the object usage, set the original scale so that the
	        //animation plays forward from there...
	        if (objectUsage === 'middle') {
	          //postiion - velocity * time * 0.5
	          currentVelocity.copy(velocity);
	          currentVelocity.multiplyScalar(-0.5 * (fullSpeedTime + halfSpeedTime));
	          runtimeData.scale.add(currentVelocity);
	        } else if (objectUsage === 'end') {
	          currentVelocity.copy(velocity);
	          currentVelocity.multiplyScalar(-1.0 * (fullSpeedTime + halfSpeedTime));
	          runtimeData.scale.add(currentVelocity);
	        }
	      }

	      if (animationTime > 0) {
	        this.getRuntime().on('update', function objAnim(delta) {
	          if (!this.box3DEntity || !this.isEnabled()) {
	            engine.off('update', objAnim, this);
	            return;
	          }
	          currentVelocity.copy(velocity);

	          this.getRuntime().needsRender = true;
	          currTime += delta;
	          var currentTimePercent = Math.min(currTime / animationTime, 1.0); //clamp to 100%
	          var easeOutStart = 1.0 - easeOut;
	          var easeOutStartTime = animationTime * easeOutStart;

	          if (easeIn && currTime < easeInTime) {
	            //Ease in
	            var easeInProgress = currentTimePercent / easeIn;
	            currentVelocity.multiplyScalar(delta * (Math.cos(easeInProgress * Math.PI + Math.PI) * 0.5 + 0.5));
	          } else if (easeOut && currTime > easeOutStartTime) {
	            //Ease out
	            var easeOutProgress = 1.0 - (currentTimePercent - easeOutStart) / easeOut;
	            currentVelocity.multiplyScalar(delta * Math.max(Math.cos(easeOutProgress * Math.PI + Math.PI) * 0.5 + 0.5, 0.0));
	          } else {
	            //Full speed animation
	            currentVelocity.multiplyScalar(delta);
	          }

	          if (currTime >= animationTime) {
	            this.getRuntime().off('update', objAnim, this);
	            this.getEntity().trigger('endAnimateTranslation');
	          }

	          runtimeData.scale.add(currentVelocity);
	        }, this);
	      }
	    }
	  }]);

	  return ObjectAnimator;
	}(_Box3DComponent3.default);

	exports.default = ObjectAnimator;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @vid audio_source
	 * @vname Audio Source
	 * @vcategory Audio
	 * @vdescription Controls playback of audio assets
	 * @vattr Float gain  { 'description': 'Volume control', 'default': 1.0, 'min': 0.0, 'max': 100.0 }
	 * @vattr Boolean autoPlay { 'description': 'Play the audio once loaded', 'default': true }
	 * @vattr Boolean loop { 'description': 'Continuously replay the audio', 'default': true }
	 * @vattr Boolean preload { 'description': 'Load the audio when the component is initialized',
	 *   'default': true }
	 * @vattr Boolean positional { 'description': 'Enable/disable 3D, positional audio effects',
	 *   'default': false }
	 * @vattr Boolean stream { 'description': 'Stream the audio', 'default': false }
	 * @vattr Asset asset {
	 *  'description': 'Audio or video asset',
	 *  'default': null,
	 *  'type': 'asset',
	 *  'filter': { 'audio': true, 'textureVideo': true }
	 * }
	 * @vevent local playAudio {'scope': 'local', 'action': true, 'category': 'Audio', 'parameters': [
	 *   {'name': 'offset', 'type': 'f', 'description': 'Defined in seconds', 'default': 0}
	 * ]}
	 * @vevent local pauseAudio {'scope': 'local', 'action': true, 'category': 'Audio',
	 *   'parameters': []}
	 * @vevent local stopAudio {'scope': 'local', 'action': true, 'category': 'Audio',
	 *   'parameters': []}
	 * @vevent local toggleAudio {'scope': 'local', 'action': true, 'category': 'Audio',
	 *   'parameters': []}
	 */
	/* global Box3D */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AudioSource = function (_Box3DComponent) {
	  _inherits(AudioSource, _Box3DComponent);

	  function AudioSource() {
	    _classCallCheck(this, AudioSource);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AudioSource).call(this));

	    _this.gainNode = null;
	    _this.sourceNode = null;
	    _this.pannerNode = null;
	    _this.context = null;
	    _this.buffer = null;
	    _this.startTime = 0;
	    _this.playOffset = 0;
	    _this.state = 'stopped';
	    _this.element = null;
	    _this.isVideo = false;
	    return _this;
	  }

	  _createClass(AudioSource, [{
	    key: 'freeAudioGraph',
	    value: function freeAudioGraph() {
	      if (this.element) {
	        this.element.pause();
	        this.element.currentTime = 0;
	      }

	      if (this.sourceNode) {
	        // If sourceNode is an AudioBufferSourceNode, stop it first.
	        if (!this.stream) {
	          this.sourceNode.stop(0);
	        }

	        this.sourceNode.disconnect();
	        this.sourceNode = null;
	      }

	      if (this.gainNode) {
	        this.gainNode.disconnect();
	      }

	      if (this.pannerNode) {
	        this.pannerNode.disconnect();
	      }
	    }
	  }, {
	    key: 'getCurrentTime',
	    value: function getCurrentTime() {
	      if (this.state === 'playing') {
	        if (this.element) {
	          return this.element.currentTime;
	        } else if (this.context) {
	          return this.context.currentTime - this.startTime;
	        }
	      }

	      return this.playOffset;
	    }
	  }, {
	    key: 'getGain',
	    value: function getGain() {
	      return this.gain;
	    }
	  }, {
	    key: 'getState',
	    value: function getState() {
	      return this.state;
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.context = this.getEntity().box3DRuntime.getAudioContext();

	      if (this.context) {
	        this.gainNode = this.context.createGain();
	        this.pannerNode = this.context.createPanner();
	      } else {
	        _log2.default.warn('No audio context, using fallback.');
	        this.stream = true; // Must stream via an audio element.
	        this.positional = false; // Positional audio not supported.
	      }

	      // Always stream video assets.
	      this.isVideo = this.asset instanceof Box3D.TextureVideoAsset;
	      if (this.isVideo) {
	        this.stream = true;
	      }

	      if (this.autoPlay) {
	        this.play();
	      } else if (this.preload) {
	        this.load(function (err) {
	          if (err) {
	            _log2.default.warn(err);
	          }
	        });
	      }

	      this.listenTo(this.getEntity(), 'playAudio', this.play);
	      this.listenTo(this.getEntity(), 'pauseAudio', this.pause);
	      this.listenTo(this.getEntity(), 'stopAudio', this.stop);
	      this.listenTo(this.getEntity(), 'toggleAudio', this.toggle);
	    }
	  }, {
	    key: 'initAudioGraph',
	    value: function initAudioGraph(fn) {
	      var that = this;

	      this.load(function (err, source) {
	        if (err) {
	          return fn(err);
	        } else if (!that.context) {
	          return fn(null, null);
	        }

	        var nodes = [];

	        if (that.stream) {
	          that.sourceNode = that.context.createMediaElementSource(source);
	        } else {
	          that.sourceNode = that.context.createBufferSource();
	          that.sourceNode.buffer = source;
	        }

	        nodes.push(that.sourceNode);
	        nodes.push(that.gainNode);

	        if (that.positional) {
	          nodes.push(that.pannerNode);
	        }

	        nodes.push(that.context.destination);

	        for (var iNode = 1; iNode < nodes.length; ++iNode) {
	          nodes[iNode - 1].connect(nodes[iNode]);
	        }

	        fn(null, that.sourceNode);
	      });
	    }
	  }, {
	    key: 'isLoop',
	    value: function isLoop() {
	      return this.loop;
	    }
	  }, {
	    key: 'isPaused',
	    value: function isPaused() {
	      return this.state === 'paused';
	    }
	  }, {
	    key: 'isPlaying',
	    value: function isPlaying() {
	      return this.state === 'playing';
	    }
	  }, {
	    key: 'isStopped',
	    value: function isStopped() {
	      return this.state === 'stopped';
	    }
	  }, {
	    key: 'load',
	    value: function load(fn) {
	      var that = this;

	      // Return the element or buffer, if they have already been created.
	      if (this.stream && this.element) {
	        return fn(null, this.element);
	      } else if (!this.stream && this.buffer) {
	        return fn(null, this.buffer);
	      }

	      if (!this.asset) {
	        return fn(new Error('No audio asset'));
	      }

	      // If we are streaming, load the audio asset and reference the audio or video
	      // element. If we aren't streaming, load the entire file into an audio buffer.
	      if (this.stream) {
	        this.asset.load({
	          load: function load(asset) {
	            if (!asset) {
	              return fn(new Error('Error loading audio/video file'));
	            }

	            if (that.isVideo) {
	              that.element = asset.runtimeData.image;
	            } else {
	              that.element = asset.runtimeData;
	            }

	            fn(null, that.element);
	          } });
	      } else {
	        if (!this.context) {
	          return fn(new Error('No Web Audio context'));
	        }

	        var xhr = new XMLHttpRequest();

	        xhr.open('GET', this.asset.getResourcePaths({ sampleRate: 44100 })[0]);
	        xhr.responseType = 'arraybuffer';

	        xhr.onreadystatechange = function () {
	          if (xhr.readyState === 4) {
	            if (that.buffer) {
	              return fn(null, that.buffer);
	            }

	            if (xhr.status === 200) {
	              that.context.decodeAudioData(this.response, function (buffer) {
	                that.buffer = buffer;
	                fn(null, that.buffer);
	              }, function (err) {
	                fn(err);
	              });
	            } else {
	              fn(new Error('Error loading audio file'));
	            }
	          }
	        };

	        xhr.send();
	      }
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	      if (this.state === 'playing') {
	        // The order of these function calls is important: getCurrentTime() must be
	        // called while state is 'playing' and before freeAudioGraph().
	        this.playOffset = this.getCurrentTime();
	        this.state = 'paused';
	        this.freeAudioGraph();
	      }
	    }
	  }, {
	    key: 'play',
	    value: function play(offset) {
	      if (this.state === 'paused' || this.state === 'stopped') {
	        var that = this;

	        // Add the specified offset to the current play offset.
	        offset = offset !== undefined ? offset : 0;
	        this.playOffset += offset;

	        this.initAudioGraph(function (err) {
	          if (err) {
	            _log2.default.warn('Error playing audio: ' + err);
	            return;
	          }

	          // Update the gain and loop settings.
	          that.setGain(that.gain);
	          that.setLoop(that.loop);

	          // If we are streaming, play the audio/video element; otherwise, play the
	          // buffer source node.
	          if (that.stream) {
	            that.element.currentTime = that.playOffset;
	            that.element.play();
	          } else if (that.context) {
	            that.startTime = that.context.currentTime;
	            that.sourceNode.start(0, that.playOffset);
	          } else {
	            _log2.default.warn('No Web Audio context.');
	          }

	          that.state = 'playing';
	        });
	      }
	    }
	  }, {
	    key: 'setGain',
	    value: function setGain(gain) {
	      this.gain = gain;

	      // If we have a gain node, set the gain on it; otherwise, set the gain on the
	      // audio/video element.
	      if (this.gainNode) {
	        this.gainNode.gain.value = this.gain;
	      } else if (this.element) {
	        this.element.volume = this.gain;
	      }
	    }
	  }, {
	    key: 'setLoop',
	    value: function setLoop(loop) {
	      this.loop = loop;

	      if (this.element) {
	        this.element.loop = this.loop;
	      } else if (this.sourceNode) {
	        this.sourceNode.loop = this.loop;
	      }
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      if (this.state === 'playing' || this.state === 'paused') {
	        this.playOffset = 0;
	        this.state = 'stopped';
	        this.freeAudioGraph();
	      }
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle() {
	      if (this.state === 'playing') {
	        this.pause();
	      } else {
	        this.play();
	      }
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      if (this.hasThreeData() && this.positional) {
	        var xform = this.getRuntimeData().matrixWorld,
	            objPos = new _three2.default.Vector3(0, 0, 0).applyMatrix4(xform),
	            objDir = new _three2.default.Vector3(0, 0, 1).applyMatrix4(xform).sub(objPos).normalize();

	        this.pannerNode.setPosition(objPos.x, objPos.y, objPos.z);
	        this.pannerNode.setOrientation(objDir.x, objDir.y, objDir.z);
	      }
	    }
	  }]);

	  return AudioSource;
	}(_Box3DComponent3.default);

	exports.default = AudioSource;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	@vid orbit_camera_controller
	@vname Orbit Camera Controller
	@vdescription A controller that allows a camera to easily orbit a target object.
	@vfilter camera
	@vcategory Camera Controllers
	@vattr object targetObject {
	  default : null,
	  description : 'The object that the camera orbit point will be relative to.',
	}
	@vattr v3 targetOffset {
	  'default' : {'x': 0.0, 'y': 0.0, 'z': 0.0 },
	  'description' : 'An offset relative to the target object. This will allow you to target a specific point on an object.',
	}
	@vattr float inertialDamping {
	  'default': 0.40,
	  'description': 'How quickly the camera stops moving when input stops.',
	  'min' : 0.0,
	  'max' : 1.0
	}
	@vattr bool invertX {
	  'default': false,
	  'description': 'Reverse the default direction that the camera moves horizontally.'
	}
	@vattr bool invertY {
	  'default': false,
	  'description': 'Reverse the default direction that the camera moves vertically.'
	}
	@vattr bool invertZoom {
	  'default': false,
	  'description': 'Reverse the default direction that the camera moves when zooming.'
	}
	@vattr float lookSpeed {
	  'description' : 'The speed that the camera orbits the target',
	  'default' : 1.0,
	  'max' : 1000,
	  'min' : 0.0001
	}
	@vattr float movementSpeed {
	  'description' : 'The speed that the camera moves when panning',
	  'default' : 800.0,
	  'max' : 20000,
	  'min' : 0.1
	}
	@vattr bool autoOrbit {
	  'default': false,
	  'description': 'Automatically orbit the camera when the user is not controlling it.'
	}
	@vattr float autoOrbitSpeed {
	  'description' : 'The speed of the automatic orbit.',
	  'default' : 1.0,
	  'max' : 1000,
	  'min' : -1000
	}
	@vattr float autoOrbitDelay {
	  'description' : 'The period of time with no mouse input before the auto-orbit starts (in seconds).',
	  'default' : 1.0,
	  'max' : 1000,
	  'min' : 0.0001
	}
	@vattr float orbitDistanceMin {
	  'description' : 'The closest that the camera is allowed to get to the target.',
	  'default' : 10,
	  'max' : 1000,
	  'min' : 0.001
	}
	@vattr float orbitDistanceMax {
	  'description' : 'The furthest that the camera is allowed to get from the target.',
	  'default' : 500.0,
	  'max' : 100000,
	  'min' : 1.0
	}
	@vattr Vector2 pitchAngleBounds {
	  'description' : 'Allows you to set how far the camera can pitch (tilt) from horizontal. Defined in degrees with horizontal being 0.',
	  'default': {x: 75.0, y: -75.0 },
	  'max': { x: 90.0, y: 90.0 },
	  'min': { x: -90.0, y: -90.001 }
	}
	@vattr bool enablePan {
	  'default': true,
	  'description': 'Allow the user to pan side-to-side and up and down with the camera.'
	}
	@vattr bool enableZoom {
	  'default': true,
	  'description': 'Allow the user to zoom in and out with the camera.'
	}
	@vattr bool interpolation {
	  'default': true,
	  'description': 'When enabled, the camera will smoothly interpolate toward its desired state. e.g. If something else moves the camera, interpolation will cause the camera to smoothly focus on the target again. Otherwise, it will snap back.'
	}
	@vattr float interpSpeed {
	  'description' : 'The speed at which the orbiting camera locks on to its target, if set to point away from it.',
	  'default' : 0.5,
	  'max' : 10.0,
	  'min' : 0.01
	}
	@vattr bool usePointerLock {
	  'default': false,
	  'description': 'The mouse cursor will be hidden during camera control and won\'t move. Requires the user to accept pointer lock message in web browser.'
	}
	@vattr bool useKeyboard {
	  'default': true,
	  'description': 'Allow the camera to be controlled via keyboard input. This allows for movement with W,A,S,D/arrow keys as well as modifiers.'
	}

	@vevent local enableOrbitCameraController {'scope' : 'local', 'action':true, 'category':'Orbit Camera', 'parameters' : []}
	@vevent local disableOrbitCameraController {'scope' : 'local', 'action':true, 'category':'Orbit Camera', 'parameters' : []}
	@vevent local toggleOrbitCameraController {'scope' : 'local', 'action':true, 'category':'Orbit Camera', 'parameters' : []}
	@vevent local setOrbitDistance {'scope' : 'local', 'action':true, 'category':'Orbit Camera', 'parameters' : [
	  {'name': 'newDistance', 'type': 'f', 'description': 'The new distance that the camera will orbit at.', 'default': 1.0},
	]}
	@vevent local setTarget {'scope' : 'local', 'description': 'Sets the camera to orbit the given object', 'action':true, 'category':'Orbit Camera', 'parameters' : [
	  {'name': 'newTarget', 'type': 'object', 'description': 'The new target that the camera will orbit.', 'default': null},
	  {'name': 'center', 'type': 'b', 'description': 'Whether or not to target the center of the object. If false, the camera will orbit the origin of the object.', 'default': true},
	]}
	@vevent local focusOnTarget {'scope' : 'local', 'description': 'Look at the center of the current target and zoom so that the object nicely fills the field of view.', 'action':true, 'category':'Orbit Camera', 'parameters' : []}
	*/
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var OrbitCamera = function (_Box3DComponent) {
	  _inherits(OrbitCamera, _Box3DComponent);

	  function OrbitCamera() {
	    _classCallCheck(this, OrbitCamera);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(OrbitCamera).call(this));

	    _this._moveVector = new _three2.default.Vector3();
	    _this._tempVector = new _three2.default.Vector3();
	    _this._tempVector2 = new _three2.default.Vector3();
	    _this._tempVector4 = new _three2.default.Vector4();
	    _this._pivotWorldPos = new _three2.default.Vector3();
	    _this._tempMatrix4 = new _three2.default.Matrix4();
	    //The point that the camera will orbit (using the targetObject and targetOffset)
	    _this.pivotPoint = new _three2.default.Object3D();
	    _this.targetObject = undefined;
	    _this.targetOffset = new _three2.default.Vector3();
	    _this.tempCamera = new _three2.default.PerspectiveCamera();
	    _this.tempEuler = new _three2.default.Euler(0, 0, 0, 'YXZ');
	    _this.tempQuaternion = new _three2.default.Quaternion();
	    _this.tempQuaternion2 = new _three2.default.Quaternion();
	    _this.currentOrbitDistance = 2.50;
	    _this.newOrbitDistance = 0.0;
	    _this.targetMoved = true;

	    _this.ellapsedTimeSinceInput = 0;
	    _this.enablePan = undefined;
	    _this.enableZoom = undefined;

	    _this.invertX = false;
	    _this.invertY = false;
	    _this.invertZoom = false;
	    _this.touchLast = new _three2.default.Vector2();
	    _this.touchLastPinchDist = 0.0;
	    // this.touchYStart = 0.0;
	    _this.orbitMovement = new _three2.default.Vector2();
	    _this.linearMovementDelta = new _three2.default.Vector3();
	    _this.zoomDelta = 0.0;
	    _this.currentOrbitSpeed = new _three2.default.Vector2();
	    _this.currentMoveSpeed = new _three2.default.Vector2();
	    _this.currentZoomSpeed = 0.0;
	    _this.orbitMovementLength = 0.0;
	    _this.linearMovementDeltaLength = 0.0;

	    _this.moveStart = new _three2.default.Vector2();
	    _this.pan = false;
	    _this.look = false;
	    _this.zoom = false;
	    _this.isMouseDragging = false;
	    _this.isTouchDragging = false;
	    _this.autoOrbitOn = false;

	    // this.positionStart = new THREE.Vector3();
	    _this.quaternionStart = new _three2.default.Quaternion();
	    _this.eulerStart = new _three2.default.Euler(0, 0, 0, 'YXZ');
	    _this.currentMousePosition = new _three2.default.Vector2();

	    _this.pitchAngleBoundsRadians = {
	      max: 0.0,
	      min: 0.0
	    };
	    _this.onMouseDown_PointerLock = _this.onMouseDown_PointerLock.bind(_this);
	    _this.onMouseUp_PointerLock = _this.onMouseUp_PointerLock.bind(_this);
	    return _this;
	  }

	  _createClass(OrbitCamera, [{
	    key: 'onEnable',
	    value: function onEnable() {

	      this.getEntity().reset();
	      this.targetOffset = new _three2.default.Vector3();
	      var offset = this.getAttribute('targetOffset');
	      this.targetOffset.copy(offset);
	      this.attributesChanged(['targetOffset']);
	      this.currentMoveSpeed.set(0, 0);
	      this.moveStart.copy(this.currentMousePosition);
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      this.getEntity().reset();
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      if (changes.indexOf('targetObject') !== -1) {
	        this.targetMoved = true;
	        this.initTarget();
	      } else if (changes.indexOf('targetOffset') !== -1 && this.targetOffset.x !== undefined) {
	        // Creates an infinite recursion because this triggers a change event
	        // this.setTargetOffset(this.targetOffset);
	      }
	    }
	  }, {
	    key: 'init',
	    value: function init() {

	      var engine = this.getRuntime();

	      if (this.usePointerLock) {
	        this.togglePointerLock(true);
	      }
	      this.pitchAngleBoundsRadians.max = Math.PI * this.pitchAngleBounds.x / 180.0;
	      this.pitchAngleBoundsRadians.min = Math.PI * this.pitchAngleBounds.y / 180.0;

	      this.getEntity().when('loadBase', this.initTarget, this);
	      this.on('enable', this.onEnable, this);
	      this.on('disable', this.onDisable, this);

	      if (window.Box3D.isMobile()) {
	        engine.on('touchStart', this.onTouchStart, this);
	        engine.on('touchMove', this.onTouchMove, this);
	        engine.on('touchEnd', this.onTouchEnd, this);
	      } else {
	        engine.on('mouseUp', this.onMouseUp, this);
	        engine.on('mouseDown', this.onMouseDown, this);
	        engine.on('mouseMove', this.onMouseMove, this);
	        engine.on('mouseScroll', this.onMouseScroll, this);
	      }

	      this.getEntity().on('enableOrbitCameraController', this.orbitCameraEnable, this);
	      this.getEntity().on('disableOrbitCameraController', this.orbitCameraDisable, this);
	      this.getEntity().on('toggleOrbitCameraController', this.orbitCameraToggle, this);
	      this.getEntity().on('setOrbitDistance', this.setOrbitDistance, this);
	      this.getEntity().on('setTarget', this.setTarget, this);
	      this.getEntity().on('focusOnTarget', this.focusOnTarget, this);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      // make sure to clean up any events or other bindings that you have created
	      // to avoid memory leaks
	      var engine = this.getRuntime();
	      this.off('enable', this.onEnable, this);
	      this.off('disable', this.onDisable, this);

	      if (window.Box3D.isMobile()) {
	        engine.off('touchStart', this.onTouchStart, this);
	        engine.off('touchMove', this.onTouchMove, this);
	        engine.off('touchEnd', this.onTouchEnd, this);
	      } else {
	        engine.off('mouseUp', this.onMouseUp, this);
	        engine.off('mouseDown', this.onMouseDown, this);
	        engine.off('mouseMove', this.onMouseMove, this);
	        engine.off('mouseScroll', this.onMouseScroll, this);
	      }

	      this.togglePointerLock(false);

	      this.getEntity().off('enableOrbitCameraController', this.orbitCameraEnable, this);
	      this.getEntity().off('disableOrbitCameraController', this.orbitCameraDisable, this);
	      this.getEntity().off('toggleOrbitCameraController', this.orbitCameraToggle, this);
	      this.getEntity().off('setOrbitDistance', this.setOrbitDistance, this);
	      this.getEntity().off('setTarget', this.setTarget, this);
	      this.getEntity().off('focusOnTarget', this.focusOnTarget, this);
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      this.quaternionStart.copy(this.getRuntimeData().quaternion);
	      this.eulerStart.setFromQuaternion(this.quaternionStart, 'YXZ');
	    }

	    //Sets the orbit point to that defined by targetObject and targetOffset.

	  }, {
	    key: 'initTarget',
	    value: function initTarget() {
	      var that = this;

	      // that._tempVector.set(0,0,0);

	      this.getScene().when('loadChildren', function () {
	        if (that.targetObject && that.targetObject !== that.getEntity() && that.targetObject.runtimeData) {
	          that.targetObject.runtimeData.add(that.pivotPoint);
	          that.pivotPoint.position.copy(that.targetOffset);
	        } else {
	          that.getThreeScene().add(that.pivotPoint);
	          that.pivotPoint.position.copy(that.targetOffset);
	        }
	      }, this);
	    }
	  }, {
	    key: 'setTargetOffset',
	    value: function setTargetOffset(newOffset, options) {
	      this.targetMoved = true;
	      this.pivotPoint.position.copy(newOffset);
	      var json = {
	        x: newOffset.x,
	        y: newOffset.y,
	        z: newOffset.z
	      };
	      this.setAttribute('targetOffset', json, options);
	    }
	  }, {
	    key: 'setOrbitDistance',
	    value: function setOrbitDistance(newDistance) {
	      this.newOrbitDistance = newDistance;
	    }
	  }, {
	    key: 'setTarget',
	    value: function setTarget(newObjectId, center, options) {
	      if (_lodash2.default.isString(newObjectId) || !newObjectId) {
	        this.setAttribute('targetObject', newObjectId);
	      } else if (_lodash2.default.isObject(newObjectId) && newObjectId.id) {
	        this.setAttribute('targetObject', newObjectId.id);
	      }
	      if (center) {
	        this.lookAtCenter(options);
	      }
	    }
	  }, {
	    key: 'lookAtCenter',
	    value: function lookAtCenter(options) {
	      this.targetMoved = true;
	      var json = {
	        x: 0,
	        y: 0,
	        z: 0
	      };
	      if (this.targetObject) {
	        var center = this.targetObject.getCenter();
	        this.pivotPoint.position.copy(center);
	        json = {
	          x: center.x,
	          y: center.y,
	          z: center.z
	        };
	      }
	      this.setAttribute('targetOffset', json, options);
	    }
	  }, {
	    key: 'focusOnTarget',
	    value: function focusOnTarget() {
	      //adjust target offset to point to centre of object
	      //call setOrbitDistance to cause the target to fill the field of view
	      if (this.targetObject) {

	        this.lookAtCenter();
	        var newDistance;
	        var bb = this.targetObject.getBounds();
	        if (bb) {
	          var dist = new _three2.default.Vector3();
	          dist.set(bb.max.x - bb.min.x, bb.max.y - bb.min.y, bb.max.z - bb.min.z);
	          var scale;
	          if (this.targetObject.runtimeData) {
	            this.targetObject.runtimeData.updateMatrixWorld();
	            scale = new _three2.default.Vector3();
	            scale.setFromMatrixScale(this.targetObject.runtimeData.matrixWorld);
	          } else {
	            scale = this.targetObject.getScale();
	          }
	          dist.multiply(scale);
	          var size = dist.length();
	          if (this.getEntity().getProperty('cameraType') === 'perspective') {
	            newDistance = Math.abs(size / (2.0 * Math.tan(this.getEntity().getProperty('fov') * Math.PI / 360.0)));
	          } else {
	            newDistance = 0.5 * (this.getEntity().getProperty('near') + this.getEntity().getProperty('far'));
	          }

	          newDistance = Math.max(Math.min(newDistance, this.orbitDistanceMax), this.orbitDistanceMin);
	        } else {
	          this._tempVector.subVectors(this.getEntity().getPosition(), this.targetObject.getProperty('position'));
	          newDistance = Math.max(Math.min(this._tempVector.length(), this.orbitDistanceMax), this.orbitDistanceMin);
	        }
	        this.setOrbitDistance(newDistance);
	      }
	    }

	    /**
	     * Called per Box3DRuntime update (per frame)
	     * @param  {float} delta The number of seconds since the last call to `update`
	     */

	  }, {
	    key: 'preUpdate',
	    value: function preUpdate(delta) {

	      if (this.hasThreeData() && this.isEnabled()) {

	        //Check WASD state and move camera appropriately
	        //Also check for modifier keys like ctrl and cmd. If these are pressed,
	        //don't move the camera.
	        var input = this.getInput();
	        var modKey = this.useKeyboard && (input.keyDown('ctrl') || input.keyDown('cmd'));
	        var forwardKey = this.useKeyboard && (input.keyDown('upArrow') || input.keyDown('W'));
	        var backwardKey = this.useKeyboard && (input.keyDown('downArrow') || input.keyDown('S'));
	        var leftKey = this.useKeyboard && (input.keyDown('leftArrow') || input.keyDown('A'));
	        var rightKey = this.useKeyboard && (input.keyDown('rightArrow') || input.keyDown('D'));

	        if (!modKey && (forwardKey || backwardKey || leftKey || rightKey)) {

	          if (this.enableZoom) {
	            if (forwardKey) {
	              this.zoomDelta = -delta;
	            } else if (backwardKey) {
	              this.zoomDelta = delta;
	            }
	          }
	          if (this.enablePan) {
	            if (rightKey) {
	              this.linearMovementDelta.x = -delta;
	            } else if (leftKey) {
	              this.linearMovementDelta.x = delta;
	            }
	          }
	        }
	        this.updateCamera(delta);
	      }
	    }
	  }, {
	    key: 'postUpdate',
	    value: function postUpdate() {
	      this.hasChanged = false;
	    }
	  }, {
	    key: 'updateCamera',
	    value: function updateCamera(delta) {

	      //Handle speed modifier keys
	      var speedMod = 1.0;
	      if (this.useKeyboard && this.getInput().keyDown('shift')) {
	        speedMod = 5.0;
	      }

	      //If there is any user control, reset the ellapsed time.
	      if (this.isMouseDragging || this.zoomDelta) {
	        this.ellapsedTimeSinceInput = 0.0;
	      } else {
	        this.ellapsedTimeSinceInput += delta;
	      }

	      this.orbitMovement.copy(this.currentMousePosition);
	      this.orbitMovement.sub(this.moveStart);
	      this.orbitMovement.multiplyScalar(6.0 * speedMod * this.lookSpeed);

	      var runtimeData = this.getRuntimeData();
	      var damping = Math.max(0.0, Math.min(delta * 33.3 * this.inertialDamping, 1.0));
	      var oneMinusDamping = 1.0 - damping;
	      var interpDistance = 0.0;

	      //Handle inverting the controls
	      if (this.invertX) {
	        this.orbitMovement.x *= -1.0;
	        this.linearMovementDelta.x *= -1.0;
	      }
	      if (this.invertY) {
	        this.orbitMovement.y *= -1.0;
	        this.linearMovementDelta.y *= -1.0;
	      }
	      if (this.invertZoom) {
	        this.zoomDelta *= -1.0;
	      }

	      //Look at current angular movement since the start of control and clamp the min/max pitch.
	      this.tempEuler.copy(this.eulerStart);
	      this.tempEuler.x -= this.orbitMovement.y;
	      this.tempEuler.y -= this.orbitMovement.x;
	      if (this.tempEuler.x > this.pitchAngleBoundsRadians.max) {
	        this.eulerStart.x -= this.tempEuler.x - this.pitchAngleBoundsRadians.max;
	        this.tempEuler.x = this.pitchAngleBoundsRadians.max;
	      } else if (this.tempEuler.x < this.pitchAngleBoundsRadians.min) {
	        this.eulerStart.x += this.pitchAngleBoundsRadians.min - this.tempEuler.x;
	        this.tempEuler.x = this.pitchAngleBoundsRadians.min;
	      }

	      //Handle automatic orbiting when there has been to user input for a given amount of time.
	      if (this.autoOrbit && this.ellapsedTimeSinceInput > this.autoOrbitDelay) {
	        //update cursor position so that when we zoom/move the camera, it won't
	        //attempt to force itself to where it began rotating from(the jitter)
	        this.currentMousePosition.x -= this.autoOrbitSpeed * 0.1 * Math.min(1.0, this.ellapsedTimeSinceInput - this.autoOrbitDelay) % (2.0 * Math.PI) * delta;
	        this.autoOrbitOn = true;
	      }

	      // Handle panning of the camera
	      this.linearMovementDelta.multiplyScalar(speedMod * this.movementSpeed);
	      this.currentMoveSpeed.x = oneMinusDamping * this.currentMoveSpeed.x + damping * this.linearMovementDelta.x;
	      this.currentMoveSpeed.y = oneMinusDamping * this.currentMoveSpeed.y + damping * this.linearMovementDelta.y;
	      if (Math.abs(this.currentMoveSpeed.y) < 0.0001 && Math.abs(this.currentMoveSpeed.x) < 0.0001) {
	        this.currentMoveSpeed.set(0, 0);
	      }

	      if (this.currentMoveSpeed.x || this.currentMoveSpeed.y) {
	        //If there is panning movement, shift the location of the pivot point.
	        this._tempVector.set(-this.currentMoveSpeed.x, this.currentMoveSpeed.y, 0.0);
	        this._tempVector.applyQuaternion(runtimeData.quaternion);
	        this._tempMatrix4.getInverse(this.pivotPoint.matrixWorld);
	        this._tempVector4.set(this._tempVector.x, this._tempVector.y, this._tempVector.z, 0.0);
	        this._tempVector4.applyMatrix4(this._tempMatrix4);

	        this._tempVector.set(this._tempVector4.x, this._tempVector4.y, this._tempVector4.z);

	        this.pivotPoint.position.add(this._tempVector);
	        //Get the world-space position of the pivot point.
	        this.pivotPoint.getWorldPosition(this._pivotWorldPos);
	      } else {
	        //Otherwise, just update the world-space position of the pivot point.
	        this._pivotWorldPos.setFromMatrixPosition(this.pivotPoint.matrixWorld);
	      }

	      if (runtimeData.parent) {
	        this._tempMatrix4.getInverse(runtimeData.parent.matrixWorld);
	        this._pivotWorldPos.applyMatrix4(this._tempMatrix4);
	      }

	      //Handle zoom
	      //Calculate the distance to orbit at.
	      this._tempVector.subVectors(this._pivotWorldPos, runtimeData.position);
	      var currentDistance = this._tempVector.length();
	      var targetDistance;
	      //If the user is actively zooming or if no new target distance is set and the
	      //inertia of the camera is still moving it.
	      if (this.zoomDelta || !this.newOrbitDistance) {
	        this.newOrbitDistance = 0.0;
	        this.currentZoomSpeed = oneMinusDamping * this.currentZoomSpeed + damping * speedMod * 0.1 * this.movementSpeed * this.zoomDelta;
	        if (Math.abs(this.currentZoomSpeed) < 0.0001) {
	          this.currentZoomSpeed = 0.0;
	        }
	        var newDistance = currentDistance + this.currentZoomSpeed * 0.01 * this.currentOrbitDistance;
	        targetDistance = Math.min(this.orbitDistanceMax, Math.max(this.orbitDistanceMin, newDistance));
	        interpDistance = targetDistance - currentDistance;
	        this.currentOrbitDistance = targetDistance;
	      } else {
	        //If we still have a new orbit distance defined, we'll try to move to that.
	        targetDistance = Math.min(this.orbitDistanceMax, Math.max(this.orbitDistanceMin, this.newOrbitDistance));
	        if (this.interpolation) {
	          interpDistance = targetDistance - currentDistance;
	          this.currentOrbitDistance = interpDistance * 10.0 * this.interpSpeed * delta + currentDistance;
	        } else {
	          this.currentOrbitDistance = targetDistance;
	        }
	        if (Math.abs(this.currentOrbitDistance - this.newOrbitDistance) < 0.0001) {
	          this.newOrbitDistance = 0.0;
	        }
	      }

	      //If the camera is being controlled, use the current x,y rotation speed
	      //to determine the new quaternion for the camera
	      if (this.isMouseDragging || this.zoomDelta || !this.targetMoved || this.autoOrbitOn) {
	        this.targetMoved = false;
	        this.tempQuaternion.setFromEuler(this.tempEuler);
	        runtimeData.quaternion.slerp(this.tempQuaternion, this.inertialDamping);
	        runtimeData.position.set(0, 0, this.currentOrbitDistance);
	        runtimeData.position.applyQuaternion(runtimeData.quaternion);
	        runtimeData.position.add(this._pivotWorldPos);
	        runtimeData.lookAt(this._pivotWorldPos);
	        this.getRuntime().needsRender = true;
	      } else {
	        // //If the camera isn't being controlled by the user, continue interpolating
	        // to the desired position/quaternion
	        if (this.interpolation) {
	          // lerp the current quaternion towards the assigned pivot.
	          this.tempCamera.position.copy(runtimeData.position);
	          this.tempCamera.lookAt(this._pivotWorldPos);

	          runtimeData.quaternion.slerp(this.tempCamera.quaternion, 0.1 * this.interpSpeed);

	          //Set the camera's position using the quaternion and orbit distance
	          if (interpDistance) {
	            this._tempVector.set(0, 0, 1);
	            // this._tempVector.set( 0, 0, this.currentOrbitDistance );
	            this._tempVector.applyQuaternion(this.tempCamera.quaternion);
	            this._tempVector.multiplyScalar(interpDistance * 10.0 * this.interpSpeed * delta);

	            runtimeData.position.add(this._tempVector);
	            this.getRuntime().needsRender = true;
	          }
	        } else {
	          runtimeData.lookAt(this._pivotWorldPos);
	          runtimeData.position.set(0, 0, this.currentOrbitDistance);
	          runtimeData.position.applyQuaternion(runtimeData.quaternion);
	          runtimeData.position.add(this._pivotWorldPos);
	        }
	      }

	      this.hasChanged = true;

	      this.orbitMovement.set(0.0, 0.0);
	      this.linearMovementDelta.set(0.0, 0.0, 0.0);
	      this.zoomDelta = 0.0;
	    }
	  }, {
	    key: 'orbitCameraEnable',
	    value: function orbitCameraEnable() {
	      this.enable();
	    }
	  }, {
	    key: 'orbitCameraDisable',
	    value: function orbitCameraDisable() {
	      this.disable();
	    }
	  }, {
	    key: 'orbitCameraToggle',
	    value: function orbitCameraToggle() {
	      if (this.isEnabled()) {
	        this.disable();
	      } else {
	        this.enable();
	      }
	      if (this.usePointerLock && !this.isEnabled()) {
	        this.getInput().disablePointerLock();
	      }
	    }
	  }, {
	    key: 'getEulerAngles',
	    value: function getEulerAngles(outEuler) {
	      var returnVector = outEuler;
	      if (!outEuler) {
	        returnVector = new _three2.default.Euler();
	      }
	      returnVector.setFromQuaternion(this.getRuntimeData().quaternion, 'YXZ');

	      return returnVector;
	    }
	  }, {
	    key: 'setEulerAngles',
	    value: function setEulerAngles(euler) {
	      this.getRuntimeData().quaternion.setFromEuler(euler);
	    }
	  }, {
	    key: 'togglePointerLock',
	    value: function togglePointerLock(on) {
	      this.usePointerLock = on;

	      if (this.usePointerLock) {
	        this.getThreeRenderer().domElement.addEventListener('mousedown', this.onMouseDown_PointerLock);
	      } else {
	        this.getThreeRenderer().domElement.removeEventListener('mousedown', this.onMouseDown_PointerLock);
	      }
	    }
	  }, {
	    key: 'onMouseDown',
	    value: function onMouseDown(event) {
	      if (this.isEnabled()) {
	        var rightButton = this.getInput().mouseButtonDown('right');
	        var leftButton = this.getInput().mouseButtonDown('left');
	        this.pan = false;
	        this.look = false;
	        if (rightButton && this.enablePan) {
	          this.pan = true;
	        } else if (leftButton) {
	          this.look = true;
	        }

	        this.moveStart.x = event.scenePercentX;
	        this.moveStart.y = event.scenePercentY;
	        this.currentMousePosition.copy(this.moveStart);
	        this.quaternionStart.copy(this.getRuntimeData().quaternion);
	        this.eulerStart.setFromQuaternion(this.quaternionStart, 'YXZ');
	      }
	    }
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      if (this.isEnabled()) {
	        var rightButton = this.getInput().mouseButtonDown('right');
	        var leftButton = this.getInput().mouseButtonDown('left');
	        this.pan = false;
	        this.look = false;

	        if (rightButton && this.enablePan) {
	          this.pan = true;
	        } else if (leftButton) {
	          this.look = true;
	        } else {
	          this.isMouseDragging = false;
	        }
	      }
	    }
	  }, {
	    key: 'onMouseDown_PointerLock',
	    value: function onMouseDown_PointerLock(event) {
	      if (this.isEnabled() && event.button === 0 || event.button === 2) {
	        this.getInput().enablePointerLock();

	        this.getThreeRenderer().domElement.addEventListener('mouseup', this.onMouseUp_PointerLock);
	      }
	    }
	  }, {
	    key: 'onMouseUp_PointerLock',
	    value: function onMouseUp_PointerLock(event) {
	      if (this.box3DEntity) {
	        if (event.button === 2 && this.getInput().mouseButtonUp('left') || event.button === 0 && this.getInput().mouseButtonUp('right')) {
	          this.getThreeRenderer().domElement.removeEventListener('mouseup', this.onMouseUp_PointerLock);
	          this.getInput().disablePointerLock();
	        }
	      }
	    }
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      if (this.isEnabled()) {
	        var rightButton = this.getInput().mouseButtonDown('right');
	        var leftButton = this.getInput().mouseButtonDown('left');

	        if (rightButton && this.enablePan) {

	          this.isMouseDragging = true;
	          this.linearMovementDelta.x = event.scenePercentDeltaX;
	          this.linearMovementDelta.y = event.scenePercentDeltaY;
	        } else if (leftButton) {

	          this.isMouseDragging = true;
	          this.currentMousePosition.x = event.scenePercentX;
	          this.currentMousePosition.y = event.scenePercentY;
	        }
	      }
	    }
	  }, {
	    key: 'onMouseScroll',
	    value: function onMouseScroll(delta) {
	      if (this.isEnabled() && _lodash2.default.isNumber(delta) && this.enableZoom) {
	        this.zoomDelta = -delta * 0.1;
	      }
	    }
	  }, {
	    key: 'onTouchStart',
	    value: function onTouchStart(event) {
	      if (this.isEnabled()) {

	        var touches = event.touches;
	        if (!touches) {
	          return;
	        }

	        switch (touches.length) {

	          case 1:
	            // one-fingered touch: rotate
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);

	            this.look = true;
	            this.pan = false;
	            this.zoom = false;

	            break;

	          case 2:
	            // two-fingered touch: dolly

	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            if (this.enableZoom) {
	              this.zoom = true;
	              var dx = touches[0].scenePercentX - touches[1].scenePercentX;
	              var dy = touches[0].scenePercentY - touches[1].scenePercentY;
	              var distance = Math.sqrt(dx * dx + dy * dy);

	              this.touchLastPinchDist = distance;
	              // this.touchYStart = touches[ 0 ].scenePercentY;
	            }
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            break;

	          case 3:
	            // three-fingered touch: pan
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            this.look = false;
	            this.pan = false;
	            if (this.enablePan) {
	              this.pan = true;
	            }
	            this.zoom = false;
	            break;

	          default:
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            this.touchLastPinchDist = -1;
	        }

	        this.moveStart.x = touches[0].scenePercentX;
	        this.moveStart.y = touches[0].scenePercentY;
	        this.currentMousePosition.copy(this.moveStart);
	        // this.positionStart.copy( this.getRuntimeData().position );
	        this.quaternionStart.copy(this.getRuntimeData().quaternion);
	        this.eulerStart.setFromQuaternion(this.quaternionStart, 'YXZ');
	      }

	      this.isTouchDragging = false;
	    }
	  }, {
	    key: 'onTouchMove',
	    value: function onTouchMove(event) {

	      if (this.isEnabled()) {
	        // this.touchInProgress = true;
	        var touches = event.touches;
	        if (!touches) {
	          return;
	        }
	        // var speedMod = 0.3;
	        var dx, dy;
	        switch (touches.length) {

	          case 1:
	            // one-fingered touch: rotate
	            this.look = true;
	            this.pan = false;
	            this.zoom = false;

	            this.touchLast.x = touches[0].scenePercentX;
	            this.touchLast.y = touches[0].scenePercentY;
	            this.isMouseDragging = true;
	            // this.ellapsedTimeSinceInput = 0;

	            if (!this.isTouchDragging) {
	              if (this.moveStart.distanceTo(this.touchLast) > 0.01) {
	                this.isTouchDragging = true;
	              }
	            } else {
	              this.currentMousePosition.x = touches[0].scenePercentX;
	              this.currentMousePosition.y = touches[0].scenePercentY;
	            }

	            break;

	          case 2:
	            // two-fingered touch: dolly

	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            if (this.enableZoom) {
	              // this.isMouseDragging = true;
	              this.zoom = true;
	              dx = touches[0].scenePercentX - touches[1].scenePercentX;
	              dy = touches[0].scenePercentY - touches[1].scenePercentY;
	              var distance = Math.sqrt(dx * dx + dy * dy);

	              var pinchChange = this.touchLastPinchDist - distance;
	              var scrollChange = this.touchLast.y - touches[0].scenePercentY;
	              // var scrollChange = 0;
	              if (Math.abs(pinchChange) > Math.abs(scrollChange)) {
	                this.zoomDelta = 20.0 * pinchChange;
	              } else {
	                this.zoomDelta = 20.0 * scrollChange;
	              }

	              this.touchLastPinchDist = distance;
	            }
	            this.touchLast.x = touches[0].scenePercentX;
	            this.touchLast.y = touches[0].scenePercentY;

	            break;

	          case 3:
	            // three-fingered touch: pan
	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            if (this.enablePan) {
	              this.isMouseDragging = true;
	              this.pan = true;
	              dx = touches[0].scenePercentX - this.touchLast.x;
	              dy = touches[0].scenePercentY - this.touchLast.y;

	              this.linearMovementDelta.x = dx;
	              this.linearMovementDelta.y = dy;
	            }

	            this.touchLast.x = touches[0].scenePercentX;
	            this.touchLast.y = touches[0].scenePercentY;

	            break;
	        }
	      }
	    }
	  }, {
	    key: 'onTouchEnd',
	    value: function onTouchEnd(event) {

	      if (this.isEnabled()) {
	        this.touchLast.set(-1.0, -1.0);
	        this.touchLastPinchDist = -1;
	        var touches = event.touches;

	        switch (touches.length) {

	          case 0:
	            this.isMouseDragging = false;
	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            break;
	          case 1:
	            // one-fingered touch: rotate
	            this.look = true;
	            this.pan = false;
	            this.zoom = false;

	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            this.moveStart.x = touches[0].scenePercentX;
	            this.moveStart.y = touches[0].scenePercentY;
	            this.currentMousePosition.copy(this.moveStart);
	            // this.positionStart.copy( this.getRuntimeData().position );
	            this.quaternionStart.copy(this.getRuntimeData().quaternion);
	            this.eulerStart.setFromQuaternion(this.quaternionStart, 'YXZ');
	            break;

	          case 2:
	            // two-fingered touch: dolly

	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            if (this.enableZoom) {
	              this.zoom = true;
	              var dx = touches[0].scenePercentX - touches[1].scenePercentX;
	              var dy = touches[0].scenePercentY - touches[1].scenePercentY;
	              var distance = Math.sqrt(dx * dx + dy * dy);

	              this.touchLastPinchDist = distance;
	            }
	            // this.touchYStart = touches[ 0 ].scenePercentY;
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            break;

	          case 3:
	            // three-fingered touch: pan
	            this.look = false;
	            this.pan = false;
	            if (this.enablePan) {
	              this.pan = true;
	            }
	            this.zoom = false;

	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            break;

	          default:

	        }

	        this.isTouchDragging = false;
	      }
	    }
	  }]);

	  return OrbitCamera;
	}(_Box3DComponent3.default);

	exports.default = OrbitCamera;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @vid panorama_to_cubemap_script
	 * @vname Panorama To Cube Map
	 * @vdescription A controller that allows a camera to easily orbit a target object.
	 * @vfilter renderTextureCube
	 * @vcategory Rendering
	 * @vattr asset inputTexture {
	 *   default : null,
	 *   filter : { texture2D: true, renderTexture2D: true },
	 *   description : 'The texture to convert to a cube map.'
	 * }
	*/
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PanoramaToCubeMap = function (_Box3DComponent) {
	  _inherits(PanoramaToCubeMap, _Box3DComponent);

	  function PanoramaToCubeMap() {
	    _classCallCheck(this, PanoramaToCubeMap);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PanoramaToCubeMap).call(this));

	    _this.skyboxScene = undefined;
	    _this.cameras = new Array(6);
	    return _this;
	  }

	  _createClass(PanoramaToCubeMap, [{
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      if (changes.indexOf('inputTexture') !== -1) {
	        this.updateTexture();
	      }
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.skyboxScene = new _three2.default.Scene();
	      this.initCameras();
	      this.createSkybox();
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      this.updateTexture();
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      if (this.inputTexture) {
	        this.inputTexture.off('load', this.renderToCube, this);
	      }
	      this.skyboxGeometry.dispose();
	      this.equirectMaterial.dispose();
	      this.skyboxScene = undefined;
	      this.skyboxMesh = undefined;
	      this.inputTexture = undefined;
	    }
	  }, {
	    key: 'updateTexture',
	    value: function updateTexture() {
	      if (this.inputTexture) {
	        this.inputTexture.off('load', this.renderToCube, this);
	        this.inputTexture.when('load', this.renderToCube, this);
	        if (this.inputTexture.isUnloaded()) {
	          this.inputTexture.load();
	        }
	      }
	    }
	  }, {
	    key: 'createSkybox',
	    value: function createSkybox() {
	      var equirectShader = _three2.default.ShaderLib['equirect'];
	      equirectShader.uniforms.tFlip.value = 1.0;
	      this.equirectMaterial = new _three2.default.ShaderMaterial({
	        fragmentShader: equirectShader.fragmentShader,
	        vertexShader: equirectShader.vertexShader,
	        uniforms: equirectShader.uniforms,
	        depthWrite: false,
	        side: _three2.default.BackSide
	      });

	      this.skyboxGeometry = new _three2.default.BoxGeometry(100, 100, 100, 1, 1, 1);
	      this.skyboxGeometry.dynamic = false;
	      this.skyboxMesh = new _three2.default.Mesh(this.skyboxGeometry, this.equirectMaterial);
	      this.skyboxMesh.frustumCulled = false;
	      this.skyboxMesh.castShadow = false;
	      this.skyboxMesh.receiveShadow = false;
	      if (this.isEnabled()) {
	        this.skyboxScene.add(this.skyboxMesh);
	      }
	    }
	  }, {
	    key: 'initCameras',
	    value: function initCameras() {

	      var fov = 90,
	          aspect = 1;

	      this.cameras[0] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[0].up.set(0, -1, 0);
	      this.cameras[0].lookAt(new _three2.default.Vector3(1, 0, 0));
	      this.cameras[0].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[0]);

	      this.cameras[1] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[1].up.set(0, -1, 0);
	      this.cameras[1].lookAt(new _three2.default.Vector3(-1, 0, 0));
	      this.cameras[1].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[1]);

	      this.cameras[2] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[2].up.set(0, 0, 1);
	      this.cameras[2].lookAt(new _three2.default.Vector3(0, 1, 0));
	      this.cameras[2].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[2]);

	      this.cameras[3] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[3].up.set(0, 0, -1);
	      this.cameras[3].lookAt(new _three2.default.Vector3(0, -1, 0));
	      this.cameras[3].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[3]);

	      this.cameras[4] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[4].up.set(0, -1, 0);
	      this.cameras[4].lookAt(new _three2.default.Vector3(0, 0, 1));
	      this.cameras[4].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[4]);

	      this.cameras[5] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[5].up.set(0, -1, 0);
	      this.cameras[5].lookAt(new _three2.default.Vector3(0, 0, -1));
	      this.cameras[5].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[5]);
	    }
	  }, {
	    key: 'renderToCube',
	    value: function renderToCube() {
	      if (this.hasThreeData()) {

	        this.equirectMaterial.uniforms.tEquirect.value = this.inputTexture.runtimeData;
	        var renderTarget = this.getRuntimeData();
	        var renderer = this.getThreeRenderer();

	        renderTarget.texture.generateMipmaps = false;

	        renderer.setViewport(0, 0, renderTarget.width, renderTarget.height);
	        for (var i = 0; i < 5; i++) {
	          renderTarget.activeCubeFace = i;
	          renderer.render(this.skyboxScene, this.cameras[i], renderTarget);
	        }
	        renderTarget.texture.generateMipmaps = this.getEntity().getProperty('generateMipmaps');

	        renderTarget.activeCubeFace = 5;
	        renderer.render(this.skyboxScene, this.cameras[5], renderTarget);
	      }
	    }
	  }]);

	  return PanoramaToCubeMap;
	}(_Box3DComponent3.default);

	exports.default = PanoramaToCubeMap;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	* @vid preview_axis_rotation
	* @vname Preview Axis Rotation
	* @vdescription Set the rotation of any axis.
	* @vfilter object
	* @vattr float speed {
	*    description : 'The speed that we rotate the object, if a transition is triggered',
	*    default : 0.4,
	*    max : 100,
	*    min : 0.1
	*  }
	*/
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var degToRad = 0.0174532925;

	var PreviewAxisRotation = function (_Box3DComponent) {
	  _inherits(PreviewAxisRotation, _Box3DComponent);

	  function PreviewAxisRotation() {
	    _classCallCheck(this, PreviewAxisRotation);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PreviewAxisRotation).call(this));

	    _this.time = 0;
	    _this.target = new _three2.default.Quaternion();

	    _this.axes = {
	      '+X': new _three2.default.Vector3(1, 0, 0),
	      '-X': new _three2.default.Vector3(-1, 0, 0),
	      '+Y': new _three2.default.Vector3(0, 1, 0),
	      '-Y': new _three2.default.Vector3(0, -1, 0),
	      '+Z': new _three2.default.Vector3(0, 0, 1),
	      '-Z': new _three2.default.Vector3(0, 0, -1)
	    };
	    return _this;
	  }

	  _createClass(PreviewAxisRotation, [{
	    key: 'getRightVector',
	    value: function getRightVector(matrix) {
	      return new _three2.default.Vector3(matrix.elements[0], matrix.elements[1], matrix.elements[2]);
	    }
	  }, {
	    key: 'getUpVector',
	    value: function getUpVector(matrix) {
	      return new _three2.default.Vector3(matrix.elements[4], matrix.elements[5], matrix.elements[6]);
	    }
	  }, {
	    key: 'getForwardVector',
	    value: function getForwardVector(matrix) {
	      return new _three2.default.Vector3(matrix.elements[8], matrix.elements[9], matrix.elements[10]);
	    }
	  }, {
	    key: 'setRightVector',
	    value: function setRightVector(matrix, vector) {
	      matrix.elements[0] = vector.x;
	      matrix.elements[1] = vector.y;
	      matrix.elements[2] = vector.z;
	    }
	  }, {
	    key: 'setUpVector',
	    value: function setUpVector(matrix, vector) {
	      matrix.elements[4] = vector.x;
	      matrix.elements[5] = vector.y;
	      matrix.elements[6] = vector.z;
	    }
	  }, {
	    key: 'setForwardVector',
	    value: function setForwardVector(matrix, vector) {
	      matrix.elements[8] = vector.x;
	      matrix.elements[9] = vector.y;
	      matrix.elements[10] = vector.z;
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.listenTo(this.getRuntime(), 'rotate_to', this.rotateToEuler);
	      this.listenTo(this.getRuntime(), 'rotate_on_axis', this.rotateOnWorldAxis);
	      this.listenTo(this.getRuntime(), 'set_local_rotation', this.setLocalRotation);
	      this.listenTo(this.getRuntime(), 'set_axes', this.setAxes);
	      this.listenTo(this.getRuntime(), 'get_axes', this.getAxes);

	      this.listenTo(this.getEntity(), 'rotate_to', this.rotateToEuler);
	      this.listenTo(this.getEntity(), 'rotate_on_axis', this.rotateOnWorldAxis);
	      this.listenTo(this.getEntity(), 'set_local_rotation', this.setLocalRotation);
	      this.listenTo(this.getEntity(), 'set_axes', this.setAxes);
	      this.listenTo(this.getEntity(), 'get_axes', this.getAxes);
	    }

	    /**
	    * Given an set of axis keys, rotate to the correct axis
	    * @param string up The up axis key
	    * @param string forward The forward axis key
	    * @param bool transition Whether or not to trigger a smooth transition
	    */

	  }, {
	    key: 'setAxes',
	    value: function setAxes(up, forward, transition) {
	      var upAxis = this.axes[up];
	      var forwardAxis = this.axes[forward];
	      var rightVec, rotationMatrix;

	      if (!upAxis) {
	        return _log2.default.error('No Up Axis available For ', up);
	      } else if (!forwardAxis) {
	        return _log2.default.error('No Forward Axis available For ', forward);
	      }

	      rightVec = new _three2.default.Vector3(), rotationMatrix = new _three2.default.Matrix4();

	      this.setUpVector(rotationMatrix, upAxis);
	      this.setForwardVector(rotationMatrix, forwardAxis);
	      rightVec.crossVectors(upAxis, forwardAxis);
	      this.setRightVector(rotationMatrix, rightVec);

	      this.target.setFromRotationMatrix(rotationMatrix);

	      if (transition) {
	        //otherwise transition nicely
	        this.time = this.speed;
	      } else {
	        this.setRotation(this.target);
	        this.getEntity().trigger('axis_transition_complete');
	      }
	    }

	    /**
	    * Make the passed in rotation object useful
	    * @param Object rotation
	    * @return THREE.Euler
	    */

	  }, {
	    key: 'eulerFromObject',
	    value: function eulerFromObject(rotation) {
	      var x = isNaN(rotation.x) ? 0 : rotation.x * degToRad;
	      var y = isNaN(rotation.y) ? 0 : rotation.y * degToRad;
	      var z = isNaN(rotation.z) ? 0 : rotation.z * degToRad;

	      var euler = new _three2.default.Euler(x, y, z);
	      euler.order = 'YXZ';

	      return euler;
	    }

	    /**
	    * Easier interface for rotating about three axes
	    * @param object axis Axes to rotate on, by degrees
	    * @param bool additive Whether or not to add to the current rotation OR just set as world rotation
	    * @param bool force Force this to happen without a transition
	    */

	  }, {
	    key: 'rotateOnWorldAxis',
	    value: function rotateOnWorldAxis(axis, additive, force) {
	      if (this.time > 0) {
	        return;
	      }

	      //set at origin with origin scale
	      var runtimeData = this.getRuntimeData(),
	          position = new _three2.default.Vector3(),
	          scale = new _three2.default.Vector3(),
	          x,
	          y,
	          z;

	      position.copy(runtimeData.position);
	      scale.copy(runtimeData.scale);
	      runtimeData.position.set(0, 0, 0);
	      runtimeData.scale.set(1, 1, 1);
	      runtimeData.updateMatrix();

	      //setup rotation matrices
	      x = new _three2.default.Matrix4().makeRotationX((axis.x || 0) * degToRad);
	      y = new _three2.default.Matrix4().makeRotationY((axis.y || 0) * degToRad);
	      z = new _three2.default.Matrix4().makeRotationZ((axis.z || 0) * degToRad);
	      //add matrices
	      z.multiply(y);
	      z.multiply(x);
	      //additive to the current matrix?
	      if (additive) {
	        z.multiply(runtimeData.matrix);
	      }

	      this.target.setFromRotationMatrix(z);
	      //do it now
	      if (force) {
	        this.setRotation(this.target);
	        this.getRuntime().needsRender = true;
	      } else {
	        //otherwise transition nicely
	        this.time = this.speed;
	      }
	      //reset back to position
	      runtimeData.position.copy(position);
	      runtimeData.scale.copy(scale);
	    }

	    /**
	    * Smoothly rotate around an axis
	    * @param Object rotation Euler rotation values for each axis. {x,y,z}
	    */

	  }, {
	    key: 'rotateToEuler',
	    value: function rotateToEuler(rotation) {
	      this.target.setFromEuler(this.eulerFromObject(rotation));
	      this.time = this.speed;
	    }

	    /**
	    * Set the rotation of an axis
	    * @param Object rotation Euler rotation values for each axis. {x,y,z}
	    */

	  }, {
	    key: 'setLocalRotation',
	    value: function setLocalRotation(rotation) {
	      //interrupt if transitioning
	      this.time = 0;

	      //just reusing target here, not going to interpolate to it
	      this.target.setFromEuler(this.eulerFromObject(rotation));
	      this.setRotation(this.target);
	    }

	    /**
	    * Apply a quaternion rotation to the entity!
	    */

	  }, {
	    key: 'setRotation',
	    value: function setRotation(target) {
	      this.getEntity().setQuaternion(target.x, target.y, target.z, target.w);

	      //alternative instead of forcing a change event on the entity
	      if (this.hasThreeData() && !this.getRuntimeData().quaternion.equals(target)) {
	        this.getRuntimeData().quaternion.copy(target);
	      }
	      this.getRuntime().needsRender = true;
	    }
	  }, {
	    key: 'getSign',
	    value: function getSign(value) {
	      return value > 0 ? '+' : '-';
	    }

	    /**
	    * Get the up and forward axes, useable by preview
	    * @param Function callback Recieves the up and forward axes
	    */

	  }, {
	    key: 'getAxes',
	    value: function getAxes(callback) {
	      var matrix = this.getRuntimeData().matrix,
	          upVec = this.getUpVector(matrix).normalize(),
	          forwardVec = this.getForwardVector(matrix).normalize(),
	          up,
	          forward,
	          absX = Math.abs(upVec.x),
	          absY = Math.abs(upVec.y),
	          absZ = Math.abs(upVec.z);

	      up = absX < absZ ? absZ < absY ? 'y' : 'z' : absX < absY ? 'y' : 'x';

	      absX = Math.abs(forwardVec.x);
	      absY = Math.abs(forwardVec.y);
	      absZ = Math.abs(forwardVec.z);

	      forward = absX < absZ ? absZ < absY ? 'y' : 'z' : absX < absY ? 'y' : 'x';

	      up = this.getSign(upVec[up]) + up;
	      forward = this.getSign(forwardVec[forward]) + forward;

	      //translate to values usable by preview
	      var axes = {
	        up: up.toUpperCase(),
	        forward: forward.toUpperCase()
	      };

	      if (callback) {
	        callback(axes);
	      }

	      return axes;
	    }
	  }, {
	    key: 'update',
	    value: function update(dt) {
	      if (this.time >= 0 && this.hasThreeData()) {
	        this.time -= dt;

	        this.getRuntimeData().quaternion.slerp(this.target, Math.min(1, Math.max(0, 1 - 1 / (this.speed / this.time))));

	        //force render
	        this.getRuntime().needsRender = true;
	        //transition over, norify user!
	        if (this.time < 0) {
	          this.setRotation(this.target);
	          this.getEntity().trigger('axis_transition_complete');
	        }
	      }
	    }
	  }]);

	  return PreviewAxisRotation;
	}(_Box3DComponent3.default);

	exports.default = PreviewAxisRotation;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	@vid preview_camera_controller
	@vname Preview Camera Controller
	@vdescription A controller that allows a camera to easily orbit a target object.
	@vfilter camera
	@vcategory Camera Controllers
	@vattr object targetObject {
	  default : null,
	  description : 'The object that the camera orbit point will be relative to.',
	}
	@vattr v3 targetOffset {
	  'default' : {'x': 0.0, 'y': 0.0, 'z': 0.0 },
	  'description' : 'An offset relative to the target object. This will allow you to target a specific point on an object.',
	}
	@vattr float inertialDamping {
	  'default': 0.20,
	  'description': 'How quickly the camera stops moving when input stops.',
	  'min' : 0.0,
	  'max' : 1.0
	}
	@vattr bool invertX {
	  'default': false,
	  'description': 'Reverse the default direction that the camera moves horizontally.'
	}
	@vattr bool invertY {
	  'default': false,
	  'description': 'Reverse the default direction that the camera moves vertically.'
	}
	@vattr bool invertZoom {
	  'default': false,
	  'description': 'Reverse the default direction that the camera moves when zooming.'
	}
	@vattr float lookSpeed {
	  'description' : 'The speed that the camera orbits the target',
	  'default' : 1.0,
	  'max' : 1000,
	  'min' : 0.0001
	}
	@vattr float movementSpeed {
	  'description' : 'The speed that the camera moves when panning',
	  'default' : 800.0,
	  'max' : 20000,
	  'min' : 0.1
	}
	@vattr bool autoOrbit {
	  'default': false,
	  'description': 'Automatically orbit the camera when the user is not controlling it.'
	}
	@vattr float autoOrbitSpeed {
	  'description' : 'The speed of the automatic orbit.',
	  'default' : 1.0,
	  'max' : 1000,
	  'min' : -1000
	}
	@vattr float autoOrbitDelay {
	  'description' : 'The period of time with no mouse input before the auto-orbit starts (in seconds).',
	  'default' : 1.0,
	  'max' : 1000,
	  'min' : 0.0001
	}
	@vattr float orbitDistanceMin {
	  'description' : 'The closest that the camera is allowed to get to the target.',
	  'default' : 10,
	  'max' : 1000,
	  'min' : 0.001
	}
	@vattr float orbitDistanceMax {
	  'description' : 'The furthest that the camera is allowed to get from the target.',
	  'default' : 500.0,
	  'max' : 100000,
	  'min' : 1.0
	}
	@vattr Vector2 pitchAngleBounds {
	  'description' : 'Allows you to set how far the camera can pitch (tilt) from horizontal. Defined in degrees with horizontal being 0.',
	  'default': {x: 75.0, y: -75.0 },
	  'max': { x: 90.0, y: 90.0 },
	  'min': { x: -90.0, y: -90.001 }
	}
	@vattr bool enablePan {
	  'default': true,
	  'description': 'Allow the user to pan side-to-side and up and down with the camera.'
	}
	@vattr bool enableZoom {
	  'default': true,
	  'description': 'Allow the user to zoom in and out with the camera.'
	}
	@vattr bool interpolation {
	  'default': true,
	  'description': 'When enabled, the camera will smoothly interpolate toward its desired state. e.g. If something else moves the camera, interpolation will cause the camera to smoothly focus on the target again. Otherwise, it will snap back.'
	}
	@vattr float interpSpeed {
	  'description' : 'The speed at which the orbiting camera locks on to its target, if set to point away from it.',
	  'default' : 0.5,
	  'max' : 10.0,
	  'min' : 0.01
	}
	@vattr bool usePointerLock {
	  'default': false,
	  'description': 'The mouse cursor will be hidden during camera control and won\'t move. Requires the user to accept pointer lock message in web browser.'
	}
	@vattr bool useKeyboard {
	  'default': true,
	  'description': 'Allow the camera to be controlled via keyboard input. This allows for movement with W,A,S,D/arrow keys as well as modifiers.'
	}

	@vevent local enableOrbitCameraController {'scope' : 'local', 'action':true, 'category':'Orbit Camera', 'parameters' : []}
	@vevent local disableOrbitCameraController {'scope' : 'local', 'action':true, 'category':'Orbit Camera', 'parameters' : []}
	@vevent local toggleOrbitCameraController {'scope' : 'local', 'action':true, 'category':'Orbit Camera', 'parameters' : []}
	@vevent local resetOrbitCameraController {'scope' : 'local', 'action':true, 'category':'Orbit Camera', 'parameters' : []}
	@vevent local setOrbitDistance {'scope' : 'local', 'action':true, 'category':'Orbit Camera', 'parameters' : [
	  {'name': 'newDistance', 'type': 'f', 'description': 'The new distance that the camera will orbit at.', 'default': 1.0},
	]}
	@vevent local setTarget {'scope' : 'local', 'description': 'Sets the camera to orbit the given object', 'action':true, 'category':'Orbit Camera', 'parameters' : [
	  {'name': 'newTarget', 'type': 'object', 'description': 'The new target that the camera will orbit.', 'default': null},
	  {'name': 'center', 'type': 'b', 'description': 'Whether or not to target the center of the object. If false, the camera will orbit the origin of the object.', 'default': true},
	]}
	@vevent local focusOnTarget {'scope' : 'local', 'description': 'Look at the center of the current target and zoom so that the object nicely fills the field of view.', 'action':true, 'category':'Orbit Camera', 'parameters' : []}
	*/
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ORIGIN_VEC = new _three2.default.Vector3();

	_three2.default.Quaternion.prototype.fuzzyEquals = function (quat, epsilon) {
	  epsilon = epsilon || 0.001;
	  if (Math.abs(this.x - quat.x) < epsilon && Math.abs(this.y - quat.y) < epsilon && Math.abs(this.z - quat.z) < epsilon && Math.abs(this.w - quat.w) < epsilon) {
	    return true;
	  }
	  return false;
	};

	var PreviewCamera = function (_Box3DComponent) {
	  _inherits(PreviewCamera, _Box3DComponent);

	  function PreviewCamera() {
	    _classCallCheck(this, PreviewCamera);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PreviewCamera).call(this));

	    _this._moveVector = new _three2.default.Vector3();
	    _this._tempVector = new _three2.default.Vector3();
	    _this._tempVector2 = new _three2.default.Vector3();
	    _this._tempVector4 = new _three2.default.Vector4();
	    _this._pivotWorldPos = new _three2.default.Vector3();
	    _this._tempMatrix4 = new _three2.default.Matrix4();
	    //The point that the camera will orbit (using the targetObject and targetOffset)
	    _this.pivotPoint = new _three2.default.Object3D();
	    _this.targetObject = undefined;
	    _this.targetOffset = new _three2.default.Vector3();
	    _this.tempCamera = new _three2.default.PerspectiveCamera();
	    _this.targetEuler = new _three2.default.Euler(0, 0, 0, 'YXZ');
	    _this.tempQuaternion = new _three2.default.Quaternion();
	    _this.tempQuaternion2 = new _three2.default.Quaternion();
	    _this.currentOrbitDistance = 2.50;
	    _this.newOrbitDistance = 0.0;
	    _this.targetMoved = true;

	    _this.ellapsedTimeSinceInput = 0;
	    _this.enablePan = undefined;
	    _this.enableZoom = undefined;

	    _this.invertX = false;
	    _this.invertY = false;
	    _this.invertZoom = false;
	    _this.touchLast = new _three2.default.Vector2();
	    _this.touchLastPinchDist = 0.0;
	    // this.touchYStart = 0.0;
	    _this.mouseDraggedMovement = new _three2.default.Vector2();
	    _this.linearMovementDelta = new _three2.default.Vector3();
	    _this.zoomDelta = 0.0;
	    _this.currentOrbitSpeed = new _three2.default.Vector2();
	    _this.currentMoveSpeed = new _three2.default.Vector2();
	    _this.currentZoomSpeed = 0.0;
	    _this.orbitMovementLength = 0.0;
	    _this.linearMovementDeltaLength = 0.0;

	    _this.moveStart = new _three2.default.Vector2();
	    _this.pan = false;
	    _this.look = false;
	    _this.zoom = false;
	    _this.isMouseDragging = false;
	    _this.isTouchDragging = false;
	    _this.autoOrbitOn = false;

	    // this.positionStart = new THREE.Vector3();
	    _this.quaternionStart = new _three2.default.Quaternion();
	    _this.eulerStart = new _three2.default.Euler(0, 0, 0, 'YXZ');
	    _this.currentDraggingMousePosition = new _three2.default.Vector2();

	    _this.pitchAngleBoundsRadians = { x: 0.0, y: 0.0 };
	    _this.onMouseDown_PointerLock = _this.onMouseDown_PointerLock.bind(_this);
	    _this.onMouseUp_PointerLock = _this.onMouseUp_PointerLock.bind(_this);
	    return _this;
	  }

	  _createClass(PreviewCamera, [{
	    key: 'onEnable',
	    value: function onEnable() {
	      this.targetOffset = ORIGIN_VEC;
	      this.attributesChanged(['targetOffset']);
	      this.currentMoveSpeed.set(0, 0);
	      this.moveStart.copy(this.currentDraggingMousePosition);
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {}
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      if (changes.indexOf('targetObject') !== -1) {
	        this.targetMoved = true;
	        this.initTarget();
	      } else if (changes.indexOf('targetOffset') !== -1 && this.targetOffset.x !== undefined) {
	        this.setTargetOffset(this.targetOffset);
	      }
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      if (this.usePointerLock) {
	        this.togglePointerLock(true);
	      }
	      this.pitchAngleBoundsRadians.max = Math.PI * this.pitchAngleBounds.x / 180.0;
	      this.pitchAngleBoundsRadians.min = Math.PI * this.pitchAngleBounds.y / 180.0;

	      this.getEntity().when('loadBase', this.initTarget, this);
	      this.listenTo(this, 'enable', this.onEnable, this);
	      this.listenTo(this, 'disable', this.onDisable, this);

	      if (window.Box3D.isMobile()) {
	        this.listenTo(this.getRuntime(), 'touchStart', this.onTouchStart, this);
	        this.listenTo(this.getRuntime(), 'touchMove', this.onTouchMove, this);
	        this.listenTo(this.getRuntime(), 'touchEnd', this.onTouchEnd, this);
	      } else {
	        this.listenTo(this.getRuntime(), 'mouseUp', this.onMouseUp, this);
	        this.listenTo(this.getRuntime(), 'mouseDown', this.onMouseDown, this);
	        this.listenTo(this.getRuntime(), 'mouseMove', this.onMouseMove, this);
	        this.listenTo(this.getRuntime(), 'mouseScroll', this.onMouseScroll, this);
	      }

	      this.listenTo(this.getEntity(), 'enableOrbitCameraController', this.orbitCameraEnable, this);
	      this.listenTo(this.getEntity(), 'disableOrbitCameraController', this.orbitCameraDisable, this);
	      this.listenTo(this.getEntity(), 'toggleOrbitCameraController', this.orbitCameraToggle, this);
	      this.listenTo(this.getEntity(), 'resetOrbitCameraController', this.resetOrbitCameraController, this);
	      this.listenTo(this.getEntity(), 'setOrbitDistance', this.setOrbitDistance, this);
	      this.listenTo(this.getEntity(), 'setTarget', this.setTarget, this);
	      this.listenTo(this.getEntity(), 'focusOnTarget', this.focusOnTarget, this);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.togglePointerLock(false);

	      this.stopListening();
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      this.resetOrbitRotation();
	    }

	    //reset the rotation point of the camera to what it currently is. Stops camera from
	    //interpolating position after a pivot point move

	  }, {
	    key: 'resetOrbitRotation',
	    value: function resetOrbitRotation() {
	      this.quaternionStart.copy(this.getRuntimeData().quaternion);
	      this.eulerStart.setFromQuaternion(this.quaternionStart, 'YXZ');
	    }
	  }, {
	    key: 'resetOrbitCameraController',
	    value: function resetOrbitCameraController() {
	      // Reset the transform of the camera to what it is in the entity data.
	      this.getEntity().reset();

	      this.setTargetOffset(ORIGIN_VEC);

	      // Reset control parameters so that we don't try to interpolate back to
	      // where we were.
	      this.currentDraggingMousePosition.copy(this.moveStart);
	      this.resetOrbitRotation();
	      this.currentZoomSpeed = 0.0;
	    }

	    //Sets the orbit point to that defined by targetObject and targetOffset.

	  }, {
	    key: 'initTarget',
	    value: function initTarget() {
	      var that = this;

	      this.getScene().when('loadChildren', function () {
	        if (that.targetObject && that.targetObject !== that.getEntity() && that.targetObject.runtimeData) {
	          that.targetObject.runtimeData.add(that.pivotPoint);
	          that.pivotPoint.position.copy(that.targetOffset);
	        } else {
	          that.getThreeScene().add(that.pivotPoint);
	          that.pivotPoint.position.copy(that.targetOffset);
	        }
	      }, this);
	    }
	  }, {
	    key: 'setTargetOffset',
	    value: function setTargetOffset(newOffset) {
	      this.targetMoved = true;
	      this.pivotPoint.position.copy(newOffset);
	    }
	  }, {
	    key: 'setOrbitDistance',
	    value: function setOrbitDistance(newDistance) {
	      this.newOrbitDistance = newDistance;
	    }
	  }, {
	    key: 'setTarget',
	    value: function setTarget(newObjectId, center, options) {
	      if (_lodash2.default.isString(newObjectId) || !newObjectId) {
	        this.setAttribute('targetObject', newObjectId);
	      } else if (_lodash2.default.isObject(newObjectId) && newObjectId.id) {
	        this.setAttribute('targetObject', newObjectId.id);
	      }
	      if (center) {
	        this.lookAtCenter(options);
	      }
	    }
	  }, {
	    key: 'lookAtCenter',
	    value: function lookAtCenter(options) {
	      this.targetMoved = true;
	      var json = { x: 0, y: 0, z: 0 };
	      if (this.targetObject) {
	        var center = this.targetObject.getCenter();
	        this.pivotPoint.position.copy(center);
	        json = { x: center.x, y: center.y, z: center.z };
	      }
	      this.setAttribute('targetOffset', json, options);
	    }
	  }, {
	    key: 'focusOnTarget',
	    value: function focusOnTarget() {
	      //adjust target offset to point to centre of object
	      //call setOrbitDistance to cause the target to fill the field of view
	      if (this.targetObject) {

	        this.lookAtCenter();
	        var newDistance;
	        var bb = this.targetObject.getBounds();
	        if (bb) {
	          var dist = new _three2.default.Vector3();
	          dist.set(bb.max.x - bb.min.x, bb.max.y - bb.min.y, bb.max.z - bb.min.z);
	          var scale;
	          if (this.targetObject.runtimeData) {
	            this.targetObject.runtimeData.updateMatrixWorld();
	            scale = new _three2.default.Vector3();
	            scale.setFromMatrixScale(this.targetObject.runtimeData.matrixWorld);
	          } else {
	            scale = this.targetObject.getScale();
	          }
	          dist.multiply(scale);
	          var size = dist.length();
	          if (this.getEntity().getProperty('cameraType') === 'perspective') {
	            newDistance = Math.abs(size / (2.0 * Math.tan(this.getEntity().getProperty('fov') * Math.PI / 360.0)));
	          } else {
	            newDistance = 0.5 * (this.getEntity().getProperty('near') + this.getEntity().getProperty('far'));
	          }

	          newDistance = Math.max(Math.min(newDistance, this.orbitDistanceMax), this.orbitDistanceMin);
	        } else {
	          this._tempVector.subVectors(this.getEntity().getPosition(), this.targetObject.getProperty('position'));
	          newDistance = Math.max(Math.min(this._tempVector.length(), this.orbitDistanceMax), this.orbitDistanceMin);
	        }
	        this.setOrbitDistance(newDistance);
	      }
	    }

	    /**
	     * Called per Box3DRuntime update (per frame)
	     * @param  {float} delta The number of seconds since the last call to `update`
	     */

	  }, {
	    key: 'preUpdate',
	    value: function preUpdate(delta) {

	      if (this.hasThreeData() && this.isEnabled()) {

	        //Check WASD state and move camera appropriately
	        //Also check for modifier keys like ctrl and cmd. If these are pressed,
	        //don't move the camera.
	        var input = this.getInput();
	        var modKey = this.useKeyboard && (input.keyDown('ctrl') || input.keyDown('cmd'));
	        var forwardKey = this.useKeyboard && (input.keyDown('upArrow') || input.keyDown('W'));
	        var backwardKey = this.useKeyboard && (input.keyDown('downArrow') || input.keyDown('S'));
	        var leftKey = this.useKeyboard && (input.keyDown('leftArrow') || input.keyDown('A'));
	        var rightKey = this.useKeyboard && (input.keyDown('rightArrow') || input.keyDown('D'));

	        if (!modKey && (forwardKey || backwardKey || leftKey || rightKey)) {

	          if (this.enableZoom) {
	            if (forwardKey) {
	              this.zoomDelta = -delta;
	            } else if (backwardKey) {
	              this.zoomDelta = delta;
	            }
	          }
	          if (this.enablePan) {
	            if (rightKey) {
	              this.linearMovementDelta.x = -delta;
	            } else if (leftKey) {
	              this.linearMovementDelta.x = delta;
	            }
	          }
	        }
	        this.updateCamera(delta);
	      }
	    }
	  }, {
	    key: 'postUpdate',
	    value: function postUpdate() {
	      this.hasChanged = false;
	    }
	  }, {
	    key: 'updateCamera',
	    value: function updateCamera(delta) {

	      //Handle speed modifier keys
	      var speedMod = 1.0;
	      if (this.useKeyboard && this.getInput().keyDown('shift')) {
	        speedMod = 5.0;
	      }

	      //If there is any user control, reset the ellapsed time.
	      if (this.isMouseDragging || this.zoomDelta) {
	        this.ellapsedTimeSinceInput = 0.0;
	      } else {
	        this.ellapsedTimeSinceInput += delta;
	      }

	      this.mouseDraggedMovement.copy(this.currentDraggingMousePosition);
	      this.mouseDraggedMovement.sub(this.moveStart);
	      this.mouseDraggedMovement.multiplyScalar(6.0 * speedMod * this.lookSpeed);

	      var runtimeData = this.getRuntimeData();
	      var damping = Math.max(0.0, Math.min(delta * 33.3 * this.inertialDamping, 1.0));
	      var oneMinusDamping = 1.0 - damping;
	      var interpDistance = 0.0;

	      //Handle inverting the controls
	      if (this.invertX) {
	        this.mouseDraggedMovement.x *= -1.0;
	        this.linearMovementDelta.x *= -1.0;
	      }
	      if (this.invertY) {
	        this.mouseDraggedMovement.y *= -1.0;
	        this.linearMovementDelta.y *= -1.0;
	      }
	      if (this.invertZoom) {
	        this.zoomDelta *= -1.0;
	      }

	      //Look at current angular movement since the start of control and clamp the min/max pitch.
	      this.targetEuler.copy(this.eulerStart);
	      this.targetEuler.x -= this.mouseDraggedMovement.y;
	      this.targetEuler.y -= this.mouseDraggedMovement.x;
	      if (this.targetEuler.x > this.pitchAngleBoundsRadians.max) {
	        this.eulerStart.x -= this.targetEuler.x - this.pitchAngleBoundsRadians.max;
	        this.targetEuler.x = this.pitchAngleBoundsRadians.max;
	      } else if (this.targetEuler.x < this.pitchAngleBoundsRadians.min) {
	        this.eulerStart.x += this.pitchAngleBoundsRadians.min - this.targetEuler.x;
	        this.targetEuler.x = this.pitchAngleBoundsRadians.min;
	      }

	      //Handle automatic orbiting when there has been to user input for a given amount of time.
	      if (this.autoOrbit && this.ellapsedTimeSinceInput > this.autoOrbitDelay) {
	        //update cursor position so that when we zoom/move the camera, it won't
	        // attempt to force itself to where it began rotating from(the jitter)
	        this.currentDraggingMousePosition.x -= this.autoOrbitSpeed * 0.1 * Math.min(1.0, this.ellapsedTimeSinceInput - this.autoOrbitDelay) % (2.0 * Math.PI) * delta;
	        this.autoOrbitOn = true;
	        this.hasChanged = true;
	      }

	      // Handle panning of the camera
	      this.linearMovementDelta.multiplyScalar(speedMod * this.movementSpeed);
	      this.currentMoveSpeed.x = oneMinusDamping * this.currentMoveSpeed.x + damping * this.linearMovementDelta.x;
	      this.currentMoveSpeed.y = oneMinusDamping * this.currentMoveSpeed.y + damping * this.linearMovementDelta.y;
	      if (Math.abs(this.currentMoveSpeed.y) < 0.0001 && Math.abs(this.currentMoveSpeed.x) < 0.0001) {
	        this.currentMoveSpeed.set(0, 0);
	      }

	      if (this.currentMoveSpeed.x || this.currentMoveSpeed.y) {
	        //If there is panning movement, shift the location of the pivot point.
	        this._tempVector.set(-this.currentMoveSpeed.x, this.currentMoveSpeed.y, 0.0);
	        this._tempVector.applyQuaternion(runtimeData.quaternion);
	        this._tempMatrix4.getInverse(this.pivotPoint.matrixWorld);
	        this._tempVector4.set(this._tempVector.x, this._tempVector.y, this._tempVector.z, 0.0);
	        this._tempVector4.applyMatrix4(this._tempMatrix4);

	        this._tempVector.set(this._tempVector4.x, this._tempVector4.y, this._tempVector4.z);

	        this.pivotPoint.position.add(this._tempVector);
	        //Get the world-space position of the pivot point.
	        this.pivotPoint.getWorldPosition(this._pivotWorldPos);
	        this.hasChanged = true;
	      } else {
	        //Otherwise, just update the world-space position of the pivot point.
	        this._pivotWorldPos.setFromMatrixPosition(this.pivotPoint.matrixWorld);
	      }

	      if (runtimeData.parent) {
	        this._tempMatrix4.getInverse(runtimeData.parent.matrixWorld);
	        this._pivotWorldPos.applyMatrix4(this._tempMatrix4);
	      }

	      //Handle zoom
	      //Calculate the distance to orbit at.
	      this._tempVector.subVectors(this._pivotWorldPos, runtimeData.position);
	      var currentDistance = this._tempVector.length();
	      var targetDistance;
	      //If the user is actively zooming or if no new target distance is set and
	      // the inertia of the camera is still moving it.
	      if (this.zoomDelta || !this.newOrbitDistance) {
	        this.newOrbitDistance = 0.0;
	        this.currentZoomSpeed = oneMinusDamping * this.currentZoomSpeed + damping * speedMod * 0.1 * this.movementSpeed * this.zoomDelta;
	        if (Math.abs(this.currentZoomSpeed) < 0.0001) {
	          this.currentZoomSpeed = 0.0;
	        }
	        if (this.getRuntimeData() instanceof _three2.default.PerspectiveCamera) {
	          var newDistance = currentDistance + this.currentZoomSpeed * 0.01 * this.currentOrbitDistance;
	          targetDistance = Math.min(this.orbitDistanceMax, Math.max(this.orbitDistanceMin, newDistance));
	          interpDistance = targetDistance - currentDistance;
	          this.currentOrbitDistance = targetDistance;
	        } else {
	          var camera = this.getRuntimeData();
	          var change = this.currentZoomSpeed * 0.1;
	          var aspect = camera.right / camera.top;
	          var maxHeight = 250;
	          var minHeight = 5;
	          camera.top += change;
	          camera.bottom -= change;
	          camera.top = Math.max(Math.min(camera.top, maxHeight), minHeight);
	          camera.bottom = -camera.top;
	          camera.left = camera.bottom * aspect;
	          camera.right = camera.top * aspect;
	          camera.updateProjectionMatrix();
	          this.currentOrbitDistance = currentDistance;
	        }
	        if (this.currentZoomSpeed) {
	          this.hasChanged = true;
	        }
	      } else {
	        //If we still have a new orbit distance defined, we'll try to move to that.
	        targetDistance = Math.min(this.orbitDistanceMax, Math.max(this.orbitDistanceMin, this.newOrbitDistance));
	        if (this.interpolation) {
	          interpDistance = targetDistance - currentDistance;
	          this.currentOrbitDistance = interpDistance * 10.0 * this.interpSpeed * delta + currentDistance;
	        } else {
	          this.currentOrbitDistance = targetDistance;
	        }
	        if (Math.abs(this.currentOrbitDistance - this.newOrbitDistance) < 0.0001) {
	          this.newOrbitDistance = 0.0;
	        }
	        this.hasChanged = true;
	      }

	      //If the camera is being controlled, use the current x,y rotation speed
	      //to determine the new quaternion for the camera
	      if (!this.targetMoved) {
	        this.tempQuaternion.setFromEuler(this.targetEuler);
	        if (!runtimeData.quaternion.fuzzyEquals(this.tempQuaternion) || this.hasChanged) {
	          runtimeData.quaternion.slerp(this.tempQuaternion, this.inertialDamping);
	          runtimeData.position.set(0, 0, this.currentOrbitDistance);
	          runtimeData.position.applyQuaternion(runtimeData.quaternion);
	          runtimeData.position.add(this._pivotWorldPos);
	          runtimeData.lookAt(this._pivotWorldPos);
	          this.hasChanged = true;
	        }
	      } else {
	        this.targetMoved = false;
	        // If the camera isn't being controlled by the user, continue interpolating
	        // to the desired position/quaternion
	        if (this.interpolation) {
	          // lerp the current quaternion towards the assigned pivot.
	          this.tempCamera.position.copy(runtimeData.position);
	          this.tempCamera.lookAt(this._pivotWorldPos);

	          runtimeData.quaternion.slerp(this.tempCamera.quaternion, 0.1 * this.interpSpeed);

	          //Set the camera's position using the quaternion and orbit distance
	          if (interpDistance) {
	            this._tempVector.set(0, 0, 1);
	            this._tempVector.applyQuaternion(this.tempCamera.quaternion);
	            this._tempVector.multiplyScalar(interpDistance * 10.0 * this.interpSpeed * delta);

	            runtimeData.position.add(this._tempVector);
	          }
	        } else {
	          runtimeData.lookAt(this._pivotWorldPos);
	          runtimeData.position.set(0, 0, this.currentOrbitDistance);
	          runtimeData.position.applyQuaternion(runtimeData.quaternion);
	          runtimeData.position.add(this._pivotWorldPos);
	        }
	        this.hasChanged = true;
	      }
	      if (this.hasChanged) {
	        this.getRuntime().needsRender = true;
	      }

	      this.mouseDraggedMovement.set(0.0, 0.0);
	      this.linearMovementDelta.set(0.0, 0.0, 0.0);
	      this.zoomDelta = 0.0;
	    }
	  }, {
	    key: 'orbitCameraEnable',
	    value: function orbitCameraEnable() {
	      this.enable();
	    }
	  }, {
	    key: 'orbitCameraDisable',
	    value: function orbitCameraDisable() {
	      this.disable();
	    }
	  }, {
	    key: 'orbitCameraToggle',
	    value: function orbitCameraToggle() {
	      if (this.isEnabled()) {
	        this.disable();
	      } else {
	        this.enable();
	      }
	      if (this.usePointerLock && !this.isEnabled()) {
	        this.getInput().disablePointerLock();
	      }
	    }
	  }, {
	    key: 'getEulerAngles',
	    value: function getEulerAngles(outEuler) {
	      var returnVector = outEuler;
	      if (!outEuler) {
	        returnVector = new _three2.default.Euler();
	      }
	      returnVector.setFromQuaternion(this.getRuntimeData().quaternion, 'YXZ');

	      return returnVector;
	    }
	  }, {
	    key: 'setEulerAngles',
	    value: function setEulerAngles(euler) {
	      this.getRuntimeData().quaternion.setFromEuler(euler);
	    }
	  }, {
	    key: 'togglePointerLock',
	    value: function togglePointerLock(on) {
	      this.usePointerLock = on;

	      if (this.usePointerLock) {
	        this.getThreeRenderer().domElement.addEventListener('mousedown', this.onMouseDown_PointerLock);
	      } else {
	        this.getThreeRenderer().domElement.removeEventListener('mousedown', this.onMouseDown_PointerLock);
	      }
	    }
	  }, {
	    key: 'onMouseDown',
	    value: function onMouseDown(event) {
	      if (this.isEnabled()) {
	        var rightButton = this.getInput().mouseButtonDown('right');
	        var leftButton = this.getInput().mouseButtonDown('left');
	        this.pan = false;
	        this.look = false;
	        if (rightButton && this.enablePan) {
	          this.pan = true;
	        } else if (leftButton) {
	          this.look = true;
	        }

	        this.moveStart.x = event.scenePercentX;
	        this.moveStart.y = event.scenePercentY;
	        this.currentDraggingMousePosition.copy(this.moveStart);
	        this.quaternionStart.copy(this.getRuntimeData().quaternion);
	        this.eulerStart.setFromQuaternion(this.quaternionStart, 'YXZ');
	      }
	    }
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      if (this.isEnabled()) {
	        var rightButton = this.getInput().mouseButtonDown('right');
	        var leftButton = this.getInput().mouseButtonDown('left');
	        this.pan = false;
	        this.look = false;

	        if (rightButton && this.enablePan) {
	          this.pan = true;
	        } else if (leftButton) {
	          this.look = true;
	        } else {
	          this.isMouseDragging = false;
	        }
	      }
	    }
	  }, {
	    key: 'onMouseDown_PointerLock',
	    value: function onMouseDown_PointerLock(event) {
	      if (this.isEnabled() && event.button === 0 || event.button === 2) {
	        this.getInput().enablePointerLock();

	        this.getThreeRenderer().domElement.addEventListener('mouseup', this.onMouseUp_PointerLock);
	      }
	    }
	  }, {
	    key: 'onMouseUp_PointerLock',
	    value: function onMouseUp_PointerLock(event) {
	      if (this.box3DEntity) {
	        if (event.button === 2 && this.getInput().mouseButtonUp('left') || event.button === 0 && this.getInput().mouseButtonUp('right')) {
	          this.getThreeRenderer().domElement.removeEventListener('mouseup', this.onMouseUp_PointerLock);
	          this.getInput().disablePointerLock();
	        }
	      }
	    }
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      if (this.isEnabled()) {
	        var rightButton = this.getInput().mouseButtonDown('right');
	        var leftButton = this.getInput().mouseButtonDown('left');

	        if (rightButton && this.enablePan) {
	          this.hasChanged = true;
	          this.isMouseDragging = true;
	          this.linearMovementDelta.x = event.scenePercentDeltaX;
	          this.linearMovementDelta.y = event.scenePercentDeltaY;
	        } else if (leftButton) {
	          this.hasChanged = true;
	          this.isMouseDragging = true;
	          this.currentDraggingMousePosition.x = event.scenePercentX;
	          this.currentDraggingMousePosition.y = event.scenePercentY;
	        }
	        // this.eulerEllapsed.add(event.scenePercentDeltaX, event.scenePercentDeltaY);
	      }
	    }
	  }, {
	    key: 'onMouseScroll',
	    value: function onMouseScroll(delta) {
	      if (this.isEnabled() && _lodash2.default.isNumber(delta) && this.enableZoom) {
	        this.zoomDelta = -delta * 0.1;
	      }
	    }
	  }, {
	    key: 'onTouchStart',
	    value: function onTouchStart(event) {

	      if (this.isEnabled()) {

	        var touches = event.touches;
	        if (!touches) {
	          return;
	        }

	        switch (touches.length) {

	          case 1:
	            // one-fingered touch: rotate
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);

	            this.look = true;
	            this.pan = false;
	            this.zoom = false;

	            break;

	          case 2:
	            // two-fingered touch: dolly

	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            if (this.enableZoom) {
	              this.zoom = true;
	              var dx = touches[0].scenePercentX - touches[1].scenePercentX;
	              var dy = touches[0].scenePercentY - touches[1].scenePercentY;
	              var distance = Math.sqrt(dx * dx + dy * dy);

	              this.touchLastPinchDist = distance;
	            }
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            break;

	          case 3:
	            // three-fingered touch: pan
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            this.look = false;
	            this.pan = false;
	            if (this.enablePan) {
	              this.pan = true;
	            }
	            this.zoom = false;
	            break;

	          default:
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            this.touchLastPinchDist = -1;
	        }

	        this.moveStart.x = touches[0].scenePercentX;
	        this.moveStart.y = touches[0].scenePercentY;
	        this.currentDraggingMousePosition.copy(this.moveStart);
	        this.quaternionStart.copy(this.getRuntimeData().quaternion);
	        this.eulerStart.setFromQuaternion(this.quaternionStart, 'YXZ');
	      }

	      this.isTouchDragging = false;
	    }
	  }, {
	    key: 'onTouchMove',
	    value: function onTouchMove(event) {

	      if (this.isEnabled()) {
	        var touches = event.touches;
	        if (!touches) {
	          return;
	        }

	        var dx, dy;
	        switch (touches.length) {

	          case 1:
	            // one-fingered touch: rotate
	            this.look = true;
	            this.pan = false;
	            this.zoom = false;

	            this.touchLast.x = touches[0].scenePercentX;
	            this.touchLast.y = touches[0].scenePercentY;
	            this.isMouseDragging = true;
	            this.hasChanged = true;

	            if (!this.isTouchDragging) {
	              if (this.moveStart.distanceTo(this.touchLast) > 0.01) {
	                this.isTouchDragging = true;
	              }
	            } else {
	              this.currentDraggingMousePosition.x = touches[0].scenePercentX;
	              this.currentDraggingMousePosition.y = touches[0].scenePercentY;
	            }

	            break;

	          case 2:
	            // two-fingered touch: dolly

	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            if (this.enableZoom) {
	              this.zoom = true;
	              dx = touches[0].scenePercentX - touches[1].scenePercentX;
	              dy = touches[0].scenePercentY - touches[1].scenePercentY;
	              var distance = Math.sqrt(dx * dx + dy * dy);

	              var pinchChange = this.touchLastPinchDist - distance;
	              var scrollChange = this.touchLast.y - touches[0].scenePercentY;
	              if (Math.abs(pinchChange) > Math.abs(scrollChange)) {
	                this.zoomDelta = 20.0 * pinchChange;
	              } else {
	                this.zoomDelta = 20.0 * scrollChange;
	              }
	              this.hasChanged = true;
	              this.touchLastPinchDist = distance;
	            }
	            this.touchLast.x = touches[0].scenePercentX;
	            this.touchLast.y = touches[0].scenePercentY;

	            break;

	          case 3:
	            // three-fingered touch: pan
	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            if (this.enablePan) {
	              this.isMouseDragging = true;
	              this.pan = true;
	              dx = touches[0].scenePercentX - this.touchLast.x;
	              dy = touches[0].scenePercentY - this.touchLast.y;

	              this.linearMovementDelta.x = dx;
	              this.linearMovementDelta.y = dy;
	            }
	            this.hasChanged = true;

	            this.touchLast.x = touches[0].scenePercentX;
	            this.touchLast.y = touches[0].scenePercentY;

	            break;
	        }
	      }
	    }
	  }, {
	    key: 'onTouchEnd',
	    value: function onTouchEnd(event) {

	      if (this.isEnabled()) {
	        this.touchLast.set(-1.0, -1.0);
	        this.touchLastPinchDist = -1;
	        var touches = event.touches;

	        switch (touches.length) {

	          case 0:
	            this.isMouseDragging = false;
	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            break;
	          case 1:
	            // one-fingered touch: rotate
	            this.look = true;
	            this.pan = false;
	            this.zoom = false;

	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            this.moveStart.x = touches[0].scenePercentX;
	            this.moveStart.y = touches[0].scenePercentY;
	            this.currentDraggingMousePosition.copy(this.moveStart);
	            this.quaternionStart.copy(this.getRuntimeData().quaternion);
	            this.eulerStart.setFromQuaternion(this.quaternionStart, 'YXZ');
	            break;

	          case 2:
	            // two-fingered touch: dolly

	            this.look = false;
	            this.pan = false;
	            this.zoom = false;
	            if (this.enableZoom) {
	              this.zoom = true;
	              var dx = touches[0].scenePercentX - touches[1].scenePercentX;
	              var dy = touches[0].scenePercentY - touches[1].scenePercentY;
	              var distance = Math.sqrt(dx * dx + dy * dy);

	              this.touchLastPinchDist = distance;
	            }
	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            break;

	          case 3:
	            // three-fingered touch: pan
	            this.look = false;
	            this.pan = false;
	            if (this.enablePan) {
	              this.pan = true;
	            }
	            this.zoom = false;

	            this.touchLast.set(touches[0].scenePercentX, touches[0].scenePercentY);
	            break;

	          default:

	        }

	        this.isTouchDragging = false;
	      }
	    }
	  }]);

	  return PreviewCamera;
	}(_Box3DComponent3.default);

	exports.default = PreviewCamera;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	* @vid preview_camera_focus
	* @vname Preview Camera Focus
	* @vdescription A controller that allows a camera to easily orbit a target object.
	* @vfilter camera
	* @vcategory Camera Controllers
	* @vattr float speed {
	*    description : 'The speed that we move to focus on the target',
	*    default : 0.8,
	*    max : 100,
	*    min : 0.1
	*  }
	*/
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PreviewCameraFocus = function (_Box3DComponent) {
	  _inherits(PreviewCameraFocus, _Box3DComponent);

	  function PreviewCameraFocus() {
	    _classCallCheck(this, PreviewCameraFocus);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PreviewCameraFocus).call(this));

	    _this.previewCamControl = null;
	    _this.mouseVector = null;
	    _this.raycaster = null;
	    _this.time = -1;
	    _this.targetLook = null;
	    _this.targetPos = null;
	    _this.currentLook = null;
	    _this.currentPos = null;
	    _this.srcPos = null;
	    _this.moveCamera = false;
	    _this.cameraDistance = 0;
	    _this.mouseDown = false;
	    return _this;
	  }

	  _createClass(PreviewCameraFocus, [{
	    key: 'assetLoaded',
	    value: function assetLoaded() {

	      this.previewCamControl = this.getComponentRegistry().getFirstByScriptName('Preview Camera Controller');

	      //explicit set of target
	      this.previewCamControl.setTarget(this.getScene());
	      this.cameraDistance = this.getRuntimeData().position.distanceTo(this.previewCamControl.pivotPoint.position);

	      this.listenTo(this.getRuntime(), 'doubleClick', this.onDoubleClick, this);

	      if (window.Box3D.isMobile()) {
	        this.listenTo(this.getRuntime(), 'touchStart', this.onMouseDown, this);
	        this.listenTo(this.getRuntime(), 'touchMove', this.onMouseMove, this);
	        this.listenTo(this.getRuntime(), 'touchEnd', this.onMouseUp, this);
	      } else {
	        this.listenTo(this.getRuntime(), 'mouseScroll', this.interrupt, this);
	        this.listenTo(this.getRuntime(), 'mouseMove', this.onMouseMove, this);
	        this.listenTo(this.getRuntime(), 'mouseDown', this.onMouseDown, this);
	        this.listenTo(this.getRuntime(), 'mouseUp', this.onMouseUp, this);
	        this.listenTo(this.getRuntime(), 'keyDown', this.interrupt, this);
	      }

	      this.listenTo(this.getEntity(), 'resetOrbitCameraController', this.onReset, this);

	      this.listenTo(this.previewCamControl, 'enable', this.onEnable, this);
	      this.listenTo(this.previewCamControl, 'disable', this.onDisable, this);
	      this.listenTo(this, 'enable', this.onEnable, this);
	      this.listenTo(this, 'disable', this.onDisable, this);
	    }
	  }, {
	    key: 'onEnable',
	    value: function onEnable() {}
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      this.interrupt();
	    }
	  }, {
	    key: 'onReset',
	    value: function onReset() {
	      this.previewCamControl.enable();
	      this.time = -1;
	    }
	  }, {
	    key: 'onMouseDown',
	    value: function onMouseDown() {
	      if (this.isEnabled()) {
	        this.mouseDown = true;
	      }
	    }
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      this.mouseDown = false;
	    }
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove() {
	      if (this.mouseDown) {
	        this.interrupt();
	      }
	    }
	  }, {
	    key: 'onDoubleClick',
	    value: function onDoubleClick(event) {

	      if (this.isEnabled() && this.hasThreeData()) {
	        if (!this.raycaster) {
	          this.raycaster = new _three2.default.Raycaster();
	          this.mouseVector = new _three2.default.Vector2();
	          this.targetLook = new _three2.default.Vector3();
	          this.srcLook = new _three2.default.Vector3();
	          this.targetPos = new _three2.default.Vector3();
	          this.currentLook = new _three2.default.Vector3();
	          this.currentPos = new _three2.default.Vector3();
	          this.srcPos = new _three2.default.Vector3();
	        }

	        this.mouseVector.set(event.scenePercentX * 2 - 1, -event.scenePercentY * 2 + 1);

	        this.raycaster.near = 0;
	        //a bit longer to accommodate being fully zoomed out
	        this.raycaster.far = this.orbitDistanceMax + 1;

	        this.raycaster.setFromCamera(this.mouseVector, this.getRuntimeData());

	        var visFilter = function visFilter(intersect) {
	          return intersect.object.visible;
	        };

	        var intersections = this.raycaster.intersectObjects(this.getThreeScene().children, true).filter(visFilter);

	        var intersection = intersections.length > 0 ? intersections[0] : null;

	        //interrupt the current transition, continue to next target
	        //from the current look position and position
	        if (this.time > 0) {
	          this.interrupt();
	          this.srcLook.copy(this.currentLook);
	        } else {
	          this.srcLook.copy(this.previewCamControl._pivotWorldPos);
	        }

	        if (intersection) {

	          this.previewCamControl.disable();

	          this.targetLook.copy(intersection.point);

	          this.srcPos.copy(this.getRuntimeData().position);

	          this.targetPos.copy(this.getTargetPosition(this.srcPos, this.targetLook, this.previewCamControl.orbitDistanceMin));
	        } else {
	          //reset the camera to look at origin
	          this.targetLook.set(0, 0, 0);
	          this.srcPos.copy(this.getRuntimeData().position);
	          this.targetPos.copy(this.getTargetPosition(this.srcPos, this.targetLook, this.cameraDistance));
	        }

	        //trigger the move to happen
	        this.time = this.speed;
	      }
	    }
	  }, {
	    key: 'interrupt',
	    value: function interrupt() {
	      if (this.isEnabled() && this.time > 0) {
	        this.inputInterrupt = false;
	        this.onEnd();
	      }
	    }

	    //given the look endpoint, move the camera to the correct distance from it

	  }, {
	    key: 'getTargetPosition',
	    value: function getTargetPosition(currentPos, targetLook, distance) {

	      var diff = new _three2.default.Vector3();
	      diff.subVectors(currentPos, targetLook);
	      diff.normalize().multiplyScalar(distance);
	      return diff.add(targetLook);
	    }
	  }, {
	    key: 'update',
	    value: function update(dt) {

	      if (this.isEnabled() && this.time > 0) {

	        var runtimeData = this.getRuntimeData();

	        var lerpVal = this.easeInOut(1 - 1 / (this.speed / this.time));

	        if (runtimeData instanceof _three2.default.PerspectiveCamera) {
	          this.lerp(this.srcPos, this.targetPos, lerpVal, this.currentPos);
	          runtimeData.position.copy(this.currentPos);
	        }

	        this.lerp(this.srcLook, this.targetLook, lerpVal, this.currentLook);
	        runtimeData.lookAt(this.currentLook);

	        this.time -= dt;

	        if (this.time < 0) {
	          this.onEnd();
	        }

	        this.getRuntime().needsRender = true;
	      }
	    }
	  }, {
	    key: 'onEnd',
	    value: function onEnd() {

	      this.time = -1;
	      this.previewCamControl.enable();
	      this.previewCamControl.setTargetOffset(this.currentLook);
	      this.previewCamControl.resetOrbitRotation();
	      this.previewCamControl.setOrbitDistance(this.getRuntimeData().position.distanceTo(this.currentLook));
	    }
	  }, {
	    key: 'easeInOut',
	    value: function easeInOut(t) {
	      return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
	    }
	  }, {
	    key: 'lerp',
	    value: function lerp(src, dst, val, out) {

	      var x = src.x + (dst.x - src.x) * val,
	          y = src.y + (dst.y - src.y) * val,
	          z = src.z + (dst.z - src.z) * val;

	      out.set(x, y, z);
	    }
	  }]);

	  return PreviewCameraFocus;
	}(_Box3DComponent3.default);

	exports.default = PreviewCameraFocus;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	@vid preview_vr_controls
	@vname Preview VR Controls
	@vdescription A controller for the preview camera when using a VR device.
	@vfilter camera
	@vcategory Camera Controllers
	@vattr string cameraControllerName {
	  'default' : 'Preview Camera Controller',
	  'description' : 'The name of the camera controller component that this component will override.',
	}
	*/
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PreviewVRControls = function (_Box3DComponent) {
	  _inherits(PreviewVRControls, _Box3DComponent);

	  function PreviewVRControls() {
	    _classCallCheck(this, PreviewVRControls);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PreviewVRControls).call(this));

	    _this.previewCamControl = null;
	    _this.vrOrientation = {
	      x: 0.0,
	      y: 0.0,
	      z: 0.0,
	      w: 1.0
	    };
	    _this.cameraControllerName = 'Preview Camera Controller';
	    return _this;
	  }

	  _createClass(PreviewVRControls, [{
	    key: 'init',
	    value: function init() {
	      this.listenTo(this, 'enable', this.onEnable);
	      this.listenTo(this, 'disable', this.onDisable);
	    }
	  }, {
	    key: 'assetLoaded',
	    value: function assetLoaded() {
	      this.previewCamControl = this.getComponentRegistry().getFirstByScriptName(this.cameraControllerName);
	    }
	  }, {
	    key: 'onEnable',
	    value: function onEnable() {
	      // Bind to orientation updates so that we can update the VR camera
	      this.getGlobalEvents().on('vr_orientation', this.onVrOrientation, this);
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      this.getGlobalEvents().off('vr_orientation', this.onVrOrientation, this);
	    }
	  }, {
	    key: 'onVrOrientation',
	    value: function onVrOrientation(orientation) {
	      this.vrOrientation = orientation;
	    }
	  }, {
	    key: 'update',
	    value: function update() {

	      if (this.isEnabled() && this.previewCamControl) {

	        var threeCamera = this.previewCamControl.getEntity().runtimeData;

	        // Apply the saved orientation from the VR device to update the orbit of the camera.
	        threeCamera.quaternion.set(this.vrOrientation.x, this.vrOrientation.y, this.vrOrientation.z, this.vrOrientation.w);

	        threeCamera.position.set(0.0, 0.0, this.previewCamControl.currentOrbitDistance);
	        threeCamera.position.applyQuaternion(threeCamera.quaternion);

	        this.getRuntime().needsRender = true;
	      }
	    }
	  }]);

	  return PreviewVRControls;
	}(_Box3DComponent3.default);

	exports.default = PreviewVRControls;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid reflection_capture_planar
	 * @vname Reflection Capture Plane
	 * @vfilter Object
	 * @vcategory Rendering
	 * @vreserved
	 * @vattr Asset reflectionTexture {
	 *   description: 'The RenderTexture2D to render the reflection to.',
	 *   filter: { renderTexture2D: true }
	 * }
	 * @vattr Float clipBias {
	 *   description: 'Pushes the rendered scene forward or backwards to adjust clipping with reflection plane.',
	 *   default: 0.01
	 * }
	 * @vattr Integer updateFrameInterval {
	 *   description: 'The number of frames to skip in between updates of the reflection. Default is 0.',
	 *   default: 0
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ReflectionCapture = function (_Box3DComponent) {
	  _inherits(ReflectionCapture, _Box3DComponent);

	  function ReflectionCapture() {
	    _classCallCheck(this, ReflectionCapture);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReflectionCapture).call(this));

	    _this.framesElapsed = 0;
	    _this.perspectiveCamera = null;
	    _this.orthoCamera = null;
	    _this.reflectionNormal = new _three2.default.Vector3(0, 1, 0);
	    _this.reflectionPlane = new _three2.default.Plane();
	    _this.clipPlane = new _three2.default.Vector4();

	    _this.reflectionPosition = new _three2.default.Vector3();
	    _this.cameraWorldPosition = new _three2.default.Vector3();
	    _this.rotationMatrix = new _three2.default.Matrix4();
	    _this.lookAtPosition = new _three2.default.Vector3(0, 0, -1);
	    _this.up = new _three2.default.Vector3(0, 1, 0);
	    return _this;
	  }

	  _createClass(ReflectionCapture, [{
	    key: 'init',
	    value: function init() {}
	  }, {
	    key: 'editorInit',
	    value: function editorInit() {

	      this.box3DEntity.getParentAsset().when('load', this.sceneLoadedEditor, this);
	      this.box3DEntity.when('loadBase', this.objectCreatedEditor, this);

	      this.getRuntime().on('preRenderView', this.preRenderView, this);
	      this.inEditor = true;
	      this.init();
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      // this.getRuntime().off( 'resize', this.resizeCamera, this );
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {

	      this.getRuntime().off('preRenderView', this.preRenderView, this);
	      var renderer = this.getThreeRenderer();
	      if (renderer) {
	        if (this.reflectionTexture && this.reflectionTexture.runtimeData) {
	          this.getThreeRenderer().setRenderTarget(this.reflectionTexture.runtimeData);
	          this.getThreeRenderer().clear();
	        } else if (this.tempRenderTexture && this.tempRenderTexture.runtimeData) {
	          this.getThreeRenderer().setRenderTarget(this.tempRenderTexture.runtimeData);
	          this.getThreeRenderer().clear();
	        }
	      }
	      if (this.tempRenderTexture) {
	        this.tempRenderTexture.destroy();
	      }
	      if (this.reflectionMaterial) {
	        this.reflectionMaterial.destroy();
	      }
	      this.shutdown();
	    }

	    /**
	     * Called once the data is available is available
	     */

	  }, {
	    key: 'sceneLoadedEditor',
	    value: function sceneLoadedEditor() {
	      var that = this;

	      window.verold.veroldEvents.trigger('studioApp::getCurrentCamera', function (camera) {
	        _log2.default.log('Reflection Actor - Assigning editor camera to be used. ', camera);
	        that.editorCamera = camera;
	        that.initCameras();
	      });
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      this.initCameras();
	      this.initTexture();
	    }
	  }, {
	    key: 'objectCreatedEditor',
	    value: function objectCreatedEditor() {
	      this.initEditorObject();
	    }
	  }, {
	    key: 'initEditorObject',
	    value: function initEditorObject() {
	      var mat;
	      this.planeGeometry = new _three2.default.PlaneBufferGeometry(50, 50, 1, 1);
	      this.planeGeometry.applyMatrix(new _three2.default.Matrix4().makeRotationX(-Math.PI / 2));
	      this.planeGeometry.computeVertexNormals();
	      this.planeGeometry.dynamic = true;
	      this.planeMesh = new _three2.default.Mesh(this.planeGeometry);
	      this.planeMesh.castShadow = false;
	      this.planeMesh.receiveShadow = false;
	      this.planeMesh.name = 'ReflectionCapturePlane';

	      this.getThreeObject().add(this.planeMesh);
	      this.getRuntime().globalEvents.trigger('studioApp::registerPickingObject', this.getEntity(), this.planeMesh);

	      if (!this.reflectionTexture) {
	        this.createTempRenderTexture();
	      }

	      mat = this.getAssetRegistry().createAsset({
	        type: 'material',
	        id: 'reflection_material',
	        properties: {
	          materialType: 'Simple',
	          diffuseColor: 0x000000,
	          gloss: 1.0,
	          environmentTexture2D: this.reflectionTexture ? this.reflectionTexture.id : this.tempRenderTexture.id,
	          reflectionBias: 1
	        }
	      });
	      mat.load();
	      mat.enableFeature('Reflections', true);
	      mat.setProperty('environmentMappingType', 2);

	      this.reflectionMaterial = mat;
	      this.planeMesh.material = mat.runtimeData.static;
	      this.initTexture();
	    }
	  }, {
	    key: 'createTempRenderTexture',
	    value: function createTempRenderTexture() {
	      this.tempRenderTexture = this.getAssetRegistry().createAsset({
	        type: 'renderTexture2D',
	        id: 'render_tex_reflection',
	        properties: {
	          width: 512,
	          height: 512,
	          format: _three2.default.RGBAFormat,
	          type: _three2.default.UnsignedByteType
	        }
	      });
	      this.tempRenderTexture.load();
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      if (changes.indexOf('reflectionTexture') !== -1) {
	        this.initTexture();
	      }
	    }
	  }, {
	    key: 'initTexture',
	    value: function initTexture() {
	      if (this.reflectionTexture) {
	        var that = this;

	        this.reflectionTexture.when('load', function () {
	          if (that.tempRenderTexture) {
	            that.tempRenderTexture.unload();
	          }
	          var pars = {
	            format: that.reflectionTexture.runtimeData.format,
	            minFilter: that.reflectionTexture.runtimeData.minFilter,
	            magFilter: that.reflectionTexture.runtimeData.magFilter
	          };
	          pars.type = that.reflectionTexture.runtimeData.type;

	          var renderTarget = new _three2.default.WebGLRenderTarget(that.reflectionTexture.getWidth(), that.reflectionTexture.getHeight(), pars);
	          renderTarget.name = that.getEntity().getName() + ': Reflection Capture Render Buffer';
	          if (!that.composer) {
	            that.composer = new _three2.default.EffectComposer(that.getThreeRenderer(), renderTarget);
	            that.gammaPass = new _three2.default.ShaderPass(_three2.default.GammaShader);
	            that.gammaPass.renderToScreen = true;
	            that.composer.customPasses = [];
	            that.composer.customPasses.push(that.gammaPass);
	          } else {
	            that.composer.reset(renderTarget);
	          }
	          that.composer.enabled = true;
	          that.composer.renderPassesNeedUpdate = true;
	          if (that.planeMesh) {
	            that.planeMesh.material.uniforms.environmentTexture2D.value = that.reflectionTexture.runtimeData;
	          }
	        });
	      } else {
	        this.createTempRenderTexture();
	        if (this.planeMesh) {
	          this.planeMesh.material.uniforms.environmentTexture2D.value = this.tempRenderTexture.runtimeData;
	        }
	      }
	    }

	    /**
	     * Called immediately after after component creation
	     */

	  }, {
	    key: 'initCameras',
	    value: function initCameras() {
	      if (this.reflectionTexture) {
	        this.reflectionTexture.load();
	      }

	      this.perspectiveCamera = new _three2.default.PerspectiveCamera();
	      this.orthoCamera = new _three2.default.OrthographicCamera();
	    }
	  }, {
	    key: 'updateReflection',
	    value: function updateReflection(scene, camera) {
	      if (this.isEnabled()) {
	        var sign = function sign(num) {
	          return num < 0 ? -1 : 1;
	        };
	        this.box3DEntity.runtimeData.updateMatrixWorld();
	        // this.sceneCamera.runtimeData.updateMatrixWorld();

	        this.reflectionPosition.setFromMatrixPosition(this.box3DEntity.runtimeData.matrixWorld);
	        this.cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);

	        this.rotationMatrix.extractRotation(this.box3DEntity.runtimeData.matrixWorld);

	        this.reflectionNormal.set(0, 1, 0);
	        this.reflectionNormal.applyMatrix4(this.rotationMatrix);

	        var view = this.reflectionPosition.clone().sub(this.cameraWorldPosition);
	        var reflectView = view.reflect(this.reflectionNormal).negate();
	        reflectView.add(this.reflectionPosition);

	        this.rotationMatrix.extractRotation(camera.matrixWorld);

	        this.lookAtPosition.set(0, 0, -1);
	        this.lookAtPosition.applyMatrix4(this.rotationMatrix);
	        this.lookAtPosition.add(this.cameraWorldPosition);

	        var target = this.reflectionPosition.clone().sub(this.lookAtPosition);
	        var reflectTarget = target.reflect(this.reflectionNormal).negate();
	        reflectTarget.add(this.reflectionPosition);

	        this.up.set(0, -1, 0);
	        this.up.applyMatrix4(this.rotationMatrix);
	        var reflectUp = this.up.reflect(this.reflectionNormal).negate();

	        if (camera instanceof _three2.default.PerspectiveCamera && this.perspectiveCamera) {
	          this.perspectiveCamera.aspect = camera.aspect;
	          this.perspectiveCamera.fov = camera.fov;
	          this.perspectiveCamera.near = camera.near;
	          this.perspectiveCamera.far = camera.far;
	          this.reflectionCamera = this.perspectiveCamera;
	        } else if (this.orthoCamera) {
	          this.orthoCamera.left = camera.left;
	          this.orthoCamera.right = camera.right;
	          this.orthoCamera.top = camera.top;
	          this.orthoCamera.bottom = camera.bottom;
	          this.orthoCamera.near = camera.near;
	          this.orthoCamera.far = camera.far;
	          this.reflectionCamera = this.orthoCamera;
	        } else {
	          return;
	        }
	        this.reflectionCamera.position.copy(reflectView);
	        this.reflectionCamera.up = reflectUp;
	        this.reflectionCamera.lookAt(reflectTarget);

	        this.reflectionCamera.updateProjectionMatrix();
	        this.reflectionCamera.updateMatrixWorld();
	        this.reflectionCamera.matrixWorldInverse.getInverse(this.reflectionCamera.matrixWorld);

	        // Now update projection matrix with new clip plane, implementing code
	        // from: http://www.terathon.com/code/oblique.html
	        // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf
	        this.reflectionPlane.setFromNormalAndCoplanarPoint(this.reflectionNormal, this.reflectionPosition);
	        this.reflectionPlane.applyMatrix4(this.reflectionCamera.matrixWorldInverse);

	        this.clipPlane.set(this.reflectionPlane.normal.x, this.reflectionPlane.normal.y, this.reflectionPlane.normal.z, this.reflectionPlane.constant);

	        var q = new _three2.default.Vector4();
	        var projectionMatrix = this.reflectionCamera.projectionMatrix;

	        q.x = (sign(this.clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
	        q.y = (sign(this.clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
	        q.z = -1.0;
	        q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];

	        // Calculate the scaled plane vector
	        var c = new _three2.default.Vector4();
	        c = this.clipPlane.multiplyScalar(2.0 / this.clipPlane.dot(q));

	        // Replacing the third row of the projection matrix
	        projectionMatrix.elements[2] = c.x;
	        projectionMatrix.elements[6] = c.y;
	        projectionMatrix.elements[10] = c.z + 1.0 - this.clipBias;
	        projectionMatrix.elements[14] = c.w;
	      }
	    }
	  }, {
	    key: 'preRenderView',
	    value: function preRenderView(scene, camera) {
	      if (this.isEnabled()) {
	        if (this.framesElapsed >= this.updateFrameInterval) {
	          this.updateReflection(scene, camera);
	          //render reflection
	          // Render the mirrored view of the current scene into the target texture
	          if (scene && camera) {
	            if (this.reflectionTexture && this.reflectionTexture.runtimeData) {
	              this.getRenderer().renderView(scene, this.reflectionCamera, {
	                viewPort: {
	                  x: 0,
	                  y: 0,
	                  width: this.reflectionTexture.getWidth(),
	                  height: this.reflectionTexture.getHeight()
	                },
	                renderTarget: this.reflectionTexture.runtimeData,
	                clearColor: true,
	                clearDepth: true,
	                composer: this.getThreeRenderer().gammaOutput ? this.composer : null,
	                enableShadows: false,
	                enablePreRenderFunctions: false
	              });
	            } else if (this.tempRenderTexture) {
	              this.getRenderer().renderView(scene, this.reflectionCamera, {
	                viewPort: {
	                  x: 0,
	                  y: 0,
	                  width: this.tempRenderTexture.getWidth(),
	                  height: this.tempRenderTexture.getHeight()
	                },
	                renderTarget: this.tempRenderTexture.runtimeData,
	                clearColor: true,
	                clearDepth: true,
	                composer: this.getThreeRenderer().gammaOutput ? null : this.composer,
	                enableShadows: false,
	                enablePreRenderFunctions: false
	              });
	            }
	          }
	          this.framesElapsed = 0;
	        } else {
	          this.framesElapsed++;
	        }
	      }
	    }
	  }]);

	  return ReflectionCapture;
	}(_Box3DComponent3.default);

	exports.default = ReflectionCapture;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	@vid camera_filters_script
	@vname Render Filters
	@vdescription Overrides the filter settings that cameras will use when rendering.
	@vfilter object
	@vcategory Rendering
	@vreserved
	@vtype bloom {
	  attributes: {
	    override: { type: 'b', default: false, description: 'Override the default behaviour of this filter.' },
	    enabled: { type: 'b', default: false },
	    strength: { type: 'f', default: 1.0, min: 0.1, max: 4.0, step: 0.001 },
	    sigma: { type: 'f', default: 4, min: 1, max: 8, step: 0.001, advanced: true },
	    resolution: { type: 'i', default: 256, min: 64, max: 1024, step: 1, advanced: true }
	  }
	}
	@vtype tonemapping {
	  attributes: {
	    override: { type: 'b', default: false, description: 'Override the default behaviour of this filter.' },
	    adaptive: { type: 'b', 'description': 'Automatically adjusts the tone-mapping every frame based on the average luminance of the scene.',default: true },
	    adaptSpeed: { type: 'f', 'description': 'The speed at which adaptive tone-mapping works. Higher number is faster.', default: 0.5, min: 0.1, max: 20.0 },
	    exposureBias:     { type: 'f', 'description': 'Adjusts the overall brightness of the image. Use this to tweak the final result of tone-mapping.', default: 1.0, min: 0.0001, max: 5.0 },
	    maxLuminance:  { type: 'f', 'description': 'Sets the maximum brightness reached before pixels become white after tone-mapping.', default: 16, min: 0.01, max: 25.0 },
	    luminance:  { type: 'f', 'description': 'When the "Adaptive" feature is turned off, this will set the scene luminance to be used by tone-mapping.', default: 1.0, min: 0.0001, max: 16.0 }
	  }
	}
	@vtype fxaa {
	  attributes: {
	    override: { type: 'b', default: false, description: 'Override the default behaviour of this filter.' },
	    enabled: { type: 'b', default: false }
	  }
	}
	@vtype vignette {
	  attributes: {
	    override: { type: 'b', default: false, description: 'Override the default behaviour of this filter.' },
	    enabled: { type: 'b', default: false },
	    offset: { type: 'f', default: 1.0, min: 0.0, max: 1.0, step: 0.001 },
	    darkness: { type: 'f', default: 1.0, min: 0.0, max: 5.0, step: 0.001 }
	  }
	}
	@vtype ssao {
	  attributes: {
	    override: { type: 'b', default: false, description: 'Override the default behaviour of this filter.' },
	    enabled: { type: 'b', default: false },
	    fogEnabled: { type: 'i', default: 1, advanced: true },
	    depthScale: { type: 'f', default: 2000.0, min: 100.0, max: 50000.0, step: 0.001, advanced: true },
	    onlyAO:       { type: 'i', default: 0 },
	    aoClamp:      { type: 'f', default: 0.75, advanced: true },
	    lumInfluence: { type: 'f', default: 0.75, advanced: true },
	    noiseAmount: { type: 'f', default: 0.0002 },
	    radius: { type: 'f', default: 16.0 },
	    diffArea: { type: 'f', default: 0.4, advanced: true },
	    gDisplace: { type: 'f', default: 0.4, advanced: true }
	  }
	}
	@vtype dof {
	  'attributes': {
	    'override': { type: 'b', default: false, description: 'Override the default behaviour of this filter.' },
	    'enabled': { type: 'b', default: false },
	    'aspect': { type: 'f', default: 1.0, min: 0.0, max: 1.0, step: 0.001, advanced: true },
	    'aperture': { type: 'f', default: 0.4, min: 0.0, max: 1.0, step: 0.001 },
	    'focus': { type: 'f', default: 0.980, min: 0.0, max: 1.0, step: 0.001 },
	  }
	}
	@vtype sepia {
	  'attributes': {
	    'override': { type: 'b', default: false, description: 'Override the default behaviour of this filter.' },
	    'enabled': { type: 'b', default: false },
	    'amount': { type: 'f', default: 0.9, min: 0.0, max: 1.0, step: 0.001 }
	  }
	}
	@vtype video {
	  'attributes': {
	    'override': { type: 'b', default: false, description: 'Override the default behaviour of this filter.' },
	    'enabled': { type: 'b', default: false },
	    'nIntensity': { type: 'f', default: 0.15 },
	    'sIntensity': { type: 'f', default: 0.05 },
	    'sCount':     { type: 'f', default: 512 },
	    'grayscale':  { type: 'b', default: false }
	  },
	}
	@vattr bloom bloom { description: '' }
	@vattr tonemapping toneMapping { description: '' }
	@vattr fxaa fxaa { description: '' }
	@vattr vignette vignette { description: '' }
	@vattr ssao ssao { description: '' }
	@vattr dof dof { description: '' }
	@vattr sepia sepia { description: '' }
	@vattr video video { description: '' }
	*/
	/* eslint-enable */
	/* global Box3D */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RenderFilters = function (_Box3DComponent) {
	  _inherits(RenderFilters, _Box3DComponent);

	  function RenderFilters() {
	    _classCallCheck(this, RenderFilters);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RenderFilters).call(this));

	    _this.shaderDefs = {
	      video: {
	        shader: _three2.default.FilmShader,
	        textureID: 'tDiffuse'
	      },
	      sepia: {
	        shader: _three2.default.SepiaShader,
	        textureID: 'tDiffuse'
	      },
	      vignette: {
	        shader: _three2.default.VignetteShader,
	        textureID: 'tDiffuse'
	      },
	      bokeh: {
	        shader: _three2.default.BokehShader,
	        textureID: 'tColor'
	      },
	      bokeh2: {
	        shader: _three2.default.BokehShader2,
	        textureID: 'tColor'
	      },
	      edge: {
	        shader: _three2.default.EdgeShader,
	        textureID: 'tDiffuse'
	      },
	      edge2: {
	        shader: _three2.default.EdgeShader2,
	        textureID: 'tDiffuse'
	      },
	      fxaa: {
	        shader: _three2.default.FXAAShader,
	        textureID: 'tDiffuse'
	      },
	      copy: {
	        shader: _three2.default.CopyShader,
	        textureID: 'tDiffuse'
	      },
	      ssao: {
	        shader: _three2.default.SSAOShader,
	        textureID: 'tDiffuse'
	      }
	    };
	    _this.composer = undefined;
	    _this.defaultFilters = undefined;
	    _this.needsDepthPass = false;
	    _this.objMaterialCache = {};
	    return _this;
	  }

	  _createClass(RenderFilters, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.init();
	      this.getRuntime().on('preRenderView', this.preRenderView, this);
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      var that = this;
	      this.on('enable', this.onEnable, this);
	      this.on('disable', this.onDisable, this);
	      this.getRuntime().trigger('getDefaultFilters', function (filters) {
	        that.defaultFilters = filters;
	      }, this);
	      this.initComposer();
	      this.getRuntime().on('resize', this.resize, this);
	      this.getRuntime().on('defaultFiltersChanged', this.updateFilters, this);
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {

	      this.shutdown();
	      this.getRuntime().off('preRenderView', this.preRenderView, this);
	      this.getRuntime().off('defaultFiltersChanged', this.updateFilters, this);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.off('enable', this.onEnable, this);
	      this.off('disable', this.onDisable, this);
	      this.getRuntime().off('resize', this.resize, this);
	      if (this.toneMappingPass) {
	        this.toneMappingPass.dispose();
	      }
	      if (this.copyPass) {
	        this.copyPass.dispose();
	      }
	      if (this.bloomPass) {
	        this.bloomPass.dispose();
	      }
	      if (this.fxaaPass) {
	        this.fxaaPass.dispose();
	      }
	      if (this.filmPass) {
	        this.filmPass.dispose();
	      }
	      if (this.vignettePass) {
	        this.vignettePass.dispose();
	      }
	      if (this.sepiaPass) {
	        this.sepiaPass.dispose();
	      }
	      if (this.dofPass) {
	        this.dofPass.dispose();
	      }
	      if (this.ssaoPass) {
	        this.ssaoPass.dispose();
	      }

	      this.rtTextureDepth.dispose();
	      this.depthMaterial.static.dispose();
	      this.depthMaterial.skinned.dispose();
	    }
	  }, {
	    key: 'onEnable',
	    value: function onEnable() {
	      this.composer.enabled = true;
	      this.updateFilters();
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      this.composer.enabled = false;
	      this.updateFilters();
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      this.resize();
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      this.updateFilters(changes);
	    }
	  }, {
	    key: 'initComposer',
	    value: function initComposer() {

	      var pars = {
	        format: _three2.default.RGBAFormat,
	        minFilter: _three2.default.LinearFilter,
	        magFilter: _three2.default.LinearFilter
	      };
	      var renderer = this.getThreeRenderer();
	      if (renderer.hdrOutputType === _three2.default.HDRFull && renderer.hdrOutputEnabled) {
	        pars.type = _three2.default.FloatType;
	      }
	      var renderTarget = new _three2.default.WebGLRenderTarget(this.getRenderer().getCanvasWidth(), this.getRenderer().getCanvasHeight(), pars);
	      renderTarget.name = this.getEntity().getName() + ': Main Render Buffer';
	      this.composer = new _three2.default.EffectComposer(this.getThreeRenderer(), renderTarget);
	      this.composer.enabled = this.isEnabled();
	      this.composer.renderPassesNeedUpdate = true;

	      this.copyPass = new _three2.default.ShaderPass(this.shaderDefs['copy'].shader);

	      var toneMapping = this.toneMapping;
	      if (toneMapping) {
	        this.toneMappingPass = new _three2.default.AdaptiveToneMappingPass(this.toneMapping.adaptive, 256);
	      }

	      var bloom = this.bloom;
	      if (bloom) {
	        var resolution = bloom.resolution !== undefined ? bloom.resolution : 256;
	        var aspect = this.getRenderer().getWidth() / this.getRenderer().getHeight();
	        this.bloomPass = new _three2.default.BloomPass(bloom.strength, bloom.kernelSize, bloom.sigma, resolution * aspect, resolution);
	      }

	      if (this.fxaa) {
	        this.fxaaPass = new _three2.default.ShaderPass(this.shaderDefs['fxaa'].shader);
	      }

	      if (this.video) {
	        this.filmPass = new _three2.default.FilmPass();
	      }

	      if (this.vignette) {
	        this.vignettePass = new _three2.default.ShaderPass(this.shaderDefs['vignette'].shader);
	      }

	      if (this.sepia) {
	        this.sepiaPass = new _three2.default.ShaderPass(this.shaderDefs['sepia'].shader);
	      }

	      if (this.dof) {
	        this.dofPass = new _three2.default.ShaderPass(this.shaderDefs['bokeh'].shader);
	      }

	      if (this.ssao) {
	        this.ssaoPass = new _three2.default.ShaderPass(this.shaderDefs['ssao'].shader);
	      }

	      this.rtTextureDepth = new _three2.default.WebGLRenderTarget(this.getRenderer().getCanvasWidth(), this.getRenderer().getCanvasHeight(), {
	        minFilter: _three2.default.LinearFilter,
	        magFilter: _three2.default.LinearFilter,
	        format: _three2.default.RGBAFormat
	      });
	      this.rtTextureDepth.name = this.getEntity().getName() + ': Depth Texture';
	      var depthShader = _three2.default.ShaderLib['depthRGBA'];
	      var depthUniforms = _three2.default.UniformsUtils.clone(depthShader.uniforms);

	      this.depthMaterial = {};
	      this.depthMaterial.static = new _three2.default.ShaderMaterial({
	        fragmentShader: depthShader.fragmentShader,
	        vertexShader: depthShader.vertexShader,
	        uniforms: depthUniforms
	      });
	      this.depthMaterial.static.depthTest = true;
	      this.depthMaterial.static.blending = _three2.default.NoBlending;

	      depthUniforms = _three2.default.UniformsUtils.clone(depthShader.uniforms);
	      this.depthMaterial.skinned = new _three2.default.ShaderMaterial({
	        fragmentShader: depthShader.fragmentShader,
	        vertexShader: depthShader.vertexShader,
	        uniforms: depthUniforms
	      });
	      this.depthMaterial.skinned.depthTest = true;
	      this.depthMaterial.skinned.blending = _three2.default.NoBlending;
	      this.depthMaterial.skinned.skinning = true;

	      this.updateFilters();
	    }
	  }, {
	    key: 'updateFilters',
	    value: function updateFilters() {

	      this.needsDepthPass = false;
	      var needsCopyPass = false;

	      this.composer.customPasses = [];
	      this.composer.renderPassesNeedUpdate = true;

	      if (!this.defaultFilters.isEnabled() || !this.isEnabled()) {
	        return;
	      }

	      if (this.defaultFilters.toneMapping.enabled) {
	        this.toneMappingPass.seedTargets(this.getThreeRenderer());
	        this.composer.customPasses.push(this.toneMappingPass);
	        this.toneMappingPass.renderToScreen = false;
	        needsCopyPass = true;
	      }

	      if (!Box3D.isMobile()) {
	        if (this.ssao.override && this.ssao.enabled || !this.ssao.override && this.defaultFilters.ssao.enabled) {
	          this.composer.customPasses.push(this.ssaoPass);
	          this.ssaoPass.renderToScreen = false;
	          this.needsDepthPass = true;
	          needsCopyPass = false;
	        }

	        if (this.dof.override && this.dof.enabled || !this.dof.override && this.defaultFilters.dof.enabled) {
	          this.composer.customPasses.push(this.dofPass);
	          this.dofPass.renderToScreen = false;
	          this.needsDepthPass = true;
	          needsCopyPass = false;
	        }

	        if (this.bloom.override && this.bloom.enabled || !this.bloom.override && this.defaultFilters.bloom.enabled) {
	          this.composer.customPasses.push(this.bloomPass);
	          this.bloomPass.renderToScreen = false;
	          needsCopyPass = true;
	        }

	        if (this.fxaa.override && this.fxaa.enabled || !this.fxaa.override && this.defaultFilters.fxaa.enabled) {
	          this.composer.customPasses.push(this.fxaaPass);
	          this.fxaaPass.renderToScreen = false;
	          needsCopyPass = true;
	        }

	        if (this.video.override && this.video.enabled || !this.video.override && this.defaultFilters.video.enabled) {
	          this.composer.customPasses.push(this.filmPass);
	          this.filmPass.renderToScreen = false;
	          needsCopyPass = true;
	        }
	      }

	      if (this.vignette.override && this.vignette.enabled || !this.vignette.override && this.defaultFilters.vignette.enabled) {
	        this.composer.customPasses.push(this.vignettePass);
	        this.vignettePass.renderToScreen = false;
	        needsCopyPass = false;
	      }

	      if (this.sepia.override && this.sepia.enabled || !this.sepia.override && this.defaultFilters.sepia.enabled) {
	        this.composer.customPasses.push(this.sepiaPass);
	        this.sepiaPass.renderToScreen = false;
	        needsCopyPass = false;
	      }

	      if (needsCopyPass) {
	        this.composer.customPasses.push(this.copyPass);
	      }

	      if (this.composer.customPasses.length > 1) {
	        var lastPass = this.composer.customPasses[this.composer.customPasses.length - 1];
	        lastPass.renderToScreen = true;
	      }

	      //Tone-mapping
	      var toneMapping = this.toneMapping.override ? this.toneMapping : this.defaultFilters.toneMapping;
	      this.toneMappingPass.setAdaptive(toneMapping.adaptive);
	      this.toneMappingPass.setAdaptiveWhiteLevel(false); //this.toneMapping.adaptiveWhiteLevel );
	      this.toneMappingPass.setAdaptionRate(toneMapping.adaptSpeed);
	      this.toneMappingPass.setMaxLuminance(toneMapping.maxLuminance);
	      this.toneMappingPass.setExposure(toneMapping.exposureBias);
	      this.toneMappingPass.setAverageLuminance(toneMapping.luminance);

	      //Film
	      var video = this.video.override ? this.video : this.defaultFilters.video;
	      this.filmPass.uniforms.nIntensity.value = video.nIntensity !== undefined ? video.nIntensity : 0.5;
	      this.filmPass.uniforms.sIntensity.value = video.sIntensity !== undefined ? video.sIntensity : 0.05;
	      this.filmPass.uniforms.sCount.value = video.sCount !== undefined ? video.sCount : 4096;
	      this.filmPass.uniforms.grayscale.value = video.grayscale !== undefined ? video.grayscale : 1;

	      //Bloom
	      var bloom = this.bloom.override ? this.bloom : this.defaultFilters.bloom;
	      this.bloomPass.copyUniforms.opacity.value = bloom.strength !== undefined ? bloom.strength : 1;
	      if (this.bloom.resolution) {
	        var resolution = bloom.resolution !== undefined ? bloom.resolution : 256;
	        var aspect = this.getRenderer().getWidth() / this.getRenderer().getHeight();

	        this.bloomPass.setSize(resolution * aspect, resolution);
	      }
	      _three2.default.BloomPass.blurX.x = 1.0 / this.bloomPass.resolutionX;
	      _three2.default.BloomPass.blurY.y = 1.0 / this.bloomPass.resolutionY;
	      var sigma = this.bloom.sigma !== undefined ? this.bloom.sigma : 4;
	      this.bloomPass.setSigma(sigma);

	      //Sepia
	      var sepia = this.sepia.override ? this.sepia : this.defaultFilters.sepia;
	      this.sepiaPass.uniforms.amount.value = sepia.amount !== undefined ? sepia.amount : 1;

	      //Vignette
	      var vignette = this.vignette.override ? this.vignette : this.defaultFilters.vignette;
	      this.vignettePass.uniforms.offset.value = vignette.offset !== undefined ? vignette.offset : 1;
	      this.vignettePass.uniforms.darkness.value = vignette.darkness !== undefined ? vignette.darkness : 1;

	      //SSAO
	      var ssao = this.ssao.override ? this.ssao : this.defaultFilters.ssao;
	      this.ssaoPass.uniforms.tDepth.value = this.rtTextureDepth;
	      this.ssaoPass.uniforms.onlyAO.value = ssao.onlyAO !== undefined ? ssao.onlyAO : 0;
	      this.ssaoPass.uniforms.aoClamp.value = ssao.aoClamp !== undefined ? ssao.aoClamp : 0.5;
	      this.ssaoPass.uniforms.lumInfluence.value = ssao.lumInfluence !== undefined ? ssao.lumInfluence : 0.5;
	      this.ssaoPass.uniforms.noiseAmount.value = ssao.noiseAmount !== undefined ? ssao.noiseAmount : 0.0003;
	      this.ssaoPass.uniforms.radius.value = ssao.radius !== undefined ? ssao.radius * this.getRenderer().devicePixelRatio : 5;
	      this.ssaoPass.uniforms.diffArea.value = ssao.diffArea !== undefined ? ssao.diffArea : 0.4;
	      this.ssaoPass.uniforms.gDisplace.value = ssao.gDisplace !== undefined ? ssao.gDisplace : 0.4;
	      this.ssaoPass.uniforms.fogEnabled.value = ssao.fogEnabled !== undefined ? ssao.fogEnabled : 1;
	      this.ssaoPass.uniforms.depthScale.value = ssao.depthScale !== undefined ? ssao.depthScale : 1000;

	      //DOF
	      var dof = this.dof.override ? this.dof : this.defaultFilters.dof;
	      this.dofPass.uniforms.tDepth.value = this.rtTextureDepth;
	      this.dofPass.uniforms.focus.value = dof.focus !== undefined ? dof.focus : 1;
	      this.dofPass.uniforms.aspect.value = dof.aspect !== undefined ? dof.aspect : 1;
	      this.dofPass.uniforms.aperture.value = dof.aperture !== undefined ? dof.aperture : 0.025;
	      this.dofPass.uniforms.maxblur.value = dof.maxblur !== undefined ? dof.maxblur : 1;

	      this.getRuntime().needsRender = true;
	    }
	  }, {
	    key: 'preRenderView',
	    value: function preRenderView(scene, camera) {
	      if (camera === this.getRuntimeData() && scene && this.needsDepthPass && this.isEnabled()) {
	        var that = this;
	        var threeRenderer = this.getThreeRenderer();
	        var oldOverride = scene.overrideMaterial;
	        var clearColour = threeRenderer.getClearColor();
	        var clearAlpha = threeRenderer.getClearAlpha();
	        // scene.overrideMaterial = this.depthMaterial;
	        scene.traverse(function (obj) {
	          if (obj instanceof _three2.default.Mesh) {
	            that.objMaterialCache[obj.id] = obj.material;
	            obj.material = that.depthMaterial.static;
	          } else if (obj instanceof _three2.default.SkinnedMesh) {
	            this.objMaterialCache[obj.id] = obj.material;
	            obj.material = that.depthMaterial.skinned;
	          }
	        });
	        threeRenderer.setViewport(0, 0, this.rtTextureDepth.width, this.rtTextureDepth.height);
	        threeRenderer.render(scene, camera, this.rtTextureDepth, true);
	        threeRenderer.setClearColor(clearColour, clearAlpha);
	        scene.overrideMaterial = oldOverride;
	        this.ssaoPass.uniforms.cameraNear.value = camera.near;
	        this.ssaoPass.uniforms.cameraFar.value = camera.far;
	        this.ssaoPass.uniforms.fogDensity.value = scene.fog.density;
	        scene.traverse(function (obj) {
	          if (that.objMaterialCache[obj.id]) {
	            obj.material = that.objMaterialCache[obj.id];
	          }
	        });
	      }
	    }
	  }, {
	    key: 'resize',
	    value: function resize() {

	      if (this.composer) {
	        var canvasWidth = this.getRenderer().getCanvasWidth();
	        var canvasHeight = this.getRenderer().getCanvasHeight();
	        this.composer.setSize(canvasWidth, canvasHeight);
	        if (this.needsDepthPass) {
	          this.rtTextureDepth.dispose();
	          this.rtTextureDepth = new _three2.default.WebGLRenderTarget(canvasWidth, canvasHeight, {
	            minFilter: _three2.default.LinearFilter,
	            magFilter: _three2.default.LinearFilter,
	            format: _three2.default.RGBAFormat
	          });
	          this.rtTextureDepth.name = 'Depth Texture';
	        }

	        this.dofPass.uniforms.tDepth.value = this.rtTextureDepth;

	        this.fxaaPass.uniforms.resolution.value.x = 1.0 / canvasWidth;
	        this.fxaaPass.uniforms.resolution.value.y = 1.0 / canvasHeight;

	        this.bloomPass.setSize(canvasWidth, canvasHeight);

	        this.ssaoPass.uniforms.tDepth.value = this.rtTextureDepth;
	        this.ssaoPass.uniforms.size.value.x = canvasWidth;
	        this.ssaoPass.uniforms.size.value.y = canvasHeight;
	      }
	    }
	  }]);

	  return RenderFilters;
	}(_Box3DComponent3.default);

	exports.default = RenderFilters;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid render_modes
	 * @vname Render Modes
	 * @vfilter Application
	 * @vcategory Rendering
	 * @vreserved
	 */
	/* eslint-enable */
	/* global Box3D */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Generate a UV grid texture programatically
	 * @param  {Object} opts Options object
	 * @return {Canvas}      Returns a canvas containing the UV grid
	 */
	function generateUvGrid(opts) {
	  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),
	      canvas = document.createElement('canvas'),
	      context = canvas.getContext('2d'),
	      x,
	      y;

	  opts = opts || {};
	  opts.size = opts.size || 1024;
	  opts.divisions = opts.divisions || 10;
	  opts.padding = typeof opts.padding !== 'undefined' ? opts.padding : 2;

	  canvas.width = opts.size;
	  canvas.height = opts.size;

	  context.fillStyle = 'rgb(255,255,255)';
	  context.fillRect(0, 0, opts.size, opts.size);

	  /**
	   * Calculates the color value for the specific uv grid cell
	   * @param  {Number} x         The grid cell x position
	   * @param  {Number} y         The grid cell y position
	   * @param  {Number} divisions The number of divisions across a single dimension
	   * @return {String}           The color in the format of rgb(x,x,x)
	   */
	  function calculateColor(x, y, divisions) {
	    var quadrants = [{ r: 200, g: 200, b: 0 }, { r: 0, g: 200, b: 200 }, { r: 0, g: 200, b: 0 }, { r: 200, g: 0, b: 200 }],
	        color = { r: 0, g: 0, b: 0 },
	        center,
	        quadrant,
	        distancePct;

	    center = Math.floor(divisions / 2);

	    quadrant = Math.floor(x / Math.floor(divisions / 2)) % 2 + Math.floor(y / Math.floor(divisions / 2)) % 2 * 2;

	    distancePct = 1.0 - Math.sqrt(Math.pow(x - center, 2) + Math.pow(y - center, 2)) / Math.sqrt(Math.pow(center + center, 2));

	    color.r = Math.floor(quadrants[quadrant].r * distancePct);
	    color.g = Math.floor(quadrants[quadrant].g * distancePct);
	    color.b = Math.floor(quadrants[quadrant].b * distancePct);

	    return 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';
	  }

	  /**
	   * Renders a single grid cell to the canvas
	   * @param  {Context2D} context  Canvas 2D Context
	   * @param  {Number} x           The grid cell x position
	   * @param  {Number} y           The grid cell y position
	   */
	  function renderUvGridCell(context, x, y) {
	    var xPos = opts.size / opts.divisions * x,
	        yPos = opts.size / opts.divisions * y,
	        width = opts.size / opts.divisions,
	        height = opts.size / opts.divisions;

	    // Draw the background for this grid cell
	    context.fillStyle = calculateColor(x, y, opts.divisions);
	    context.fillRect(xPos + opts.padding, yPos + opts.padding, width - opts.padding * 2, height - opts.padding * 2);

	    // Render the sub grid on the grid cell
	    context.strokeStyle = 'rgba(0,0,0,0.2)';

	    context.beginPath();
	    context.moveTo(xPos + opts.padding, yPos + height / 2);
	    context.lineTo(xPos + width - opts.padding, yPos + height / 2);
	    context.moveTo(xPos + width / 2, yPos + opts.padding);
	    context.lineTo(xPos + width / 2, yPos + height - opts.padding);
	    context.stroke();

	    // Draw the grid position on alternating grid cells
	    if ((x + y) % 2 === 0) {
	      context.fillStyle = 'white';
	      context.strokeStyle = 'white';
	      context.font = Math.floor(opts.size / (5 * opts.divisions)) + 'px sans-serif';
	      context.fillText(characters[y] + x, xPos + height / 10, yPos + height - height / 10);
	    }
	  }

	  for (y = 0; y < opts.divisions; y++) {
	    for (x = 0; x < opts.divisions; x++) {
	      renderUvGridCell(context, x, y);
	    }
	  }

	  return canvas;
	}

	var RenderModes = function (_Box3DComponent) {
	  _inherits(RenderModes, _Box3DComponent);

	  function RenderModes() {
	    _classCallCheck(this, RenderModes);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RenderModes).call(this));

	    _this.wireframeCache = {};
	    _this.viewport = new _three2.default.Vector4();
	    _this.overrideMaterialEnabled = false;
	    _this.lightsAreDisabled = false;
	    _this.currentRenderMode = 'Lit';
	    _this.skinWeightsMatDef = {
	      side: _three2.default.DoubleSide,
	      vertexShader: [_three2.default.ShaderChunk.skinning_pars_vertex, 'varying vec3 vColor;', 'void main() {', _three2.default.ShaderChunk.skinbase_vertex, _three2.default.ShaderChunk.skinning_vertex, _three2.default.ShaderChunk.project_vertex, '#ifdef USE_SKINNING', 'vColor = vec3( skinWeight.x, skinWeight.y, skinWeight.z);', '#else', 'vColor = vec3( 0.0, 0.0, 0);', '#endif', '}'].join('\n'),

	      fragmentShader: ['varying vec3 vColor;', 'void main() {', 'gl_FragColor = vec4( vColor, 1.0 );', '}'].join('\n')
	    };

	    _this.normalsMatDef = {
	      side: _three2.default.DoubleSide,
	      uniforms: _three2.default.UniformsUtils.merge([_three2.default.UniformsLib.common, _three2.default.UniformsLib.bumpmap, _three2.default.UniformsLib.normalmap]),
	      vertexShader: [_three2.default.ShaderChunk.common, _three2.default.ShaderChunk.uv_pars_vertex, _three2.default.ShaderChunk.bsdfs, _three2.default.ShaderChunk.skinning_pars_vertex, _three2.default.ShaderChunk.lights_phong_pars_vertex, '#ifndef FLAT_SHADED', 'varying vec3 vNormal;', '#endif', '#if defined( USE_NORMALMAP ) || defined(USE_BUMPMAP)', 'varying vec3 vViewPosition;', '#endif', 'void main() {', _three2.default.ShaderChunk.begin_vertex, _three2.default.ShaderChunk.uv_vertex, '#if defined( USE_NORMALMAP ) || defined(USE_BUMPMAP)', 'vUv.y = 1.0 - vUv.y;', '#endif', _three2.default.ShaderChunk.skinbase_vertex, _three2.default.ShaderChunk.skinning_vertex, _three2.default.ShaderChunk.project_vertex, _three2.default.ShaderChunk.skinnormal_vertex, _three2.default.ShaderChunk.beginnormal_vertex, _three2.default.ShaderChunk.defaultnormal_vertex, 'vNormal = normalize( transformedNormal );', '#if defined( USE_NORMALMAP ) || defined(USE_BUMPMAP)', 'vViewPosition = - mvPosition.xyz;', '#endif', _three2.default.ShaderChunk.lights_phong_vertex, '}'].join('\n'),

	      fragmentShader: [_three2.default.ShaderChunk.common, _three2.default.ShaderChunk.uv_pars_fragment, _three2.default.ShaderChunk.bsdfs, _three2.default.ShaderChunk.lights_phong_pars_fragment, _three2.default.ShaderChunk.normalmap_pars_fragment, _three2.default.ShaderChunk.bumpmap_pars_fragment, 'void main() {', _three2.default.ShaderChunk.normal_fragment, 'normal = 0.5 * normal + 0.5;', 'gl_FragColor = vec4( normal, 1.0 );', '}'].join('\n')

	    };

	    _this.materialPrevProperties = {};

	    _this.renderModes = {
	      'Lit': {
	        overrideMaterial: null,
	        wireframeEnable: false
	      },
	      'Unlit': {
	        overrideMaterial: null,
	        disableLights: true,
	        wireframeEnable: false,
	        isGlobal: true
	      },
	      'Normals': {
	        overrideMaterial: null,
	        wireframeEnable: false,
	        perMeshOverrideMaterial: {
	          skinned: new _three2.default.ShaderMaterial(_this.normalsMatDef),
	          static: new _three2.default.ShaderMaterial(_this.normalsMatDef),
	          copyUniforms: {
	            normalMap: 'normalMap',
	            bumpMap: 'bumpMap'
	          }
	        }
	      },
	      'Wireframe': {
	        overrideMaterial: null,
	        wireframeEnable: true
	      },
	      'Untextured Wireframe': {
	        overrideMaterial: 'flatShaded',
	        wireframeEnable: true,
	        disableSkybox: false
	      },
	      'UV Overlay': {
	        overrideMaterial: {
	          skinned: undefined,
	          static: undefined
	        },
	        disableSkybox: false,
	        wireframeEnable: false
	      },
	      'Skin Weights': {
	        overrideMaterial: {
	          skinned: new _three2.default.ShaderMaterial(_this.skinWeightsMatDef),
	          static: new _three2.default.ShaderMaterial(_this.skinWeightsMatDef)
	        },
	        wireframeEnable: false
	      },
	      'Skin Indices': {
	        overrideMaterial: {
	          skinned: new _three2.default.ShaderMaterial(_this.skinIndicesMatDef),
	          static: new _three2.default.ShaderMaterial(_this.skinIndicesMatDef)
	        },
	        wireframeEnable: false
	      }
	    };
	    return _this;
	  }

	  _createClass(RenderModes, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.getRuntime().on('postRenderView', this.postRenderView, this);
	      this.init();
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {
	      this.getRuntime().off('postRenderView', this.postRenderView, this);
	      this.shutdown();
	    }

	    /**
	     * Called immediately after after RenderModes creation
	     */

	  }, {
	    key: 'init',
	    value: function init() {
	      var uvTexture, uvMaterialStatic, uvMaterialSkinned, flatShadedMat;

	      uvTexture = new _three2.default.Texture(generateUvGrid());
	      uvTexture.anisotropy = 8;
	      uvTexture.needsUpdate = true;

	      uvMaterialStatic = new _three2.default.MeshBasicMaterial({
	        map: uvTexture,
	        side: _three2.default.DoubleSide
	      });
	      uvMaterialSkinned = new _three2.default.MeshBasicMaterial({
	        map: uvTexture,
	        side: _three2.default.DoubleSide,
	        skinning: true
	      });

	      this.renderModes['UV Overlay'].overrideMaterial.skinned = uvMaterialSkinned;
	      this.renderModes['UV Overlay'].overrideMaterial.static = uvMaterialStatic;

	      this.flatShadedMaterialJSON = {
	        name: 'flatShaded',
	        id: 'flatShaded',
	        type: 'material',
	        properties: {
	          emissiveColor: { r: 0.933, g: 0.898, b: 0.687 }
	        },
	        side: _three2.default.DoubleSide
	      };

	      this.getGlobalEvents().on('setRenderMode', this.setRenderMode, this);

	      this.sceneAsset = this.box3DEntity.getParentAsset();
	      this.assetRegistry = this.box3DEntity.box3DRuntime.assetRegistry;
	      this.wireframeScene = new _three2.default.Scene();

	      if (!this.assetRegistry.assets[this.flatShadedMaterialJSON.id]) {
	        this.assetRegistry.createAsset(this.flatShadedMaterialJSON);
	        flatShadedMat = this.assetRegistry.getAssetById('flatShaded');
	        flatShadedMat.enableFeature('albedo', false);
	        flatShadedMat.enableFeature('emissive', true);
	      }
	    }

	    /**
	    * Clear a registered wireframe and remove from the cache
	    * @param {string} id Id of the registered entity
	    * @returns {void}
	    */

	  }, {
	    key: 'clearWireframe',
	    value: function clearWireframe(id) {
	      var wireframe = this.wireframeCache[id];
	      if (!wireframe) {
	        return;
	      }

	      wireframe.parent.remove(wireframe);
	      wireframe.geometry.dispose();
	      delete this.wireframeCache[id];
	    }

	    /**
	    * Clear all registered wireframes
	    * @returns {void}
	    */

	  }, {
	    key: 'clearWireframes',
	    value: function clearWireframes() {
	      for (var id in this.wireframeCache) {
	        if (this.wireframeCache.hasOwnProperty(id)) {
	          this.clearWireframe(id);
	        }
	      }
	    }

	    /**
	    * Clear all render mode created materials, geometry, etc.
	    * @returns {void}
	    */

	  }, {
	    key: 'clearRenderModeCaches',
	    value: function clearRenderModeCaches() {
	      this.clearWireframes();
	    }

	    /**
	     * Called when a verold object is destroyed or this RenderModes is removed
	     * from a verold object.
	     */

	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      Box3D.globalEvents.off('setRenderMode', this.setRenderMode, this);

	      this.clearRenderModeCaches();
	      this.wireframeCache = undefined;
	      this.wireframeScene = undefined;

	      _lodash2.default.each(this.renderModes, function (mode) {
	        if (_lodash2.default.isObject(mode.overrideMaterial)) {
	          _lodash2.default.each(mode.overrideMaterial, function (mat) {
	            if (mat) {
	              mat.dispose();
	            }
	          }, this);
	        }
	        if (_lodash2.default.isObject(mode.perMeshOverrideMaterial)) {
	          _lodash2.default.each(mode.perMeshOverrideMaterial, function (mat) {
	            if (mat && mat instanceof _three2.default.Material) {
	              mat.dispose();
	            }
	          }, this);
	        }
	      }, this);
	    }
	  }, {
	    key: 'postRenderView',
	    value: function postRenderView(scene, camera, options) {
	      var renderMode;
	      if (!this.currentRenderMode || !this.renderModes) {
	        return;
	      }
	      renderMode = this.renderModes[this.currentRenderMode];
	      if (renderMode.wireframeEnable) {
	        this.getThreeRenderer().getViewport(this.viewport);
	        if (options && options.viewPort) {
	          this.getThreeRenderer().setViewport(options.viewPort.x, options.viewPort.y, options.viewPort.width, options.viewPort.height);
	        }
	        this.getThreeRenderer().render(this.wireframeScene, camera);
	        if (options && options.viewPort) {
	          this.getThreeRenderer().setViewport(this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height);
	        }
	      }
	    }
	  }, {
	    key: 'setRenderMode',
	    value: function setRenderMode(modeName) {

	      if (!this.renderModes[modeName]) {
	        modeName = 'Lit';
	      }
	      this.currentRenderMode = modeName;

	      this.applyRenderModeGlobalSettings();
	      //for each scene, set the render mode
	      var scenes = this.getAssetRegistry().Scenes.getAssets();
	      _lodash2.default.each(scenes, function (scene) {
	        if (scene.isChildrenLoaded()) {
	          this.applyRenderModeForScene(scene, null);
	        }
	      }, this);

	      this.getRuntime().needsRender = true;
	    }
	  }, {
	    key: 'applyRenderModeGlobalSettings',
	    value: function applyRenderModeGlobalSettings() {
	      var renderMode = this.renderModes[this.currentRenderMode];

	      //Disable lights is they should be for this render mode
	      if (renderMode.disableLights) {
	        this.disableImageBasedLighting();
	        //Re-enable lights if they were previously disabled.
	      } else if (this.lightsAreDisabled) {
	          this.enableImageBasedLighting();
	        }
	    }
	  }, {
	    key: 'applyRenderModeForScene',
	    value: function applyRenderModeForScene(scene) {
	      var renderMode;
	      var overrideMaterial;
	      var perMeshOverrideMaterial;

	      renderMode = this.renderModes[this.currentRenderMode];

	      if (_lodash2.default.isString(renderMode.overrideMaterial)) {
	        this.assetRegistry.getAssetById(renderMode.overrideMaterial).load();
	        overrideMaterial = this.assetRegistry.getAssetById(renderMode.overrideMaterial).runtimeData;
	      } else {
	        overrideMaterial = renderMode.overrideMaterial;
	      }
	      if (_lodash2.default.isString(renderMode.perMeshOverrideMaterial)) {
	        this.assetRegistry.getAssetById(renderMode.perMeshOverrideMaterial).load();
	        perMeshOverrideMaterial = this.assetRegistry.getAssetById(renderMode.perMeshOverrideMaterial).runtimeData;
	      } else {
	        perMeshOverrideMaterial = renderMode.perMeshOverrideMaterial;
	      }

	      //Apply override material for this render mode
	      if (overrideMaterial) {
	        overrideMaterial.skinned.skinning = true;
	        this.overrideMaterialEnabled = true;
	        scene.traverse(function (obj) {
	          if (obj.type === 'mesh') {
	            obj.runtimeData.material = overrideMaterial.static;
	          } else if (obj.type === 'skinnedMesh') {
	            obj.runtimeData.material = overrideMaterial.skinned;
	          }
	        });
	      } else if (perMeshOverrideMaterial) {
	        perMeshOverrideMaterial.skinned.skinning = true;
	        this.overrideMaterialEnabled = true;
	        this.perMeshOverrideMaterialEnabled = true;
	        scene.traverse(function (obj) {
	          var prevMats;
	          var newMat;
	          var matType;
	          if (obj.type === 'mesh' || obj.type === 'skinnedMesh') {
	            prevMats = obj.getMaterials();
	            matType = obj.type === 'mesh' ? 'static' : 'skinned';
	            overrideMaterial = perMeshOverrideMaterial[matType];
	            if (prevMats.length > 1) {
	              obj.runtimeData.material = new _three2.default.MeshFaceMaterial();
	            }
	            prevMats.forEach(function (prevMatAsset) {
	              newMat = overrideMaterial.clone();
	              if (prevMats.length > 1) {
	                obj.runtimeData.material.materials.push(newMat);
	              } else {
	                obj.runtimeData.material = newMat;
	              }
	              newMat.needsUpdate = true;
	              _lodash2.default.each(perMeshOverrideMaterial.copyUniforms, function (fromParam, toParam) {
	                var prevMaterial = prevMatAsset.runtimeData[matType];
	                if (prevMaterial.uniforms[fromParam] && prevMaterial.uniforms[fromParam].value) {
	                  newMat[toParam] = prevMaterial.uniforms[fromParam].value;
	                  newMat.uniforms[toParam].value = prevMaterial.uniforms[fromParam].value;
	                }
	              }, this);
	            }, this);
	          }
	        }, this);
	      } else if (this.overrideMaterialEnabled) {
	        //Re-apply materials if they were previously overridden
	        scene.traverse(function (obj) {
	          var material;
	          var newMaterials;
	          var i;
	          if (obj.type === 'mesh' || obj.type === 'skinnedMesh') {
	            if (this.perMeshOverrideMaterialEnabled && obj.runtimeData.material) {
	              if (obj.runtimeData.material instanceof _three2.default.MeshFaceMaterial) {
	                for (i = 0; i < obj.runtimeData.material.materials.length; i++) {
	                  obj.runtimeData.material.materials[i].dispose();
	                }
	              } else {
	                obj.runtimeData.material.dispose();
	              }
	              obj.runtimeData.material = null;
	            }
	            material = obj.getProperty('materials');
	            newMaterials = new Array(material.length);
	            obj.setProperty('materials', newMaterials, {
	              silent: true
	            });
	            obj.setProperty('materials', material);
	          }
	        }, this);
	        this.overrideMaterialEnabled = false;
	        this.perMeshOverrideMaterialEnabled = false;
	      }

	      //Disable lights is they should be for this render mode
	      if (renderMode.disableLights) {
	        this.lightsAreDisabled = true;
	        scene.traverse(function (obj) {
	          if (obj.type === 'light') {
	            if (obj.getProperty('lightType') === 'ambient') {
	              obj.runtimeData.color.setRGB(1.0, 1.0, 1.0);
	            } else {
	              obj.runtimeData.intensity = 0;
	            }
	          }
	        });
	      } else if (this.lightsAreDisabled) {
	        //Re-enable lights if they were turned off
	        this.lightsAreDisabled = false;
	        scene.traverse(function (obj) {
	          if (obj.type === 'light') {
	            if (obj.getProperty('lightType') === 'ambient') {
	              var colour = obj.getProperty('color');
	              obj.setProperty('color', { r: 0, g: 0, b: 0 }, {
	                silent: true
	              });
	              obj.setProperty('color', colour);
	            } else {
	              var intensity = obj.getProperty('intensity');
	              obj.setProperty('intensity', 0, {
	                silent: true
	              });
	              obj.setProperty('intensity', intensity);
	            }
	          }
	        }, this);
	      }

	      if (renderMode.wireframeEnable) {
	        _lodash2.default.each(this.wireframeCache, function (obj) {
	          obj.visible = false;
	        }, this);
	        scene.traverse(function (obj) {
	          if (obj.type === 'mesh' || obj.type === 'skinnedMesh') {
	            if (this.wireframeCache[obj.id]) {
	              this.wireframeCache[obj.id].visible = true;
	            } else {
	              if (obj.runtimeData) {
	                this.wireframeCache[obj.id] = new _three2.default.WireframeHelper(obj.runtimeData, 0x050505);
	                obj.once('unload', this.clearWireframe.bind(this, obj.id), this);
	              }
	            }
	            if (this.wireframeScene) {
	              this.wireframeScene.add(this.wireframeCache[obj.id]);
	            }
	          }
	        }, this);
	      }
	    }
	  }, {
	    key: 'disableImageBasedLighting',
	    value: function disableImageBasedLighting() {
	      var materials = this.getAssetRegistry().Materials.assets;
	      var i, useSceneLights, useEnvironmentMap;
	      for (i in materials) {
	        if (materials.hasOwnProperty(i)) {
	          if (!this.materialPrevProperties[i]) {
	            this.materialPrevProperties[i] = {};
	            useSceneLights = materials[i].getProperty('useSceneLights');
	            useEnvironmentMap = materials[i].getProperty('useEnvironmentMap');
	            this.materialPrevProperties[i].useSceneLights = useSceneLights;
	            this.materialPrevProperties[i].useEnvironmentMap = useEnvironmentMap;
	            materials[i].setProperty('useSceneLights', true);
	            materials[i].setProperty('useEnvironmentMap', false);
	          }
	        }
	      }
	    }
	  }, {
	    key: 'enableImageBasedLighting',
	    value: function enableImageBasedLighting() {
	      var materials = this.getAssetRegistry().Materials.assets;
	      var i, useSceneLights, useEnvironmentMap;
	      for (i in materials) {
	        if (materials.hasOwnProperty(i)) {
	          if (this.materialPrevProperties[i]) {
	            useSceneLights = this.materialPrevProperties[i].useSceneLights;
	            useEnvironmentMap = this.materialPrevProperties[i].useEnvironmentMap;
	            materials[i].setProperty('useSceneLights', useSceneLights);
	            materials[i].setProperty('useEnvironmentMap', useEnvironmentMap);
	            delete this.materialPrevProperties[i];
	          }
	        }
	      }
	    }
	  }]);

	  return RenderModes;
	}(_Box3DComponent3.default);

	exports.default = RenderModes;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid render_view_component
	 * @vname Render View
	 * @vfilter camera
	 * @vcategory Rendering
	 * @vreserved
	 * @vattr String viewportLeft { 'description': 'Left position of the viewport to be rendered by this camera.', default : '0px' }
	 * @vattr String viewportBottom { 'description': 'Bottom position of the viewport to be rendered by this camera.', default : '0px' }
	 * @vattr String viewportWidth { 'description': 'Width of the viewport to be rendered by this camera.', default : '100%' }
	 * @vattr String viewportHeight { 'description': 'Height of the viewport to be rendered by this camera.', default : '100%' }
	 * @vattr Integer renderGroup { 'description': 'Render passes are done in order, based on the \'render group\' value. Lower numbers render first.', default: 0 }
	 * @vattr Boolean clearColor { 'description': '', default : false, 'advanced': false }
	 * @vattr Boolean clearDepth { 'description': '', default : true, 'advanced': false }
	 * @vattr Asset renderTarget { 'description': '', 'filter': { 'renderTexture2D': true }, default: null, 'advanced': false }
	 * @vattr Boolean enablePreRenderFunctions { 'description': 'Run pre-render functions with this view. These include things like real-time reflections, which need to be rendered for each view separately.', 'default' : true, 'advanced': true }
	 * @vattr Boolean enableShadows { 'description': 'Render shadows for this view.', default : true, 'advanced': true }
	 * @vevent local enableRenderView { 'category': 'Rendering', 'parameters': [{'name': 'fade', 'type': 'f', 'description': 'Defined in seconds', 'default': 0.0}]}
	 * @vevent local setViewport {
	 *   'category': 'Rendering',
	 *   'parameters': [
	 *     {'name': 'viewportLeft', 'description': 'Left position of the viewport to be rendered by this camera.', 'type': 's', 'default' : '0px' },
	 *     {'name': 'viewportBottom', 'description': 'Bottom position of the viewport to be rendered by this camera.', 'type': 's', 'default' : '0px' },
	 *     {'name': 'viewportWidth', 'description': 'Width of the viewport to be rendered by this camera.', 'type': 's', 'default' : '100%' },
	 *     {'name': 'viewportHeight', 'description': 'Height of the viewport to be rendered by this camera.', 'type': 's', 'default' : '100%' },
	 *     {'name': 'animationTime', 'type': 'f', 'description': 'Animate the change in viewport over this many seconds.', 'default': 0.0}
	 *   ]
	 * }
	 * @vevent local disableRenderView {'category': 'Rendering', 'parameters': [{'name': 'fade', 'type': 'f', 'description': 'Defined in seconds', 'default': 0.0}]}
	 * @vevent local toggleRenderView {'category': 'Rendering', 'parameters': [{'name': 'fade', 'type': 'f', 'description': 'Defined in seconds', 'default': 0.0}]}
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RenderView = function (_Box3DComponent) {
	  _inherits(RenderView, _Box3DComponent);

	  function RenderView() {
	    _classCallCheck(this, RenderView);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RenderView).call(this));

	    _this.renderEventName = 'render';
	    _this.enablePostProcess = true;
	    _this.enableShadows = true;
	    _this.enablePreRenderFunctions = true;
	    _this.opacity = 1.0;
	    _this.currentRenderContext = _this;
	    _this.renderTarget;
	    _this.renderViewOverride;
	    return _this;
	  }

	  _createClass(RenderView, [{
	    key: 'init',
	    value: function init() {
	      var that = this;
	      var renderEvent = parseInt(this.renderGroup, 10);
	      if (renderEvent) {
	        this.renderEventName += 'Group' + renderEvent;
	      }
	      this.getRuntime().on(this.renderEventName, this.renderView, this);
	      this.getRuntime().on('resize', this.resize, this);

	      this.getEntity().when('loadBase', function () {
	        that.resize();
	      });

	      this.listenTo(this.getEntity(), 'enableRenderView', this.enableRenderView);
	      this.listenTo(this.getEntity(), 'disableRenderView', this.disableRenderView);
	      this.listenTo(this.getEntity(), 'toggleRenderView', this.toggleRenderView);
	      this.listenTo(this.getEntity(), 'setViewport', this.setViewport);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.getRuntime().off(this.renderEventName, this.renderView, this);
	      this.getRuntime().off('resize', this.resize, this);
	      this.stopListening();
	    }
	  }, {
	    key: 'componentsLoaded',
	    value: function componentsLoaded() {
	      this.filters = this.getEntity().componentRegistry.getFirstByScriptId('camera_filters_script');
	    }
	  }, {
	    key: 'enableRenderView',
	    value: function enableRenderView(fade) {
	      this.enable();
	      if (fade) {
	        this.fadeOutTime = 0.0;
	        this.fadeInTime = fade;
	        this.opacityTime = 0.0;
	        this.opacity = 0.0;
	      } else {
	        this.opacity = 1.0;
	      }
	    }
	  }, {
	    key: 'disableRenderView',
	    value: function disableRenderView(fade) {
	      if (fade) {
	        this.fadeInTime = 0.0;
	        this.opacityTime = fade;
	        this.fadeOutTime = fade;
	        this.opacity = 1.0;
	      } else {
	        this.disable();
	        this.opacity = 0.0;
	      }
	    }
	  }, {
	    key: 'toggleRenderView',
	    value: function toggleRenderView(fade) {
	      if (this.isEnabled()) {
	        this.disableRenderView(fade);
	      } else {
	        this.enableRenderView(fade);
	      }
	    }
	  }, {
	    key: 'setViewport',
	    value: function setViewport(x, y, width, height, animationTime) {
	      this.viewportLeft = x.toString();
	      this.viewportBottom = y.toString();
	      this.viewportWidth = width.toString();
	      this.viewportHeight = height.toString();

	      if (!animationTime) {
	        this.resize();
	        this.animationTotalTime = 0;
	      } else {
	        this.animationTotalTime = animationTime;
	        this.animationTime = 0;
	        this.oldX = this._x;
	        this.oldY = this._y;
	        this.oldWidth = this._width;
	        this.oldHeight = this._height;

	        this.updateViewport();

	        this.targetX = this._x;
	        this.targetY = this._y;
	        this.targetWidth = this._width;
	        this.targetHeight = this._height;

	        this._x = this.oldX;
	        this._y = this.oldY;
	        this._width = this.oldWidth;
	        this._height = this.oldHeight;
	      }
	    }
	  }, {
	    key: 'updateViewport',
	    value: function updateViewport() {
	      var cWidth, cHeight, percent;
	      cWidth = this.getRuntime().getRenderer().getWidth();
	      cHeight = this.getRuntime().getRenderer().getHeight();

	      if (this.viewportBottom.slice(-1) === '%') {
	        percent = parseFloat(this.viewportBottom.slice(0, -1)) * 0.01;
	        this._y = parseInt(percent * cHeight, 10);
	      } else {
	        this._y = parseInt(this.viewportBottom);
	      }
	      if (this.viewportLeft.slice(-1) === '%') {
	        percent = parseFloat(this.viewportLeft.slice(0, -1)) * 0.01;
	        this._x = parseInt(percent * cWidth, 10);
	      } else {
	        this._x = parseInt(this.viewportLeft);
	      }
	      if (this.viewportWidth.slice(-1) === '%') {
	        percent = parseFloat(this.viewportWidth.slice(0, -1)) * 0.01;
	        this._width = parseInt(percent * cWidth, 10);
	      } else {
	        this._width = parseInt(this.viewportWidth);
	      }
	      this._width = Math.min(this._width, cWidth - this._x);

	      if (this.viewportHeight.slice(-1) === '%') {
	        percent = parseFloat(this.viewportHeight.slice(0, -1)) * 0.01;
	        this._height = parseInt(percent * cHeight, 10);
	      } else {
	        this._height = parseInt(this.viewportHeight);
	      }
	      this._height = Math.min(this._height, cHeight - this._y);

	      if (this._x < 0) {
	        this._x += cWidth;
	      }
	      if (this._y < 0) {
	        this._y += cHeight;
	      }
	    }
	  }, {
	    key: 'updateCameraProjection',
	    value: function updateCameraProjection() {
	      var camera = this.getRuntimeData();
	      var aspect;
	      if (camera) {
	        aspect = this._width / this._height;
	        if (camera instanceof _three2.default.PerspectiveCamera) {
	          camera.aspect = aspect;
	        } else {
	          camera.left = camera.bottom * aspect;
	          camera.right = camera.top * aspect;
	        }
	        camera.updateProjectionMatrix();
	      }
	    }
	  }, {
	    key: 'resize',
	    value: function resize() {
	      this.updateViewport();
	      this.updateCameraProjection();
	    }
	  }, {
	    key: 'setRenderOverride',
	    value: function setRenderOverride(fn, context) {

	      // Unbind existing render function
	      if (this.renderViewOverride) {
	        this.getRuntime().off(this.renderEventName, this.renderViewOverride, this.currentRenderContext);
	      } else {
	        this.getRuntime().off(this.renderEventName, this.renderView, this);
	      }

	      // Bind new render function
	      if (fn) {
	        this.getRuntime().on(this.renderEventName, fn, context);
	        this.currentRenderContext = context;
	        this.renderViewOverride = fn;
	      } else {
	        this.getRuntime().on(this.renderEventName, this.renderView, this);
	        this.renderViewOverride = null;
	      }
	    }
	  }, {
	    key: 'renderView',
	    value: function renderView(delta) {
	      if (this.isEnabled()) {
	        var scene = this.getScene();
	        var renderTarget = null;
	        if (this.renderTarget) {
	          if (!this.renderTarget.runtimeData) {
	            return;
	          } else {
	            renderTarget = this.renderTarget.runtimeData;
	          }
	        }
	        if (this.hasThreeData() && scene && scene.runtimeData) {
	          if (this.fadeInTime) {
	            this.getRuntime().needsRender = true;
	            this.opacityTime += delta;
	            this.opacity = this.opacityTime * this.opacityTime / this.fadeInTime;
	            if (this.opacity > 1.0) {
	              this.opacity = 1.0;
	              this.fadeInTime = 0.0;
	              this.opacityTime = 0.0;
	            }
	          } else if (this.fadeOutTime) {
	            this.getRuntime().needsRender = true;
	            if (this.opacityTime === -1.0) {
	              this.disable();
	              this.opacity = 0;
	              this.fadeOutTime = 0.0;
	              this.opacityTime = 0.0;
	              this.disable();
	            } else {
	              this.opacityTime -= delta;
	              if (this.opacityTime <= 0.0) {
	                this.opacity = 0.0001;
	                this.opacityTime = -1.0;
	              } else {
	                this.opacity = this.opacityTime / this.fadeOutTime;
	              }
	            }
	          }
	          if (this.animationTotalTime > 0) {
	            this.getRuntime().needsRender = true;
	            this.animationTime += delta;
	            var animationProgress = this.animationTime / this.animationTotalTime;
	            if (animationProgress >= 1.0) {
	              this.animationTotalTime = 0;
	              animationProgress = 1.0;
	            }

	            this._x = (1.0 - animationProgress) * this.oldX + animationProgress * this.targetX;
	            this._y = (1.0 - animationProgress) * this.oldY + animationProgress * this.targetY;
	            this._width = (1.0 - animationProgress) * this.oldWidth + animationProgress * this.targetWidth;
	            this._height = (1.0 - animationProgress) * this.oldHeight + animationProgress * this.targetHeight;

	            this.updateCameraProjection();
	          }

	          this.getRenderer().renderView(scene.runtimeData, this.getRuntimeData(), {
	            viewPort: {
	              x: this._x,
	              y: this._y,
	              width: this._width,
	              height: this._height
	            },
	            enablePreRenderFunctions: this.enablePreRenderFunctions,
	            composer: this.filters ? this.filters.composer : null,
	            enableShadows: this.enableShadows,
	            clearColor: this.clearColor,
	            clearDepth: this.clearDepth,
	            delta: delta,
	            opacity: this.opacity,
	            renderTarget: renderTarget
	          });
	        }
	      }
	    }
	  }]);

	  return RenderView;
	}(_Box3DComponent3.default);

	exports.default = RenderView;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid box3d_renderer
	 * @vreserved
	 * @vname Renderer
	 * @vfilter application
	 * @vcategory Rendering
	 * @vattr Boolean renderOnDemand {
	 *   description: 'When this is enabled, rendering will only happen when requested instead of every frame.',
	 *   defualt: true
	 * }
	 * @vattr Boolean antialias {
	 *   description: 'Enable or disable antialiasing of the rendered scene.',
	 *   default: true
	 * }
	 * @vattr Boolean preserveDrawingBuffer {
	 *   description: 'Tells the browser to preserve drawing buffers between frames so that they are available to be read by the application.',
	 *   default: true
	 * }
	 * @vattr Boolean autoClear {
	 *   description: 'Automatically clear the render target before each render.',
	 *   default: false
	 * }
	 * @vattr Dropdown devicePixelRatio {
	 *   default: 0.0,
	 *   options: { 'Device Default': 0.0, 'One': 1.0, 'Two': 2.0 },
	 *   description: 'Override the default pixel ratio of the system. Higher values will cause rendering at higher resolution while lower values will force rendering at lower resolutions. You can also set this to use the device default (mobile devices usually have values greater than 1).',
	 * }
	 * @vattr Color clearColor {
	 *   description: 'When the render target is cleared, this colour will be used',
	 *   default: {r: 0, g: 0, b:0}
	 * }
	 * @vattr Float clearAlpha {
	 *   description: 'When the render target is cleared, this value will be used to clear the transparency',
	 *   default: 0,
	 *   min: 0.0,
	 *   max: 1.0,
	 *   step: 0.001
	 * }
	 * @vattr Dropdown precision {
	 *   description: 'The default floating point and integer precision to be used by the GPU.',
	 *   default: 'mediump',
	 *   options: {
	 *     'Low': 'lowp',
	 *     'Medium': 'mediump',
	 *     'High':  'highp'
	 *   }
	 * }
	 * @vattr Boolean shadowsEnabled {
	 *   description: 'Enable or disable rendering of shadows.',
	 *   default: true
	 * }
	 * @vattr Boolean shadowsEnabledMobile {
	 *   description: 'Enable or disable rendering of shadows on mobile devices.',
	 *   default: false
	 * }
	 * @vattr Dropdown shadowType {
	 *   options: {
	 *     'Soft PCF': 2,
	 *     'PCF': 1,
	 *     'No Filtering': 0
	 *   },
	 *   default: 2
	 * }
	 * @vattr Dropdown shadowCullFace {
	 *   description: 'Shadows will or will not automatically be updated every frame.',
	 *   options: {
	 *     'None': 0,
	 *     'Front': 2,
	 *     'Back': 1
	 *   },
	 *   default: 2
	 * }
	 * @vattr Boolean shadowDebug {
	 *   description: 'Enable or disable debug rendering, showing the different shadow cascade sizes.',
	 *   default: false
	 * }
	 * @vattr Boolean logarithmicDepthBuffer {
	 *   description: 'Use logarithmic z values while rendering.',
	 *   default: false
	 * }
	 */
	/* eslint-enable */
	/* global Box3D */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DefaultRenderer = function (_Box3DComponent) {
	  _inherits(DefaultRenderer, _Box3DComponent);

	  function DefaultRenderer() {
	    _classCallCheck(this, DefaultRenderer);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DefaultRenderer).call(this));

	    _this.threeRenderer = null;
	    _this.caps = {};

	    //Attributes
	    _this.antialias = false;
	    _this.preserveDrawingBuffer = true;
	    _this.precision = 'highp';
	    _this.devicePixelRatio = 1.0;

	    _this.shadowsEnabled = true;
	    _this.shadowsEnabledMobile = false;
	    _this.shadowType = _three2.default.PCFSoftShadowMap;
	    _this.shadowCullFace = _three2.default.CullFaceBack;
	    _this.shadowCascade = false;
	    _this.shadowsDebug = false;
	    _this.maxShadows = -1;
	    _this.maxPointLights = -1;
	    _this.maxDirLights = -1;
	    _this.maxSpotLights = -1;
	    _this.maxHemiLights = -1;

	    _this.clearColor = new _three2.default.Color();
	    _this.clearAlpha = 0.0;
	    _this.autoClear = false;
	    _this.autoClearColor = true;
	    _this.autoClearDepth = true;
	    _this.autoClearStencil = true;

	    _this.sortObjects = true;
	    _this.autoUpdateObjects = true;

	    _this.preRenderFns = {};
	    _this.postRenderFns = {};
	    _this.renderPasses = [];
	    _this.viewport = new _three2.default.Vector4();

	    _this.renderOnDemand = true;
	    return _this;
	  }

	  _createClass(DefaultRenderer, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.awake();
	      this.entityCreated();
	      this.applyRenderSettings();
	      this.getRuntime().on('postRender', this.postRender, this);
	    }
	  }, {
	    key: 'awake',
	    value: function awake() {
	      this.canvas = this.getRuntime().canvas;
	      this.initDefaultRenderer();

	      this.getRuntime().setRenderer(this);

	      //Init scene sceneComposer
	      var renderer = this.getThreeRenderer();
	      renderer.gammaInput = true;
	      renderer.gammaOutput = true;
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.getRuntime().on('resize', this.resize, this);
	      this.getRuntime().renderOnDemand = this.renderOnDemand;
	      if (!this.shadowsEnabledMobile) {
	        this.shadowsEnabled = Box3D.isMobile() ? this.shadowsEnabledMobile && this.shadowsEnabled : this.shadowsEnabled;
	      }
	      this.applyRenderSettings();
	    }

	    /**
	     * Called when a verold object is destroyed or this component is removed
	     * from a verold object.
	     */

	  }, {
	    key: 'shutdown',
	    value: function shutdown() {

	      this.getRuntime().off('resize', this.resize, this);
	      this.getRuntime().off('postRender', this.postRender, this);

	      for (var i = 0; i < this.renderPasses.length; i++) {
	        this.renderPasses[i].pass = null;
	        this.renderPasses[i].scene = null;
	        this.renderPasses[i].camera = null;
	      }
	      if (this.threeRenderer) {
	        this.threeRenderer.context = null;
	      }
	      this.threeRenderer = null;
	      this.canvas = undefined;
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      this.getRuntime().trigger('resize');
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      var rebuildMaterials = false;
	      if (changes.indexOf('shadowsEnabledMobile') !== -1) {
	        rebuildMaterials = true;
	      }
	      this.shadowsEnabled = Box3D.isMobile() ? this.shadowsEnabledMobile && this.shadowsEnabled : this.shadowsEnabled;
	      this.applyRenderSettings();

	      this.getRuntime().renderOnDemand = this.renderOnDemand;

	      if (changes.indexOf('clearAlpha') !== -1) {
	        this.threeRenderer.setClearColor(this.clearColor, this.clearAlpha);
	      }
	      if (changes.indexOf('clearColor') !== -1) {
	        this.threeRenderer.setClearColor(this.clearColor, this.clearAlpha);
	      }

	      if (changes.indexOf('gammaOutput') !== -1) {
	        rebuildMaterials = true;
	      }
	      if (changes.indexOf('gammaInput') !== -1) {
	        rebuildMaterials = true;
	      }
	      if (changes.indexOf('shadowsEnabled') !== -1) {
	        rebuildMaterials = true;
	      }
	      if (changes.indexOf('shadowDebug') !== -1) {
	        rebuildMaterials = true;
	      }
	      if (changes.indexOf('shadowCascade') !== -1) {
	        rebuildMaterials = true;
	      }
	      if (changes.indexOf('shadowType') !== -1) {
	        this.shadowType = parseInt(this.shadowType, 10);
	        _log2.default.warn('TODO - need to recreate the shadow maps if the shadow' + ' filtering has changed because PCFSoftShadowMap reuires the shadowmap' + ' to be rendered with no filtering.');
	        rebuildMaterials = true;
	      }
	      if (changes.indexOf('devicePixelRatio') !== -1) {
	        this.getRuntime().trigger('resize');
	      }

	      if (rebuildMaterials) {
	        //rebuild materials
	        _log2.default.info('Rebuilding materials!!!');
	        this.getRuntime().trigger('rebuildMaterials');
	      }
	    }
	  }, {
	    key: 'storeGPUCaps',
	    value: function storeGPUCaps() {

	      _log2.default.info('WebGL VENDOR is ' + this.glContext.getParameter(this.glContext.VENDOR));
	      _log2.default.info('WebGL SHADING_LANGUAGE_VERSION is ' + this.glContext.getParameter(this.glContext.SHADING_LANGUAGE_VERSION));
	      _log2.default.info('WebGL RENDERER is ' + this.glContext.getParameter(this.glContext.RENDERER));

	      var fShaderConst = this.glContext.FRAGMENT_SHADER;
	      var lFloatConst = this.glContext.LOW_FLOAT;
	      var mFloatConst = this.glContext.MEDIUM_FLOAT;
	      var hFloatConst = this.glContext.HIGH_FLOAT;
	      var shaderPrecFormat = this.glContext.getShaderPrecisionFormat(fShaderConst, lFloatConst);
	      _log2.default.info('Fragment Shader lowp is ' + shaderPrecFormat.precision);
	      shaderPrecFormat = this.glContext.getShaderPrecisionFormat(fShaderConst, mFloatConst);
	      _log2.default.info('Fragment Shader mediump is ' + shaderPrecFormat.precision);
	      shaderPrecFormat = this.glContext.getShaderPrecisionFormat(fShaderConst, hFloatConst);
	      _log2.default.info('Fragment Shader highp is ' + shaderPrecFormat.precision);

	      if (!navigator.isCocoonJS) {
	        this.caps.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0;
	        this.caps.MAX_CUBE_MAP_TEXTURE_SIZE = 0;
	        this.caps.MAX_FRAGMENT_UNIFORM_VECTORS = 0;
	        this.caps.MAX_RENDERBUFFER_SIZE = 0;
	        this.caps.MAX_TEXTURE_IMAGE_UNITS = 0;
	        this.caps.MAX_TEXTURE_SIZE = 0;
	        this.caps.MAX_VARYING_VECTORS = 0;
	        this.caps.MAX_VERTEX_ATTRIBS = 0;
	        this.caps.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0;
	        this.caps.MAX_VERTEX_UNIFORM_VECTORS = 0;
	        this.caps.MAX_VIEWPORT_DIMS = 0;
	        this.caps.ALIASED_POINT_SIZE_RANGE = 0;
	        this.caps.ALIASED_LINE_WIDTH_RANGE = 0;
	        this.caps.SAMPLES = 0;
	        this.caps.SAMPLE_BUFFERS = 0;
	        this.caps.RED_BITS = 0;
	        this.caps.GREEN_BITS = 0;
	        this.caps.BLUE_BITS = 0;
	        this.caps.ALPHA_BITS = 0;
	        this.caps.DEPTH_BITS = 0;
	        this.caps.STENCIL_BITS = 0;
	        this.caps.SUBPIXEL_BITS = 0;
	        this.caps.COMPRESSED_TEXTURE_FORMATS = 0;

	        for (var i in this.caps) {
	          if (this.caps.hasOwnProperty(i)) {
	            this.caps[i] = this.glContext.getParameter(this.glContext[i]);
	          }
	        }

	        this.caps.EXTENSIONS = this.glContext.getSupportedExtensions();

	        var _glExtTexAniso = this.glContext.getExtension('EXT_texture_filter_anisotropic') || this.glContext.getExtension('MOZ_EXT_texture_filter_anisotropic') || this.glContext.getExtension('WEBKIT_EXT_texture_filter_anisotropic');

	        var _glExtCompTexS3TC = this.glContext.getExtension('WEBGL_compressed_texture_s3tc') || this.glContext.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || this.glContext.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');

	        var _glExtCompTexATC = this.glContext.getExtension('WEBGL_compressed_texture_atc') || this.glContext.getExtension('MOZ_WEBGL_compressed_texture_atc') || this.glContext.getExtension('WEBKIT_WEBGL_compressed_texture_atc');

	        var _glExtCompTexPVRTC = this.glContext.getExtension('WEBGL_compressed_texture_pvrtc') || this.glContext.getExtension('MOZ_WEBGL_compressed_texture_pvrtc') || this.glContext.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');

	        this.caps.maxAnisotropy = _glExtTexAniso ? this.glContext.getParameter(_glExtTexAniso.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;

	        this.caps.compressedTextureFormats = {};
	        this.caps.compressedTextureFormats.S3TC = _glExtCompTexS3TC ? true : false;
	        this.caps.compressedTextureFormats.ATC = _glExtCompTexATC ? true : false;
	        this.caps.compressedTextureFormats.PVRTC = _glExtCompTexPVRTC ? true : false;

	        for (var x in this.caps) {
	          _log2.default.info('GPU Capabilities: ' + x + ' : ' + this.caps[x]);
	        }
	      }
	    }
	  }, {
	    key: 'initDefaultRenderer',
	    value: function initDefaultRenderer() {

	      //TODO - fix devicePixelRatio on iOS.
	      if (Box3D.isIOS()) {
	        this.devicePixelRatio = 1.0;
	      }
	      if (Box3D.browserCaps.isWebGLEnabled()) {
	        this.threeRenderer = new _three2.default.WebGLRenderer({
	          canvas: this.canvas,
	          antialias: this.antialias,
	          preserveDrawingBuffer: this.preserveDrawingBuffer,
	          alpha: true,
	          precision: this.precision,
	          logarithmicDepthBuffer: this.logarithmicDepthBuffer
	        });
	        this.threeRenderer.setPixelRatio(this.devicePixelRatio !== 0 ? this.devicePixelRatio : window.devicePixelRatio);
	      } else {
	        _log2.default.warn('WebGL not supported so falling back to canvas renderer.');
	        this.threeRenderer = new _three2.default.CanvasRenderer();
	      }
	    }
	  }, {
	    key: 'addRenderPass',
	    value: function addRenderPass(pass, priority) {
	      if (priority < 0) {
	        this.renderPasses.splice(0, 0, {
	          pass: pass,
	          scene: pass.scene,
	          camera: pass.camera
	        });
	      } else {
	        this.renderPasses.push({
	          pass: pass,
	          scene: pass.scene,
	          camera: pass.camera
	        });
	      }
	      this.renderPasses.forEach(function (pass) {
	        pass.pass.clear = false;
	      });

	      this.renderPasses[0].pass.clear = true;
	      this.renderPasses[0].pass.clearColor = this.clearColor;
	      this.renderPasses[0].pass.clearAlpha = this.clearAlpha;
	      this.renderPassesNeedUpdate = true;
	    }
	  }, {
	    key: 'removeRenderPass',
	    value: function removeRenderPass(pass) {
	      var i,
	          foundIndex = -1;
	      for (i = 0; i < this.renderPasses.length; i++) {
	        if (this.renderPasses[i].pass === pass) {
	          foundIndex = i;
	          break;
	        }
	      }
	      if (foundIndex >= 0) {
	        this.renderPasses.splice(foundIndex, 1);
	      }
	      this.renderPassesNeedUpdate = true;
	    }
	  }, {
	    key: 'initRenderPasses',
	    value: function initRenderPasses() {
	      for (var i = 0; i < this.renderPasses.length; i++) {
	        this.renderPasses[i].pass.scene = this.renderPasses[i].scene;
	        this.renderPasses[i].pass.camera = this.renderPasses[i].camera;
	      }
	    }
	  }, {
	    key: 'applyRenderSettings',
	    value: function applyRenderSettings() {
	      if (this.threeRenderer) {
	        _lodash2.default.each(this, function (value, key) {
	          if (this.threeRenderer[key] !== undefined) {
	            this.threeRenderer[key] = value;
	          }
	        }, this);

	        if (this.devicePixelRatio === 0.0) {
	          this.devicePixelRatio = window.devicePixelRatio;
	          this.threeRenderer.setPixelRatio(window.devicePixelRatio);
	        } else {
	          this.threeRenderer.setPixelRatio(this.devicePixelRatio);
	        }

	        this.threeRenderer.setClearColor(this.clearColor, this.clearAlpha);

	        if (this.shadowsEnabled) {
	          this.threeRenderer.shadowMap.enabled = true;
	          this.threeRenderer.shadowMap.type = this.shadowType;
	          this.threeRenderer.shadowMap.cascade = this.shadowCascade;
	          this.threeRenderer.shadowMap.debug = this.shadowDebug;
	          this.threeRenderer.shadowMap.cullFace = this.shadowCullFace;
	        }

	        //This is a temporary check to force a maximum number of lights if the
	        //hardware supports a very low number of uniforms
	        if (this.getGPUCapability('MAX_FRAGMENT_UNIFORM_VECTORS') < 29 || Box3D.isMobile()) {
	          this.threeRenderer.maxDirLights = Math.min(this.maxDirLights, 1);
	          this.threeRenderer.maxPointLights = Math.min(this.maxPointLights, 1);
	          this.threeRenderer.maxShadows = Math.min(this.maxShadows, 1);
	        }
	      }
	    }

	    /**
	     * Given the name of a GPU device capability (e.g. MAX_VERTEX_TEXTURE_IMAGE_UNITS ),
	     * return the current system's value for this capability.
	     * @param  {String} cap The capability name
	     * @return {Integer}     The value of the capability
	     */

	  }, {
	    key: 'getGPUCapability',
	    value: function getGPUCapability(cap) {
	      return this.caps[cap];
	    }
	  }, {
	    key: 'supportsCompressedTextureS3TC',
	    value: function supportsCompressedTextureS3TC() {
	      return this.caps.compressedTextureFormats['S3TC'];
	    }
	  }, {
	    key: 'supportsCompressedTexturePVRTC',
	    value: function supportsCompressedTexturePVRTC() {
	      return this.caps.compressedTextureFormats['PVRTC'];
	    }
	  }, {
	    key: 'supportsCompressedTextureATC',
	    value: function supportsCompressedTextureATC() {
	      return this.caps.compressedTextureFormats['ATC'];
	    }
	  }, {
	    key: 'preRender',
	    value: function preRender() {
	      // this.newRenderStarted = true;
	      this.threeRenderer.setRenderTarget(null);
	      this.threeRenderer.clear(true, true, true);
	    }
	  }, {
	    key: 'postRender',
	    value: function postRender() {
	      this.renderPassesNeedUpdate = false;
	    }
	  }, {
	    key: 'renderView',
	    value: function renderView(scene, camera, options) {
	      var i = 0;
	      var screenDimensions;
	      options = options || {};
	      if (camera) {
	        if (options.enablePreRenderFunctions) {
	          this.getRuntime().trigger('preRenderView', scene, camera, options);
	        }
	        for (i = 0; i < this.renderPasses.length; i++) {
	          this.renderPasses[i].pass.scene = this.renderPasses[i].scene ? this.renderPasses[i].scene : scene;
	          this.renderPasses[i].pass.camera = this.renderPasses[i].camera ? this.renderPasses[i].camera : camera;
	        }

	        this.threeRenderer.getViewport(this.viewport);

	        if (options.composer && options.composer.customPasses.length) {
	          if (options.composer.renderPassesNeedUpdate || this.renderPassesNeedUpdate) {
	            var renderPasses = [];
	            for (i = 0; i < this.renderPasses.length; i++) {
	              renderPasses[i] = this.renderPasses[i].pass;
	            }
	            options.composer.passes = renderPasses.concat(options.composer.customPasses);
	            options.composer.renderPassesNeedUpdate = false;
	          }
	          //TODO - move this viewport stuff into RenderView?
	          var lastPass = options.composer.passes[options.composer.passes.length - 1];
	          lastPass.viewPort = options.viewPort;
	          if (lastPass.uniforms && lastPass.uniforms.opacity) {
	            lastPass.uniforms.opacity.value = options.opacity !== undefined ? options.opacity : 1.0;
	          }
	          screenDimensions = this.getAssetRegistry().Materials.sharedUniforms.screenDimensions;
	          screenDimensions.value.x = 0.0;
	          screenDimensions.value.y = 0.0;
	          screenDimensions.value.z = this.getCanvasWidth();
	          screenDimensions.value.w = this.getCanvasHeight();

	          lastPass.renderToScreen = options.renderToScreen !== undefined ? options.renderToScreen : true;
	          if (options.renderTarget) {
	            lastPass.renderToTexture = options.renderTarget;
	            lastPass.renderToScreen = false;
	          }
	          options.composer.render(options.delta !== undefined ? options.delta : 0.0167);
	        } else {

	          if (options.opacity !== undefined && (!options.viewPort || options.viewPort.width === this.getWidth() && options.viewPort.height === this.getHeight())) {
	            if (this.getCanvas().style.opacity != options.opacity) {
	              this.getCanvas().style.opacity = options.opacity;
	            }
	          } else if (this.getCanvas().style.opacity != 1) {
	            this.getCanvas().style.opacity = 1.0;
	          }

	          if (!options.renderTarget) {
	            this.threeRenderer.setRenderTarget(null);
	            this.threeRenderer.clear(options.clearColor, options.clearDepth, options.clearStencil);
	          } else {
	            this.threeRenderer.setRenderTarget(options.renderTarget);
	            this.threeRenderer.clear(options.clearColor, options.clearDepth, options.clearStencil);
	          }

	          if (options.viewPort) {
	            screenDimensions = this.getAssetRegistry().Materials.sharedUniforms.screenDimensions;
	            screenDimensions.value.x = options.viewPort.x;
	            screenDimensions.value.y = options.viewPort.y;
	            screenDimensions.value.z = options.viewPort.width * this.devicePixelRatio;
	            screenDimensions.value.w = options.viewPort.height * this.devicePixelRatio;
	            this.threeRenderer.setViewport(options.viewPort.x, options.viewPort.y, options.viewPort.width, options.viewPort.height);
	          }

	          var renderer = options.effect ? options.effect : this.threeRenderer;

	          for (i = 0; i < this.renderPasses.length; i++) {
	            if (!this.renderPasses[i].pass.scene) {
	              continue;
	            }
	            var prevOverrideMat = this.renderPasses[i].pass.scene.overrideMaterial;
	            if (this.renderPasses[i].pass.overrideMaterial) {
	              this.renderPasses[i].pass.scene.overrideMaterial = this.renderPasses[i].pass.overrideMaterial;
	            }

	            if (options.renderTarget) {
	              renderer.render(this.renderPasses[i].pass.scene, this.renderPasses[i].pass.camera, options.renderTarget, false);
	            } else {
	              renderer.render(this.renderPasses[i].pass.scene, this.renderPasses[i].pass.camera);
	            }

	            if (this.renderPasses[i].pass.overrideMaterial) {
	              this.renderPasses[i].pass.scene.overrideMaterial = prevOverrideMat;
	            }
	          }

	          if (options.viewPort) {
	            screenDimensions.value.x = this.viewport.x;
	            screenDimensions.value.y = this.viewport.y;
	            screenDimensions.value.z = this.viewport.z * this.devicePixelRatio;
	            screenDimensions.value.w = this.viewport.w * this.devicePixelRatio;

	            this.threeRenderer.setViewport(this.viewport.x, this.viewport.y, this.viewport.z, this.viewport.w);
	          }
	        }

	        this.getRuntime().trigger('postRenderView', scene, camera, options);
	      }
	    }

	    /**
	     * Returns the size of the render target in device-independent pixels (dips)
	     * @method getWidth
	     * @return {Int} The width of the render target.
	     */

	  }, {
	    key: 'getWidth',
	    value: function getWidth() {
	      return this.canvas.clientWidth;
	    }

	    /**
	     * Returns the size of the render target in device-independent pixels (dips)
	     * @method getHeight
	     * @return {Int} The height of the render target.
	     */

	  }, {
	    key: 'getHeight',
	    value: function getHeight() {
	      return this.canvas.clientHeight;
	    }
	  }, {
	    key: 'getCanvasWidth',
	    value: function getCanvasWidth() {
	      return this.canvas.width;
	    }
	  }, {
	    key: 'getCanvasHeight',
	    value: function getCanvasHeight() {
	      return this.canvas.height;
	    }
	  }, {
	    key: 'getCanvas',
	    value: function getCanvas() {
	      return this.threeRenderer.domElement;
	    }
	  }, {
	    key: 'resize',
	    value: function resize() {

	      if (this.canvas.parentElement) {
	        var w = this.canvas.parentElement.clientWidth;
	        var h = this.canvas.parentElement.clientHeight;

	        this.threeRenderer.setSize(w, h, true);
	      }
	    }
	  }]);

	  return DefaultRenderer;
	}(_Box3DComponent3.default);

	exports.default = DefaultRenderer;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid rotate_component
	 *
	 * @vname Rotate
	 *
	 * @vdescription
	 * A simple component to rotate an object.
	 *
	 * @vcategory Animation
	 *
	 * @vfilter object
	 */

	/**
	 * @vattr Boolean autoRotate  {
	 *   description: 'Automatically start the rotation upon load.',
	 *   default: true,
	 * }
	 *
	 * @vattr Boolean previewRotation {
	 *   description: 'Show the rotation in the editor.',
	 *   default: true
	 * }
	 *
	 * @vattr Vector3 rotation {
	 *   description: 'Amount of rotation per second about the x, y and z axes.',
	 *   default: { x: 0, y: 0.5, z: 0 }
	 * }
	 *
	 * @vattr Boolean local {
	 *   description: 'Rotate relative to the local quaternion of the object. If false, the rotation will be relative to the world.',
	 *   default: false
	 * }
	 */

	/**
	 * @vevent local startRotate {
	 *   action: true,
	 *   category: 'Rotate',
	 *   parameters: []
	 * }
	 *
	 * @vevent local stopRotate {
	 *   action: true,
	 *   category: 'Rotate',
	 *   parameters: []
	 * }
	 *
	 * @vevent local toggleRotate {
	 *   action: true,
	 *   category: 'Rotate',
	 *   parameters: []
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var tmpVec = new _three2.default.Vector3(),
	    tmpEuler = new _three2.default.Euler();

	var Rotate = function (_Box3DComponent) {
	  _inherits(Rotate, _Box3DComponent);

	  function Rotate() {
	    _classCallCheck(this, Rotate);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Rotate).call(this));

	    _this.quaternion = new _three2.default.Quaternion();
	    _this.currentGlobalQuaternion = new _three2.default.Quaternion();
	    return _this;
	  }

	  _createClass(Rotate, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.getRuntime().on('update', this.update, this);
	      this.getEntity().once('loadBase', this.entityCreated, this);
	      this.rotate = this.previewRotation;
	      if (this.getEntity().isBaseLoaded()) {
	        this.entityCreated();
	      }
	      this.on('enable', this.onEnable, this);
	      this.on('disable', this.onDisable, this);
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {
	      this.getRuntime().off('update', this.update, this);
	      this.getRuntimeData().position.copy(this.getEntity().getPosition());
	      this.getRuntimeData().quaternion.copy(this.getEntity().getQuaternion());
	      this.off('enable', this.onEnable, this);
	      this.off('disable', this.onDisable, this);
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.rotate = this.autoRotate;

	      this.getEntity().on('startRotate', this.onStartRotate, this);
	      this.getEntity().on('stopRotate', this.onStopRotate, this);
	      this.getEntity().on('toggleRotate', this.onToggleRotate, this);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.getEntity().off('startRotate', this.onStartRotate, this);
	      this.getEntity().off('stopRotate', this.onStopRotate, this);
	      this.getEntity().off('toggleRotate', this.onToggleRotate, this);
	    }
	  }, {
	    key: 'onEnable',
	    value: function onEnable() {
	      this.rotate = this.autoRotate;
	      this.initRotation();
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      this.getRuntimeData().position.copy(this.getEntity().getPosition());
	      this.getRuntimeData().quaternion.copy(this.getEntity().getQuaternion());
	      this.rotate = false;
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      if (changes.indexOf('rotation') && !_lodash2.default.isEmpty(this.rotation)) {
	        this.initRotation();
	      }
	      if (changes.indexOf('previewRotation') !== -1) {
	        this.rotate = this.previewRotation;
	        this.initRotation();
	      }
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      this.initialQuaternion = new _three2.default.Quaternion();
	      this.initialQuaternion.copy(this.getRuntimeData().quaternion);
	      this.initRotation();
	    }
	  }, {
	    key: 'initRotation',
	    value: function initRotation() {
	      tmpEuler.set(this.rotation.x, this.rotation.y, this.rotation.z);
	      if (this.local) {
	        this.getRuntimeData().quaternion.copy(this.initialQuaternion);
	      } else {
	        this.currentGlobalQuaternion.set(0, 0, 0, 1);
	      }
	    }
	  }, {
	    key: 'update',
	    value: function update(delta) {
	      if (this.rotate && this.isEnabled()) {
	        this.getRuntime().needsRender = true;
	        if (this.getRuntimeData() && this.rotation) {
	          tmpVec.copy(this.rotation).multiplyScalar(delta);
	          tmpEuler.set(tmpVec.x, tmpVec.y, tmpVec.z);
	          this.quaternion.setFromEuler(tmpEuler);
	          if (this.local) {
	            this.getRuntimeData().quaternion.multiply(this.quaternion);
	          } else {
	            this.currentGlobalQuaternion.multiply(this.quaternion);
	            this.getRuntimeData().quaternion.multiplyQuaternions(this.currentGlobalQuaternion, this.initialQuaternion);
	          }
	        }
	      }
	    }
	  }, {
	    key: 'onStartRotate',
	    value: function onStartRotate() {
	      this.rotate = true;
	    }
	  }, {
	    key: 'onStopRotate',
	    value: function onStopRotate() {
	      this.rotate = false;
	    }
	  }, {
	    key: 'onToggleRotate',
	    value: function onToggleRotate() {
	      this.rotate = !this.rotate;
	    }
	  }]);

	  return Rotate;
	}(_Box3DComponent3.default);

	exports.default = Rotate;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid loader_component
	 * @vname Scene Loader
	 * @vdescription A simple component to load a scene and display progress for it.
	 * @vcategory Loading
	 * @vreserved
	 * @vfilter Application
	 * @vattr Asset scene { description: 'The scene to load.', filter: { scene: true } }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SceneLoader = function (_Box3DComponent) {
	  _inherits(SceneLoader, _Box3DComponent);

	  function SceneLoader() {
	    _classCallCheck(this, SceneLoader);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SceneLoader).call(this));

	    _this.m_bHierarchy = false;
	    _this.m_bDependencies = false;
	    _this.scene = undefined;
	    _this.loadTime = 0;
	    return _this;
	  }

	  _createClass(SceneLoader, [{
	    key: 'init',
	    value: function init() {
	      if (this.scene) {
	        this.scene.once('load', this.onLoadComplete, this);
	      }
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {}
	  }, {
	    key: 'update',
	    value: function update(delta) {
	      this.loadTime += delta;
	    }

	    //fired when everything has been loaded

	  }, {
	    key: 'onLoadComplete',
	    value: function onLoadComplete() {
	      var loadBar = document.getElementById('load-bar');
	      if (document.getElementById('load-scene')) {
	        if (loadBar) {
	          var loadBars = document.querySelectorAll('.load-bar');
	          [].forEach.call(loadBars, function (el) {
	            el.style['-webkit-transition'] = 'width 0s ease';
	            el.style['-moz-transition'] = 'width 0s ease';
	          });
	          loadBar.style.width = 100 + '%';
	        }

	        /******** show the app and remove the loading scene -  CUSTOM CODE ******/
	        var that = this;
	        setTimeout(function () {
	          document.body.removeChild(document.getElementById('load-scene'));
	          _log2.default.info('Scene load completed in ' + that.loadTime.toFixed(2) + ' seconds.');
	          parent.postMessage({
	            command: 'loadComplete',
	            params: []
	          }, '*');
	        }, 100);
	        /**************************************************************************************/
	      }

	      this.getGlobalEvents().trigger('sceneLoadComplete', this.scene);
	    }
	  }]);

	  return SceneLoader;
	}(_Box3DComponent3.default);

	exports.default = SceneLoader;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid simplex_noise_component
	 * @vname Simplex Noise Generator
	 * @vcategory Rendering
	 * @vfilter renderTexture2D
	 * @vattr Vector4 layerAmplitude { default: { x: 0.5, y: 0.4, z: 0.3, w: 0.125 } }
	 * @vattr Vector4 layerScale { default: { x: 0.5, y: 2.0, z: 3.0, w: 4.0 } }
	 * @vattr Vector2 scale { default: { x: 1.0, y: 1.0 } }
	 * @vattr Vector2 offset { default: { x: 0.0, y: 0.0 } }
	 * @vattr Boolean autoLoad { default: true }
	 * @vevent local renderNoise { action: true, category: 'Rendering', parameters: []}
	 * @vevent local changeNoiseValues {
	 *   action: true,
	 *   category: 'Rendering',
	 *   parameters: [
	 *     {'name': 'layerAmplitude', 'type': 'v4', 'description': '', default: { x: 0.5, y: 0.4, z: 0.3, w: 0.125 }},
	 *     {'name': 'layerScale', 'type': 'v4', 'description': '', default: { x: 0.5, y: 2.0, z: 3.0, w: 4.0 }},
	 *     {'name': 'scale', 'type': 'v2', 'description': '', default: { x: 1.0, y: 1.0 }},
	 *     {'name': 'offset', 'type': 'v2', 'description': '', default: { x: 0.0, y: 0.0 }}
	 *   ]
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var VertexShader = ['varying vec2 vUv;', 'uniform vec2 scale;', 'uniform vec2 offset;', 'void main() {', 'vUv = uv * scale + offset;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n');

	var FragmentShader = [
	//
	// Description : Array and textureless GLSL 3D simplex noise function.
	//      Author : Ian McEwan, Ashima Arts.
	//  Maintainer : ijm
	//     Lastmod : 20110409 (stegu)
	//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
	//               Distributed under the MIT License. See LICENSE file.
	//
	//'precision lowp float;',
	'uniform float time;', 'uniform vec4 layerAmplitude;', 'uniform vec4 layerScale;', 'varying vec2 vUv;', 'precision highp float;', 'vec4 permute( vec4 x ) {', 'return mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );', '}', 'vec4 taylorInvSqrt( vec4 r ) {', 'return 1.79284291400159 - 0.85373472095314 * r;', '}', 'float snoise( vec3 v ) {', 'vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );', 'const vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );',

	// First corner

	'vec3 i  = floor( v + dot( v, C.yyy ) );', 'vec3 x0 = v - i + dot( i, C.xxx );',

	// Other corners

	'vec3 g = step( x0.yzx, x0.xyz );', 'vec3 l = 1.0 - g;', 'vec3 i1 = min( g.xyz, l.zxy );', 'vec3 i2 = max( g.xyz, l.zxy );', 'vec3 x1 = x0 - i1 + 1.0 * C.xxx;', 'vec3 x2 = x0 - i2 + 2.0 * C.xxx;', 'vec3 x3 = x0 - 1. + 3.0 * C.xxx;',

	// Permutations

	'i = mod( i, 289.0 );', 'vec4 p = permute( permute( permute(', 'i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )', '+ i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )', '+ i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );',

	// Gradients
	// ( N*N points uniformly over a square, mapped onto an octahedron.)

	'float n_ = 1.0 / 7.0; // N=7', 'vec3 ns = n_ * D.wyz - D.xzx;', 'vec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)', 'vec4 x_ = floor( j * ns.z );', 'vec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)', 'vec4 x = x_ *ns.x + ns.yyyy;', 'vec4 y = y_ *ns.x + ns.yyyy;', 'vec4 h = 1.0 - abs( x ) - abs( y );', 'vec4 b0 = vec4( x.xy, y.xy );', 'vec4 b1 = vec4( x.zw, y.zw );', 'vec4 s0 = floor( b0 ) * 2.0 + 1.0;', 'vec4 s1 = floor( b1 ) * 2.0 + 1.0;', 'vec4 sh = -step( h, vec4( 0.0 ) );', 'vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;', 'vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;', 'vec3 p0 = vec3( a0.xy, h.x );', 'vec3 p1 = vec3( a0.zw, h.y );', 'vec3 p2 = vec3( a1.xy, h.z );', 'vec3 p3 = vec3( a1.zw, h.w );',

	// Normalise gradients

	'vec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), ', '    dot( p2, p2 ), dot( p3, p3 ) ) );', 'p0 *= norm.x;', 'p1 *= norm.y;', 'p2 *= norm.z;', 'p3 *= norm.w;',

	// Mix final noise value

	'vec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), ', '    dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );', 'm = m * m;', 'return 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),', 'dot( p2, x2 ), dot( p3, x3 ) ) );', '}', 'float surface3( vec3 coord ) {', 'float n = 0.0;', 'n += layerAmplitude.x * abs( snoise( coord * layerScale.x ) );', 'n += layerAmplitude.y * abs( snoise( coord * layerScale.y ) );', 'n += layerAmplitude.z * abs( snoise( coord * layerScale.z ) );', 'n += layerAmplitude.w * abs( snoise( coord * layerScale.w ) );', 'return n;', '}', 'void main( void ) {', 'vec3 coord = vec3( vUv, -time );', 'float n = surface3( coord );', 'gl_FragColor = vec4( vec3( n, n, n ), 1.0 );', '}'].join('\n');

	var SimplexNoiseRenderer = function (_Box3DComponent) {
	  _inherits(SimplexNoiseRenderer, _Box3DComponent);

	  function SimplexNoiseRenderer() {
	    _classCallCheck(this, SimplexNoiseRenderer);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SimplexNoiseRenderer).call(this));

	    _this.m_Uniforms = null;
	    _this.m_NoiseMat = null;
	    return _this;
	  }

	  _createClass(SimplexNoiseRenderer, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.init();
	      this.getEntity().on('loadBase', this.entityCreated, this);
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {
	      this.getEntity().off('loadBase', this.entityCreated, this);
	      this.shutdown();
	    }
	  }, {
	    key: 'init',
	    value: function init() {

	      this.getEntity().on('changeNoiseValues', this.changeNoiseValues, this);
	      this.getEntity().on('renderNoise', this.renderNoise, this);
	      this.m_Uniforms = {
	        time: {
	          type: 'f',
	          value: 1.0
	        },
	        scale: {
	          type: 'v2',
	          value: this.scale
	        },
	        offset: {
	          type: 'v2',
	          value: this.offset
	        },
	        layerAmplitude: {
	          type: 'v4',
	          value: this.layerAmplitude
	        },
	        layerScale: {
	          type: 'v4',
	          value: this.layerScale
	        }
	      };

	      //create noise material
	      this.m_NoiseMat = new _three2.default.ShaderMaterial({
	        uniforms: this.m_Uniforms,
	        vertexShader: VertexShader,
	        fragmentShader: FragmentShader
	      });

	      this.cameraRTT = new _three2.default.OrthographicCamera(-0.5, 0.5, 0.5, -0.5, -10, 10);
	      this.cameraRTT.position.z = 1;
	      this.sceneRTT = new _three2.default.Scene();
	      this.sceneRTT.add(this.cameraRTT);

	      this.quadGeo = new _three2.default.PlaneGeometry(1, 1);
	      this.quadRTT = new _three2.default.Mesh(this.quadGeo, this.m_NoiseMat);
	      this.quadRTT.position.z = -5;
	      this.sceneRTT.add(this.quadRTT);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.getEntity().off('changeNoiseValues', this.changeNoiseValues, this);
	      this.getEntity().off('renderNoise', this.renderNoise, this);
	      this.sceneRTT.remove(this.cameraRTT);
	      this.sceneRTT.remove(this.quadRTT);
	      this.sceneRTT = undefined;
	      this.quadRTT = undefined;
	      this.quadGeo.dispose();
	      this.m_NoiseMat.dispose();
	      this.m_Uniforms = undefined;
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      if (this.autoLoad) {
	        this.renderNoise();
	      }
	    }
	  }, {
	    key: 'renderNoise',
	    value: function renderNoise() {
	      this.getThreeRenderer().render(this.sceneRTT, this.cameraRTT, this.getThreeObject(), true);
	      this.getThreeRenderer().setRenderTarget(null);
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(attributes) {
	      if (attributes.indexOf('scale') !== -1 && this.scale.x !== undefined) {
	        this.m_Uniforms.scale.value.x = this.scale.x;
	        this.m_Uniforms.scale.value.y = this.scale.y;
	      }
	      if (attributes.indexOf('offset') !== -1 && attributes.offset.x !== undefined) {
	        this.m_Uniforms.offset.value.x = this.offset.x;
	        this.m_Uniforms.offset.value.y = this.offset.y;
	      }
	      if (attributes.indexOf('layerScale') !== -1 && this.layerScale.x !== undefined) {
	        this.m_Uniforms.layerScale.value.x = this.layerScale.x;
	        this.m_Uniforms.layerScale.value.y = this.layerScale.y;
	        this.m_Uniforms.layerScale.value.z = this.layerScale.z;
	        this.m_Uniforms.layerScale.value.w = this.layerScale.w;
	      }
	      if (attributes.indexOf('layerAmplitude') !== -1 && this.layerAmplitude.x !== undefined) {
	        this.m_Uniforms.layerAmplitude.value.x = this.layerAmplitude.x;
	        this.m_Uniforms.layerAmplitude.value.y = this.layerAmplitude.y;
	        this.m_Uniforms.layerAmplitude.value.z = this.layerAmplitude.z;
	        this.m_Uniforms.layerAmplitude.value.w = this.layerAmplitude.w;
	      }
	      this.renderNoise();
	    }
	  }], [{
	    key: 'changeNoiseValues',
	    value: function changeNoiseValues(layerAmplitude, layerScale, scale, offset) {
	      this.layerAmplitude = layerAmplitude;
	      this.layerScale = layerScale;
	      this.scale = scale;
	      this.offset = offset;
	      this.attributesChanged(['layerAmplitude', 'layerScale', 'scale', 'offset']);
	    }
	  }]);

	  return SimplexNoiseRenderer;
	}(_Box3DComponent3.default);

	exports.default = SimplexNoiseRenderer;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/**
	 * @vid skybox_renderer
	 * @vname Skybox
	 * @vcategory Rendering
	 * @vfilter scene
	 * @vattr Float size { 'default' : 100000, 'min' : 1.0, 'max' : 1000000.0 }
	 * @vattr Boolean leftEye { 'default' : true }
	 * @vattr Asset skyboxTexture {
	 *   'description': '', 'type': 'asset',
	 *   'filter': {
	 *     'textureCube': true,
	 *     'texture2D': true,
	 *     'renderTexture2D': true,
	 *     'renderTextureCube': true
	 *   },
	 *   'default': 'white_cube'
	 * }
	 * @vattr Float skyboxFogPower { 'description': 'Controls the rate that fog decreases with height in the skybox.', 'default': 0.8, 'min': 0.0, 'max': 1.0 }
	 * @vattr Float skyboxFogScale { 'description': 'Uniformly scales the amount of fog in the skybox.', 'default': 0.5, 'min': 0.0, 'max': 1.0 }
	 * @vevent local setSkyboxTexture {
	 *   action: true,
	 *   parameters: [
	 *     {
	 *       name: 'texture',
	 *       type: 'asset',
	 *       filter: {
	 *         textureCube: true,
	 *         texture2D: true,
	 *         renderTexture2D: true,
	 *         renderTextureCube: true
	 *       },
	 *      description: 'The new skybox texture to use.',
	 *      default: null
	 *     }
	 *   ]
	 * }
	 */
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	var _BaseTextureAsset = __webpack_require__(19);

	var _BaseTextureAsset2 = _interopRequireDefault(_BaseTextureAsset);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SkyboxRenderer = function (_Box3DComponent) {
	  _inherits(SkyboxRenderer, _Box3DComponent);

	  /**
	   * A skybox component class.
	   *
	   * @class SkyboxRenderer
	   */

	  function SkyboxRenderer() {
	    _classCallCheck(this, SkyboxRenderer);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SkyboxRenderer).call(this));

	    _this.skyboxScene = null;
	    _this.skyboxMesh = null;
	    _this.skyboxGeometry = null;
	    _this.skyboxMaterialCube = null;
	    _this.skyboxMaterial2D = null;
	    _this.skyboxUniforms = null;
	    _this.skyboxVShader = null;
	    _this.skyboxPShader = null;
	    _this.renderer = null;

	    _this.skyboxTexture = null;
	    _this.size = 10000.0;
	    _this.isEditor = false;
	    return _this;
	  }

	  _createClass(SkyboxRenderer, [{
	    key: 'init',
	    value: function init() {

	      this.renderer = this.getThreeRenderer();

	      this.createGeometry();

	      this.createMaterial();
	      this.initTexture();

	      this.mainScene = this.getEntity().getParentAsset();

	      this.on('enable', this.onEnable, this);
	      this.on('disable', this.onDisable, this);
	      this.getEntity().on('setSkyboxTexture', this.setSkyboxTexture, this);
	      this.getRuntime().on('rebuildMaterials', this.rebuildMaterials, this);
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.off('enable', this.onEnable, this);
	      this.off('disable', this.onDisable, this);
	      this.getRuntime().off('rebuildMaterials', this.rebuildMaterials, this);
	      this.getEntity().off('setSkyboxTexture', this.setSkyboxTexture, this);
	      if (this.skyboxScene) {
	        this.skyboxScene.remove(this.skyboxMesh);
	      }
	      this.skyboxGeometry.dispose();
	      this.skyboxMaterialCube.dispose();
	      this.skyboxMaterial2D.dispose();
	      this.skyboxScene = null;
	      this.skyboxMesh = null;
	      this.skyboxGeometry = null;
	      this.skyboxMaterialCube = null;
	      this.skyboxMaterial2D = null;
	      this.skyboxUniforms = null;
	      this.skyboxTexture = null;
	    }
	  }, {
	    key: 'createScene',
	    value: function createScene() {
	      this.skyboxScene = this.getRuntimeData();
	      // this.skyboxScene.matrixAutoUpdate = false;
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged(changed) {
	      if (changed.indexOf('skyboxTexture') !== -1) {
	        this.initTexture();
	        this.skyboxMesh.material = this.currentMaterial;
	      }
	      if (changed.indexOf('color') !== -1) {
	        this.skyboxUniforms.color.value = this.color;
	      }
	      if (changed.indexOf('skyboxFogScale') !== -1) {
	        this.skyboxMaterialCube.uniforms.skyboxFogScale.value = this.skyboxFogScale;
	        this.skyboxMaterial2D.uniforms.skyboxFogScale.value = this.skyboxFogScale;
	      }
	      if (changed.indexOf('skyboxFogPower') !== -1) {
	        this.skyboxMaterialCube.uniforms.skyboxFogPower.value = this.skyboxFogPower;
	        this.skyboxMaterial2D.uniforms.skyboxFogPower.value = this.skyboxFogPower;
	      }
	      if (this.skyboxScene && this.mainScene.runtimeData && this.mainScene.runtimeData.fog) {
	        this.skyboxUniforms.fogColor.value = this.mainScene.runtimeData.fog.color;
	      }
	      if (changed.indexOf('size') !== -1) {
	        if (this.skyboxMesh) {
	          this.skyboxScene.remove(this.skyboxMesh);
	          this.skyboxMesh.geometry = undefined;
	          this.skyboxGeometry.dispose();
	          this.createGeometry();
	          this.createMesh();
	        }
	      }
	      if (changed.indexOf('leftEye') !== -1 && this.skyboxTexture) {
	        this.currentMaterial.defines.STEREO_EYE = this.leftEye ? 'STEREO_EYE_LEFT' : 'STEREO_EYE_RIGHT';
	        this.currentMaterial.defines.LAYOUT = _BaseTextureAsset2.default.LAYOUT[this.skyboxTexture.getProperty('layout')];
	        this.currentMaterial.needsUpdate = true;
	      }
	    }
	  }, {
	    key: 'onEnable',
	    value: function onEnable() {
	      if (this.skyboxScene) {
	        this.skyboxScene.add(this.skyboxMesh);
	        if (this.skyboxTexture && !this.skyboxTexture.isLoaded()) {
	          this.skyboxTexture.load();
	        }
	      }
	    }
	  }, {
	    key: 'onDisable',
	    value: function onDisable() {
	      if (this.skyboxScene) {
	        this.skyboxScene.remove(this.skyboxMesh);
	      }
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      this.createScene();
	      this.createMesh();
	      this.rebuildMaterials();
	    }
	  }, {
	    key: 'createGeometry',
	    value: function createGeometry() {
	      this.skyboxGeometry = new _three2.default.BoxGeometry(this.size, this.size, this.size, 32, 32, 32);
	      this.skyboxGeometry.dynamic = false;
	    }
	  }, {
	    key: 'createMesh',
	    value: function createMesh() {
	      this.skyboxMesh = new _three2.default.Mesh(this.skyboxGeometry, this.currentMaterial);
	      this.skyboxMesh.frustumCulled = false;
	      this.skyboxMesh.castShadow = false;
	      this.skyboxMesh.receiveShadow = false;
	      this.skyboxMesh.matrixAutoUpdate = true;
	      this.skyboxMesh.name = 'Skybox';
	      if (this.isEnabled()) {
	        this.skyboxScene.add(this.skyboxMesh);
	        this.skyboxMesh.updateMatrix();
	      }
	    }
	  }, {
	    key: 'initTexture',
	    value: function initTexture() {
	      var _this2 = this;

	      if (!this.skyboxTexture) {
	        this.currentMaterial = this.skyboxMaterialNoTex;
	        this.currentMaterial.needsUpdate = true;
	      } else {
	        if (this.skyboxTexture.type === 'textureCube' || this.skyboxTexture.type === 'renderTextureCube') {
	          this.currentMaterial = this.skyboxMaterialCube;
	        } else {
	          this.currentMaterial = this.skyboxMaterial2D;
	        }

	        if (this.skyboxTexture.getProperty('layout') !== this.currentMaterial.defines.LAYOUT) {
	          // Based on the layout being used and the eye that this skybox represents, use only the
	          // appropriate part of the texture.
	          this.currentMaterial.defines.STEREO_EYE = this.leftEye ? 'STEREO_EYE_LEFT' : 'STEREO_EYE_RIGHT';
	          this.currentMaterial.defines.LAYOUT = _BaseTextureAsset2.default.LAYOUT[this.skyboxTexture.getProperty('layout')];
	          this.currentMaterial.needsUpdate = true;
	        }

	        this.skyboxTexture.when('load', function () {
	          _this2.skyboxUniforms.environmentTexture.value = _this2.skyboxTexture.runtimeData;
	          _this2.currentMaterial.needsUpdate = true;
	        }, this);
	        if (this.isEnabled()) {
	          this.skyboxTexture.load();
	        }
	      }
	    }
	  }, {
	    key: 'setSkyboxTexture',
	    value: function setSkyboxTexture(textureId) {
	      this.skyboxTexture = this.getAssetRegistry().Textures.getAssetById(textureId);
	      this.initTexture();
	      this.skyboxMesh.material = this.currentMaterial;
	    }
	  }, {
	    key: 'rebuildMaterials',
	    value: function rebuildMaterials() {
	      if (this.skyboxMaterialCube) {
	        this.skyboxMaterialCube.needsUpdate = true;
	      }
	      if (this.skyboxMaterial2D) {
	        this.skyboxMaterial2D.needsUpdate = true;
	      }
	      if (this.skyboxMaterialNoTex) {
	        this.skyboxMaterialNoTex.needsUpdate = true;
	      }
	    }
	  }, {
	    key: 'createMaterial',
	    value: function createMaterial() {
	      var _this3 = this;

	      this.skyboxUniforms = _three2.default.UniformsUtils.merge([{
	        fogColor: {
	          type: 'c',
	          value: new _three2.default.Color()
	        }
	      }, {
	        skyboxFogPower: {
	          type: 'f',
	          value: this.skyboxFogPower
	        }
	      }, {
	        skyboxFogScale: {
	          type: 'f',
	          value: this.skyboxFogScale
	        }
	      }, {
	        environmentTexture: {
	          type: 't',
	          value: null
	        }
	      }]), this.skyboxVShader = ['varying vec3 vCameraVector;', 'void main() {',
	      // 'vec4 worldPosition = modelMatrix * vec4( position, 1.0 );',
	      'vCameraVector = (modelMatrix * vec4( position, 1.0 )).xyz;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n');

	      this.skyboxPShader = ['#ifdef USE_CUBEMAP', 'uniform samplerCube environmentTexture;', '#elif defined(USE_2DMAP)', 'uniform sampler2D environmentTexture;', '#endif', 'const float PI = 3.14159265358979;', 'varying vec3 vCameraVector;', 'void main() {', 'vec3 cameraVecN = normalize( vCameraVector );', '#ifdef USE_CUBEMAP', 'vec4 environmentColor = textureCube(environmentTexture,' + ' vec3(cameraVecN.x, cameraVecN.yz));', '#elif defined(USE_2DMAP)', 'vec2 sampleUV;', 'sampleUV = vec2(atan(cameraVecN.z, cameraVecN.x) + PI, acos(cameraVecN.y));', 'sampleUV = sampleUV / vec2(2.0 * PI, PI);', '#if (LAYOUT == LAYOUT_STEREO2DOVERUNDER)', 'sampleUV.y *= 0.5;', '#if (STEREO_EYE != STEREO_EYE_LEFT)', 'sampleUV.y += 0.5;', '#endif', '#endif', 'vec4 environmentColor = texture2D( environmentTexture, sampleUV );', '#else', 'vec4 environmentColor = vec4(1.0);', '#endif', 'gl_FragColor = vec4( environmentColor.xyz, 1.0 );', '}'].join('\n');

	      this.skyboxMaterialCube = new _three2.default.ShaderMaterial({
	        vertexShader: this.skyboxVShader,
	        fragmentShader: this.skyboxPShader,
	        uniforms: this.skyboxUniforms,
	        side: _three2.default.BackSide,
	        depthTest: false,
	        depthWrite: false,
	        defines: {
	          USE_CUBEMAP: ''
	        }
	      });

	      this.skyboxMaterial2D = new _three2.default.ShaderMaterial({
	        vertexShader: this.skyboxVShader,
	        fragmentShader: this.skyboxPShader,
	        uniforms: this.skyboxUniforms,
	        side: _three2.default.BackSide,
	        depthTest: false,
	        depthWrite: false,
	        defines: {
	          USE_2DMAP: ''
	        }
	      });

	      _lodash2.default.each(_BaseTextureAsset2.default.LAYOUT, function (value, name) {
	        _this3.skyboxMaterialCube.defines['LAYOUT_' + name.toUpperCase()] = value;
	        _this3.skyboxMaterial2D.defines['LAYOUT_' + name.toUpperCase()] = value;
	      }, this);

	      this.skyboxMaterial2D.defines.LAYOUT = 'LAYOUT_NORMAL';
	      this.skyboxMaterialCube.defines.LAYOUT = 'LAYOUT_NORMAL';
	      this.skyboxMaterial2D.defines.STEREO_EYE_LEFT = '1';
	      this.skyboxMaterial2D.defines.STEREO_EYE_RIGHT = '2';
	      this.skyboxMaterialCube.defines.STEREO_EYE_LEFT = '1';
	      this.skyboxMaterialCube.defines.STEREO_EYE_RIGHT = '2';
	      this.skyboxMaterial2D.defines.STEREO_EYE = 'STEREO_EYE_LEFT';
	      this.skyboxMaterialCube.defines.STEREO_EYE = 'STEREO_EYE_LEFT';

	      this.skyboxMaterialNoTex = new _three2.default.ShaderMaterial({
	        vertexShader: this.skyboxVShader,
	        fragmentShader: this.skyboxPShader,
	        uniforms: this.skyboxUniforms,
	        side: _three2.default.BackSide,
	        depthTest: false,
	        depthWrite: false
	      });

	      this.skyboxMaterialCube.precision = 'highp';
	    }
	  }]);

	  return SkyboxRenderer;
	}(_Box3DComponent3.default);

	exports.default = SkyboxRenderer;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable */
	/*
	@vid text_renderer_component
	@vname Text Renderer
	@vdescription Render the desired text to the texture we are attached to
	@vfilter renderTexture2D
	@vcategory Text
	@vattr string text { default : 'My Text', description : 'Text you want to display' }
	@vattr color fontColor { default : {r: 1, g: 1, b:1}, description : 'Color of the text'}
	@vattr string fontFamily { default : 'Calibri', description : 'Font family to render'}
	@vattr integer pointSize { default : 48, description : 'Font size', min : 2, max : 100 }
	*/
	/* eslint-enable */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TextRenderer = function (_Box3DComponent) {
	  _inherits(TextRenderer, _Box3DComponent);

	  function TextRenderer() {
	    _classCallCheck(this, TextRenderer);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextRenderer).call(this));

	    _this.m_Material = null;
	    _this.m_Canvas = null;
	    _this.m_Mesh = null;
	    _this.m_RTCam = null;
	    _this.m_RTScene = null;
	    return _this;
	  }

	  _createClass(TextRenderer, [{
	    key: 'editorInit',
	    value: function editorInit() {
	      this.init();
	      this.getEntity().once('load', this.assetLoaded, this);
	    }
	  }, {
	    key: 'editorShutdown',
	    value: function editorShutdown() {
	      this.shutdown();
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.createLabel();
	    }
	  }, {
	    key: 'assetLoaded',
	    value: function assetLoaded() {
	      this.renderText();
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      this.m_Material.dispose();
	      this.m_Geom.dispose();
	      this.m_Mesh = null;
	    }
	  }, {
	    key: 'createLabel',
	    value: function createLabel() {

	      var text = this.text,
	          size = this.pointSize,
	          color = '#' + this.fontColor.getHexString();

	      if (!this.m_Canvas) {
	        this.m_Canvas = document.createElement('canvas');
	      }

	      var fontType = size + 'pt ' + this.fontFamily;

	      var context = this.m_Canvas.getContext('2d');
	      context.font = fontType;

	      this.m_Canvas.width = this.getEntity().getWidth();
	      this.m_Canvas.height = this.getEntity().getHeight();

	      context.font = size + 'pt ' + this.fontFamily;
	      context.textAlign = 'left';
	      context.textBaseline = 'hanging';
	      context.fillStyle = color;

	      this.wrapAndRender(context, text, this.pointSize * 0.5, this.pointSize * 0.5, this.m_Canvas.width - this.pointSize * 0.5, this.pointSize * 1.5);

	      /* CONVERT TO SOMETHING Box3d CAN USE */
	      var texture = new _three2.default.Texture(this.m_Canvas);
	      texture.mapping = null;
	      texture.generateMipmaps = true;
	      texture.magFilter = _three2.default.LinearFilter;
	      texture.minFilter = _three2.default.LinearMipMapLinearFilter;
	      texture.needsUpdate = true;

	      if (this.m_Material) this.m_Material.dispose();
	      this.m_Material = new _three2.default.MeshBasicMaterial({
	        map: texture
	      });
	      this.m_Material.side = _three2.default.DoubleSide;

	      if (this.m_Geom) this.m_Geom.dispose();
	      this.m_Geom = new _three2.default.PlaneGeometry(this.m_Canvas.width, this.m_Canvas.height);

	      if (this.m_Mesh) {
	        this.m_RTScene.remove(this.m_Mesh);
	        this.m_Mesh = null;
	      }
	      this.m_Mesh = new _three2.default.Mesh(this.m_Geom, this.m_Material);
	      this.m_Mesh.position.z = 0;

	      var halfwidth = this.m_Canvas.width * 0.5;
	      var halfheight = this.m_Canvas.height * 0.5;

	      if (!this.m_RTCam) this.m_RTCam = new _three2.default.OrthographicCamera(-halfwidth, halfwidth, -halfheight, halfheight, -10, 1000);
	      this.m_RTCam.position.z = 10;
	      this.m_RTCam.rotation.z = Math.PI;
	      // left, right, top, bottom
	      this.m_RTCam.left = halfwidth;
	      this.m_RTCam.right = -halfwidth;
	      this.m_RTCam.top = halfheight;
	      this.m_RTCam.bottom = -halfheight;
	      this.m_RTCam.updateProjectionMatrix();

	      if (!this.m_RTScene) {
	        this.m_RTScene = new _three2.default.Scene();
	        this.m_RTScene.add(this.m_RTCam);
	      }

	      this.m_RTScene.add(this.m_Mesh);
	    }
	  }, {
	    key: 'attributesChanged',
	    value: function attributesChanged() {
	      this.createLabel();
	      this.renderText();
	    }
	  }, {
	    key: 'renderText',
	    value: function renderText() {
	      if (!this.text) this.text = ' ';

	      if (this.getRuntimeData()) {
	        this.getThreeRenderer().render(this.m_RTScene, this.m_RTCam, this.getRuntimeData());
	      } else {
	        this.once('load', function () {
	          this.getThreeRenderer().render(this.m_RTScene, this.m_RTCam, this.getRuntimeData());
	        }, this);
	        this.load();
	      }
	    }
	  }, {
	    key: 'wrapAndRender',
	    value: function wrapAndRender(context, text, x, y, maxWidth, lineHeight) {
	      var words = text.split(' ');
	      var line = '';

	      for (var n = 0; n < words.length; n++) {
	        var testLine = line + words[n] + ' ';
	        var metrics = context.measureText(testLine);
	        var testWidth = metrics.width;
	        if (testWidth > maxWidth && n > 0) {
	          context.fillText(line, x, y);
	          line = words[n] + ' ';
	          y += lineHeight;
	        } else {
	          line = testLine;
	        }
	      }
	      context.fillText(line, x, y);
	    }
	  }]);

	  return TextRenderer;
	}(_Box3DComponent3.default);

	exports.default = TextRenderer;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @vid texture2d_to_cubemap_script
	 * @vname Texture To Cube Map
	 * @vdescription A controller that allows a camera to easily orbit a target object.
	 * @vfilter renderTextureCube
	 * @vcategory Rendering
	 * @vattr asset inputTexture {
	 *   default : null,
	 *   filter : { texture2D: true, renderTexture2D: true },
	 *   description : 'The texture to convert to a cube map.'
	 * }
	*/
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DComponent2 = __webpack_require__(23);

	var _Box3DComponent3 = _interopRequireDefault(_Box3DComponent2);

	var _BaseTextureAsset = __webpack_require__(19);

	var _BaseTextureAsset2 = _interopRequireDefault(_BaseTextureAsset);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Texture2dToCubeMap = function (_Box3DComponent) {
	  _inherits(Texture2dToCubeMap, _Box3DComponent);

	  function Texture2dToCubeMap() {
	    _classCallCheck(this, Texture2dToCubeMap);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Texture2dToCubeMap).call(this));

	    _this.skyboxScene = undefined;
	    _this.cameras = new Array(6);
	    _this.stereoCubeShader = {
	      vertexShader: ['void main() {', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),
	      fragmentShader: ['uniform sampler2D inputTexture;', 'void main() {', '#define xStep 0.166666666666666;', // 1 / 6
	      'vec2 uv = vec2(0.0);', 'uv.x = xStep * face', '#if STEREO_EYE == STEREO_EYE_RIGHT', 'uv.x += xStep / 2.0;', '#endif', 'vec4 environmentColor = texture2D( inputTexture, sampleUV );', 'gl_FragColor = vec4( environmentColor.xyz, 1.0 );', '}']
	    };
	    return _this;
	  }

	  _createClass(Texture2dToCubeMap, [{
	    key: 'attributesChanged',
	    value: function attributesChanged(changes) {
	      if (changes.indexOf('inputTexture') !== -1) {
	        var prevTex = this.getPreviousAttribute('inputTexture');
	        this.unregisterDependency(prevTex);
	        this.registerDependency(this.inputTexture);
	        this.updateTexture();
	      }
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.registerDependency(this.inputTexture);
	      this.skyboxScene = new _three2.default.Scene();
	      this.initCameras();
	      this.createSkybox();
	    }
	  }, {
	    key: 'entityCreated',
	    value: function entityCreated() {
	      this.updateTexture();
	    }
	  }, {
	    key: 'shutdown',
	    value: function shutdown() {
	      if (this.inputTexture) {
	        this.unregisterDependency(this.inputTexture);
	        this.inputTexture.off('load', this.renderToCube, this);
	      }
	      if (this.skyboxGeometry) {
	        this.skyboxGeometry.dispose();
	      }
	      if (this.equirectMaterial) {
	        this.equirectMaterial.dispose();
	      }
	      this.skyboxScene = undefined;
	      this.skyboxMesh = undefined;
	      this.inputTexture = undefined;
	    }
	  }, {
	    key: 'updateTexture',
	    value: function updateTexture() {
	      if (this.inputTexture) {

	        this.skyboxMesh.material.dispose();

	        // Setup appropriate material for transforming 2D texture to cube map
	        var shader = undefined;
	        var layout = this.inputTexture.getProperty('layout');
	        if (layout === _BaseTextureAsset2.default.LAYOUT.normal) {
	          shader = _three2.default.ShaderLib['equirect'];
	          shader.uniforms.tFlip.value = 1.0;
	          var transformMaterial = new _three2.default.ShaderMaterial({
	            fragmentShader: shader.fragmentShader,
	            vertexShader: shader.vertexShader,
	            uniforms: shader.uniforms,
	            depthWrite: false,
	            side: _three2.default.BackSide
	          });
	          this.skyboxMesh.material = transformMaterial;
	        } else if (layout === _BaseTextureAsset2.default.LAYOUT.stereoCubeHorizontal) {
	          shader = this.stereoCubeShader;
	          var materials = new Array(6);
	          for (var i = 0; i < 6; i++) {
	            // let uniforms = THREE.UniformsUtils.merge([
	            //   {
	            //   face: {
	            //     type: 'i',
	            //     value: i
	            //   }}
	            // ]);
	            materials[i] = new _three2.default.ShaderMaterial({
	              fragmentShader: shader.fragmentShader,
	              vertexShader: shader.vertexShader,
	              uniforms: shader.uniforms,
	              depthWrite: false,
	              side: _three2.default.BackSide,
	              defines: {
	                STEREO_EYE_LEFT: '1',
	                STEREO_EYE_RIGHT: '2',
	                STEREO_EYE: this.leftEye ? 'STEREO_EYE_LEFT' : 'STEREO_EYE_RIGHT'
	              }
	            });
	          }
	        }

	        // Bind to texture loading
	        this.inputTexture.off('load', this.renderToCube, this);
	        this.inputTexture.when('load', this.renderToCube, this);
	        if (this.inputTexture.isUnloaded()) {
	          this.inputTexture.load();
	        }
	      }
	    }
	  }, {
	    key: 'createSkybox',
	    value: function createSkybox() {
	      this.skyboxGeometry = new _three2.default.BoxGeometry(100, 100, 100, 1, 1, 1);
	      this.skyboxGeometry.dynamic = false;
	      this.skyboxMesh = new _three2.default.Mesh(this.skyboxGeometry);
	      this.skyboxMesh.frustumCulled = false;
	      this.skyboxMesh.castShadow = false;
	      this.skyboxMesh.receiveShadow = false;
	      if (this.isEnabled()) {
	        this.skyboxScene.add(this.skyboxMesh);
	      }
	    }
	  }, {
	    key: 'initCameras',
	    value: function initCameras() {

	      var fov = 90,
	          aspect = 1;

	      this.cameras[0] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[0].up.set(0, -1, 0);
	      this.cameras[0].lookAt(new _three2.default.Vector3(1, 0, 0));
	      this.cameras[0].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[0]);

	      this.cameras[1] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[1].up.set(0, -1, 0);
	      this.cameras[1].lookAt(new _three2.default.Vector3(-1, 0, 0));
	      this.cameras[1].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[1]);

	      this.cameras[2] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[2].up.set(0, 0, 1);
	      this.cameras[2].lookAt(new _three2.default.Vector3(0, 1, 0));
	      this.cameras[2].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[2]);

	      this.cameras[3] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[3].up.set(0, 0, -1);
	      this.cameras[3].lookAt(new _three2.default.Vector3(0, -1, 0));
	      this.cameras[3].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[3]);

	      this.cameras[4] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[4].up.set(0, -1, 0);
	      this.cameras[4].lookAt(new _three2.default.Vector3(0, 0, 1));
	      this.cameras[4].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[4]);

	      this.cameras[5] = new _three2.default.PerspectiveCamera(fov, aspect, 1, 1000);
	      this.cameras[5].up.set(0, -1, 0);
	      this.cameras[5].lookAt(new _three2.default.Vector3(0, 0, -1));
	      this.cameras[5].rotationAutoUpdate = false;
	      this.skyboxScene.add(this.cameras[5]);
	    }
	  }, {
	    key: 'renderToCube',
	    value: function renderToCube() {
	      if (this.hasThreeData()) {

	        // this.equirectMaterial.uniforms.inputTexture.value = this.inputTexture.runtimeData;
	        // var renderTarget = this.getRuntimeData();
	        // var renderer = this.getThreeRenderer();

	        // renderTarget.texture.generateMipmaps = false;

	        // renderer.setViewport(0, 0, renderTarget.width, renderTarget.height);
	        // for (var i = 0; i < 5; i++) {
	        //   renderTarget.activeCubeFace = i;
	        //   renderer.render(this.skyboxScene, this.cameras[i], renderTarget);
	        // }
	        // renderTarget.texture.generateMipmaps = this.getEntity().getProperty('generateMipmaps');

	        // renderTarget.activeCubeFace = 5;
	        // renderer.render(this.skyboxScene, this.cameras[5], renderTarget);
	      }
	    }
	  }]);

	  return Texture2dToCubeMap;
	}(_Box3DComponent3.default);

	exports.default = Texture2dToCubeMap;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var now = __webpack_require__(60)
	  , global = typeof window === 'undefined' ? {} : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = global['request' + suffix]
	  , caf = global['cancel' + suffix] || global['cancelRequest' + suffix]

	for(var i = 0; i < vendors.length && !raf; i++) {
	  raf = global[vendors[i] + 'Request' + suffix]
	  caf = global[vendors[i] + 'Cancel' + suffix]
	      || global[vendors[i] + 'CancelRequest' + suffix]
	}

	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60

	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = now()
	        , next = Math.max(0, frameDuration - (_now - last))
	      last = next + _now
	      setTimeout(function() {
	        var cp = queue.slice(0)
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last)
	            } catch(e) {
	              setTimeout(function() { throw e }, 0)
	            }
	          }
	        }
	      }, Math.round(next))
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    })
	    return id
	  }

	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true
	      }
	    }
	  }
	}

	module.exports = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(global, fn)
	}
	module.exports.cancel = function() {
	  caf.apply(global, arguments)
	}


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.7.1
	(function() {
	  var getNanoSeconds, hrtime, loadTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - loadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    loadTime = getNanoSeconds();
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(61)))

/***/ },
/* 61 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.EffectComposer = function ( renderer, renderTarget ) {

		this.renderer = renderer;

		if ( renderTarget === undefined ) {

			var pixelRatio = renderer.getPixelRatio();

			var width  = Math.floor( renderer.context.canvas.width  / pixelRatio ) || 1;
			var height = Math.floor( renderer.context.canvas.height / pixelRatio ) || 1;
			var parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };

			renderTarget = new THREE.WebGLRenderTarget( width, height, parameters );
			renderTarget.name = "EffectComposer Render Target";
		}

		this.renderTarget1 = renderTarget;
		this.renderTarget2 = renderTarget.clone();

		this.writeBuffer = this.renderTarget1;
		this.readBuffer = this.renderTarget2;

		this.passes = [];
		this.enabled = true;

		if ( THREE.CopyShader === undefined )
			console.error( "THREE.EffectComposer relies on THREE.CopyShader" );

		this.copyPass = new THREE.ShaderPass( THREE.CopyShader );

	};

	THREE.EffectComposer.prototype = {

		swapBuffers: function() {

			var tmp = this.readBuffer;
			this.readBuffer = this.writeBuffer;
			this.writeBuffer = tmp;

		},

		addPass: function ( pass ) {

			this.passes.push( pass );

		},

		insertPass: function ( pass, index ) {

			this.passes.splice( index, 0, pass );

		},

		render: function ( delta ) {

			this.writeBuffer = this.renderTarget1;
			this.readBuffer = this.renderTarget2;

			var maskActive = false;

			var pass, i, il = this.passes.length;

			for ( i = 0; i < il; i ++ ) {

				pass = this.passes[ i ];

				if ( !pass.enabled ) continue;

				pass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );

				if ( pass.needsSwap ) {

					if ( maskActive ) {

						var context = this.renderer.context;

						context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );

						this.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );

						context.stencilFunc( context.EQUAL, 1, 0xffffffff );

					}

					this.swapBuffers();

				}

				if ( pass instanceof THREE.MaskPass ) {

					maskActive = true;

				} else if ( pass instanceof THREE.ClearMaskPass ) {

					maskActive = false;

				}

			}

		},

		reset: function ( renderTarget ) {

			if ( renderTarget === undefined ) {

				renderTarget = this.renderTarget1.clone();

				var pixelRatio = this.renderer.getPixelRatio();

				renderTarget.width  = Math.floor( this.renderer.context.canvas.width  / pixelRatio );
				renderTarget.height = Math.floor( this.renderer.context.canvas.height / pixelRatio );
			}
			var oldRenderTarget1 = this.renderTarget1;
			var oldRenderTarget2 = this.renderTarget2;
			if ( oldRenderTarget1 ) {
				oldRenderTarget1.dispose();
			}
			if ( oldRenderTarget2 ) {
				oldRenderTarget2.dispose();
			}

			this.renderTarget1 = renderTarget;
			this.renderTarget2 = renderTarget.clone();

			this.writeBuffer = this.renderTarget1;
			this.readBuffer = this.renderTarget2;

		},

		setSize: function ( width, height ) {

			var renderTarget = this.renderTarget1.clone();

			renderTarget.width = width;
			renderTarget.height = height;

			this.reset( renderTarget );

		},

		dispose: function() {
			this.renderTarget1.dispose();
			this.renderTarget2.dispose();
			this.copyPass.dispose();
			// for ( var p in this.passes ) {
			// 	this.passes[p].dispose();
			// }
			this.passes = undefined;
			this.renderer = undefined;
		}

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.BloomPass = function ( strength, kernelSize, sigma, resolutionX, resolutionY ) {

			strength = ( strength !== undefined ) ? strength : 1;
			kernelSize = ( kernelSize !== undefined ) ? kernelSize : 25;
			sigma = ( sigma !== undefined ) ? sigma : 4.0;

			// render targets
			this.setSize( resolutionX, resolutionY );

			// copy material

			if ( THREE.CopyShader === undefined )
				console.error( "THREE.BloomPass relies on THREE.CopyShader" );

			var copyShader = THREE.CopyShader;

			this.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );

			this.copyUniforms[ "opacity" ].value = strength;

			this.materialCopy = new THREE.ShaderMaterial( {

				uniforms: this.copyUniforms,
				vertexShader: copyShader.vertexShader,
				fragmentShader: copyShader.fragmentShader,
				blending: THREE.AdditiveBlending,
				transparent: true

			} );

			// convolution material

			if ( THREE.ConvolutionShader === undefined )
				console.error( "THREE.BloomPass relies on THREE.ConvolutionShader" );

			var convolutionShader = THREE.ConvolutionShader;

			this.convolutionUniforms = THREE.UniformsUtils.clone( convolutionShader.uniforms );

			this.convolutionUniforms[ "uImageIncrement" ].value = THREE.BloomPass.blurx;
			this.convolutionUniforms[ "cKernel" ].value = THREE.ConvolutionShader.buildKernel( sigma );

			this.materialConvolution = new THREE.ShaderMaterial( {

				uniforms: this.convolutionUniforms,
				vertexShader:  convolutionShader.vertexShader,
				fragmentShader: convolutionShader.fragmentShader,
				defines: {
					"KERNEL_SIZE_FLOAT": kernelSize.toFixed( 1 ),
					"KERNEL_SIZE_INT": kernelSize.toFixed( 0 )
				}

			} );

			if ( THREE.ClampShader === undefined )
				console.error( "THREE.BloomPass relies on THREE.ClampShader" );
			var clampShader = THREE.ClampShader;

			this.clampUniforms = THREE.UniformsUtils.clone( clampShader.uniforms );

			// this.convolutionUniforms[ "uImageIncrement" ].value = THREE.BloomPass.blurx;
			// this.convolutionUniforms[ "cKernel" ].value = THREE.ConvolutionShader.buildKernel( sigma );

			this.materialClamp = new THREE.ShaderMaterial( {

				uniforms: this.clampUniforms,
				vertexShader:  clampShader.vertexShader,
				fragmentShader: clampShader.fragmentShader,
			} );

			this.enabled = true;
			this.needsSwap = false;
			this.clear = false;


			this.camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.BloomPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {

				if ( maskActive ) renderer.context.disable( renderer.context.STENCIL_TEST );

				//Clamp to threshold
				this.quad.material = this.materialClamp;

				this.clampUniforms[ "tDiffuse" ].value = readBuffer;
				renderer.render( this.scene, this.camera, writeBuffer, true );

				// Render quad with blured scene into texture (convolution pass 1)

				this.quad.material = this.materialConvolution;

				this.convolutionUniforms[ "tDiffuse" ].value = writeBuffer;
				this.convolutionUniforms[ "uImageIncrement" ].value = THREE.BloomPass.blurX;

				renderer.render( this.scene, this.camera, this.renderTargetX, true );


				// Render quad with blured scene into texture (convolution pass 2)

				this.convolutionUniforms[ "tDiffuse" ].value = this.renderTargetX;
				this.convolutionUniforms[ "uImageIncrement" ].value = THREE.BloomPass.blurY;

				renderer.render( this.scene, this.camera, this.renderTargetY, true );

				// Render original scene with superimposed blur to texture

				this.quad.material = this.materialCopy;

				this.copyUniforms[ "tDiffuse" ].value = this.renderTargetY;

				if ( maskActive ) renderer.context.enable( renderer.context.STENCIL_TEST );

				renderer.render( this.scene, this.camera, readBuffer, this.clear );

			},

			setSigma: function( sigma ) {
				if ( sigma ) {
					var kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;
		      // var kernelSize = this.bloom.kernelSize !== undefined ? this.bloom.kernelSize : 25;
		      this.materialConvolution.defines = {
		        "KERNEL_SIZE_FLOAT": kernelSize.toFixed( 1 ),
		        "KERNEL_SIZE_INT": kernelSize.toFixed( 0 )
		      }
		      this.materialConvolution.needsUpdate = true;
		      this.convolutionUniforms[ "cKernel" ].value = THREE.ConvolutionShader.buildKernel( sigma );
		    }
			},

			setSize: function( resolutionX, resolutionY ) {
				this.resolutionX = ( resolutionX !== undefined ) ? resolutionX : 256;
				this.resolutionY = ( resolutionY !== undefined ) ? resolutionY : 256;
				var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };
				if ( this.renderTargetX ) {
					this.renderTargetX.dispose();
				}
				if ( this.renderTargetY ) {
					this.renderTargetY.dispose();
				}
				this.renderTargetX = new THREE.WebGLRenderTarget( this.resolutionX, this.resolutionY, pars );
				this.renderTargetX.name = "Bloom Convolution X";
				this.renderTargetY = new THREE.WebGLRenderTarget( this.resolutionX, this.resolutionY, pars );
				this.renderTargetY.name = "Bloom Convolution Y";
			},

			dispose: function() {
				this.renderTargetX.dispose();
				this.renderTargetY.dispose();
				this.copyUniforms = undefined;
				this.convolutionUniforms = undefined;
				this.materialCopy.dispose();
				this.materialConvolution.dispose();
				this.quad.geometry.dispose();
				this.quad = undefined;
				this.scene = undefined;
				this.camera = undefined;
			}

		};

		THREE.BloomPass.blurX = new THREE.Vector2( 0.001953125, 0.0 );
		THREE.BloomPass.blurY = new THREE.Vector2( 0.0, 0.001953125 );
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * Depth-of-field post-process with bokeh shader
	 */


	THREE.BokehPass = function ( scene, camera, params ) {

		this.scene = scene;
		this.camera = camera;

		var focus = ( params.focus !== undefined ) ? params.focus : 1.0;
		var aspect = ( params.aspect !== undefined ) ? params.aspect : camera.aspect;
		var aperture = ( params.aperture !== undefined ) ? params.aperture : 0.025;
		var maxblur = ( params.maxblur !== undefined ) ? params.maxblur : 1.0;

		// render targets

		var width = params.width || window.innerWidth || 1;
		var height = params.height || window.innerHeight || 1;

		this.renderTargetColor = new THREE.WebGLRenderTarget( width, height, {
			minFilter: THREE.LinearFilter,
			magFilter: THREE.LinearFilter,
			format: THREE.RGBFormat
		} );

		this.renderTargetDepth = this.renderTargetColor.clone();

		// depth material

		this.materialDepth = new THREE.MeshDepthMaterial();

		// bokeh material

		if ( THREE.BokehShader === undefined ) {
			console.error( "THREE.BokehPass relies on THREE.BokehShader" );
		}
		
		var bokehShader = THREE.BokehShader;
		var bokehUniforms = THREE.UniformsUtils.clone( bokehShader.uniforms );

		bokehUniforms[ "tDepth" ].value = this.renderTargetDepth;

		bokehUniforms[ "focus" ].value = focus;
		bokehUniforms[ "aspect" ].value = aspect;
		bokehUniforms[ "aperture" ].value = aperture;
		bokehUniforms[ "maxblur" ].value = maxblur;

		this.materialBokeh = new THREE.ShaderMaterial({
			uniforms: bokehUniforms,
			vertexShader: bokehShader.vertexShader,
			fragmentShader: bokehShader.fragmentShader
		});

		this.uniforms = bokehUniforms;
		this.enabled = true;
		this.needsSwap = false;
		this.renderToScreen = false;
		this.clear = false;

		this.camera2 = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );
		this.scene2  = new THREE.Scene();

		this.quad2 = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );
		this.scene2.add( this.quad2 );

	};

	THREE.BokehPass.prototype = {

		render: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {

			this.quad2.material = this.materialBokeh;

			// Render depth into texture

			this.scene.overrideMaterial = this.materialDepth;

			renderer.render( this.scene, this.camera, this.renderTargetDepth, true );

			// Render bokeh composite

			this.uniforms[ "tColor" ].value = readBuffer;

			if ( this.renderToScreen ) {

				renderer.render( this.scene2, this.camera2 );

			} else {

				renderer.render( this.scene2, this.camera2, writeBuffer, this.clear );

			}

			this.scene.overrideMaterial = null;

		}

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.DotScreenPass = function ( center, angle, scale ) {

			if ( THREE.DotScreenShader === undefined )
				console.error( "THREE.DotScreenPass relies on THREE.DotScreenShader" );

			var shader = THREE.DotScreenShader;

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			if ( center !== undefined ) this.uniforms[ "center" ].value.copy( center );
			if ( angle !== undefined ) this.uniforms[ "angle"].value = angle;
			if ( scale !== undefined ) this.uniforms[ "scale"].value = scale;

			this.material = new THREE.ShaderMaterial( {

				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			this.enabled = true;
			this.renderToScreen = false;
			this.needsSwap = true;


			this.camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.DotScreenPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				this.uniforms[ "tDiffuse" ].value = readBuffer;
				this.uniforms[ "tSize" ].value.set( readBuffer.width, readBuffer.height );

				this.quad.material = this.material;

				if ( this.renderToScreen ) {

					renderer.render( this.scene, this.camera );

				} else {

					renderer.render( this.scene, this.camera, writeBuffer, false );

				}

			}

		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.FilmPass = function ( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {

			if ( THREE.FilmShader === undefined )
				console.error( "THREE.FilmPass relies on THREE.FilmShader" );

			var shader = THREE.FilmShader;

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			this.material = new THREE.ShaderMaterial( {

				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			if ( grayscale !== undefined )	this.uniforms.grayscale.value = grayscale;
			if ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;
			if ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;
			if ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;

			this.enabled = true;
			this.renderToScreen = false;
			this.needsSwap = true;


			this.camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.FilmPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				this.uniforms[ "tDiffuse" ].value = readBuffer;
				this.uniforms[ "time" ].value = (this.uniforms[ "time" ].value + delta) % 10.0 + 0.1;

				this.quad.material = this.material;

				if ( this.renderToScreen ) {

					renderer.render( this.scene, this.camera );

				} else {

					renderer.render( this.scene, this.camera, writeBuffer, false );

				}

			},

			dispose: function() {
				this.quad.geometry.dispose();
				this.quad = undefined;
				this.material.dispose();
				this.material = undefined;
				this.uniforms = undefined;
				this.scene = undefined;
				this.camera = undefined;
			}

		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.MaskPass = function ( scene, camera ) {

			this.scene = scene;
			this.camera = camera;

			this.enabled = true;
			this.clear = true;
			this.needsSwap = false;

			this.inverse = false;

		};

		THREE.MaskPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				var context = renderer.context;

				// don't update color or depth

				context.colorMask( false, false, false, false );
				context.depthMask( false );

				// set up stencil

				var writeValue, clearValue;

				if ( this.inverse ) {

					writeValue = 0;
					clearValue = 1;

				} else {

					writeValue = 1;
					clearValue = 0;

				}

				context.enable( context.STENCIL_TEST );
				context.stencilOp( context.REPLACE, context.REPLACE, context.REPLACE );
				context.stencilFunc( context.ALWAYS, writeValue, 0xffffffff );
				context.clearStencil( clearValue );

				// draw into the stencil buffer

				renderer.render( this.scene, this.camera, readBuffer, this.clear );
				renderer.render( this.scene, this.camera, writeBuffer, this.clear );

				// re-enable update of color and depth

				context.colorMask( true, true, true, true );
				context.depthMask( true );

				// only render where stencil is set to 1

				context.stencilFunc( context.EQUAL, 1, 0xffffffff );  // draw if == 1
				context.stencilOp( context.KEEP, context.KEEP, context.KEEP );

			}

		};


		THREE.ClearMaskPass = function () {

			this.enabled = true;

		};

		THREE.ClearMaskPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				var context = renderer.context;

				context.disable( context.STENCIL_TEST );

			}

		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {

			this.scene = scene;
			this.camera = camera;

			this.overrideMaterial = overrideMaterial;

			this.clearColor = clearColor;
			this.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;

			this.oldClearColor = new THREE.Color();
			this.oldClearAlpha = 1;

			this.enabled = true;
			this.clear = true;
			this.needsSwap = false;

		};

		THREE.RenderPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				// renderer.setViewport( 0, 0, renderer.domElement.width, renderer.domElement.height );

				this.scene.overrideMaterial = this.overrideMaterial !== undefined ? this.overrideMaterial : this.scene.overrideMaterial;

				if ( this.clearColor ) {

					this.oldClearColor.copy( renderer.getClearColor() );
					this.oldClearAlpha = renderer.getClearAlpha();

					renderer.setClearColor( this.clearColor, this.clearAlpha );

				}

				renderer.render( this.scene, this.camera, readBuffer, this.clear );

				if ( this.clearColor ) {

					renderer.setClearColor( this.oldClearColor, this.oldClearAlpha );

				}

				this.scene.overrideMaterial = null;

			},

			dispose: function() {
				this.scene = undefined;
				this.camera = undefined;
			}

		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.SavePass = function ( renderTarget ) {

			if ( THREE.CopyShader === undefined )
				console.error( "THREE.SavePass relies on THREE.CopyShader" );

			var shader = THREE.CopyShader;

			this.textureID = "tDiffuse";

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			this.material = new THREE.ShaderMaterial( {

				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			this.renderTarget = renderTarget;

			if ( this.renderTarget === undefined ) {

				this.renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };
				this.renderTarget = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, this.renderTargetParameters );

			}

			this.enabled = true;
			this.needsSwap = false;
			this.clear = false;


			this.camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.SavePass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				if ( this.uniforms[ this.textureID ] ) {

					this.uniforms[ this.textureID ].value = readBuffer;

				}

				this.quad.material = this.material;

				renderer.render( this.scene, this.camera, this.renderTarget, this.clear );

			}

		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)
		, __webpack_require__(90)
		, __webpack_require__(72)
		, __webpack_require__(73)
		, __webpack_require__(74)
		, __webpack_require__(75)
		, __webpack_require__(76)
		, __webpack_require__(77)
		, __webpack_require__(78)
		, __webpack_require__(79)
		, __webpack_require__(80)
		, __webpack_require__(81)
		, __webpack_require__(82)
		, __webpack_require__(83)
		, __webpack_require__(84)
		, __webpack_require__(85)
		, __webpack_require__(86)
		, __webpack_require__(87)
		, __webpack_require__(88)
		, __webpack_require__(89)
		, __webpack_require__(71)
		, __webpack_require__(91)
		, __webpack_require__(92)
		, __webpack_require__(93)
		, __webpack_require__(94)
		, __webpack_require__(95)
		, __webpack_require__(96)
		, __webpack_require__(97)
		, __webpack_require__(98)
		, __webpack_require__(99)
		, __webpack_require__(100)
		, __webpack_require__(101)
		, __webpack_require__(102)
		, __webpack_require__(103)
		, __webpack_require__(104)
		, __webpack_require__(105)
		, __webpack_require__(106)
		, __webpack_require__(107)
		, __webpack_require__(108)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.ShaderPass = function ( shader, textureID ) {

			this.textureID = ( textureID !== undefined ) ? textureID : "tDiffuse";

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			this.material = new THREE.ShaderMaterial( {
				blending: THREE.NormalBlending,
		transparent: true,
				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			this.renderToScreen = false;

			this.enabled = true;
			this.needsSwap = true;
			this.clear = false;


			this.camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );
			this.scene.add( this.quad );
			this.prevViewPort = new THREE.Vector4();
		};

		THREE.ShaderPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				if ( this.uniforms[ this.textureID ] ) {

					this.uniforms[ this.textureID ].value = readBuffer;

				}

				this.quad.material = this.material;

				if ( this.renderToScreen ) {
					renderer.getViewport(this.prevViewPort);
					if ( this.viewPort ) {
						renderer.setViewport( this.viewPort.x, this.viewPort.y, this.viewPort.width, this.viewPort.height );
					}
					if ( this.clearColor || this.clearDepth ) {
						renderer.clear( !!this.clearColor, !!this.clearDepth, false );
					}
					renderer.render( this.scene, this.camera );
					if ( this.viewPort ) {
						renderer.setViewport( this.prevViewPort.x, this.prevViewPort.y, this.prevViewPort.width, this.prevViewPort.height );
					}

				} else if ( this.renderToTexture ) {
					// var prevViewPort = renderer.getViewport();
					// if ( this.viewPort ) {
					// 	renderer.setViewport( this.viewPort.x, this.viewPort.y, this.viewPort.width, this.viewPort.height );
					// }
					if ( this.clearColor || this.clearDepth ) {
						renderer.clear( this.clearColor, this.clearDepth, false );
					}
					renderer.render( this.scene, this.camera, this.renderToTexture );
					// if ( this.viewPort ) {
					// 	renderer.setViewport( prevViewPort.x, prevViewPort.y, prevViewPort.width, prevViewPort.height );
					// }

				} else {

					renderer.render( this.scene, this.camera, writeBuffer, this.clear );

				}

			},

			dispose: function() {
				this.quad.geometry.dispose();
				this.quad = undefined;
				this.camera = undefined;
				this.scene = undefined;
				this.material.dispose();
				this.material = undefined;
				this.uniforms = undefined;
			}

		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author davidedc / http://www.sketchpatch.net/
	 *
	 * NVIDIA FXAA by Timothy Lottes
	 * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html
	 * - WebGL port by @supereggbert
	 * http://www.glge.org/demos/fxaa/
	 */

	THREE.FXAAShader = {

		uniforms: {

			"tDiffuse":   { type: "t", value: null },
			"resolution": { type: "v2", value: new THREE.Vector2( 1 / 1024, 1 / 512 )  }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform vec2 resolution;",

			"varying vec2 vUv;",

			"#define FXAA_REDUCE_MIN   (1.0/128.0)",
			"#define FXAA_REDUCE_MUL   (1.0/8.0)",
			"#define FXAA_SPAN_MAX     8.0",

			"void main() {",

				"vec3 rgbNW = clamp( texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ).xyz, 0.0, 1.0);",
				"vec3 rgbNE = clamp( texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ).xyz, 0.0, 1.0);",
				"vec3 rgbSW = clamp( texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ).xyz, 0.0, 1.0);",
				"vec3 rgbSE = clamp( texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ).xyz, 0.0, 1.0);",
				"vec4 rgbaM  = clamp( texture2D( tDiffuse,  gl_FragCoord.xy  * resolution ), 0.0, 1.0);",
				"vec3 rgbM  = rgbaM.xyz;",
				"float opacity  = rgbaM.w;",

				"vec3 luma = vec3( 0.299, 0.587, 0.114 );",

				"float lumaNW = dot( rgbNW, luma );",
				"float lumaNE = dot( rgbNE, luma );",
				"float lumaSW = dot( rgbSW, luma );",
				"float lumaSE = dot( rgbSE, luma );",
				"float lumaM  = dot( rgbM,  luma );",
				"float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );",
				"float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );",

				"vec2 dir;",
				"dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));",
				"dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));",

				"float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );",

				"float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );",
				"dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),",
					  "max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),",
							"dir * rcpDirMin)) * resolution;",

				"vec3 rgbA = 0.5 * (",
					"clamp( texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * ( 1.0 / 3.0 - 0.5 ) ).xyz, 0.0, 1.0) +",
					"clamp( texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * ( 2.0 / 3.0 - 0.5 ) ).xyz, 0.0, 1.0) );",

				"vec3 rgbB = rgbA * 0.5 + 0.25 * (",
					"clamp( texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * -0.5 ).xyz, 0.0, 1.0) +",
					"clamp( texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * 0.5 ).xyz, 0.0, 1.0) );",

				"float lumaB = dot( rgbB, luma );",

				"if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {",

					"gl_FragColor = vec4( rgbA, opacity );",

				"} else {",

					"gl_FragColor = vec4( rgbB, opacity );",

				"}",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author miibond
	 *
	 * Down-sample a given texture to a target exactly half the size. Useful for texture packings where automatic
	 * bilinear filtering is inappropriate (e.g. depthRGBA, RGBE, etc.)
	 */

	THREE.BilinearDownSampleShader = {

		uniforms: {
			"tDiffuse": { type: "t", value: null },
			"resolution": { type: "v2", value: new THREE.Vector2() },
		},
		vertexShader: [
			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"
		].join('\n'),
		fragmentShader: [
			"varying vec2 vUv;",
			"uniform sampler2D tDiffuse;",
			"uniform vec2 resolution;",
			THREE.ShaderChunk[ "hdr_decode_pars_fragment" ],
			THREE.ShaderChunk[ "hdr_encode_pars_fragment" ],
			
			"void main() {",
				"vec2 offset = 0.5 / resolution;",
				"vec4 colour;",
				"vec4 samples[ 4 ];",

	      "samples[0] = texture2D( tDiffuse, vUv + vec2( -offset.x, -offset.x ) );",
	      "samples[1] = texture2D( tDiffuse, vUv + vec2( offset.x, -offset.x ) );",
	      "samples[2] = texture2D( tDiffuse, vUv + vec2( offset.x, offset.y ) );",
	      "samples[3] = texture2D( tDiffuse, vUv + vec2( -offset.x, offset.y ) );",

				"for ( int i = 0; i < 4; i++ ) {",
					"#if defined( HDR_INPUT ) && defined( HDR_INPUT_TYPE )",
						"#if ( HDR_INPUT_TYPE == HDR_TYPE_LOGLUV )",
							"colour += vec4( HDRDecodeLOGLUV( samples[i] ), 1.0 );",
						"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBM )",
							"colour += vec4( HDRDecodeRGBM( samples[i] ), 1.0 );",
						"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBD )",
							"colour += vec4( HDRDecodeRGBD( samples[i] ), 1.0 );",
						"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBE )",
							"colour += vec4( HDRDecodeRGBE( samples[i] ), 1.0 );",
						"#else",
							"colour += samples[i];",
						"#endif",
					"#else",
							"colour += samples[i];",
					"#endif",
				"}",

				"gl_FragColor = colour * 0.25;",
				
				THREE.ShaderChunk[ "hdr_encode_fragment" ],
				
			"}",
		].join('\n')

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]
	 * - based on Nvidia example
	 * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass
	 */

	THREE.BleachBypassShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"opacity":  { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",

			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 base = texture2D( tDiffuse, vUv );",

				"vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );",
				"float lum = dot( lumCoeff, base.rgb );",
				"vec3 blend = vec3( lum );",

				"float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );",

				"vec3 result1 = 2.0 * base.rgb * blend;",
				"vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );",

				"vec3 newColor = mix( result1, result2, L );",

				"float A2 = opacity * base.a;",
				"vec3 mixRGB = A2 * newColor.rgb;",
				"mixRGB += ( ( 1.0 - A2 ) * base.rgb );",

				"gl_FragColor = vec4( mixRGB, base.a );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Blend two textures
	 */

	THREE.BlendShader = {

		uniforms: {

			"tDiffuse1": { type: "t", value: null },
			"tDiffuse2": { type: "t", value: null },
			"mixRatio":  { type: "f", value: 0.5 },
			"opacity":   { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",
			"uniform float mixRatio;",

			"uniform sampler2D tDiffuse1;",
			"uniform sampler2D tDiffuse2;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 texel1 = texture2D( tDiffuse1, vUv );",
				"vec4 texel2 = texture2D( tDiffuse2, vUv );",
				"gl_FragColor = opacity * mix( texel1, texel2, mixRatio );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Depth-of-field shader with bokeh
	 * ported from GLSL shader by Martins Upitis
	 * http://artmartinsh.blogspot.com/2010/02/glsl-lens-blur-filter-with-bokeh.html
	 */

	THREE.BokehShader = {

		uniforms: {

			"tDiffuse":   { type: "t", value: null },
			"tDepth":   { type: "t", value: null },
			"focus":    { type: "f", value: 1.0 },
			"aspect":   { type: "f", value: 1.0 },
			"aperture": { type: "f", value: 0.025 },
			"maxblur":  { type: "f", value: 1.0 },
			"opacity": { type: "f", value: 1.0 }
		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"varying vec2 vUv;",

			"uniform sampler2D tDiffuse;",
			"uniform sampler2D tDepth;",

			"uniform float maxblur;",  // max blur amount
			"uniform float aperture;", // aperture - bigger values for shallower depth of field

			"uniform float focus;",
			"uniform float aspect;",
			"uniform float opacity;",

			"float unpackDepth( const in vec4 rgba_depth ) {",

				"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
				"float depth = dot( rgba_depth, bit_shift );",
				"return depth;",

			"}",

			"void main() {",

				"vec2 aspectcorrect = vec2( 1.0, aspect );",

				"float depth1 = unpackDepth( texture2D( tDepth, vUv ) );",

				"float factor = max( depth1 - focus, 0.0);",

				"vec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );",

				"vec2 dofblur9 = dofblur * 0.9;",
				"vec2 dofblur7 = dofblur * 0.7;",
				"vec2 dofblur4 = dofblur * 0.4;",

				"vec4 col = vec4( 0.0 );",

				"col += texture2D( tDiffuse, vUv.xy );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );",

				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );",

				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );",

				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );",
				"col += texture2D( tDiffuse, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );",

				"gl_FragColor = col / 41.0;",
				"gl_FragColor.a = opacity;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author zz85 / https://github.com/zz85 | twitter.com/blurspline
	 *
	 * Depth-of-field shader with bokeh
	 * ported from GLSL shader by Martins Upitis
	 * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)
	 *
	 * Requires #define RINGS and SAMPLES integers
	 */



	THREE.BokehShader2 = {

		uniforms: {

			"textureWidth":  { type: "f", value: 1.0 },
			"textureHeight":  { type: "f", value: 1.0 },

			"focalDepth":   { type: "f", value: 1.0 },
			"focalLength":   { type: "f", value: 24.0 },
			"fstop": { type: "f", value: 0.9 },

			"tColor":   { type: "t", value: null },
			"tDepth":   { type: "t", value: null },

			"maxblur":  { type: "f", value: 1.0 },

			"showFocus":   { type: "i", value: 0 },
			"manualdof":   { type: "i", value: 0 },
			"vignetting":   { type: "i", value: 0 },
			"depthblur":   { type: "i", value: 0 },

			"threshold":  { type: "f", value: 0.5 },
			"gain":  { type: "f", value: 2.0 },
			"bias":  { type: "f", value: 0.5 },
			"fringe":  { type: "f", value: 0.7 },

			"znear":  { type: "f", value: 0.1 },
			"zfar":  { type: "f", value: 100 },

			"noise":  { type: "i", value: 1 },
			"dithering":  { type: "f", value: 0.0001 },
			"pentagon": { type: "i", value: 0 },

			"shaderFocus":  { type: "i", value: 1 },
			"focusCoords":  { type: "v2", value: new THREE.Vector2()},


		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"varying vec2 vUv;",

			"uniform sampler2D tColor;",
			"uniform sampler2D tDepth;",
			"uniform float textureWidth;",
			"uniform float textureHeight;",

			"const float PI = 3.14159265;",

			"float width = textureWidth; //texture width",
			"float height = textureHeight; //texture height",

			"vec2 texel = vec2(1.0/width,1.0/height);",

			"uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below",
			"uniform float focalLength; //focal length in mm",
			"uniform float fstop; //f-stop value",
			"uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)",

			"/*",
			"make sure that these two values are the same for your camera, otherwise distances will be wrong.",
			"*/",

			"uniform float znear; // camera clipping start",
			"uniform float zfar; // camera clipping end",

			"//------------------------------------------",
			"//user variables",

			"const int samples = SAMPLES; //samples on the first ring",
			"const int rings = RINGS; //ring count",

			"const int maxringsamples = rings * samples;",

			"uniform bool manualdof; // manual dof calculation",
			"float ndofstart = 1.0; // near dof blur start",
			"float ndofdist = 2.0; // near dof blur falloff distance",
			"float fdofstart = 1.0; // far dof blur start",
			"float fdofdist = 3.0; // far dof blur falloff distance",

			"float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)",

			"uniform bool vignetting; // use optical lens vignetting",

			"float vignout = 1.3; // vignetting outer border",
			"float vignin = 0.0; // vignetting inner border",
			"float vignfade = 22.0; // f-stops till vignete fades",

			"uniform bool shaderFocus;",

			"bool autofocus = shaderFocus;",
			"//use autofocus in shader - use with focusCoords",
			"// disable if you use external focalDepth value",

			"uniform vec2 focusCoords;",
			"// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)",
			"// if center of screen use vec2(0.5, 0.5);",

			"uniform float maxblur;",
			"//clamp value of max blur (0.0 = no blur, 1.0 default)",

			"uniform float threshold; // highlight threshold;",
			"uniform float gain; // highlight gain;",

			"uniform float bias; // bokeh edge bias",
			"uniform float fringe; // bokeh chromatic aberration / fringing",

			"uniform bool noise; //use noise instead of pattern for sample dithering",

			"uniform float dithering;",
			"float namount = dithering; //dither amount",

			"uniform bool depthblur; // blur the depth buffer",
			"float dbsize = 1.25; // depth blur size",

			"/*",
			"next part is experimental",
			"not looking good with small sample and ring count",
			"looks okay starting from samples = 4, rings = 4",
			"*/",

			"uniform bool pentagon; //use pentagon as bokeh shape?",
			"float feather = 0.4; //pentagon shape feather",

			"//------------------------------------------",

			"float penta(vec2 coords) {",
				"//pentagonal shape",
				"float scale = float(rings) - 1.3;",
				"vec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);",
				"vec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);",
				"vec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);",
				"vec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);",
				"vec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);",
				"vec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);",

				"vec4  one = vec4( 1.0 );",

				"vec4 P = vec4((coords),vec2(scale, scale));",

				"vec4 dist = vec4(0.0);",
				"float inorout = -4.0;",

				"dist.x = dot( P, HS0 );",
				"dist.y = dot( P, HS1 );",
				"dist.z = dot( P, HS2 );",
				"dist.w = dot( P, HS3 );",

				"dist = smoothstep( -feather, feather, dist );",

				"inorout += dot( dist, one );",

				"dist.x = dot( P, HS4 );",
				"dist.y = HS5.w - abs( P.z );",

				"dist = smoothstep( -feather, feather, dist );",
				"inorout += dist.x;",

				"return clamp( inorout, 0.0, 1.0 );",
			"}",

			"float bdepth(vec2 coords) {",
				"// Depth buffer blur",
				"float d = 0.0;",
				"float kernel[9];",
				"vec2 offset[9];",

				"vec2 wh = vec2(texel.x, texel.y) * dbsize;",

				"offset[0] = vec2(-wh.x,-wh.y);",
				"offset[1] = vec2( 0.0, -wh.y);",
				"offset[2] = vec2( wh.x -wh.y);",

				"offset[3] = vec2(-wh.x,  0.0);",
				"offset[4] = vec2( 0.0,   0.0);",
				"offset[5] = vec2( wh.x,  0.0);",

				"offset[6] = vec2(-wh.x, wh.y);",
				"offset[7] = vec2( 0.0,  wh.y);",
				"offset[8] = vec2( wh.x, wh.y);",

				"kernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;",
				"kernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;",
				"kernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;",


				"for( int i=0; i<9; i++ ) {",
					"float tmp = texture2D(tDepth, coords + offset[i]).r;",
					"d += tmp * kernel[i];",
				"}",

				"return d;",
			"}",


			"vec3 color(vec2 coords,float blur) {",
				"//processing the sample",

				"vec3 col = vec3(0.0);",

				"col.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;",
				"col.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;",
				"col.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;",

				"vec3 lumcoeff = vec3(0.299,0.587,0.114);",
				"float lum = dot(col.rgb, lumcoeff);",
				"float thresh = max((lum-threshold)*gain, 0.0);",
				"return col+mix(vec3(0.0),col,thresh*blur);",
			"}",

			"vec2 rand(vec2 coord) {",
				"// generating noise / pattern texture for dithering",

				"float noiseX = ((fract(1.0-coord.s*(width/2.0))*0.25)+(fract(coord.t*(height/2.0))*0.75))*2.0-1.0;",
				"float noiseY = ((fract(1.0-coord.s*(width/2.0))*0.75)+(fract(coord.t*(height/2.0))*0.25))*2.0-1.0;",

				"if (noise) {",
					"noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;",
					"noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;",
				"}",

				"return vec2(noiseX,noiseY);",
			"}",

			"vec3 debugFocus(vec3 col, float blur, float depth) {",
				"float edge = 0.002*depth; //distance based edge smoothing",
				"float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);",
				"float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);",

				"col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);",
				"col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);",

				"return col;",
			"}",

			"float linearize(float depth) {",
				"return -zfar * znear / (depth * (zfar - znear) - zfar);",
			"}",


			"float vignette() {",
				"float dist = distance(vUv.xy, vec2(0.5,0.5));",
				"dist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);",
				"return clamp(dist,0.0,1.0);",
			"}",

			"float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {",
				"float rings2 = float(rings);",
				"float step = PI*2.0 / float(ringsamples);",
				"float pw = cos(j*step)*i;",
				"float ph = sin(j*step)*i;",
				"float p = 1.0;",
				"if (pentagon) {",
					"p = penta(vec2(pw,ph));",
				"}",
				"col += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;",
				"return 1.0 * mix(1.0, i /rings2, bias) * p;",
			"}",

			"void main() {",
				"//scene depth calculation",

				"float depth = linearize(texture2D(tDepth,vUv.xy).x);",

				"// Blur depth?",
				"if (depthblur) {",
					"depth = linearize(bdepth(vUv.xy));",
				"}",

				"//focal plane calculation",

				"float fDepth = focalDepth;",

				"if (autofocus) {",

					"fDepth = linearize(texture2D(tDepth,focusCoords).x);",

				"}",

				"// dof blur factor calculation",

				"float blur = 0.0;",

				"if (manualdof) {",
					"float a = depth-fDepth; // Focal plane",
					"float b = (a-fdofstart)/fdofdist; // Far DoF",
					"float c = (-a-ndofstart)/ndofdist; // Near Dof",
					"blur = (a>0.0) ? b : c;",
				"} else {",
					"float f = focalLength; // focal length in mm",
					"float d = fDepth*1000.0; // focal plane in mm",
					"float o = depth*1000.0; // depth in mm",

					"float a = (o*f)/(o-f);",
					"float b = (d*f)/(d-f);",
					"float c = (d-f)/(d*fstop*CoC);",

					"blur = abs(a-b)*c;",
				"}",

				"blur = clamp(blur,0.0,1.0);",

				"// calculation of pattern for dithering",

				"vec2 noise = rand(vUv.xy)*namount*blur;",

				"// getting blur x and y step factor",

				"float w = (1.0/width)*blur*maxblur+noise.x;",
				"float h = (1.0/height)*blur*maxblur+noise.y;",

				"// calculation of final color",

				"vec3 col = vec3(0.0);",

				"if(blur < 0.05) {",
					"//some optimization thingy",
					"col = texture2D(tColor, vUv.xy).rgb;",
				"} else {",
					"col = texture2D(tColor, vUv.xy).rgb;",
					"float s = 1.0;",
					"int ringsamples;",

					"for (int i = 1; i <= rings; i++) {",
						"/*unboxstart*/",
						"ringsamples = i * samples;",

						"for (int j = 0 ; j < maxringsamples ; j++) {",
							"if (j >= ringsamples) break;",
							"s += gather(float(i), float(j), ringsamples, col, w, h, blur);",
						"}",
						"/*unboxend*/",
					"}",

					"col /= s; //divide by sample count",
				"}",

				"if (showFocus) {",
					"col = debugFocus(col, blur, depth);",
				"}",

				"if (vignetting) {",
					"col *= vignette();",
				"}",

				"gl_FragColor.rgb = col;",
				"gl_FragColor.a = 1.0;",
			"} "

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author tapio / http://tapio.github.com/
	 *
	 * Brightness and contrast adjustment
	 * https://github.com/evanw/glfx.js
	 * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)
	 * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)
	 */

	THREE.BrightnessContrastShader = {

		uniforms: {

			"tDiffuse":   { type: "t", value: null },
			"brightness": { type: "f", value: 0 },
			"contrast":   { type: "f", value: 0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",

				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform float brightness;",
			"uniform float contrast;",

			"varying vec2 vUv;",

			"void main() {",

				"gl_FragColor = texture2D( tDiffuse, vUv );",

				"gl_FragColor.rgb += brightness;",

				"if (contrast > 0.0) {",
					"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;",
				"} else {",
					"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;",
				"}",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Color correction
	 */

	THREE.ColorCorrectionShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"powRGB":   { type: "v3", value: new THREE.Vector3( 2, 2, 2 ) },
			"mulRGB":   { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",

				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform vec3 powRGB;",
			"uniform vec3 mulRGB;",

			"varying vec2 vUv;",

			"void main() {",

				"gl_FragColor = texture2D( tDiffuse, vUv );",
				"gl_FragColor.rgb = mulRGB * pow( gl_FragColor.rgb, powRGB );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Colorify shader
	 */

	THREE.ColorifyShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"color":    { type: "c", value: new THREE.Color( 0xffffff ) }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 color;",
			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 texel = texture2D( tDiffuse, vUv );",

				"vec3 luma = vec3( 0.299, 0.587, 0.114 );",
				"float v = dot( texel.xyz, luma );",

				"gl_FragColor = vec4( v * color, texel.w );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Convolution shader
	 * ported from o3d sample to WebGL / GLSL
	 * http://o3d.googlecode.com/svn/trunk/samples/convolution.html
	 */

	THREE.ConvolutionShader = {

		defines: {

			"KERNEL_SIZE_FLOAT": "25.0",
			"KERNEL_SIZE_INT": "25",

		},

		uniforms: {

			"tDiffuse":        { type: "t", value: null },
			"uImageIncrement": { type: "v2", value: new THREE.Vector2( 0.001953125, 0.0 ) },
			"cKernel":         { type: "fv1", value: [] }

		},

		vertexShader: [

			"uniform vec2 uImageIncrement;",

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float cKernel[ KERNEL_SIZE_INT ];",

			"uniform sampler2D tDiffuse;",
			"uniform vec2 uImageIncrement;",

			"varying vec2 vUv;",

			"void main() {",

				"vec2 imageCoord = vUv;",
				"vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );",

				"for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {",

					"sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];",
					"imageCoord += uImageIncrement;",

				"}",

				"gl_FragColor = sum;",

			"}"


		].join("\n"),

		buildKernel: function ( sigma ) {

			// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.

			function gauss( x, sigma ) {

				return Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );

			}

			var i, values, sum, halfWidth, kMaxKernelSize = 49, kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;

			if ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;
			halfWidth = ( kernelSize - 1 ) * 0.5;

			values = new Array( kernelSize );
			sum = 0.0;
			for ( i = 0; i < kernelSize; ++i ) {

				values[ i ] = gauss( i - halfWidth, sigma );
				sum += values[ i ];

			}

			// normalize the kernel

			for ( i = 0; i < kernelSize; ++i ) values[ i ] /= sum;

			return values;

		}

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Full-screen textured quad shader
	 */

	THREE.CopyShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"opacity":  { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",

			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 texel = texture2D( tDiffuse, vUv );",
				"gl_FragColor = opacity * texel;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {

	THREE.ClampShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"threshold":   { type: "f", value: 0.8 },
		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float threshold;",

			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 texel = texture2D( tDiffuse, vUv );",

				// "vec3 luma = vec3( 0.299, 0.587, 0.114 );",

				// "float v = dot( texel.xyz, luma );",
				// "vec3 normTex = normalize(texel.xyz);",

				"gl_FragColor.xyz = max( texel.xyz - threshold, 0.0 ) * 5.0;",
				"gl_FragColor.w = 1.0;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Depth-of-field shader using mipmaps
	 * - from Matt Handley @applmak
	 * - requires power-of-2 sized render target with enabled mipmaps
	 */

	THREE.DOFMipMapShader = {

		uniforms: {

			"tColor":   { type: "t", value: null },
			"tDepth":   { type: "t", value: null },
			"focus":    { type: "f", value: 1.0 },
			"maxblur":  { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float focus;",
			"uniform float maxblur;",

			"uniform sampler2D tColor;",
			"uniform sampler2D tDepth;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 depth = texture2D( tDepth, vUv );",

				"float factor = depth.x - focus;",

				"vec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );",

				"gl_FragColor = col;",
				"gl_FragColor.a = 1.0;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Dot screen shader
	 * based on glfx.js sepia shader
	 * https://github.com/evanw/glfx.js
	 */

	THREE.DotScreenShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"tSize":    { type: "v2", value: new THREE.Vector2( 256, 256 ) },
			"center":   { type: "v2", value: new THREE.Vector2( 0.5, 0.5 ) },
			"angle":    { type: "f", value: 1.57 },
			"scale":    { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec2 center;",
			"uniform float angle;",
			"uniform float scale;",
			"uniform vec2 tSize;",

			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			"float pattern() {",

				"float s = sin( angle ), c = cos( angle );",

				"vec2 tex = vUv * tSize - center;",
				"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;",

				"return ( sin( point.x ) * sin( point.y ) ) * 4.0;",

			"}",

			"void main() {",

				"vec4 color = texture2D( tDiffuse, vUv );",

				"float average = ( color.r + color.g + color.b ) / 3.0;",

				"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog
	 *
	 * Edge Detection Shader using Frei-Chen filter
	 * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector
	 *
	 * aspect: vec2 of (1/width, 1/height)
	 */

	THREE.EdgeShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"aspect":    { type: "v2", value: new THREE.Vector2( 512, 512 ) },
		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"varying vec2 vUv;",

			"uniform vec2 aspect;",

			"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);",


			"mat3 G[9];",

			// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45

			"const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );",
			"const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );",
			"const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );",
			"const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );",
			"const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );",
			"const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );",
			"const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );",
			"const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );",
			"const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );",

			"void main(void)",
			"{",

				"G[0] = g0,",
				"G[1] = g1,",
				"G[2] = g2,",
				"G[3] = g3,",
				"G[4] = g4,",
				"G[5] = g5,",
				"G[6] = g6,",
				"G[7] = g7,",
				"G[8] = g8;",

				"mat3 I;",
				"float cnv[9];",
				"vec3 sample;",

				/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */
				"for (float i=0.0; i<3.0; i++) {",
					"for (float j=0.0; j<3.0; j++) {",
						"sample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;",
						"I[int(i)][int(j)] = length(sample);",
					"}",
				"}",

				/* calculate the convolution values for all the masks */
				"for (int i=0; i<9; i++) {",
					"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);",
					"cnv[i] = dp3 * dp3;",
				"}",

				"float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);",
				"float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);",

				"gl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);",
			"}",

		].join("\n")
	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog
	 *
	 * Edge Detection Shader using Sobel filter
	 * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector
	 *
	 * aspect: vec2 of (1/width, 1/height)
	 */

	THREE.EdgeShader2 = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"aspect":    { type: "v2", value: new THREE.Vector2( 512, 512 ) },
			"colour":    { type: "c", value: new THREE.Color( 0xffffff ) },
		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"varying vec2 vUv;",
			"uniform vec2 aspect;",
			"uniform vec3 colour;",

			"void main(void)",
			"{",
				"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);",

				"mat3 G[2];",

				"const mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );",
				"const mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );",
				"mat3 I;",
				"float cnv[2];",
				"vec3 sample;",

				"G[0] = g0;",
				"G[1] = g1;",

				/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */
				// "for (float i=0.0; i<3.0; i++) {",
				// 	"for (float j=0.0; j<3.0; j++) {",
				// 		"sample = texture2D( tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;",
				// 		"I[int(i)][int(j)] = length(sample);",
				// 	"}",
				// "}",

				//OSX Yosemite with AMD cards seems to have trouble with the above loop. Unrolling...
				"I[0][0] = length(texture2D( tDiffuse, vUv + texel * vec2(-1.0,-1.0) ).rgb);",
				"I[0][1] = length(texture2D( tDiffuse, vUv + texel * vec2(-1.0,0.0) ).rgb);",
				"I[0][2] = length(texture2D( tDiffuse, vUv + texel * vec2(-1.0,1.0) ).rgb);",
				"I[1][0] = length(texture2D( tDiffuse, vUv + texel * vec2(0.0,-1.0) ).rgb);",
				"I[1][1] = length(texture2D( tDiffuse, vUv + texel * vec2(0.0,0.0) ).rgb);",
				"I[1][2] = length(texture2D( tDiffuse, vUv + texel * vec2(0.0,1.0) ).rgb);",
				"I[2][0] = length(texture2D( tDiffuse, vUv + texel * vec2(1.0,-1.0) ).rgb);",
				"I[2][1] = length(texture2D( tDiffuse, vUv + texel * vec2(1.0,0.0) ).rgb);",
				"I[2][2] = length(texture2D( tDiffuse, vUv + texel * vec2(1.0,1.0) ).rgb);",


				/* calculate the convolution values for all the masks */
				"for (int i=0; i<2; i++) {",
					"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);",
					"cnv[i] = dp3 * dp3; ",
				"}",

				"gl_FragColor = vec4(colour, sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));",
			"} ",

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Film grain & scanlines shader
	 *
	 * - ported from HLSL to WebGL / GLSL
	 * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html
	 *
	 * Screen Space Static Postprocessor
	 *
	 * Produces an analogue noise overlay similar to a film grain / TV static
	 *
	 * Original implementation and noise algorithm
	 * Pat 'Hawthorne' Shearon
	 *
	 * Optimized scanlines + noise version with intensity scaling
	 * Georg 'Leviathan' Steinrohder
	 *
	 * This version is provided under a Creative Commons Attribution 3.0 License
	 * http://creativecommons.org/licenses/by/3.0/
	 */

	THREE.FilmShader = {

		uniforms: {

			"tDiffuse":   { type: "t", value: null },
			"time":       { type: "f", value: 0.0 },
			"nIntensity": { type: "f", value: 0.5 },
			"sIntensity": { type: "f", value: 0.05 },
			"sCount":     { type: "f", value: 4096 },
			"grayscale":  { type: "i", value: 1 },

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			// control parameter
			"uniform float time;",

			"uniform bool grayscale;",

			// noise effect intensity value (0 = no effect, 1 = full effect)
			"uniform float nIntensity;",

			// scanlines effect intensity value (0 = no effect, 1 = full effect)
			"uniform float sIntensity;",

			// scanlines effect count value (0 = no effect, 4096 = full effect)
			"uniform float sCount;",

			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			"void main() {",

				// sample the source
				"vec4 cTextureScreen = texture2D( tDiffuse, vUv );",

				// make some noise
				"float x = vUv.x * vUv.y * time *  1000.0;",
				"x = mod( x, 13.0 ) * mod( x, 123.0 );",
				"float dx = mod( x, 0.01 );",

				// add noise
				"vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );",

				// get us a sine and cosine
				"vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );",

				// add scanlines
				"cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;",

				// interpolate between source and result by intensity
				"cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );",

				// convert to grayscale if desired
				"if( grayscale ) {",

					"cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );",

				"}",

				"gl_FragColor =  vec4( cResult, cTextureScreen.a );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Focus shader
	 * based on PaintEffect postprocess from ro.me
	 * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js
	 */

	THREE.FocusShader = {

		uniforms : {

			"tDiffuse":       { type: "t", value: null },
			"screenWidth":    { type: "f", value: 1024 },
			"screenHeight":   { type: "f", value: 1024 },
			"sampleDistance": { type: "f", value: 0.94 },
			"waveFactor":     { type: "f", value: 0.00125 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float screenWidth;",
			"uniform float screenHeight;",
			"uniform float sampleDistance;",
			"uniform float waveFactor;",

			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 color, org, tmp, add;",
				"float sample_dist, f;",
				"vec2 vin;",
				"vec2 uv = vUv;",

				"add = color = org = texture2D( tDiffuse, uv );",

				"vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );",
				"sample_dist = dot( vin, vin ) * 2.0;",

				"f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;",

				"vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );",

				"add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );",
				"if( tmp.b < color.b ) color = tmp;",

				"add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );",
				"if( tmp.b < color.b ) color = tmp;",

				"add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );",
				"if( tmp.b < color.b ) color = tmp;",

				"add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );",
				"if( tmp.b < color.b ) color = tmp;",

				"add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );",
				"if( tmp.b < color.b ) color = tmp;",

				"add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );",
				"if( tmp.b < color.b ) color = tmp;",

				"add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );",
				"if( tmp.b < color.b ) color = tmp;",

				"color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );",
				"color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );",

				"gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );",

			"}"


		].join("\n")
	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Based on Nvidia Cg tutorial
	 */

	THREE.FresnelShader = {

		uniforms: {

			"mRefractionRatio": { type: "f", value: 1.02 },
			"mFresnelBias": { type: "f", value: 0.1 },
			"mFresnelPower": { type: "f", value: 2.0 },
			"mFresnelScale": { type: "f", value: 1.0 },
			"tCube": { type: "t", value: null }

		},

		vertexShader: [

			"uniform float mRefractionRatio;",
			"uniform float mFresnelBias;",
			"uniform float mFresnelScale;",
			"uniform float mFresnelPower;",

			"varying vec3 vReflect;",
			"varying vec3 vRefract[3];",
			"varying float vReflectionFactor;",

			"void main() {",

				"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
				"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",

				"vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );",

				"vec3 I = worldPosition.xyz - cameraPosition;",

				"vReflect = reflect( I, worldNormal );",
				"vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );",
				"vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );",
				"vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );",
				"vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );",

				"gl_Position = projectionMatrix * mvPosition;",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform samplerCube tCube;",

			"varying vec3 vReflect;",
			"varying vec3 vRefract[3];",
			"varying float vReflectionFactor;",

			"void main() {",

				"vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );",
				"vec4 refractedColor = vec4( 1.0 );",

				"refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;",
				"refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;",
				"refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;",

				"gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author mrdoob / http://www.mrdoob.com
	 *
	 * Simple test shader
	 */

	THREE.BasicShader = {

		uniforms: {},

		vertexShader: [

			"void main() {",

				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"void main() {",

				"gl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author miibond
	 *
	 * Full-screen gamma-correction
	 */

	THREE.GammaShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
		},

		defines: {
			"GAMMA_VALUE" : 2.0,
		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"#if !defined(GAMMA_VALUE)",
				"#define GAMMA_VALUE 0.5",
			"#endif",

			"uniform sampler2D tDiffuse;",
			
			"varying vec2 vUv;",

			THREE.ShaderChunk['hdr_decode_pars_fragment'],
			THREE.ShaderChunk['hdr_encode_pars_fragment'],

			"void main() {",

				"vec4 texel = texture2D( tDiffuse, vUv );",
				
				"#if defined( HDR_INPUT ) && defined( HDR_INPUT_TYPE )",
					"#if ( HDR_INPUT_TYPE == HDR_TYPE_LOGLUV )",
						"gl_FragColor = vec4( HDRDecodeLOGLUV( texel ), 1.0 );",
					"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBM )",
						"gl_FragColor = vec4( HDRDecodeRGBM( texel ), 1.0 );",
					"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBD )",
						"gl_FragColor = vec4( HDRDecodeRGBD( texel ), 1.0 );",
					"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBE )",
						"gl_FragColor = vec4( HDRDecodeRGBE( texel ), 1.0 );",
					"#else",
						"gl_FragColor = texel;",
					"#endif",
				"#else",
					"gl_FragColor = texel;",
				"#endif",

				//Gamma 2.0
				// "#if ( GAMMA_VALUE == 2 )",
				// 	"gl_FragColor.xyz = sqrt( gl_FragColor.xyz );",
				// "#elif ( GAMMA_VALUE == 0.5 )",
					"gl_FragColor.xyz = gl_FragColor.xyz * gl_FragColor.xyz;",
				// "#else",
				// 	"gl_FragColor.xyz = pow( gl_FragColor.xyz, 1.0 / GAMMA_VALUE );",
				// "#endif",

			"}"

		].join("\n")

	};

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Two pass Gaussian blur filter (horizontal and vertical blur shaders)
	 * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/
	 *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html
	 *
	 * - 9 samples per pass
	 * - standard deviation 2.7
	 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
	 */

	THREE.HorizontalBlurShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"h":        { type: "f", value: 1.0 / 512.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform float h;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 sum = vec4( 0.0 );",

				"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;",
				"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;",
				"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;",
				"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
				"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;",
				"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;",
				"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;",
				"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;",

				"gl_FragColor = sum;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position
	 *
	 * - 9 samples per pass
	 * - standard deviation 2.7
	 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
	 * - "r" parameter control where "focused" horizontal line lies
	 */

	THREE.HorizontalTiltShiftShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"h":        { type: "f", value: 1.0 / 512.0 },
			"r":        { type: "f", value: 0.35 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform float h;",
			"uniform float r;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 sum = vec4( 0.0 );",

				"float hh = h * abs( r - vUv.y );",

				"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;",
				"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;",
				"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;",
				"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
				"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;",
				"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;",
				"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;",
				"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;",

				"gl_FragColor = sum;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author tapio / http://tapio.github.com/
	 *
	 * Hue and saturation adjustment
	 * https://github.com/evanw/glfx.js
	 * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.
	 * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)
	 */

	THREE.HueSaturationShader = {

		uniforms: {

			"tDiffuse":   { type: "t", value: null },
			"hue":        { type: "f", value: 0 },
			"saturation": { type: "f", value: 0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",

				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform float hue;",
			"uniform float saturation;",

			"varying vec2 vUv;",

			"void main() {",

				"gl_FragColor = texture2D( tDiffuse, vUv );",

				// hue
				"float angle = hue * 3.14159265;",
				"float s = sin(angle), c = cos(angle);",
				"vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;",
				"float len = length(gl_FragColor.rgb);",
				"gl_FragColor.rgb = vec3(",
					"dot(gl_FragColor.rgb, weights.xyz),",
					"dot(gl_FragColor.rgb, weights.zxy),",
					"dot(gl_FragColor.rgb, weights.yzx)",
				");",

				// saturation
				"float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;",
				"if (saturation > 0.0) {",
					"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));",
				"} else {",
					"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);",
				"}",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author felixturner / http://airtight.cc/
	 *
	 * Kaleidoscope Shader
	 * Radial reflection around center point
	 * Ported from: http://pixelshaders.com/editor/
	 * by Toby Schachman / http://tobyschachman.com/
	 *
	 * sides: number of reflections
	 * angle: initial angle in radians
	 */

	THREE.KaleidoShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"sides":    { type: "f", value: 6.0 },
			"angle":    { type: "f", value: 0.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform float sides;",
			"uniform float angle;",
			
			"varying vec2 vUv;",

			"void main() {",

				"vec2 p = vUv - 0.5;",
				"float r = length(p);",
				"float a = atan(p.y, p.x) + angle;",
				"float tau = 2. * 3.1416 ;",
				"a = mod(a, tau/sides);",
				"a = abs(a - tau/sides/2.) ;",
				"p = r * vec2(cos(a), sin(a));",
				"vec4 color = texture2D(tDiffuse, p + 0.5);",
				"gl_FragColor = color;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Luminosity
	 * http://en.wikipedia.org/wiki/Luminosity
	 */

	THREE.LuminosityShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"maxLuminance": { type: "f", value: 100.0 }
		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",

				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"#ifdef MAX_LUMINANCE",
				"uniform float maxLuminance;",
			"#endif",

			"varying vec2 vUv;",

			THREE.ShaderChunk[ "hdr_decode_pars_fragment" ],
			THREE.ShaderChunk[ "hdr_encode_pars_fragment" ],

			"void main() {",

				"vec4 texel = texture2D( tDiffuse, vUv );",
				
				"#if defined( HDR_INPUT ) && defined( HDR_INPUT_TYPE )",
					"#if ( HDR_INPUT_TYPE == HDR_TYPE_LOGLUV )",
						"texel.xyz = HDRDecodeLOGLUV( texel );",
					"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBM )",
						"texel.xyz = HDRDecodeRGBM( texel );",
					"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBD )",
						"texel.xyz = HDRDecodeRGBD( texel );",
					"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBE )",
						"texel.xyz = HDRDecodeRGBE( texel );",
					"#endif",
				"#endif",

				"vec3 luma = vec3( 0.299, 0.587, 0.114 );",

				"float v = dot( texel.xyz, luma );",

				"#ifdef MAX_LUMINANCE",
					"v = clamp( v, 0.0, maxLuminance );",
				"#endif",
				"gl_FragColor = vec4( v, v, v, texel.w );",

				THREE.ShaderChunk[ "hdr_encode_fragment" ],

			"}"

		].join("\n")

	};

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author felixturner / http://airtight.cc/
	 *
	 * Mirror Shader
	 * Copies half the input to the other half
	 *
	 * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)
	 */

	THREE.MirrorShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"side":     { type: "i", value: 1 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform int side;",
			
			"varying vec2 vUv;",

			"void main() {",

				"vec2 p = vUv;",
				"if (side == 0){",
					"if (p.x > 0.5) p.x = 1.0 - p.x;",
				"}else if (side == 1){",
					"if (p.x < 0.5) p.x = 1.0 - p.x;",
				"}else if (side == 2){",
					"if (p.y < 0.5) p.y = 1.0 - p.y;",
				"}else if (side == 3){",
					"if (p.y > 0.5) p.y = 1.0 - p.y;",
				"} ",
				"vec4 color = texture2D(tDiffuse, p);",
				"gl_FragColor = color;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Normal map shader
	 * - compute normals from heightmap
	 */

	THREE.NormalMapShader = {

		uniforms: {

			"heightMap":  { type: "t", value: null },
			"resolution": { type: "v2", value: new THREE.Vector2( 512, 512 ) },
			"scale":      { type: "v2", value: new THREE.Vector2( 1, 1 ) },
			"height":     { type: "f", value: 0.05 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float height;",
			"uniform vec2 resolution;",
			"uniform sampler2D heightMap;",

			"varying vec2 vUv;",

			"void main() {",

				"float val = texture2D( heightMap, vUv ).x;",

				"float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;",
				"float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;",

				"gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author felixturner / http://airtight.cc/
	 *
	 * RGB Shift Shader
	 * Shifts red and blue channels from center in opposite directions
	 * Ported from http://kriss.cx/tom/2009/05/rgb-shift/
	 * by Tom Butterworth / http://kriss.cx/tom/
	 *
	 * amount: shift distance (1 is width of input)
	 * angle: shift angle in radians
	 */

	THREE.RGBShiftShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"amount":   { type: "f", value: 0.005 },
			"angle":    { type: "f", value: 0.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform float amount;",
			"uniform float angle;",

			"varying vec2 vUv;",

			"void main() {",

				"vec2 offset = amount * vec2( cos(angle), sin(angle));",
				"vec4 cr = texture2D(tDiffuse, vUv + offset);",
				"vec4 cga = texture2D(tDiffuse, vUv);",
				"vec4 cb = texture2D(tDiffuse, vUv - offset);",
				"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Sepia tone shader
	 * based on glfx.js sepia shader
	 * https://github.com/evanw/glfx.js
	 */

	THREE.SepiaShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"amount":   { type: "f", value: 1.0 },
			"opacity": { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float amount;",
			"uniform float opacity;",

			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 color = texture2D( tDiffuse, vUv );",
				"vec3 c = color.rgb;",

				"color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );",
				"color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );",
				"color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );",

				"gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), opacity * color.a );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Screen-space ambient occlusion shader
	 * - ported from
	 *   SSAO GLSL shader v1.2
	 *   assembled by Martins Upitis (martinsh) (http://devlog-martinsh.blogspot.com)
	 *   original technique is made by ArKano22 (http://www.gamedev.net/topic/550699-ssao-no-halo-artifacts/)
	 * - modifications
	 * - modified to use RGBA packed depth texture (use clear color 1,1,1,1 for depth pass)
	 * - refactoring and optimizations
	 */

	THREE.SSAOShader = {

		uniforms: //THREE.UniformsUtils.merge( [
			// THREE.UniformsLib[ "fog" ],
			{

			"tDiffuse":     { type: "t", value: null },
			"tDepth":       { type: "t", value: null },
			"size":         { type: "v2", value: new THREE.Vector2( 512, 512 ) },
			"cameraNear":   { type: "f", value: 1 },
			"cameraFar":    { type: "f", value: 100 },
			"onlyAO":       { type: "i", value: 0 },
			"aoClamp":      { type: "f", value: 0.5 },
			"lumInfluence": { type: "f", value: 0.5 },
			"noiseAmount": { type: "f", value: 0.0003 },
			"radius": { type: "f", value: 5.0 },
			"diffArea": { type: "f", value: 0.4 },
			"gDisplace": { type: "f", value: 0.4 },
			"fogEnabled": { type: "i", value: 1 },
			"fogDensity": { type: "f", value: 0.0025 },
			"depthScale": { type: "f", value: 1000.0 },
			"opacity": { type: "f", value: 1.0 }
		},
			// ] ),
		

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",

				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			//THREE.ShaderChunk['fog_pars_fragment'],
			"uniform int fogEnabled;",
			"uniform float fogDensity;",
			"uniform float depthScale;",
			// "uniform float fogFar;",
			"uniform float cameraNear;",
			"uniform float cameraFar;",

			"uniform bool onlyAO;",      // use only ambient occlusion pass?

			"uniform vec2 size;",        // texture width, height
			"uniform float aoClamp;",    // depth clamp - reduces haloing at screen edges

			"uniform float lumInfluence;",  // how much luminance affects occlusion

			"uniform sampler2D tDiffuse;",
			"uniform sampler2D tDepth;",

			"varying vec2 vUv;",

			// "#define PI 3.14159265",
			"#define DL 2.399963229728653",  // PI * ( 3.0 - sqrt( 5.0 ) )
			"#define EULER 2.718281828459045",

			// helpers

			"float width = size.x;",   // texture width
			"float height = size.y;",  // texture height

			"float cameraFarPlusNear = cameraFar + cameraNear;",
			"float cameraFarMinusNear = cameraFar - cameraNear;",
			"float cameraCoef = 2.0 * cameraNear;",

			// user variables

			"const int samples = 16;",     // ao sample count
			"uniform float radius;",  // ao radius

			"const bool useNoise = true;",      // use noise instead of pattern for sample dithering
			"uniform float noiseAmount;", // dithering amount

			"uniform float diffArea;",   // self-shadowing reduction
			"uniform float gDisplace;",  // gauss bell center
			"uniform float opacity;",


			// RGBA depth

			"float unpackDepth( const in vec4 rgba_depth ) {",

				"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
				"float depth = dot( rgba_depth, bit_shift );",
				"return depth;",

			"}",

			// generating noise / pattern texture for dithering

			"vec2 rand( const vec2 coord ) {",

				"vec2 noise;",

				"if ( useNoise ) {",

					"float nx = dot ( coord, vec2( 12.9898, 78.233 ) );",
					"float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );",

					"noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );",

				"} else {",

					"float ff = fract( 1.0 - coord.s * ( width / 2.0 ) );",
					"float gg = fract( coord.t * ( height / 2.0 ) );",

					"noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;",

				"}",

				"return ( noise * 2.0  - 1.0 ) * noiseAmount;",

			"}",

			// "#ifdef USE_FOG",
			"float doFog() {",
				"float zdepth = unpackDepth( texture2D( tDepth, vUv ) );",
				"float depth = -cameraFar * cameraNear / ( zdepth * cameraFarMinusNear - cameraFar );",
				// "return smoothstep( fogNear, fogFar, depth );",


			// "	#ifdef USE_LOGDEPTHBUF_EXT",

			// "		float depth = gl_FragDepthEXT / gl_FragCoord.w;",

			// "	#else",

			// "		float depth = gl_FragCoord.z / gl_FragCoord.w;",

			// "	#endif",

			// "	#ifdef FOG_EXP2",
			"float depthShift = depth * 0.001;",
				  "float densityShift = fogDensity * 1000.0;",
						//const float LOG2 = 1.442695;
						"float fogFactor = 1.0 - clamp( 1.0 / exp( densityShift * densityShift * depthShift * depthShift ), 0.0, 1.0);",

			// "		const float LOG2 = 1.442695;",
			// "		float fogFactor = exp2( - fogDensity * fogDensity * zdepth * zdepth * LOG2 );",
			// "		fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );",

			// "	#else",

			// "		float fogFactor = smoothstep( fogNear, fogFar, depth );",

			// "	#endif",

			//"	gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );",
			"	return fogFactor;",

			"}",
			// "#endif",

			"float readDepth( const in vec2 coord ) {",

				// "return ( 2.0 * cameraNear ) / ( cameraFar + cameraNear - unpackDepth( texture2D( tDepth, coord ) ) * ( cameraFar - cameraNear ) );",
				"return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );",


			"}",

			"float compareDepths( const in float depth1, const in float depth2, inout int far ) {",

				"float garea = 2.0;",                         // gauss bell width
				"float diff = ( depth1 - depth2 ) * depthScale;",  // depth difference (0-100)

				// reduce left bell width to avoid self-shadowing

				"if ( diff < gDisplace ) {",

					"garea = diffArea;",

				"} else {",

					"far = 1;",

				"}",

				"float dd = diff - gDisplace;",
				"float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );",
				"return gauss;",

			"}",

			"float calcAO( float depth, float dw, float dh ) {",

				"float dd = radius - depth * radius;",
				"vec2 vv = vec2( dw, dh );",

				"vec2 coord1 = vUv + dd * vv;",
				"vec2 coord2 = vUv - dd * vv;",

				"float temp1 = 0.0;",
				"float temp2 = 0.0;",

				"int far = 0;",
				"temp1 = compareDepths( depth, readDepth( coord1 ), far );",

				// DEPTH EXTRAPOLATION

				"if ( far > 0 ) {",

					"temp2 = compareDepths( readDepth( coord2 ), depth, far );",
					"temp1 += ( 1.0 - temp1 ) * temp2;",

				"}",

				"return temp1;",

			"}",

			"void main() {",

				"vec2 noise = rand( vUv );",
				"float depth = readDepth( vUv );",

				"float tt = clamp( depth, aoClamp, 1.0 );",

				"float w = ( 1.0 / width )  / tt + ( noise.x * ( 1.0 - noise.x ) );",
				"float h = ( 1.0 / height ) / tt + ( noise.y * ( 1.0 - noise.y ) );",

				"float ao = 0.0;",

				"float dz = 1.0 / float( samples );",
				"float z = 1.0 - dz / 2.0;",
				"float l = 0.0;",

				"for ( int i = 0; i <= samples; i ++ ) {",

					"float r = sqrt( 1.0 - z );",

					"float pw = cos( l ) * r;",
					"float ph = sin( l ) * r;",
					"ao += calcAO( depth, pw * w, ph * h );",
					"z = z - dz;",
					"l = l + DL;",

				"}",

				"ao /= float( samples );",
				"ao = 1.0 - ao;",
				"if ( fogEnabled == 1 ) {",
					"ao = mix( ao, 1.0, doFog() );",
				"}",

				"vec3 color = texture2D( tDiffuse, vUv ).rgb;",

				"vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );",
				"float lum = dot( color.rgb, lumcoeff );",
				"vec3 luminance = vec3( lum );",

				"vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );",  // mix( color * ao, white, luminance )

				"if ( onlyAO ) {",

					"final = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );",  // ambient occlusion only

				"}",

				"gl_FragColor = vec4( final, opacity );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Triangle blur shader
	 * based on glfx.js triangle blur shader
	 * https://github.com/evanw/glfx.js
	 *
	 * A basic blur filter, which convolves the image with a
	 * pyramid filter. The pyramid filter is separable and is applied as two
	 * perpendicular triangle filters.
	 */

	THREE.TriangleBlurShader = {

		uniforms : {

			"texture": { type: "t", value: null },
			"delta":   { type: "v2", value:new THREE.Vector2( 1, 1 )  }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"#define ITERATIONS 10.0",

			"uniform sampler2D texture;",
			"uniform vec2 delta;",

			"varying vec2 vUv;",

			"float random( vec3 scale, float seed ) {",

				// use the fragment position for a different seed per-pixel

				"return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );",

			"}",

			"void main() {",

				"vec4 color = vec4( 0.0 );",

				"float total = 0.0;",

				// randomize the lookup values to hide the fixed number of samples

				"float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );",

				"for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {",

					"float percent = ( t + offset - 0.5 ) / ITERATIONS;",
					"float weight = 1.0 - abs( percent );",

					"color += texture2D( texture, vUv + delta * percent ) * weight;",
					"total += weight;",

				"}",

				"gl_FragColor = color / total;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author miibond
	 *
	 * Full-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf
	 */

	THREE.ToneMapShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"averageLuminance":  { type: "f", value: 1.0 },
			"luminanceMap":  { type: "t", value: null },
			"maxLuminance":  { type: "f", value: 16.0 },
			"exposureBias":  { type: "f", value: 0.6 },
			"maxLuminanceRT":  { type: "t", value: null },
		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"#ifdef ADAPT_WHITE_BALANCE",
				"uniform sampler2D maxLuminanceRT;",
			"#else",
				"uniform float maxLuminance;",
			"#endif",

			"varying vec2 vUv;",

			"uniform float exposureBias;",
			
			"#ifdef SAMPLE_LUMINANCE",
				"uniform sampler2D luminanceMap;",
			"#else",
				"uniform float averageLuminance;",
			"#endif",

			THREE.ShaderChunk['hdr_decode_pars_fragment'],
			THREE.ShaderChunk['hdr_encode_pars_fragment'],

			// #ifdef FILMIC_UC2
			// From Uncharted 2 - http://www.slideshare.net/ozlael/hable-john-uncharted2-hdr-lighting
				"uniform float whiteScale;",
				"const float A = 0.15;",// A = Shoulder Strength
		    "const float B = 0.50;",// B = Linear Strength
		    "const float C = 0.10;",// C = Linear Angle
		    "const float D = 0.20;",// D = Toe Strength
		    "const float E = 0.02;",// E = Toe Numerator
		    "const float F = 0.30;",// F = Toe Denominator

		    "vec3 UC2Tonemap( vec3 x ) {",
		      "return ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;",
		    "}",
		  // #endif
			
			"const vec3 LUM_CONVERT = vec3(0.299, 0.587, 0.114);",

			"vec3 ToneMap( vec3 vColor ) {",
				"#ifdef SAMPLE_LUMINANCE",
					// Get the calculated average luminance 
					"vec4 lumAvg = texture2D(luminanceMap, vUv);",
					"float fLumAvg = lumAvg.r;",
					"#if defined( HDR_INPUT ) && defined( HDR_INPUT_TYPE )",
						"#if ( HDR_INPUT_TYPE == HDR_TYPE_LOGLUV )",
							"fLumAvg = HDRDecodeLOGLUV( lumAvg ).r;",
						"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBM )",
							"fLumAvg = HDRDecodeRGBM( lumAvg ).r;",
						"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBD )",
							"fLumAvg = HDRDecodeRGBD( lumAvg ).r;",
						"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBE )",
							"fLumAvg = HDRDecodeRGBE( lumAvg ).r;",
						"#endif",
					"#endif",
				"#else",
					"float fLumAvg = averageLuminance;",
				"#endif",
				
				// "#if defined( FILMIC_UC2 )",
				"#ifdef ADAPT_WHITE_BALANCE",
					"vec3 maxLum = texture2D( maxLuminanceRT, vUv ).rgb;",
					"vec3 white = 1.0 / UC2Tonemap( maxLum );",
				"#else",
					"vec3 white = vec3(maxLuminance);",
				"#endif",
	      // "maxLum = log2( maxLum * 1.5 + 3.5 );",
	      // "vColor *= vec3( 16.0 );",
				"vec3 curr = UC2Tonemap( (exposureBias / (fLumAvg + 0.025)) * vColor );",
				// "vec3 curr = UC2Tonemap( exposureBias * vColor );",
				// "vec3 whiteScale = 1.0 / UC2Tonemap(white);",
				
				"return curr * white;",
	            
				// "#else",//Reinhard Tonemapping
				// 	// Calculate the luminance of the current pixel
				// 	"float fLumPixel = dot(vColor, LUM_CONVERT);",

				// 	// Apply the modified operator (Eq. 4)
				// 	"float fLumScaled = (fLumPixel * exposureBias) / fLumAvg;",

				// 	"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);",
				// 	"return fLumCompressed * vColor;",
				// "#endif",
			"}",

			"void main() {",

				"vec4 texel = texture2D( tDiffuse, vUv );",
				
				"#if defined( HDR_INPUT ) && defined( HDR_INPUT_TYPE )",
					"#if ( HDR_INPUT_TYPE == HDR_TYPE_LOGLUV )",
						"gl_FragColor = vec4( ToneMap( HDRDecodeLOGLUV( texel ) ), 1.0 );",
					"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBM )",
						"gl_FragColor = vec4( ToneMap( HDRDecodeRGBM( texel ) ), 1.0 );",
					"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBD )",
						"gl_FragColor = vec4( ToneMap( HDRDecodeRGBD( texel ) ), 1.0 );",
					"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBE )",
						"gl_FragColor = vec4( ToneMap( HDRDecodeRGBE( texel ) ), 1.0 );",
					"#else",
						"gl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );",
					"#endif",
				"#else",
					"gl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );",
				"#endif",

				//Gamma 2.0
				"gl_FragColor.xyz = sqrt( gl_FragColor.xyz );",

			"}"

		].join("\n")

	};

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Unpack RGBA depth shader
	 * - show RGBA encoded depth as monochrome color
	 */

	THREE.UnpackDepthRGBAShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"opacity":  { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",

			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			// RGBA depth

			"float unpackDepth( const in vec4 rgba_depth ) {",

				"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
				"float depth = dot( rgba_depth, bit_shift );",
				"return depth;",

			"}",

			"void main() {",

				"float depth = 1.0 - unpackDepth( texture2D( tDiffuse, vUv ) );",
				"gl_FragColor = opacity * vec4( vec3( depth ), 1.0 );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author miibond
	 *
	 * Unpack HDR texture in a variety of packing formats to full, 16-bit colour
	 */

	THREE.UnpackHDRShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"rgbmMultiplier":  { type: "f", value: 9.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"#ifdef FLIP_Y",
					"vUv.y = 1.0 - vUv.y;",
				"#endif",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [
			"uniform sampler2D tDiffuse;",
			"uniform float rgbmMultiplier;",

			// Inverse logLuvMatrix matrix, for decoding
			"const mat3 InverseLogLuvMatrix = mat3(",
			  "6.0014, -2.7008, -1.7996,",
				"-1.3320,  3.1029, -5.7721,",
				"0.3008, -1.0882,  5.6268);",

			"vec3 HDRDecodeLOGLUV(in vec4 vLogLuv)",
			"{",
			  // Based on http://www.xnainfo.com/content.php?content=28
			  "float Le = vLogLuv.z * 255.0 + vLogLuv.w;",
			  "vec3 Xp_Y_XYZp;",
			  "Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);",
			  "Xp_Y_XYZp.z = Xp_Y_XYZp.y / vLogLuv.y;",
			  "Xp_Y_XYZp.x = vLogLuv.x * Xp_Y_XYZp.z;",
			  "vec3 vRGB = InverseLogLuvMatrix * Xp_Y_XYZp;",
			  "return vRGB;",
			"}",

			"vec3 HDRDecodeRGBM( vec4 rgbm ) {",
			  //Based on http://vemberaudio.se/graphics/RGBdiv8.pdf
			  "return rgbmMultiplier * rgbm.rgb * rgbm.a;",
			"}",

			"vec3 HDRDecodeRGBD( vec4 rgbd ) {",
			  //Based on http://vemberaudio.se/graphics/RGBdiv8.pdf
			  "return rgbd.rgb / max(rgbd.a, 0.003);",
			"}",

			"vec3 HDRDecodeRGBE( vec4 rgbe ) {",
			  //Based on http://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c
			  "float f = exp2( rgbe.w * 255.0 - (128.0 + 0.0) );",
			  "return rgbe.rgb * f;",
			"}",

			"varying vec2 vUv;",

			"void main() {",

				"vec3 hdrColour;",
				"#ifdef HDR_RGBM",
					"hdrColour = HDRDecodeRGBM( texture2D( tDiffuse, vUv ) );",
				"#elif defined(HDR_RGBD)",
					"hdrColour = HDRDecodeRGBD( texture2D( tDiffuse, vUv ) );",
				"#elif defined(HDR_RGBE)",
					"hdrColour = HDRDecodeRGBE( texture2D( tDiffuse, vUv ) );",
				"#elif defined(HDR_LOGLUV)",
					"hdrColour = HDRDecodeLOGLUV( texture2D( tDiffuse, vUv ) );",
				"#else",
					"hdrColour = texture2D( tDiffuse, vUv ).xyz;",
				"#endif",

				"gl_FragColor = vec4( hdrColour, 1.0 );",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Two pass Gaussian blur filter (horizontal and vertical blur shaders)
	 * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/
	 *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html
	 *
	 * - 9 samples per pass
	 * - standard deviation 2.7
	 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
	 */

	THREE.VerticalBlurShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"v":        { type: "f", value: 1.0 / 512.0 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform float v;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 sum = vec4( 0.0 );",

				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;",

				"gl_FragColor = sum;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position
	 *
	 * - 9 samples per pass
	 * - standard deviation 2.7
	 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
	 * - "r" parameter control where "focused" horizontal line lies
	 */

	THREE.VerticalTiltShiftShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"v":        { type: "f", value: 1.0 / 512.0 },
			"r":        { type: "f", value: 0.35 }

		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform sampler2D tDiffuse;",
			"uniform float v;",
			"uniform float r;",

			"varying vec2 vUv;",

			"void main() {",

				"vec4 sum = vec4( 0.0 );",

				"float vv = v * abs( r - vUv.y );",

				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;",
				"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;",

				"gl_FragColor = sum;",

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Vignette shader
	 * based on PaintEffect postprocess from ro.me
	 * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js
	 */

	THREE.VignetteShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"offset":   { type: "f", value: 1.0 },
			"darkness": { type: "f", value: 1.0 },
			"opacity": { type: "f", value: 1.0 }
		},

		vertexShader: [

			"varying vec2 vUv;",

			"void main() {",

				"vUv = uv;",
				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float offset;",
			"uniform float darkness;",
			"uniform float opacity;",

			"uniform sampler2D tDiffuse;",

			"varying vec2 vUv;",

			"void main() {",

				// Eskil's vignette

				"vec4 texel = texture2D( tDiffuse, vUv );",
				"vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );",
				"gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a * opacity );",

				/*
				// alternative version from glfx.js
				// this one makes more "dusty" look (as opposed to "burned")

				"vec4 color = texture2D( tDiffuse, vUv );",
				"float dist = distance( vUv, vec2( 0.5 ) );",
				"color.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );",
				"gl_FragColor = color;",
				*/

			"}"

		].join("\n")

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.TexturePass = function ( texture, opacity ) {

			if ( THREE.CopyShader === undefined )
				console.error( "THREE.TexturePass relies on THREE.CopyShader" );

			var shader = THREE.CopyShader;

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			this.uniforms[ "opacity" ].value = ( opacity !== undefined ) ? opacity : 1.0;
			this.uniforms[ "tDiffuse" ].value = texture;

			this.material = new THREE.ShaderMaterial( {

				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			this.enabled = true;
			this.needsSwap = false;


			this.camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.TexturePass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				this.quad.material = this.material;

				renderer.render( this.scene, this.camera, readBuffer );

			}

		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(THREE) {
	/**
	 * @author miibond
	 * Generate a texture that represents the luminosity of the current scene, adapted over time
	 * to simulate the optic nerve responding to the amount of light it is receiving.
	 * Based on a GDC2007 presentation by Wolfgang Engel titled "Post-Processing Pipeline"
	 *
	 * Full-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf
	 */

	THREE.AdaptiveToneMappingPass = function ( adaptive, resolution ) {

		this.resolution = ( resolution !== undefined ) ? resolution : 256;
		this.needsUpdate = true;
		this.adaptive = adaptive !== undefined? !!adaptive : true;
		this.needsManualDownSample = false;

		this.luminanceRT = null;
		this.previousLuminanceRT = null;
		this.currentLuminanceRT = null;
		this.currentLuminanceRTDownSampled = [];

		this.maxLuminanceRT = null;
		this.previousMaxLuminanceRT = null;
		this.currentMaxLuminanceRT = [];

		if ( THREE.CopyShader === undefined )
			console.error( "THREE.AdaptiveToneMappingPass relies on THREE.CopyShader" );

		var copyShader = THREE.CopyShader;

		this.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );

		this.materialCopy = new THREE.ShaderMaterial( {

			uniforms: this.copyUniforms,
			vertexShader: copyShader.vertexShader,
			fragmentShader: copyShader.fragmentShader,
			blending: THREE.NoBlending,
			depthTest: false,
			depthWrite: false,
		} );

		if ( THREE.LuminosityShader === undefined )
			console.error( "THREE.AdaptiveToneMappingPass relies on THREE.LuminosityShader" );

		this.materialLuminance = new THREE.ShaderMaterial( {

			uniforms: THREE.UniformsUtils.clone( THREE.LuminosityShader.uniforms ),
			vertexShader: THREE.LuminosityShader.vertexShader,
			fragmentShader: THREE.LuminosityShader.fragmentShader,
			blending: THREE.NoBlending,
			depthTest: false,
			depthWrite: false,
			name: "Luminance",
			defines: {"MAX_LUMINANCE": ""}
		} );

		this.adaptLuminanceShader = {
			defines: {
				"MIP_LEVEL_1X1" : Math.log2( this.resolution ).toFixed(1),
			},
			uniforms: {
				"lastLum": { type: "t", value: null },
				"currentLum": { type: "t", value: null },
				"delta": { type: 'f', value: 0.016 },
				"tau": { type: 'f', value: 1.0 }
			},
			vertexShader: [
				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"
			].join('\n'),
			fragmentShader: [
				"varying vec2 vUv;",

				"uniform sampler2D lastLum;",
				"uniform sampler2D currentLum;",
				"uniform float delta;",
				"uniform float tau;",
				THREE.ShaderChunk[ "hdr_decode_pars_fragment" ],
				THREE.ShaderChunk[ "hdr_encode_pars_fragment" ],

				"void main() {",

					"vec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );",
					"vec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );",

					"#if defined( HDR_INPUT ) && defined( HDR_INPUT_TYPE )",
						"#if ( HDR_INPUT_TYPE == HDR_TYPE_LOGLUV )",
							"float fLastLum = HDRDecodeLOGLUV( lastLum ).r;",
							"float fCurrentLum = HDRDecodeLOGLUV( currentLum ).r;",
						"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBM )",
							"float fLastLum = HDRDecodeRGBM( lastLum ).r;",
							"float fCurrentLum = HDRDecodeRGBM( currentLum ).r;",
						"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBD )",
							"float fLastLum = HDRDecodeRGBD( lastLum ).r;",
							"float fCurrentLum = HDRDecodeRGBD( currentLum ).r;",
						"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBE )",
							"float fLastLum = HDRDecodeRGBE( lastLum ).r;",
							"float fCurrentLum = HDRDecodeRGBE( currentLum ).r;",
						"#else",
							"float fLastLum = lastLum.r;",
							"float fCurrentLum = currentLum.r;",
						"#endif",
					"#else",
							"float fLastLum = lastLum.r;",
							"float fCurrentLum = currentLum.r;",
					"#endif",

					//The adaption seems to work better in extreme lighting differences
					//if the input luminance is squared.
					// "fCurrentLum = pow( fCurrentLum, 2.0 );",

					// Adapt the luminance using Pattanaik's technique
					"float fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));",
					// "fAdaptedLum = sqrt(fAdaptedLum);",
					"gl_FragColor = vec4( vec3( fAdaptedLum ), 1.0 );",
					THREE.ShaderChunk[ "hdr_encode_fragment" ],
				"}",
			].join('\n')
		};

		this.materialAdaptiveLum = new THREE.ShaderMaterial( {

			uniforms: this.adaptLuminanceShader.uniforms,
			vertexShader: this.adaptLuminanceShader.vertexShader,
			fragmentShader: this.adaptLuminanceShader.fragmentShader,
			defines: this.adaptLuminanceShader.defines,
			blending: THREE.NoBlending,
			depthTest: false,
			depthWrite: false,
			name: "Adaptive Luminance"
		} );

		if ( THREE.ToneMapShader === undefined )
			console.error( "THREE.AdaptiveToneMappingPass relies on THREE.ToneMapShader" );

		this.materialToneMap = new THREE.ShaderMaterial( {

			uniforms: THREE.UniformsUtils.clone( THREE.ToneMapShader.uniforms ),
			vertexShader: THREE.ToneMapShader.vertexShader,
			fragmentShader: THREE.ToneMapShader.fragmentShader,
			blending: THREE.NoBlending,
			depthTest: false,
			depthWrite: false,
			name: "Tone Map"
		} );

		this.downSampleShader = {
			// defines: {
			// 	"RESOLUTION" : this.resolution.toFixed(1),
			// },
			uniforms: {
				"tDiffuse": { type: "t", value: null },
				"resolution": { type: "v2", value: new THREE.Vector2() },
				"encode": { type: 'i', value: 1 },
				// "tau": { type: 'f', value: 1.0 }
			},
			vertexShader: [
				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"
			].join('\n'),
			fragmentShader: [
				"varying vec2 vUv;",
				"uniform sampler2D tDiffuse;",
				"uniform vec2 resolution;",
				THREE.ShaderChunk[ "hdr_decode_pars_fragment" ],
				THREE.ShaderChunk[ "hdr_encode_pars_fragment" ],

				"void main() {",
					"vec2 offset = 0.5 / resolution;",
					"vec4 luminosity;",
					"vec4 samples[ 4 ];",

	        "samples[0] = texture2D( tDiffuse, vUv + vec2( -offset.x, -offset.x ) );",
	        "samples[1] = texture2D( tDiffuse, vUv + vec2( offset.x, -offset.x ) );",
	        "samples[2] = texture2D( tDiffuse, vUv + vec2( offset.x, offset.y ) );",
	        "samples[3] = texture2D( tDiffuse, vUv + vec2( -offset.x, offset.y ) );",

					"for ( int i = 0; i < 4; i++ ) {",
						"#if defined( HDR_INPUT ) && defined( HDR_INPUT_TYPE )",
							"#if ( HDR_INPUT_TYPE == HDR_TYPE_LOGLUV )",
								"luminosity[ i ] = HDRDecodeLOGLUV( samples[i] ).r;",
							"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBM )",
								"luminosity[ i ] = HDRDecodeRGBM( samples[i] ).r;",
							"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBD )",
								"luminosity[ i ] = HDRDecodeRGBD( samples[i] ).r;",
							"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBE )",
								"luminosity[ i ] = HDRDecodeRGBE( samples[i] ).r;",
							"#else",
								"luminosity[ i ] = samples[i].r;",
							"#endif",
						"#else",
								"luminosity[ i ] = samples[i].r;",
						"#endif",
					"}",

					"float newLum = dot(luminosity, vec4(0.25));",

					"gl_FragColor = vec4( vec3( newLum ), 1.0 );",
					THREE.ShaderChunk[ "hdr_encode_fragment" ],

				"}",
			].join('\n')
		};
		this.materialDownSample = new THREE.ShaderMaterial( {
			uniforms: this.downSampleShader.uniforms,
			vertexShader: this.downSampleShader.vertexShader,
			fragmentShader: this.downSampleShader.fragmentShader,
			blending: THREE.NoBlending,
			depthTest: false,
			depthWrite: false,
			name: "down-sample"
		});

		this.maxLuminanceShader = {
			// defines: {
			// 	"RESOLUTION" : this.resolution.toFixed(1),
			// },
			uniforms: {
				"tDiffuse": { type: "t", value: null },
				"resolution": { type: "v2", value: new THREE.Vector2() },
			},
			vertexShader: [
				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"
			].join('\n'),
			fragmentShader: [
				"varying vec2 vUv;",
				"uniform sampler2D tDiffuse;",
				"uniform vec2 resolution;",
				THREE.ShaderChunk[ "hdr_decode_pars_fragment" ],
				THREE.ShaderChunk[ "hdr_encode_pars_fragment" ],

				"void main() {",
					"vec2 offset = 0.5 / resolution;",
					"vec4 luminosity;",
					"vec4 samples[ 4 ];",

	        "samples[0] = texture2D( tDiffuse, vUv + vec2( -offset.x, -offset.x ) );",
	        "samples[1] = texture2D( tDiffuse, vUv + vec2( offset.x, -offset.x ) );",
	        "samples[2] = texture2D( tDiffuse, vUv + vec2( offset.x, offset.y ) );",
	        "samples[3] = texture2D( tDiffuse, vUv + vec2( -offset.x, offset.y ) );",

					"for ( int i = 0; i < 4; i++ ) {",
						"#if defined( HDR_INPUT ) && defined( HDR_INPUT_TYPE )",
							"#if ( HDR_INPUT_TYPE == HDR_TYPE_LOGLUV )",
								"luminosity[ i ] = HDRDecodeLOGLUV( samples[i] ).r;",
							"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBM )",
								"luminosity[ i ] = HDRDecodeRGBM( samples[i] ).r;",
							"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBD )",
								"luminosity[ i ] = HDRDecodeRGBD( samples[i] ).r;",
							"#elif ( HDR_INPUT_TYPE == HDR_TYPE_RGBE )",
								"luminosity[ i ] = HDRDecodeRGBE( samples[i] ).r;",
							"#else",
								"luminosity[ i ] = samples[i].r;",
							"#endif",
						"#else",
								"luminosity[ i ] = samples[i].r;",
						"#endif",
					"}",

					"float maxLum = max( max(luminosity.r, luminosity.g), max( luminosity.b, luminosity.a ));",

					"gl_FragColor = vec4( vec3( maxLum ), 1.0 );",
					THREE.ShaderChunk[ "hdr_encode_fragment" ],

				"}",
			].join('\n')
		};
		this.materialMaxLuminance = new THREE.ShaderMaterial( {
			uniforms: this.maxLuminanceShader.uniforms,
			vertexShader: this.maxLuminanceShader.vertexShader,
			fragmentShader: this.maxLuminanceShader.fragmentShader,
			blending: THREE.NoBlending,
			depthTest: false,
			depthWrite: false,
			name: "max-luminance"
		});

		this.enabled = true;
		this.needsSwap = true;
		this.clear = false;

		this.camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );
		this.scene  = new THREE.Scene();

		this.quad = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );
		this.scene.add( this.quad );

	};

	THREE.AdaptiveToneMappingPass.prototype = {

		render: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {

			if ( this.needsUpdate ) {
				this.resetRenderTargets( renderer, readBuffer );

				this.needsUpdate = false;
			}

			if ( this.adaptive ) {
				//Render the luminance of the current scene into a render target with mipmapping enabled
				this.quad.material = this.materialLuminance;
				this.materialLuminance.uniforms.tDiffuse.value = readBuffer;
				renderer.render( this.scene, this.camera, this.currentLuminanceRT );
				this.materialAdaptiveLum.uniforms.delta.value = delta;

				if ( this.adaptiveWhiteLevel ) {
					this.determineMaxLuminance( renderer );
					//Adapt the max luminance value over time
					this.quad.material = this.materialAdaptiveLum;
					this.materialAdaptiveLum.uniforms.lastLum.value = this.previousMaxLuminanceRT;
					this.materialAdaptiveLum.uniforms.currentLum.value = this.currentMaxLuminanceRT[ this.currentMaxLuminanceRT.length - 1 ];
					renderer.render( this.scene, this.camera, this.maxLuminanceRT );
					this.materialToneMap.uniforms.maxLuminanceRT.value = this.maxLuminanceRT;
				}

				//If we need to generate a 1x1 texture for sampling luminosity (because filtering isn't supported)
				if ( this.needsManualDownSample ) {
					this.downSampleLuminance( renderer );
					this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRTDownSampled[ this.currentLuminanceRTDownSampled.length - 1 ];
				}
				else {
					this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT;
				}

				//Use the new luminance values, the previous luminance and the frame delta to
				//adapt the luminance over time.
				this.quad.material = this.materialAdaptiveLum;
				// this.materialAdaptiveLum.uniforms.delta.value = delta;
				this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT;

				renderer.render( this.scene, this.camera, this.luminanceRT );

				//Copy the new adapted luminance value so that it can be used by the next frame.
				this.quad.material = this.materialCopy;
				this.copyUniforms.tDiffuse.value = this.luminanceRT;
				renderer.render( this.scene, this.camera, this.previousLuminanceRT );

				this.copyUniforms.tDiffuse.value = this.maxLuminanceRT;
				renderer.render( this.scene, this.camera, this.previousMaxLuminanceRT );
			}

			//Now tonemap the scene, using the luminance
			this.quad.material = this.materialToneMap;
			this.materialToneMap.uniforms.tDiffuse.value = readBuffer;
			renderer.render( this.scene, this.camera, writeBuffer, this.clear );

		},

		downSampleLuminance: function( renderer ) {
			this.quad.material = this.materialDownSample;
			this.materialDownSample.uniforms.tDiffuse.value = this.currentLuminanceRT;
			for ( var i = 0; i < this.currentLuminanceRTDownSampled.length; i++ ) {
				this.materialDownSample.uniforms.resolution.value.x = Math.pow( 2.0, this.currentLuminanceRTDownSampled.length - i );
				this.materialDownSample.uniforms.resolution.value.y = Math.pow( 2.0, this.currentLuminanceRTDownSampled.length - i );
				renderer.render( this.scene, this.camera, this.currentLuminanceRTDownSampled[ i ], true );
				this.materialDownSample.uniforms.tDiffuse.value = this.currentLuminanceRTDownSampled[ i ];
			}

		},

		determineMaxLuminance: function( renderer ) {
			this.quad.material = this.materialMaxLuminance;
			this.materialMaxLuminance.uniforms.tDiffuse.value = this.currentLuminanceRT;
			for ( var i = 0; i < this.currentMaxLuminanceRT.length; i++ ) {
				this.materialMaxLuminance.uniforms.resolution.value.x = Math.pow( 2.0, this.currentMaxLuminanceRT.length - i );
				this.materialMaxLuminance.uniforms.resolution.value.y = Math.pow( 2.0, this.currentMaxLuminanceRT.length - i );
				renderer.render( this.scene, this.camera, this.currentMaxLuminanceRT[ i ], true );
				this.materialMaxLuminance.uniforms.tDiffuse.value = this.currentMaxLuminanceRT[ i ];
			}

		},

		resetRenderTargets: function( renderer, renderTarget ) {
			var i, res, pars, extensions;
			// render targets
			if ( this.luminanceRT ) {
				this.luminanceRT.dispose();
			}
			if ( this.currentLuminanceRT ) {
				this.currentLuminanceRT.dispose();
			}
			if ( this.previousLuminanceRT ) {
				this.previousLuminanceRT.dispose();
			}
			if ( this.currentLuminanceRTDownSampled ) {
				for ( i = 0; i < this.currentLuminanceRTDownSampled.length; i++ ) {
					this.currentLuminanceRTDownSampled[ i ].dispose();
				}
				this.currentLuminanceRTDownSampled = [];
			}
			if ( this.maxLuminanceRT ) {
				this.maxLuminanceRT.dispose();
			}
			if ( this.previousMaxLuminanceRT ) {
				this.previousMaxLuminanceRT.dispose();
			}
			if ( this.currentMaxLuminanceRT ) {
				for ( i = 0; i < this.currentMaxLuminanceRT.length; i++ ) {
					this.currentMaxLuminanceRT[ i ].dispose();
				}
				this.currentMaxLuminanceRT = [];
			}
			pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: renderTarget.format, type: renderTarget.type };

			//Determine if we will let the mipmaps for currentLuminanceRT to be auto-generated or not.
			//For any compressed HDR formats, we'll have to manually down-sample the RT.
			if ( renderTarget.type === THREE.FloatType ) {
				//If we're using a floating point render target, check if the
				extensions = new THREE.WebGLExtensions( renderer.getContext() );
				if ( extensions.get('OES_texture_half_float_linear') || extensions.get('OES_texture_float_linear') ) {
					//We only need mipmapping for the current luminosity because we want a down-sampled version to sample in our adaptive shader
					this.needsManualDownSample = false;
				}
				else {
					this.needsManualDownSample = true;
				}
			}
			else if ( renderer.hdrOutputEnabled && renderer.hdrOutputType ) {
				this.needsManualDownSample = true;
			}
			else {
				this.needsManualDownSample = false;

			}
			if ( this.needsManualDownSample ) {
				pars.minFilter = THREE.NearestFilter;
				pars.magFilter = THREE.NearestFilter;
			}
			else {
				pars.minFilter = THREE.LinearFilter;
				pars.magFilter = THREE.LinearFilter;
			}
			this.luminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );
			this.luminanceRT.texture.generateMipmaps = false;
			this.luminanceRT.name = "Average Luminance";
			this.previousLuminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );
			this.previousLuminanceRT.texture.generateMipmaps = false;
			this.previousLuminanceRT.name = "Previous Luminance";

			if ( !this.needsManualDownSample ) {
				pars.minFilter = THREE.LinearMipMapLinearFilter;
			}
			this.currentLuminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );
			this.currentLuminanceRT.name = "Current Luminance";

			if ( this.adaptive ) {
				this.materialToneMap.defines["SAMPLE_LUMINANCE"] = "";
				this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT;
			}

			this.materialLuminance.needsUpdate = true;
			this.materialAdaptiveLum.needsUpdate = true;
			this.materialToneMap.needsUpdate = true;
			this.materialDownSample.needsUpdate = true;

			if ( renderer.hdrOutputEnabled ) {
				this.materialLuminance.hdrOutputType = renderer.hdrOutputType;
				this.materialAdaptiveLum.hdrOutputType = renderer.hdrOutputType;
				this.materialDownSample.hdrOutputType = renderer.hdrOutputType;
				this.materialToneMap.hdrOutputEnabled = false;

				this.materialLuminance.hdrInputEnabled = true;
				this.materialLuminance.defines['HDR_INPUT_TYPE'] = renderer.hdrOutputType;
				this.materialAdaptiveLum.hdrInputEnabled = true;
				this.materialAdaptiveLum.defines['HDR_INPUT_TYPE'] = renderer.hdrOutputType;
				this.materialToneMap.hdrInputEnabled = true;
				this.materialToneMap.defines['HDR_INPUT_TYPE'] = renderer.hdrOutputType;
				this.materialDownSample.hdrInputEnabled = true;
				this.materialDownSample.defines['HDR_INPUT_TYPE'] = renderer.hdrOutputType;
			}

			pars.minFilter = THREE.NearestFilter;
			pars.magFilter = THREE.NearestFilter;
			if ( this.needsManualDownSample ) {
				this.currentLuminanceRT.texture.generateMipmaps = false;
				this.currentLuminanceRTDownSampled = new Array( parseInt( Math.log2( this.resolution ) ) );
				for ( i = 1; i <= this.currentLuminanceRTDownSampled.length; i++ ) {
					res = parseInt( this.resolution / Math.pow( 2, i ) );
					this.currentLuminanceRTDownSampled[ i - 1 ] = new THREE.WebGLRenderTarget( res, res, pars );
					this.currentLuminanceRTDownSampled[ i - 1 ].name = "Current Luminance RT" + (i - 1);
				}
				this.materialAdaptiveLum.defines['MIP_LEVEL_1X1'] = "0.0";
			}
			else {
				this.materialAdaptiveLum.defines['MIP_LEVEL_1X1'] = Math.log2( this.resolution ).toFixed(1);
			}

			this.currentMaxLuminanceRT = new Array( parseInt( Math.log2( this.resolution ) ) );
			for ( i = 1; i <= this.currentMaxLuminanceRT.length; i++ ) {
				res = parseInt( this.resolution / Math.pow( 2, i ) );
				this.currentMaxLuminanceRT[ i - 1 ] = new THREE.WebGLRenderTarget( res, res, pars );
				this.currentMaxLuminanceRT[ i - 1 ].name = "Current Max Luminance RT" + (i - 1);
			}
			this.previousMaxLuminanceRT = new THREE.WebGLRenderTarget( 1, 1, pars );
			this.previousMaxLuminanceRT.name = "Previous Max Luminance";
			this.maxLuminanceRT = new THREE.WebGLRenderTarget( 1, 1, pars );
			this.maxLuminanceRT.name = "Current Max Luminance";

			this.seedTargets( renderer );

		},

		seedTargets: function( renderer ) {
			//Put something in the adaptive luminance texture so that the scene can render initially
			this.quad.material = new THREE.MeshBasicMaterial( {color: 0x777777, opacity: 0.5 });
			renderer.render( this.scene, this.camera, this.luminanceRT );
			renderer.render( this.scene, this.camera, this.previousLuminanceRT );
			renderer.render( this.scene, this.camera, this.currentLuminanceRT );

			renderer.render( this.scene, this.camera, this.previousMaxLuminanceRT );
		},

		setAdaptive: function( adaptive ) {
			if ( adaptive ) {
				this.adaptive = true;
				this.materialToneMap.defines["SAMPLE_LUMINANCE"] = "";
				this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT;
			}
			else {
				this.adaptive = false;
				delete this.materialToneMap.defines["SAMPLE_LUMINANCE"];
				this.materialToneMap.uniforms.luminanceMap.value = undefined;
			}
			this.materialToneMap.needsUpdate = true;
		},

		setAdaptiveWhiteLevel: function( autoWhite ) {
			if ( autoWhite && this.adaptive ) {
				this.adaptiveWhiteLevel = true;
				this.materialToneMap.defines["ADAPT_WHITE_BALANCE"] = "";
				this.materialToneMap.uniforms.maxLuminanceRT.value = this.maxLuminanceRT;
			}
			else {
				this.adaptiveWhiteLevel = false;
				delete this.materialToneMap.defines["ADAPT_WHITE_BALANCE"];
				this.materialToneMap.uniforms.maxLuminanceRT.value = undefined;
			}
			this.materialToneMap.needsUpdate = true;
		},

		setAdaptionRate: function( rate ) {
			if ( rate ) {
				this.materialAdaptiveLum.uniforms.tau.value = Math.abs( rate );
			}
		},

		setMaxLuminance: function( maxLum ) {
			if ( maxLum ) {
				var A = 0.15;
				var B = 0.50;
				var C = 0.10;
				var D = 0.20;
				var E = 0.02;
				var F = 0.30;
				this.materialToneMap.uniforms.maxLuminance.value = 1.0 / ( ( maxLum * ( A * maxLum + C * B ) + D * E ) / ( maxLum * ( A * maxLum + B ) + D * F ) ) - E / F;
				this.materialLuminance.uniforms.maxLuminance.value = maxLum;
				if ( !this.materialLuminance.defines || !this.materialLuminance.defines["MAX_LUMINANCE"] ) {
					this.materialLuminance.defines["MAX_LUMINANCE"] = "";
					this.materialLuminance.needsUpdate = true;
				}
			}
		},

		setAverageLuminance: function( avgLum ) {
			if ( avgLum ) {
				this.materialToneMap.uniforms.averageLuminance.value = avgLum;
			}
		},

		setExposure: function( exposure ) {
			if ( exposure ) {
				this.materialToneMap.uniforms.exposureBias.value = exposure;
			}
		},

		dispose: function() {
			if ( this.luminanceRT ) {
				this.luminanceRT.dispose();
			}
			if ( this.previousLuminanceRT ) {
				this.previousLuminanceRT.dispose();
			}
			if ( this.currentLuminanceRT ) {
				this.currentLuminanceRT.dispose();
			}
			if ( this.materialLuminance ) {
				this.materialLuminance.dispose();
			}
			if ( this.materialAdaptiveLum ) {
				this.materialAdaptiveLum.dispose();
			}
			if ( this.materialCopy ) {
				this.materialCopy.dispose();
			}
			if ( this.materialToneMap ) {
				this.materialToneMap.dispose();
			}
		}

	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * An object that holds animation data for animating models
	 * @class AnimationAsset
	 * @constructor
	 */

	var AnimationAsset = function (_Box3DAsset) {
	  _inherits(AnimationAsset, _Box3DAsset);

	  function AnimationAsset(json) {
	    _classCallCheck(this, AnimationAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(AnimationAsset).call(this, json));
	  }

	  _createClass(AnimationAsset, [{
	    key: 'getDataSizeAnimationDownload',
	    value: function getDataSizeAnimationDownload() {
	      return 1;
	    }
	  }, {
	    key: 'getDataSizeAnimationInMemory',
	    value: function getDataSizeAnimationInMemory() {
	      return 1;
	    }
	  }, {
	    key: '_getCurvesForObjectsInLayer',
	    value: function _getCurvesForObjectsInLayer(objects, layer, curves) {
	      var curvesByName,
	          filtered = {};

	      _lodash2.default.each(objects, function (object) {
	        filtered[object.name] = [];
	      });

	      curvesByName = _lodash2.default.indexBy(curves, 'name');

	      _lodash2.default.each(layer.curves, function (curveName) {
	        if (curvesByName.hasOwnProperty(curveName)) {
	          var curve = curvesByName[curveName],
	              objectName = curve.object;

	          if (filtered.hasOwnProperty(objectName)) {
	            filtered[objectName].push(curve);
	          }
	        }
	      });

	      return filtered;
	    }
	  }, {
	    key: '_getKeyframes',
	    value: function _getKeyframes(objects, curves, startTime, stopTime) {
	      var curveTypes = {},
	          keyframes = {};

	      // Supported channels and their corresponding THREE.js name.
	      curveTypes.position = 'pos';
	      curveTypes.rotation = 'rot';
	      curveTypes.scale = 'scl';

	      _lodash2.default.each(objects, function (object) {
	        var mergedKeys,
	            objectCurves = curves[object.name],
	            objectKeys = [];

	        // Create a single array of keys for the object, merging all channels.
	        _lodash2.default.each(objectCurves, function (curve) {
	          var keys = this.runtimeData.keyframes[curve.name],
	              step = curve.channelCount + 1;

	          _lodash2.default.each(curveTypes, function (property, type) {
	            var idx = 0,
	                key,
	                pt0,
	                pt1,
	                time;

	            if (curve.property === type) {
	              // Find the first frame of the animation (time >= startTime).
	              while (idx * step < keys.length && keys[idx * step] < startTime) {
	                idx++;
	              }

	              // If the first frame is beyond startTime, create a new frame at
	              // startTime.
	              if (idx * step < keys.length) {
	                time = keys[idx * step];

	                if (time > startTime) {
	                  key = {
	                    time: 0
	                  };

	                  if (idx > 0) {
	                    pt0 = keys.subarray((idx - 1) * step, idx * step), pt1 = keys.subarray(idx * step, (idx + 1) * step);
	                    key[property] = this._interpolateKeys(pt0, pt1, startTime);
	                  } else {
	                    // Copy the first keyframe (const interpolation).
	                    key[property] = keys.subarray(1, step);
	                  }

	                  objectKeys.push(key);
	                }
	              } else if (keys.length > 0) {
	                // We did not find a keyframe with time >= startTime, so copy
	                // the last keyframe (const interpolation).
	                key = {
	                  time: 0
	                };
	                key[property] = keys.subarray(-step + 1);
	                objectKeys.push(key);
	              }

	              // Add the middle frames (startTime <= time <= stopTime).
	              while (idx * step < keys.length && keys[idx * step] <= stopTime) {
	                key = {
	                  time: keys[idx * step] - startTime
	                };
	                key[property] = keys.subarray(idx * step + 1, (idx + 1) * step);
	                objectKeys.push(key);
	                idx++;
	              }

	              // If the final frame is beyond stopTime, create a new frame at
	              // stopTime.
	              if (idx * step < keys.length) {
	                time = keys[idx * step];

	                if (time > stopTime) {
	                  key = {
	                    time: stopTime - startTime
	                  };

	                  if (idx > 0) {
	                    pt0 = keys.subarray((idx - 1) * step, idx * step), pt1 = keys.subarray(idx * step, (idx + 1) * step);
	                    key[property] = this._interpolateKeys(pt0, pt1, stopTime);
	                  } else {
	                    // Copy the first keyframe (const interpolation).
	                    key[property] = keys.subarray(1, step);
	                  }

	                  objectKeys.push(key);
	                }
	              } else if (keys.length > 0) {
	                // Copy the final keyframe (const interpolation).
	                key = {
	                  time: stopTime - startTime
	                };
	                key[property] = keys.subarray(keys.length - step + 1, keys.length);
	                objectKeys.push(key);
	              }
	            }
	          }, this);
	        }, this);

	        // If there aren't any keys, skip the object.
	        if (objectKeys.length > 0) {
	          // Sort the keys by time.
	          objectKeys.sort(function (a, b) {
	            return a.time - b.time;
	          });

	          // Merge keys with identical time values.
	          mergedKeys = [objectKeys[0]];

	          for (var iKey = 1; iKey < objectKeys.length; iKey += 1) {
	            var key = objectKeys[iKey],
	                lastKey = mergedKeys[mergedKeys.length - 1];

	            if (key.time === lastKey.time) {
	              for (var type in curveTypes) {
	                var property = curveTypes[type];
	                if (key.hasOwnProperty(property)) {
	                  lastKey[property] = key[property];
	                }
	              }
	            } else {
	              mergedKeys.push(key);
	            }
	          }

	          keyframes[object.name] = mergedKeys;
	        }
	      }, this);

	      return keyframes;
	    }
	  }, {
	    key: '_interpolateKeys',
	    value: function _interpolateKeys(key1, key2, time) {
	      var t0 = key1[0],
	          t1 = key2[0],
	          result = [],
	          alpha;

	      if (t1 - t0 === 0) {
	        alpha = 0.5;
	      } else {
	        alpha = (time - t0) / (t1 - t0);
	      }

	      for (var idx = 1; idx < key1.length; idx += 1) {
	        result.push(key1[idx] + (key2[idx] - key1[idx]) * alpha);
	      }

	      return result;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      var _this2 = this;

	      var onProgress = function onProgress(progressObj) {
	        _this2.loadedBytes = progressObj.loaded;
	        _this2.trigger('loadProgress', _this2);
	      };

	      this.box3DRuntime.resourceLoader.load(this, { xhrKey: this.id }, onProgress).then(function (result) {
	        _this2.runtimeData = {
	          keyframes: {}
	        };

	        var curves = _this2.getProperty('curves');
	        curves.forEach(function (curve) {
	          _this2.runtimeData.keyframes[curve.name] = new Float32Array(result.data, curve.keyframeFileOffset, curve.keyframeCount * curve.channelCount);
	        });

	        _this2.loadedBytes = _this2.getDataSizeDownload();
	        callback();
	      }).catch(function (err) {
	        _log2.default.debug('Error loading animation', err);
	        callback();
	      });
	    }

	    /**
	     * Add a new take to the asset.
	     * @method addTake
	     * @param  {Object} take The take data
	     * @return {Boolean} true on success; otherwise, false
	     */

	  }, {
	    key: 'addTake',
	    value: function addTake(take) {
	      var takes = _lodash2.default.clone(this.getProperty('takes'));

	      if (this.getTakeNames().indexOf(take.name) !== -1) {
	        _log2.default.warn('Failed to add new take because its name is not unique.');
	        return false;
	      }

	      takes.push(take);
	      this.setProperty('takes', takes);

	      return true;
	    }

	    /**
	     * Create a THREE.Animation for the object and take.
	     * @method createAnimation
	     * @param  {Object} root The object hierarchy
	     * @param  {String} takeName The take name
	     * @return {Object} The THREE.Animation object on success; otherwise false.
	     */

	  }, {
	    key: 'createAnimation',
	    value: function createAnimation(root, takeName) {
	      var animation = {},
	          curves = this.getProperty('curves'),
	          hierarchy = [],
	          keyframes,
	          layer,
	          objects,
	          take,
	          uniqueName = takeName + root.id + this.id;

	      if (!root || !root.runtimeData || !takeName) {
	        _log2.default.warn('AnimationAsset: Invalid parameter passed to createAnimation.');
	        return null;
	      }

	      if (!this.runtimeData) {
	        _log2.default.warn('AnimationAsset: Asset not loaded before call to createAnimation.');
	        return null;
	      }

	      take = this.getTakeByName(takeName);

	      if (!take) {
	        _log2.default.warn('AnimationAsset: Take does not exist: ' + takeName);
	        return null;
	      }

	      if (!take.layers || take.layers.length <= 0) {
	        return null;
	      }

	      if (take.layers.length > 1) {
	        _log2.default.warn('Take contains multiple layers, but we only support a single layer.');
	      }

	      // Parse the object hierarchy.
	      objects = _three2.default.AnimationHandler.parse(root.runtimeData);

	      // Get curves for objects in the hierarchy.
	      layer = this.getLayerByName(take.layers[0]);
	      curves = this._getCurvesForObjectsInLayer(objects, layer, curves);

	      // Get keyframes for each object.
	      keyframes = this._getKeyframes(objects, curves, take.start, take.stop);

	      // Create the THREE.js animation.
	      _lodash2.default.each(objects, function (object) {
	        hierarchy.push({
	          keys: keyframes[object.name] || []
	        });
	      });

	      animation.name = uniqueName;
	      animation.length = take.stop - take.start;
	      animation.fps = 25;
	      animation.hierarchy = hierarchy;

	      return new _three2.default.Animation(root.runtimeData, animation);
	    }

	    /**
	     * Get the curve with the specified name.
	     * @method getCurveByName
	     * @param  {String} curveName The curve name
	     * @return {Object} The curve or null if the curve does not exist.
	     */

	  }, {
	    key: 'getCurveByName',
	    value: function getCurveByName(curveName) {
	      return _lodash2.default.find(this.getCurves(), function (curve) {
	        return curve.name === curveName;
	      });
	    }

	    /**
	     * Get names of all the curves.
	     * @method getCurveNames
	     * @return {Array} An array of curve names.
	     */

	  }, {
	    key: 'getCurveNames',
	    value: function getCurveNames() {
	      return _lodash2.default.map(this.getCurves(), function (curve) {
	        return curve.name;
	      });
	    }

	    /**
	     * Get all curves.
	     * @method getCurves
	     * @return {Array} An array of curves.
	     */

	  }, {
	    key: 'getCurves',
	    value: function getCurves() {
	      return this.getProperty('curves');
	    }

	    /**
	     * Get the layer with the specified name.
	     * @method getLayerByName
	     * @param  {String} layerName The layer name
	     * @return {Object} The layer or null if the layer does not exist.
	     */

	  }, {
	    key: 'getLayerByName',
	    value: function getLayerByName(layerName) {
	      return _lodash2.default.find(this.getLayers(), function (layer) {
	        return layer.name === layerName;
	      });
	    }

	    /**
	     * Get names of all the layers.
	     * @method getLayerNames
	     * @return {Array} An array of layer names.
	     */

	  }, {
	    key: 'getLayerNames',
	    value: function getLayerNames() {
	      return _lodash2.default.map(this.getLayers(), function (layer) {
	        return layer.name;
	      });
	    }

	    /**
	     * Get all layers.
	     * @method getLayers
	     * @return {Array} An array of layers.
	     */

	  }, {
	    key: 'getLayers',
	    value: function getLayers() {
	      return this.getProperty('layers');
	    }

	    /**
	     * Get the take with the specified name.
	     * @method getTakeByName
	     * @param  {String} takeName The take name
	     * @return {Object} The take or null if the take does not exist.
	     */

	  }, {
	    key: 'getTakeByName',
	    value: function getTakeByName(takeName) {
	      return _lodash2.default.find(this.getTakes(), function (take) {
	        return take.name === takeName;
	      });
	    }

	    /**
	     * Get names of all the takes.
	     * @method getTakeNames
	     * @return {Array} An array of take names.
	     */

	  }, {
	    key: 'getTakeNames',
	    value: function getTakeNames() {
	      return _lodash2.default.map(this.getTakes(), function (take) {
	        return take.name;
	      });
	    }

	    /**
	     * Get all takes.
	     * @method getTakes
	     * @return {Array} An array of takes.
	     */

	  }, {
	    key: 'getTakes',
	    value: function getTakes() {
	      return this.getProperty('takes');
	    }

	    /**
	     * Remove the specified take.
	     * @method removeTake
	     * @param {Integer} idx The index of the take
	     */

	  }, {
	    key: 'removeTake',
	    value: function removeTake(idx) {
	      var takes = _lodash2.default.clone(this.getTakes());

	      takes.splice(idx, 1);
	      this.setProperty('takes', takes);
	    }

	    /**
	     * Set the name of the specified take.
	     * @method setTakeName
	     * @param {Integer} takeIdx The index of the take
	     * @param {String} name The new take name
	     * @return {Boolean} true on success; otherwise, false.
	     */

	  }, {
	    key: 'setTakeName',
	    value: function setTakeName(takeIdx, name) {
	      var idx = this.getTakeNames().indexOf(name);

	      if (idx !== -1 && idx !== takeIdx) {
	        _log2.default.warn('Failed to set take name because it is not unique.');
	        return false;
	      }

	      var takes = _lodash2.default.cloneDeep(this.getTakes());
	      takes[takeIdx].name = name;
	      this.setProperty('takes', takes);

	      return true;
	    }

	    /**
	     * Set the start time of the specified take.
	     * @method setTakeStart
	     * @param {Integer} takeIdx The index of the take
	     * @param {Number} start The new take start time
	     */

	  }, {
	    key: 'setTakeStart',
	    value: function setTakeStart(takeIdx, start) {
	      var takes = _lodash2.default.cloneDeep(this.getTakes());
	      takes[takeIdx].start = Number(start);
	      this.setProperty('takes', takes);
	    }

	    /**
	     * Set the stop time of the specified take.
	     * @method setTakeStop
	     * @param {Integer} takeIdx The index of the take
	     * @param {Number} stop The new take stop time
	     */

	  }, {
	    key: 'setTakeStop',
	    value: function setTakeStop(takeIdx, stop) {
	      var takes = _lodash2.default.cloneDeep(this.getTakes());
	      takes[takeIdx].stop = Number(stop);
	      this.setProperty('takes', takes);
	    }
	  }, {
	    key: 'unload',
	    value: function unload() {
	      _get(Object.getPrototypeOf(AnimationAsset.prototype), 'unload', this).call(this);
	      this.box3DRuntime.trigger('animationUnloaded', this.id);
	    }
	  }]);

	  return AnimationAsset;
	}(_Box3DAsset3.default);

	window.Box3D.AnimationAsset = AnimationAsset;
	exports.default = AnimationAsset;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	window.Box3D = window.Box3D || {};

	var ApplicationAsset = function (_Box3DAsset) {
	  _inherits(ApplicationAsset, _Box3DAsset);

	  function ApplicationAsset(json) {
	    _classCallCheck(this, ApplicationAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(ApplicationAsset).call(this, json));
	  }

	  _createClass(ApplicationAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      this.loadComponents = true;
	      _get(Object.getPrototypeOf(ApplicationAsset.prototype), 'initialize', this).call(this, properties);
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      this.box3DRuntime.setCurrentApp(this.id);
	      var assetRegistry = this.box3DRuntime.assetRegistry;
	      var scene = assetRegistry.getAssetById(this.getProperty('startupScene'));
	      if (scene) {
	        scene.load();
	      }

	      callback();
	    }
	  }]);

	  return ApplicationAsset;
	}(_Box3DAsset3.default);

	ApplicationAsset.schema = _lodash2.default.extend({}, _Box3DAsset3.default.schema, {
	  startupScene: {
	    type: 'boolean',
	    description: '',
	    default: null
	  }
	});

	window.Box3D.ApplicationAsset = ApplicationAsset;
	exports.default = ApplicationAsset;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class AudioAsset
	 * @constructor
	 */

	var AudioAsset = function (_Box3DAsset) {
	  _inherits(AudioAsset, _Box3DAsset);

	  function AudioAsset(json) {
	    _classCallCheck(this, AudioAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(AudioAsset).call(this, json));
	  }

	  _createClass(AudioAsset, [{
	    key: 'uninitialize',
	    value: function uninitialize() {
	      if (this.runtimeData) {
	        // TODO: should we be doing more here?
	        this.runtimeData.pause();
	      }

	      _get(Object.getPrototypeOf(AudioAsset.prototype), 'uninitialize', this).call(this);
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _get(Object.getPrototypeOf(AudioAsset.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      if (this.runtimeData) {
	        if (changes.hasOwnProperty('loop')) {
	          this.runtimeData.loop = this.getProperty('loop');
	        }

	        if (changes.hasOwnProperty('state')) {
	          switch (this.getProperty('state')) {
	            case 'pause':
	              this.runtimeData.pause();
	              break;

	            case 'play':
	              this.runtimeData.play();
	              break;
	          }
	        }
	      }
	    }
	  }]);

	  return AudioAsset;
	}(_Box3DAsset3.default);

	window.Box3D.AudioAsset = AudioAsset;
	exports.default = AudioAsset;

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	var _JSONLoader = __webpack_require__(115);

	var _JSONLoader2 = _interopRequireDefault(_JSONLoader);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * An asset that loads entities from an external document and adds them to the
	 * runtime.
	 * @class DocumentAsset
	 * @constructor
	 */

	var DocumentAsset = function (_Box3DAsset) {
	  _inherits(DocumentAsset, _Box3DAsset);

	  function DocumentAsset(json) {
	    _classCallCheck(this, DocumentAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(DocumentAsset).call(this, json));
	  }

	  _createClass(DocumentAsset, [{
	    key: 'createRuntimeData',

	    /** @inheritdoc */
	    value: function createRuntimeData(callback) {
	      var _this2 = this;

	      var loadFromJson = function loadFromJson(response) {
	        var loader = new _JSONLoader2.default(_this2.box3DRuntime);
	        return loader.loadFromJson(response.data);
	      };

	      var onDocumentLoadError = function onDocumentLoadError(err) {
	        _log2.default.error(_this2.box3DRuntime.engineName + ' - DocumentAsset: Error loading document, ' + _this2.getName(), err);
	        callback();
	      };

	      var onDocumentProgress = function onDocumentProgress(progressObj) {
	        _this2.loadedBytes = progressObj.loaded / progressObj.total;
	        _this2.trigger('loadProgress', _this2);
	      };

	      var onDocumentLoaded = function onDocumentLoaded(entities) {
	        // Reference entities by name.
	        _this2.runtimeData = {
	          entityIds: {}
	        };

	        entities.forEach(function (entity) {
	          this.runtimeData.entityIds[entity.name] = entity.id;
	        }, _this2);

	        callback();
	      };

	      this.box3DRuntime.resourceLoader.load(this, { xhrKey: this.id }, onDocumentProgress).then(loadFromJson).then(onDocumentLoaded).catch(onDocumentLoadError);
	    }

	    /**
	     * Return the ID of the entity with the specified name.
	     * @method getEntityId
	     * @public
	     * @param {String} name - the name of the entity
	     * @returns {String|undefined} the ID of the entity or undefined
	     */

	  }, {
	    key: 'getEntityId',
	    value: function getEntityId(name) {
	      return this.runtimeData ? this.runtimeData.entityIds[name] : undefined;
	    }
	  }]);

	  return DocumentAsset;
	}(_Box3DAsset3.default);

	DocumentAsset.schema = _lodash2.default.extend({}, _Box3DAsset3.default.schema, {
	  filename: {
	    type: 'string',
	    description: '',
	    default: ''
	  }
	});

	window.Box3D.DocumentAsset = DocumentAsset;
	exports.default = DocumentAsset;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(2), __webpack_require__(116)], __WEBPACK_AMD_DEFINE_RESULT__ = function (log, _, Box3DShim) {
	  'use strict';

	  /**
	   * @function requestJson
	   * @param {String} url The JSON URL
	   * @param {Boolean} withCredentials Whether or not to set the xhr
	   * withCredentials flag
	   * @return {Promise} A promise which will be resolved with the loaded entity
	   * collection
	   */

	  function requestJson(url, withCredentials) {
	    return new Promise(function (resolve, reject) {
	      var request = new XMLHttpRequest(),
	          loaded = false,
	          onLoad;

	      request.withCredentials = withCredentials;

	      request.open('GET', url, true);

	      onLoad = function () {
	        if (!loaded) {
	          loaded = true;
	          if (request.status === 0 || request.status >= 200 && request.status < 400) {
	            resolve(JSON.parse(request.responseText));
	          } else {
	            return reject(new Error(request.status + ' error'));
	          }
	        }
	      }.bind(this);

	      request.onreadystatechange = function () {
	        if (request.readyState === 4) {
	          onLoad();
	        }
	      };

	      request.onload = onLoad;

	      request.onerror = function (err) {
	        return reject(err);
	      };

	      request.send();
	    });
	  }

	  /**
	   * A helper for loading, translating (using Box3DShim) and adding JSON-encoded
	   * entities to the specified runtime.
	   * @constructor
	   * @param {Box3D.Engine} box3DRuntime The runtime
	   */
	  function JSONLoader(box3DRuntime) {
	    this.box3DRuntime = box3DRuntime;
	  }

	  /**
	   * Translates (using Box3DShim) and adds the specified JSON-encoded entities
	   * to the runtime.
	   * @method
	   * @public
	   * @param {Object} json The JSON-encoded entities
	   * @return {Promise} A promise that resolves with the array of entities that
	   * were added to the runtime.
	   */
	  JSONLoader.prototype.loadFromJson = function (json) {
	    var entities,
	        shim = new Box3DShim();

	    // Make sure the major version is 2 or less.
	    if (json === undefined || json.version === undefined || json.version.major > 2) {
	      throw new Error('Unsupported data version');
	    }

	    // Translate the entities with Box3DShim.
	    entities = shim.mapEntities(json.entities, json.version);

	    // Add the entities to the runtime.
	    return this.box3DRuntime.addEntities(entities);
	  };

	  /**
	   * Loads the specified URL as JSON and injects new entities into the
	   * provided engine.
	   * @method loadFromUrl
	   * @public
	   * @param {String} url The JSON URL
	   * @param {Object} options
	   * @param {Boolean} options.withCredentials Whether or not to set the xhr
	   * withCredentials flag
	   * @return {Promise} A promise that will resolve with the loaded entities
	   */
	  JSONLoader.prototype.loadFromUrl = function (url, options) {
	    options = options || {};

	    if (!options.hasOwnProperty('withCredentials')) {
	      options.withCredentials = true;
	    }

	    return requestJson(url, options.withCredentials).then(function (json) {
	      return this.loadFromJson(json);
	    }.bind(this));
	  };

	  window.Box3D = window.Box3D || {};
	  window.Box3D.JSONLoader = JSONLoader;

	  return JSONLoader;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(117),
	  v1 = __webpack_require__(118);


	var SUPPORTED_VIDEO_FORMATS = ['3g2', '3gp', 'avi', 'm2v', 'm2ts', 'm4v', 'mkv',
	  'mov', 'mp4', 'mpeg', 'mpg', 'ogg', 'mts', 'qt', 'wmv'];

	/**
	 * Transforms Box3DConverter entities to Box3DRuntime entities.
	 * @constructor Shim
	 */
	function Shim() {
	}

	/**
	 * Transforms a collection of entities.
	 * @method mapEntities
	 * @public
	 * @param {Object} entities a collection of entities
	 * @param {Object} version the entity version
	 * @param {Number} version.major the "major" version number
	 * @param {Number} version.minor the "minor" version number
	 * @returns {Object} the resulting collection of entities
	 */
	Shim.prototype.mapEntities = function (entities, version) {
	  return _.map(entities, function (entity) {
	    return this.mapEntity(entity, version);
	  }, this);
	};

	/**
	 * Transforms an individual entity.
	 * @method mapEntity
	 * @private
	 * @param {Object} entity the entity to transform
	 * @param {Object} version the entity version
	 * @param {Number} version.major the "major" version number
	 * @param {Number} version.minor the "minor" version number
	 * @returns {Object} the transformed entity
	 */
	Shim.prototype.mapEntity = function (entity, version) {
	  function identity(entity) {
	    return entity;
	  }

	  // Map older converter output to the latest version.
	  if (version.major <= 1) {
	    entity = v1.mapToV2Entity(entity);
	  }

	  // Extend this idea with future versions as follows:
	  // if (version.major <= 2) {
	  //   entity = v2.mapToV3Entity(entity);
	  // }

	  // Next, map current converter output to the runtime format.
	  // First, perform type-agnostic conversion. Currently, no-op.

	  // Lastly, perform type-specific conversion.
	  return ({
	    material: this.mapMaterial,
	    texture2D: this.mapTexture
	  }[entity.type] || identity).bind(this)(entity);
	};

	/**
	 * Transforms a material entity.
	 * @method mapMaterial
	 * @private
	 * @param {Object} material the material entity to transform
	 * @returns {Object} the transformed material entity
	 */
	Shim.prototype.mapMaterial = function (material) {
	  var matProps = material.properties,
	    properties = {
	      shader: 'box3d_pbr_spec_gloss_shader',
	      enabledFeatures: {}
	    };

	  // Diffuse / albedo
	  if (matProps.diffuse || matProps.diffuseTexture) {
	    properties.enabledFeatures.albedo = true;

	    _.extend(properties, this.mapMaterialProperties(matProps, 'diffuse',
	      'diffuseFactor', 'diffuseTexture', 'baseAlbedo', 'albedoMap'));
	  }

	  // Specular
	  if (matProps.specular || matProps.specularTexture) {
	    properties.enabledFeatures.specular = true;

	    _.extend(properties, this.mapMaterialProperties(matProps, 'specular',
	      'specularFactor', 'specularTexture', 'specularColor', 'specularMap'));

	    _.extend(properties, this.mapMaterialProperties(matProps, 'shininess',
	      undefined, 'shininessTexture', 'gloss', 'glossMap', true));

	    if (properties.gloss) {
	      // Convert phong shininess value to our 0-1 gloss value.
	      // 512 is assumed to be the maximum specular power in our conversion
	      properties.gloss = Math.log10(properties.gloss / 512) / 2.5 + 1.0;
	      properties.gloss = Math.min(Math.max(properties.gloss, 0.0), 1.0);
	    } else {
	      // Turn off specular entirely if gloss is 0. For dielectric materials,
	      // no specular is visible if the material is fully 'rough'.
	      properties.enabledFeatures.specular = false;
	    }
	  }

	  // Reflections
	  if (matProps.reflectionTexture) {
	    properties.enabledFeatures.environment = true;
	    properties.useEnvironmentMap = true;

	    _.extend(properties, this.mapMaterialProperties(matProps, undefined,
	      'reflectionFactor', 'reflectionTexture', 'reflectivityF0',
	      'environmentMap2D_0', true));
	  }

	  // Ambient
	  if (matProps.ambientTexture) {
	    properties.enabledFeatures.environment = true;

	    _.extend(properties, this.mapMaterialProperties(matProps, 'ambientColor',
	      'ambientFactor', 'ambientTexture', undefined, 'aoMap'));
	  }

	  // Emissive
	  if ((matProps.emissive || matProps.emissiveTexture) && matProps.emissiveFactor > 0) {
	    properties.enabledFeatures.emissive = true;

	    _.extend(properties, this.mapMaterialProperties(matProps, 'emissive',
	      null, 'emissiveTexture', 'emissiveColor', 'emissiveMap'));

	    // Separate intensity value for emissive
	    if (matProps.emissiveFactor !== undefined) {
	      properties.emissiveIntensity = matProps.emissiveFactor;
	    }
	  }

	  // Transparency
	  _.extend(properties, this.mapMaterialProperties(matProps, 'transparentColor',
	    'transparencyFactor', 'transparentTexture', 'opacity', 'alphaMap', true));

	  if (properties.opacity !== undefined) {
	    properties.opacity = Math.max(Math.min(1.0 - properties.opacity, 1.0), 0.0);
	  }

	  if ((properties.opacity && properties.opacity < 0.999) || properties.alphaMap) {
	    properties.enabledFeatures.transparency = true;
	    properties.alphaBlendMode = 'alphaTransparency';
	  } else {
	    delete properties.opacity;
	  }

	  // Normals
	  if (matProps.normalMapTexture) {
	    properties.enabledFeatures.normals = true;
	    properties.useBump = false;

	    _.extend(properties, this.mapMaterialProperties(matProps, undefined,
	      'bumpFactor', 'normalMapTexture', 'normalScale', 'normalMap', true));
	  }

	  // Bumps
	  if (matProps.bumpTexture) {
	    properties.enabledFeatures.normals = true;

	    // TODO - since artists frequently put normal maps into the bump channel
	    // of their models we always interpret the texture as a normal map. Down
	    // the road, we should run a sanity check on the texture to see if it's
	    // really a bump map and take appropriate action.
	    properties.useBump = false;

	    _.extend(properties, this.mapMaterialProperties(matProps, undefined,
	      'bumpFactor', 'bumpTexture', 'normalScale', 'normalMap', true));
	  }

	  // Displacement
	  if (matProps.displacementColorTexture !== undefined) {
	    properties.enabledFeatures.displacement = true;

	    _.extend(properties, this.mapMaterialProperties(matProps,
	      'displacementColor', 'displacementFactor', 'displacementTexture',
	      'displacementScale', 'displacementMap', true));
	  }

	  // Vector displacement
	  if (matProps.vectorDisplacementColorTexture !== undefined) {
	    properties.enabledFeatures.displacement = true;
	    properties.useVectorDisplacement = true;

	    _.extend(properties, this.mapMaterialProperties(matProps,
	      'vectorDisplacementColor', 'vectorDisplacementFactor',
	      'vectorDisplacementColorTexture', 'displacementScale', 'displacementMap'));
	  }

	  material.properties = properties;

	  return material;
	};

	/**
	 * Transform a texture entity
	 * @param {Object} texture The texture entity to transform
	 * @returns {Object} The transformed texture entity
	 */
	Shim.prototype.mapTexture = function(texture) {
	  var textureProps = texture.properties;
	  var isVideoTexture = this.isVideoTexture(textureProps.filename);
	  var properties = {};

	  // Remap the texture2D to a video texture entity
	  if (isVideoTexture) {
	    texture.type = 'textureVideo';
	  }

	  if (textureProps.hasOwnProperty('wrapModeU')) {
	    properties.uMapping = textureProps.wrapModeU === 'repeat' ? 'wrap' : 'clamp';
	  }
	  if (textureProps.hasOwnProperty('wrapModeV')) {
	    properties.vMapping = textureProps.wrapModeV === 'repeat' ? 'wrap' : 'clamp';
	  }

	  if (textureProps.hasOwnProperty('filename')) {
	    properties.filename = textureProps.filename;
	  }

	  texture.properties = properties;

	  return texture;
	};

	/**
	 * Check to see if a texture is actually a video supported by Box
	 * @param {String} filename The filename property of a texture2D entity
	 * @returns {Boolean} Whether or not the file is a supported video
	 */
	Shim.prototype.isVideoTexture = function(filename) {
	  var splitFilename = filename.split('.'),
	      splitLength = splitFilename.length,
	      extension = splitLength > 0 ? splitFilename[splitLength - 1] : null,
	      isSupported = false;

	  if (extension !== null) {
	    isSupported = SUPPORTED_VIDEO_FORMATS.some(function isSupported(supportedType) {
	      return supportedType === extension;
	    });
	  }

	  return isSupported;
	};

	/**
	 * Transform the specified set of material properties.
	 * @method mapMaterialProperties
	 * @private
	 * @param {
	 */
	Shim.prototype.mapMaterialProperties = function (
	  srcProperties,
	  srcColorName,
	  srcFactorName,
	  srcTextureName,
	  dstColorName,
	  dstTextureName,
	  scalar
	) {
	  var dstProperties = {},
	    factor;

	  if (srcProperties.hasOwnProperty(srcTextureName)) {
	    dstProperties[dstTextureName] = srcProperties[srcTextureName];
	  }

	  if (dstColorName) {
	    factor = srcProperties[srcFactorName] !== undefined ? srcProperties[srcFactorName] : 1;

	    if (srcProperties.hasOwnProperty(srcColorName)) {
	      if (scalar) {
	        // In case that the output is scalar but the input isn't, just take an average.
	        if (srcProperties[srcColorName] instanceof Object) {
	          dstProperties[dstColorName] = (srcProperties[srcColorName].r +
	            srcProperties[srcColorName].g + srcProperties[srcColorName].b) / 3.0 * factor;
	        } else {
	          dstProperties[dstColorName] = srcProperties[srcColorName] * factor;
	        }
	      } else {
	        dstProperties[dstColorName] = {
	          r: srcProperties[srcColorName].r * factor,
	          g: srcProperties[srcColorName].g * factor,
	          b: srcProperties[srcColorName].b * factor
	        };
	      }
	    } else {
	      dstProperties[dstColorName] = scalar ? 1 : {r: 1, g: 1, b: 1};
	    }
	  }

	  return dstProperties;
	};

	module.exports = Shim;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.6.0
	//     http://underscorejs.org
	//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Establish the object that gets returned to break out of a loop iteration.
	  var breaker = {};

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    concat           = ArrayProto.concat,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeForEach      = ArrayProto.forEach,
	    nativeMap          = ArrayProto.map,
	    nativeReduce       = ArrayProto.reduce,
	    nativeReduceRight  = ArrayProto.reduceRight,
	    nativeFilter       = ArrayProto.filter,
	    nativeEvery        = ArrayProto.every,
	    nativeSome         = ArrayProto.some,
	    nativeIndexOf      = ArrayProto.indexOf,
	    nativeLastIndexOf  = ArrayProto.lastIndexOf,
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind;

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object via a string identifier,
	  // for Closure Compiler "advanced" mode.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.6.0';

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles objects with the built-in `forEach`, arrays, and raw objects.
	  // Delegates to **ECMAScript 5**'s native `forEach` if available.
	  var each = _.each = _.forEach = function(obj, iterator, context) {
	    if (obj == null) return obj;
	    if (nativeForEach && obj.forEach === nativeForEach) {
	      obj.forEach(iterator, context);
	    } else if (obj.length === +obj.length) {
	      for (var i = 0, length = obj.length; i < length; i++) {
	        if (iterator.call(context, obj[i], i, obj) === breaker) return;
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (var i = 0, length = keys.length; i < length; i++) {
	        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iterator to each element.
	  // Delegates to **ECMAScript 5**'s native `map` if available.
	  _.map = _.collect = function(obj, iterator, context) {
	    var results = [];
	    if (obj == null) return results;
	    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
	    each(obj, function(value, index, list) {
	      results.push(iterator.call(context, value, index, list));
	    });
	    return results;
	  };

	  var reduceError = 'Reduce of empty array with no initial value';

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
	  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
	    var initial = arguments.length > 2;
	    if (obj == null) obj = [];
	    if (nativeReduce && obj.reduce === nativeReduce) {
	      if (context) iterator = _.bind(iterator, context);
	      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
	    }
	    each(obj, function(value, index, list) {
	      if (!initial) {
	        memo = value;
	        initial = true;
	      } else {
	        memo = iterator.call(context, memo, value, index, list);
	      }
	    });
	    if (!initial) throw new TypeError(reduceError);
	    return memo;
	  };

	  // The right-associative version of reduce, also known as `foldr`.
	  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
	  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
	    var initial = arguments.length > 2;
	    if (obj == null) obj = [];
	    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
	      if (context) iterator = _.bind(iterator, context);
	      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
	    }
	    var length = obj.length;
	    if (length !== +length) {
	      var keys = _.keys(obj);
	      length = keys.length;
	    }
	    each(obj, function(value, index, list) {
	      index = keys ? keys[--length] : --length;
	      if (!initial) {
	        memo = obj[index];
	        initial = true;
	      } else {
	        memo = iterator.call(context, memo, obj[index], index, list);
	      }
	    });
	    if (!initial) throw new TypeError(reduceError);
	    return memo;
	  };

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var result;
	    any(obj, function(value, index, list) {
	      if (predicate.call(context, value, index, list)) {
	        result = value;
	        return true;
	      }
	    });
	    return result;
	  };

	  // Return all the elements that pass a truth test.
	  // Delegates to **ECMAScript 5**'s native `filter` if available.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    if (obj == null) return results;
	    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
	    each(obj, function(value, index, list) {
	      if (predicate.call(context, value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, function(value, index, list) {
	      return !predicate.call(context, value, index, list);
	    }, context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Delegates to **ECMAScript 5**'s native `every` if available.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate || (predicate = _.identity);
	    var result = true;
	    if (obj == null) return result;
	    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
	    each(obj, function(value, index, list) {
	      if (!(result = result && predicate.call(context, value, index, list))) return breaker;
	    });
	    return !!result;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Delegates to **ECMAScript 5**'s native `some` if available.
	  // Aliased as `any`.
	  var any = _.some = _.any = function(obj, predicate, context) {
	    predicate || (predicate = _.identity);
	    var result = false;
	    if (obj == null) return result;
	    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
	    each(obj, function(value, index, list) {
	      if (result || (result = predicate.call(context, value, index, list))) return breaker;
	    });
	    return !!result;
	  };

	  // Determine if the array or object contains a given value (using `===`).
	  // Aliased as `include`.
	  _.contains = _.include = function(obj, target) {
	    if (obj == null) return false;
	    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
	    return any(obj, function(value) {
	      return value === target;
	    });
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      return (isFunc ? method : value[method]).apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matches(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matches(attrs));
	  };

	  // Return the maximum element or (element-based computation).
	  // Can't optimize arrays of integers longer than 65,535 elements.
	  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
	  _.max = function(obj, iterator, context) {
	    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
	      return Math.max.apply(Math, obj);
	    }
	    var result = -Infinity, lastComputed = -Infinity;
	    each(obj, function(value, index, list) {
	      var computed = iterator ? iterator.call(context, value, index, list) : value;
	      if (computed > lastComputed) {
	        result = value;
	        lastComputed = computed;
	      }
	    });
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iterator, context) {
	    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
	      return Math.min.apply(Math, obj);
	    }
	    var result = Infinity, lastComputed = Infinity;
	    each(obj, function(value, index, list) {
	      var computed = iterator ? iterator.call(context, value, index, list) : value;
	      if (computed < lastComputed) {
	        result = value;
	        lastComputed = computed;
	      }
	    });
	    return result;
	  };

	  // Shuffle an array, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var rand;
	    var index = 0;
	    var shuffled = [];
	    each(obj, function(value) {
	      rand = _.random(index++);
	      shuffled[index - 1] = shuffled[rand];
	      shuffled[rand] = value;
	    });
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (obj.length !== +obj.length) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // An internal function to generate lookup iterators.
	  var lookupIterator = function(value) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return value;
	    return _.property(value);
	  };

	  // Sort the object's values by a criterion produced by an iterator.
	  _.sortBy = function(obj, iterator, context) {
	    iterator = lookupIterator(iterator);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iterator.call(context, value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iterator, context) {
	      var result = {};
	      iterator = lookupIterator(iterator);
	      each(obj, function(value, index) {
	        var key = iterator.call(context, value, index, obj);
	        behavior(result, key, value);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, key, value) {
	    _.has(result, key) ? result[key].push(value) : result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, key, value) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, key) {
	    _.has(result, key) ? result[key]++ : result[key] = 1;
	  });

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iterator, context) {
	    iterator = lookupIterator(iterator);
	    var value = iterator.call(context, obj);
	    var low = 0, high = array.length;
	    while (low < high) {
	      var mid = (low + high) >>> 1;
	      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
	    }
	    return low;
	  };

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (obj.length === +obj.length) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if ((n == null) || guard) return array[0];
	    if (n < 0) return [];
	    return slice.call(array, 0, n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N. The **guard** check allows it to work with
	  // `_.map`.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array. The **guard** check allows it to work with `_.map`.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if ((n == null) || guard) return array[array.length - 1];
	    return slice.call(array, Math.max(array.length - n, 0));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array. The **guard**
	  // check allows it to work with `_.map`.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, (n == null) || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, output) {
	    if (shallow && _.every(input, _.isArray)) {
	      return concat.apply(output, input);
	    }
	    each(input, function(value) {
	      if (_.isArray(value) || _.isArguments(value)) {
	        shallow ? push.apply(output, value) : flatten(value, shallow, output);
	      } else {
	        output.push(value);
	      }
	    });
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, []);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Split an array into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(array, predicate) {
	    var pass = [], fail = [];
	    each(array, function(elem) {
	      (predicate(elem) ? pass : fail).push(elem);
	    });
	    return [pass, fail];
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iterator, context) {
	    if (_.isFunction(isSorted)) {
	      context = iterator;
	      iterator = isSorted;
	      isSorted = false;
	    }
	    var initial = iterator ? _.map(array, iterator, context) : array;
	    var results = [];
	    var seen = [];
	    each(initial, function(value, index) {
	      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
	        seen.push(value);
	        results.push(array[index]);
	      }
	    });
	    return results;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(_.flatten(arguments, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var rest = slice.call(arguments, 1);
	    return _.filter(_.uniq(array), function(item) {
	      return _.every(rest, function(other) {
	        return _.contains(other, item);
	      });
	    });
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
	    return _.filter(array, function(value){ return !_.contains(rest, value); });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    var length = _.max(_.pluck(arguments, 'length').concat(0));
	    var results = new Array(length);
	    for (var i = 0; i < length; i++) {
	      results[i] = _.pluck(arguments, '' + i);
	    }
	    return results;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    if (list == null) return {};
	    var result = {};
	    for (var i = 0, length = list.length; i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
	  // we need this function. Return the position of the first occurrence of an
	  // item in an array, or -1 if the item is not included in the array.
	  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = function(array, item, isSorted) {
	    if (array == null) return -1;
	    var i = 0, length = array.length;
	    if (isSorted) {
	      if (typeof isSorted == 'number') {
	        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
	      } else {
	        i = _.sortedIndex(array, item);
	        return array[i] === item ? i : -1;
	      }
	    }
	    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
	    for (; i < length; i++) if (array[i] === item) return i;
	    return -1;
	  };

	  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
	  _.lastIndexOf = function(array, item, from) {
	    if (array == null) return -1;
	    var hasIndex = from != null;
	    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
	      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
	    }
	    var i = (hasIndex ? from : array.length);
	    while (i--) if (array[i] === item) return i;
	    return -1;
	  };

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (arguments.length <= 1) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = arguments[2] || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var idx = 0;
	    var range = new Array(length);

	    while(idx < length) {
	      range[idx++] = start;
	      start += step;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Reusable constructor function for prototype setting.
	  var ctor = function(){};

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    var args, bound;
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError;
	    args = slice.call(arguments, 2);
	    return bound = function() {
	      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
	      ctor.prototype = func.prototype;
	      var self = new ctor;
	      ctor.prototype = null;
	      var result = func.apply(self, args.concat(slice.call(arguments)));
	      if (Object(result) === result) return result;
	      return self;
	    };
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    return function() {
	      var position = 0;
	      var args = boundArgs.slice();
	      for (var i = 0, length = args.length; i < length; i++) {
	        if (args[i] === _) args[i] = arguments[position++];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return func.apply(this, args);
	    };
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var funcs = slice.call(arguments, 1);
	    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
	    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memo = {};
	    hasher || (hasher = _.identity);
	    return function() {
	      var key = hasher.apply(this, arguments);
	      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
	    };
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){ return func.apply(null, args); }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = function(func) {
	    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
	  };

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    options || (options = {});
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0) {
	        clearTimeout(timeout);
	        timeout = null;
	        previous = now;
	        result = func.apply(context, args);
	        context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;
	      if (last < wait) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) {
	        timeout = setTimeout(later, wait);
	      }
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = function(func) {
	    var ran = false, memo;
	    return function() {
	      if (ran) return memo;
	      ran = true;
	      memo = func.apply(this, arguments);
	      func = null;
	      return memo;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var funcs = arguments;
	    return function() {
	      var args = arguments;
	      for (var i = funcs.length - 1; i >= 0; i--) {
	        args = [funcs[i].apply(this, args)];
	      }
	      return args[0];
	    };
	  };

	  // Returns a function that will only be executed after being called N times.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Object Functions
	  // ----------------

	  // Retrieve the names of an object's properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = new Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = new Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = function(obj) {
	    each(slice.call(arguments, 1), function(source) {
	      if (source) {
	        for (var prop in source) {
	          obj[prop] = source[prop];
	        }
	      }
	    });
	    return obj;
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(obj) {
	    var copy = {};
	    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
	    each(keys, function(key) {
	      if (key in obj) copy[key] = obj[key];
	    });
	    return copy;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj) {
	    var copy = {};
	    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
	    for (var key in obj) {
	      if (!_.contains(keys, key)) copy[key] = obj[key];
	    }
	    return copy;
	  };

	  // Fill in a given object with default properties.
	  _.defaults = function(obj) {
	    each(slice.call(arguments, 1), function(source) {
	      if (source) {
	        for (var prop in source) {
	          if (obj[prop] === void 0) obj[prop] = source[prop];
	        }
	      }
	    });
	    return obj;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a == 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className != toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, dates, and booleans are compared by value.
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return a == String(b);
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
	        // other numeric values.
	        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a == +b;
	      // RegExps are compared by their source patterns and flags.
	      case '[object RegExp]':
	        return a.source == b.source &&
	               a.global == b.global &&
	               a.multiline == b.multiline &&
	               a.ignoreCase == b.ignoreCase;
	    }
	    if (typeof a != 'object' || typeof b != 'object') return false;
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] == a) return bStack[length] == b;
	    }
	    // Objects with different constructors are not equivalent, but `Object`s
	    // from different frames are.
	    var aCtor = a.constructor, bCtor = b.constructor;
	    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
	                             _.isFunction(bCtor) && (bCtor instanceof bCtor))
	                        && ('constructor' in a && 'constructor' in b)) {
	      return false;
	    }
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	    var size = 0, result = true;
	    // Recursively compare objects and arrays.
	    if (className == '[object Array]') {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      size = a.length;
	      result = size == b.length;
	      if (result) {
	        // Deep compare the contents, ignoring non-numeric properties.
	        while (size--) {
	          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
	        }
	      }
	    } else {
	      // Deep compare objects.
	      for (var key in a) {
	        if (_.has(a, key)) {
	          // Count the expected number of properties.
	          size++;
	          // Deep compare each member.
	          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
	        }
	      }
	      // Ensure that both objects contain the same number of properties.
	      if (result) {
	        for (key in b) {
	          if (_.has(b, key) && !(size--)) break;
	        }
	        result = !size;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return result;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b, [], []);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
	    for (var key in obj) if (_.has(obj, key)) return false;
	    return true;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) == '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    return obj === Object(obj);
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
	  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) == '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return !!(obj && _.has(obj, 'callee'));
	    };
	  }

	  // Optimize `isFunction` if appropriate.
	  if (true) {
	    _.isFunction = function(obj) {
	      return typeof obj === 'function';
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj != +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iterators.
	  _.identity = function(value) {
	    return value;
	  };

	  _.constant = function(value) {
	    return function () {
	      return value;
	    };
	  };

	  _.property = function(key) {
	    return function(obj) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
	  _.matches = function(attrs) {
	    return function(obj) {
	      if (obj === attrs) return true; //avoid comparing an object to itself.
	      for (var key in attrs) {
	        if (attrs[key] !== obj[key])
	          return false;
	      }
	      return true;
	    }
	  };

	  // Run a function **n** times.
	  _.times = function(n, iterator, context) {
	    var accum = Array(Math.max(0, n));
	    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() { return new Date().getTime(); };

	  // List of HTML entities for escaping.
	  var entityMap = {
	    escape: {
	      '&': '&amp;',
	      '<': '&lt;',
	      '>': '&gt;',
	      '"': '&quot;',
	      "'": '&#x27;'
	    }
	  };
	  entityMap.unescape = _.invert(entityMap.escape);

	  // Regexes containing the keys and values listed immediately above.
	  var entityRegexes = {
	    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
	    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
	  };

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  _.each(['escape', 'unescape'], function(method) {
	    _[method] = function(string) {
	      if (string == null) return '';
	      return ('' + string).replace(entityRegexes[method], function(match) {
	        return entityMap[method][match];
	      });
	    };
	  });

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property) {
	    if (object == null) return void 0;
	    var value = object[property];
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result.call(this, func.apply(_, args));
	      };
	    });
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\t':     't',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  _.template = function(text, data, settings) {
	    var render;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = new RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset)
	        .replace(escaper, function(match) { return '\\' + escapes[match]; });

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      }
	      if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      }
	      if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	      index = offset + match.length;
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + "return __p;\n";

	    try {
	      render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    if (data) return render(data, _);
	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled function source as a convenience for precompilation.
	    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function, which will delegate to the wrapper.
	  _.chain = function(obj) {
	    return _(obj).chain();
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(obj) {
	    return this._chain ? _(obj).chain() : obj;
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
	      return result.call(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result.call(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  _.extend(_.prototype, {

	    // Start chaining a wrapped Underscore object.
	    chain: function() {
	      this._chain = true;
	      return this;
	    },

	    // Extracts the result from a wrapped and chained object.
	    value: function() {
	      return this._wrapped;
	    }

	  });

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}).call(this);


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(117);

	/**
	 * Map "entity.payload" to "entity.properties". This applies to all v1 entities.
	 * @function mapPayloadToProperties
	 * @private
	 * @param {Object} entity the entity to transform
	 * @returns {Object} the transformed entity
	 */
	function mapPayloadToProperties(entity) {
	  if (entity.payload) {
	    entity.properties = entity.payload;
	    delete entity.payload;
	  }
	}

	/**
	 * Maps v1 entities to v2.
	 * @function mapToV2Entity
	 * @private
	 * @param {Object} entity the v1 entity to transform
	 * @returns {Object} the v2 entity
	 */
	function mapToV2Entity(entity) {
	  function identity(entity) {
	    return entity;
	  }

	  mapPayloadToProperties(entity);

	  return ({
	    material: mapToV2Material
	  }[entity.type] || identity)(entity);
	}

	/**
	 * Map a v1 material to v2.
	 * @function mapToV2Material
	 * @private
	 * @param {Object} entity the material entity to transform
	 * @returns {Object} the transformed material entity
	 */
	function mapToV2Material(entity) {
	  // Remove "nested" properties: material.properties.properties. Move these
	  // properties into the first level of properties.
	  if (entity.properties && entity.properties.properties) {
	    _.each(entity.properties.properties, function(value, name) {
	      entity.properties[name] = value;
	    });

	    delete entity.properties.properties;
	  }

	  return entity;
	}

	module.exports = {
	  mapToV2Entity: mapToV2Entity
	};



/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseGeometryAsset2 = __webpack_require__(120);

	var _BaseGeometryAsset3 = _interopRequireDefault(_BaseGeometryAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * An asset that holds mesh geometry.
	 * @class MeshGeometryAsset
	 * @constructor
	 */

	var MeshGeometryAsset = function (_BaseGeometryAsset) {
	  _inherits(MeshGeometryAsset, _BaseGeometryAsset);

	  function MeshGeometryAsset(json) {
	    _classCallCheck(this, MeshGeometryAsset);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MeshGeometryAsset).call(this, json));

	    _this.buffer = null;
	    return _this;
	  }

	  _createClass(MeshGeometryAsset, [{
	    key: 'createRuntimeData',

	    /** @inheritdoc */
	    value: function createRuntimeData(callback) {
	      var _this2 = this;

	      var onBufferProgress = function onBufferProgress(progressObj) {
	        _this2.loadedBytes = _this2.getDataSizeDownload() * progressObj.loaded / progressObj.total;
	        _this2.trigger('loadProgress', _this2);
	      };

	      var onGeometryLoadError = function onGeometryLoadError(err) {
	        _log2.default.error(_this2.box3DRuntime.engineName + ' - MeshGeometryAsset: Error loading the geometry, ' + _this2.getName(), err);
	        callback();
	      };

	      var onGeometryLoaded = function onGeometryLoaded(data) {
	        _this2.buffer = data.data;
	        _this2.createBufferGeometry();
	        _this2.loadedBytes = _this2.getDataSizeDownload();
	        callback();
	      };

	      this.box3DRuntime.resourceLoader.load(this, { size: 1, xhrKey: this.id }, onBufferProgress).then(onGeometryLoaded).catch(onGeometryLoadError);
	    }

	    /**
	     * Adds required attributes to the specified geometry.
	     * @method addMissingAttributes
	     * @private
	     * @param {Object} geometry the THREE.BufferGeometry
	     * @returns {void}
	     */

	  }, {
	    key: 'addMissingAttributes',
	    value: function addMissingAttributes(geometry) {
	      // Create an empty position array if it doesn't exist.
	      if (geometry.attributes.position === undefined) {
	        _log2.default.warn(this.box3DRuntime.engineName + ' - MeshGeometryAsset: Mesh is missing "position" attribute.');
	        geometry.addAttribute('position', new _three2.default.BufferAttribute(new Float32Array(0), 3));
	      }

	      // Compute vertex normals if they don't exist.
	      if (geometry.attributes.normal === undefined) {
	        _log2.default.warn(this.box3DRuntime.engineName + ' - MeshGeometryAsset: Mesh is missing "normal" attribute.');
	        geometry.computeVertexNormals();
	      }
	    }

	    /**
	     * Returns the typed-array constructor for the specified component type.
	     * @method getArrayType
	     * @private
	     * @param {String} componentType one of: 'int8', 'uint8', 'int16', 'uint16', 'int32',
	     * 'uint32', 'float32', 'float64'
	     * @returns {Function} the typed-array constructor
	     */

	  }, {
	    key: 'getArrayType',
	    value: function getArrayType(componentType) {
	      if (!MeshGeometryAsset.arrayTypes.hasOwnProperty(componentType)) {
	        _log2.default.warn(this.box3DRuntime.engineName + ' - MeshGeometryAsset: Unknown attribute component type, ' + componentType);
	        return Float32Array;
	      }

	      return MeshGeometryAsset.arrayTypes[componentType];
	    }

	    /**
	     * Returns the size (in components) of the specified type.
	     * @method getTypeSize
	     * @private
	     * @param {String} type one of: 'scalar', 'vec2', 'vec3', 'vec4', 'mat2', 'mat3', 'mat4'
	     * @returns {Integer} the size of the specified type
	     */

	  }, {
	    key: 'getTypeSize',
	    value: function getTypeSize(type) {
	      if (!MeshGeometryAsset.typeSizes.hasOwnProperty(type)) {
	        _log2.default.warn(this.box3DRuntime.engineName + ' - MeshGeometryAsset: Unknown attribute value type, ' + type);
	        return 1;
	      }

	      return MeshGeometryAsset.typeSizes[type];
	    }

	    /**
	     * Returns the size (in components) of the specified type.
	     * @method getTypeByteSize
	     * @private
	     * @param {String} type one of: 'int8', 'int16', 'int32', 'float16', 'float32', 'float64'
	     * @returns {Integer} the byte size of the specified type
	     */

	  }, {
	    key: 'getTypeByteSize',
	    value: function getTypeByteSize(type) {
	      if (!MeshGeometryAsset.typeByteSizes.hasOwnProperty(type)) {
	        _log2.default.warn(this.box3DRuntime.engineName + ' - MeshGeometryAsset: Unknown number type, ' + type);
	        return 1;
	      }

	      return MeshGeometryAsset.typeByteSizes[type];
	    }

	    /**
	     * Create a typed-array for the specified attribute, resizing it if necessary.
	     * @method createArray
	     * @private
	     * @param {Object} attribute the attribute descriptor
	     * @param {Integer} newSize the desired number of components in each value
	     * @returns {Object} a typed-array
	     */

	  }, {
	    key: 'createArray',
	    value: function createArray(attribute, newSize) {
	      var Type = this.getArrayType(attribute.componentType),
	          size = this.getTypeSize(attribute.type),
	          minSize = Math.min(size, newSize),
	          iValue,
	          iComponent,
	          srcArray,
	          dstArray;

	      if (size === newSize) {
	        return new Type(this.buffer, attribute.byteOffset, attribute.count * size);
	      }

	      // The attribute size needs to be adjusted.
	      srcArray = new Type(this.buffer, attribute.byteOffset, attribute.count * size);

	      dstArray = new Type(attribute.count * newSize);

	      for (iValue = 0; iValue < attribute.count; iValue += 1) {
	        for (iComponent = 0; iComponent < minSize; iComponent += 1) {
	          dstArray[iValue * newSize + iComponent] = srcArray[iValue * size + iComponent];
	        }

	        while (iComponent < newSize) {
	          dstArray[iValue * newSize + iComponent] = 0;
	          iComponent += 1;
	        }
	      }

	      return dstArray;
	    }

	    /**
	     * Create a collection of THREE.BufferAttributes for this mesh.
	     * @method createAttributes
	     * @private
	     * @param {Object} sizes the desired value size of each attribute
	     * @returns {Object} a collection of THREE.BufferAttributes
	     */

	  }, {
	    key: 'createAttributes',
	    value: function createAttributes(sizes) {
	      var attributes = this.getProperty('attributes'),
	          bufferAttributes = {},
	          nameMap;

	      nameMap = {
	        indices: 'index',
	        positions: 'position',
	        normals: 'normal',
	        tangents: 'tangent',
	        colors: 'color',
	        uvs1: 'uv',
	        uvs2: 'uv2',
	        skinIndices: 'skinIndex',
	        skinWeights: 'skinWeight'
	      };

	      // Add indices to the list of attributes.
	      attributes = _lodash2.default.extend({
	        indices: this.getProperty('indices')
	      }, attributes);

	      _lodash2.default.each(nameMap, function (newName, oldName) {
	        var array, attribute, newSize;

	        if (attributes.hasOwnProperty(oldName)) {
	          attribute = attributes[oldName];
	          newSize = sizes[newName] || this.getTypeSize(attribute.type);
	          array = this.createArray(attribute, newSize);
	          bufferAttributes[newName] = new _three2.default.BufferAttribute(array, newSize);
	        }
	      }, this);

	      return bufferAttributes;
	    }

	    /**
	     * Create THREE.BufferGeometry objects for this mesh.
	     * @method createBufferGeometry
	     * @private
	     * @returns {void}
	     */

	  }, {
	    key: 'createBufferGeometry',
	    value: function createBufferGeometry() {
	      var attributes,
	          bounds = this.getProperty('bounds'),
	          boundsMin = new _three2.default.Vector3(bounds.min.x, bounds.min.y, bounds.min.z),
	          boundsMax = new _three2.default.Vector3(bounds.max.x, bounds.max.y, bounds.max.z),
	          primitivesByType;

	      // Create vertex attributes.
	      attributes = this.createAttributes({
	        index: 1,
	        position: 3,
	        normal: 3,
	        tangent: 4,
	        color: 4,
	        uv: 2,
	        uv2: 2,
	        skinIndex: 4,
	        skinWeight: 4
	      });

	      primitivesByType = _lodash2.default.groupBy(this.getProperty('primitives'), 'primitive');

	      _lodash2.default.each(primitivesByType, function (primitives, type) {
	        var geometry = new _three2.default.BufferGeometry();

	        // Add groups to the BufferGeometry.
	        primitives.forEach(function (primitive) {
	          geometry.addGroup(primitive.start, primitive.count, primitive.materialIndex);
	        });

	        // Add attributes to the BufferGeometry.
	        _lodash2.default.each(attributes, function (attribute, name) {
	          if (name === 'index') {
	            geometry.setIndex(attribute);
	          } else {
	            geometry.addAttribute(name, attribute);
	          }
	        });

	        // Add missing attributes.
	        this.addMissingAttributes(geometry);

	        // Calculate the geometry bounds.
	        geometry.boundingBox = new _three2.default.Box3(boundsMin, boundsMax);
	        geometry.computeBoundingSphere();

	        // Register the geometry.
	        this.setGeometry(type, geometry);
	      }, this);
	    }

	    /**
	     * Get the bounds (min/max coordinates) of this geometry.
	     * @method getBounds
	     * @public
	     * @returns {THREE.Box3} The bounds of this geometry.
	     */

	  }, {
	    key: 'getBounds',
	    value: function getBounds() {
	      var box = new _three2.default.Box3(),
	          bounds = this.getProperty('bounds');

	      box.set(new _three2.default.Vector3(bounds.min.x, bounds.min.y, bounds.min.z), new _three2.default.Vector3(bounds.max.x, bounds.max.y, bounds.max.z));

	      return box;
	    }

	    /**
	     * Returns the download size of this geometry.
	     * @public
	     * @method getDataSizeDownload
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @param {Object} params Specify parameters to narrow down the type of asset to
	     * return values for. e.g. for textures, you might specify {compression: 'dxt'}.
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeDownload',
	    value: function getDataSizeDownload(dependencyType) {
	      if (!dependencyType || dependencyType === 'geometries') {
	        return this.getDataSizeInMemory();
	      } else {
	        return 0;
	      }
	    }

	    /**
	     * Returns the total amount of memory occupied by this geometry.
	     * @public
	     * @method getDataSizeInMemory
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @param {Object} params Specify parameters to narrow down the type of asset to
	     * return values for. e.g. for textures, you might specify {compression: 'dxt'}.
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeInMemory',
	    value: function getDataSizeInMemory(dependencyType) {
	      var total = 0;
	      var attribs = this.getProperty('attributes');
	      var indices = this.getProperty('indices');
	      if (!dependencyType || dependencyType === 'geometries') {
	        _lodash2.default.each(attribs, function (attrib) {
	          total += this.calculateBufferSize(attrib.type, attrib.componentType, attrib.count);
	        }, this);
	        if (indices) {
	          total += this.calculateBufferSize(indices.type, indices.componentType, indices.count);
	        }
	        return total;
	      } else {
	        return 0;
	      }
	    }

	    /**
	     * Calculate the size of the buffer based on the input params.
	     * @private
	     * @param  {String} type          The type of the attribute (e.g. 'vec3', 'mat3', etc.)
	     * @param  {String} componentType The type of each component (e.g. 'float32', 'int16', etc.)
	     * @param  {Number} count         The number of instances of the attribute in the buffer
	     * @return {Number}               The length of the buffer, in bytes.
	     */

	  }, {
	    key: 'calculateBufferSize',
	    value: function calculateBufferSize(type, componentType, count) {
	      var typeSize = this.getTypeSize(type);
	      var byteSize = this.getTypeByteSize(componentType);
	      return count * typeSize * byteSize;
	    }
	  }]);

	  return MeshGeometryAsset;
	}(_BaseGeometryAsset3.default);

	MeshGeometryAsset.schema = _lodash2.default.extend({}, _BaseGeometryAsset3.default.schema, {
	  attributes: {
	    type: 'object',
	    description: '',
	    default: {}
	  },
	  indices: {
	    type: 'object',
	    description: '',
	    default: {}
	  },
	  primitives: {
	    type: 'array',
	    description: '',
	    default: []
	  }
	});
	MeshGeometryAsset.arrayTypes = {
	  int8: Int8Array,
	  uint8: Uint8Array,
	  int16: Int16Array,
	  uint16: Uint16Array,
	  int32: Int32Array,
	  uint32: Uint32Array,
	  float32: Float32Array,
	  float64: Float64Array
	};
	MeshGeometryAsset.typeSizes = {
	  scalar: 1,
	  vec2: 2,
	  vec3: 3,
	  vec4: 4,
	  mat2: 4,
	  mat3: 9,
	  mat4: 16
	};
	MeshGeometryAsset.typeByteSizes = {
	  int8: 1,
	  uint8: 1,
	  int16: 2,
	  uint16: 2,
	  int32: 4,
	  uint32: 4,
	  float16: 2,
	  float32: 4,
	  float64: 8
	};

	window.Box3D.MeshGeometryAsset = MeshGeometryAsset;
	exports.default = MeshGeometryAsset;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * An asset that holds geometry.
	 * @class BaseGeometryAsset
	 * @constructor
	 */

	var BaseGeometryAsset = function (_Box3DAsset) {
	  _inherits(BaseGeometryAsset, _Box3DAsset);

	  function BaseGeometryAsset(json) {
	    _classCallCheck(this, BaseGeometryAsset);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BaseGeometryAsset).call(this, json));

	    _this.loadedBytes = 0;
	    _this.geometries = {};
	    _this.maxMaterialIndices = {};

	    _lodash2.default.each(BaseGeometryAsset.PrimitiveType, function (type) {
	      this.maxMaterialIndices[type] = -1;
	    }, _this);
	    return _this;
	  }

	  _createClass(BaseGeometryAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(BaseGeometryAsset.prototype), 'initialize', this).call(this, properties);
	    }
	  }, {
	    key: 'unload',
	    value: function unload() {
	      _log2.default.info(this.box3DRuntime.engineName + ' - BaseGeometryAsset: Unloading geometry, ' + this.getName() + ' - "' + this.id + '"');

	      //abort xhr request associated with this
	      this.box3DRuntime.resourceLoader.abortRequest(this.id);

	      _lodash2.default.each(this.geometries, function (geometry) {
	        if (geometry) {
	          geometry.dispose();
	        }
	      });

	      this.geometries = {};
	      _get(Object.getPrototypeOf(BaseGeometryAsset.prototype), 'unload', this).call(this);
	    }

	    /**
	     * Get the bounds of this geometry.
	     * @method getBounds
	     * @public
	     * @returns {THREE.Box3} The bounds of this geometry.
	     */

	  }, {
	    key: 'getBounds',
	    value: function getBounds() {
	      var bounds = new _three2.default.Box3();

	      _lodash2.default.each(this.geometries, function (geometry) {
	        var geometryBounds = geometry.boundingBox;
	        bounds.union(geometryBounds);
	      });

	      return bounds;
	    }

	    /**
	     * Returns an array of this asset's geometries.
	     * @method getGeometries
	     * @public
	     * @returns {Array} an array of THREE.Geometry and THREE.BufferGeometry objects
	     */

	  }, {
	    key: 'getGeometries',
	    value: function getGeometries() {
	      return _lodash2.default.values(this.geometries);
	    }

	    /**
	     * Returns this asset's geometry of the specified type.
	     * @method getGeometry
	     * @public
	     * @param {String} type one of BaseGeometryAsset.PrimitiveType
	     * @returns {Object} a THREE.Geometry or THREE.BufferGeometry object
	     */

	  }, {
	    key: 'getGeometry',
	    value: function getGeometry(type) {
	      type = type !== undefined ? type : BaseGeometryAsset.PrimitiveType.TRIANGLES;
	      return this.geometries[type];
	    }

	    /**
	     * Returns this asset's maximum material index for the specified type.
	     * @method getMaxMaterialIndex
	     * @public
	     * @param {String} type one of BaseGeometryAsset.PrimitiveType
	     * @returns {Integer} the maximum material index
	     */

	  }, {
	    key: 'getMaxMaterialIndex',
	    value: function getMaxMaterialIndex(type) {
	      type = type !== undefined ? type : BaseGeometryAsset.PrimitiveType.TRIANGLES;
	      return this.maxMaterialIndices[type];
	    }

	    /**
	     * Called by subclasses to register a THREE.Geometry or THREE.BufferGeometry with this asset.
	     * The geometry can then be fetched with getGeometry().
	     * @protected
	     * @param {String} type one of the BaseGeometryAsset.PrimitiveType
	     * @param {Object} a THREE.Geometry or THREE.BufferGeometry object
	     * @returns {void}
	     */

	  }, {
	    key: 'setGeometry',
	    value: function setGeometry(type, geometry) {
	      if (geometry) {
	        // Flag the geometry as dynamic or static.
	        geometry.dynamic = this.getProperty('dynamic') || false;
	      }

	      this.geometries[type] = geometry;
	      this.maxMaterialIndices[type] = this.computeMaxMaterialIndex(geometry);
	    }

	    /**
	     * Figures out the highest material index referenced by a piece of three.js geometry.
	     * @param {Object} a THREE.Geometry or THREE.BufferGeometry object
	     * @return {Number}    The maximum material index
	     */

	  }, {
	    key: 'computeMaxMaterialIndex',
	    value: function computeMaxMaterialIndex(geometry) {
	      var maxMaterialIndex = -1;
	      var missingMaterial = false;
	      var geoGroups = undefined;
	      if (!geometry) {
	        return maxMaterialIndex;
	      }
	      // Correct negative material indices and compute the maximum material
	      // index for this geometry.
	      if (geometry instanceof _three2.default.BufferGeometry && geometry.groups) {
	        geoGroups = geometry.groups;
	      } else if (geometry instanceof _three2.default.Geometry) {
	        geoGroups = geometry.faces;
	      }
	      geoGroups.forEach(function (group) {
	        maxMaterialIndex = Math.max(maxMaterialIndex, group.materialIndex);
	      });

	      geoGroups.forEach(function (group) {
	        if (group.materialIndex >= 0) {
	          return;
	        }
	        group.materialIndex = maxMaterialIndex + 1;
	        missingMaterial = true;
	      });

	      if (missingMaterial) {
	        maxMaterialIndex++;
	      }
	      return maxMaterialIndex;
	    }

	    /**
	     * Returns the byte size of the data that has already been loaded by this asset and its
	     * hierarchy.
	     * @public
	     * @method getDataSizeLoaded
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeLoaded',
	    value: function getDataSizeLoaded(dependencyType) {
	      if (!dependencyType || dependencyType === 'geometries') {
	        return this.loadedBytes;
	      } else {
	        return 0;
	      }
	    }
	  }]);

	  return BaseGeometryAsset;
	}(_Box3DAsset3.default);

	BaseGeometryAsset.PrimitiveType = {
	  POINTS: 'points',
	  LINES: 'lines',
	  TRIANGLES: 'triangles'
	};
	BaseGeometryAsset.schema = _lodash2.default.extend({}, _Box3DAsset3.default.schema, {
	  bounds: {
	    type: 'object',
	    description: '',
	    default: null
	  }
	});

	window.Box3D.BaseGeometryAsset = BaseGeometryAsset;
	exports.default = BaseGeometryAsset;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseGeometryAsset2 = __webpack_require__(120);

	var _BaseGeometryAsset3 = _interopRequireDefault(_BaseGeometryAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * An object that holds primitive geometry.
	 * @class PrimitiveGeometryAsset
	 * @constructor
	 */

	var PrimitiveGeometryAsset = function (_BaseGeometryAsset) {
	  _inherits(PrimitiveGeometryAsset, _BaseGeometryAsset);

	  function PrimitiveGeometryAsset(json) {
	    _classCallCheck(this, PrimitiveGeometryAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(PrimitiveGeometryAsset).call(this, json));
	  }

	  _createClass(PrimitiveGeometryAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(PrimitiveGeometryAsset.prototype), 'initialize', this).call(this, properties);
	    }
	  }, {
	    key: 'createRuntimeData',

	    /** @inheritdoc */
	    value: function createRuntimeData(callback) {
	      this.createPrimitiveGeometry();
	      this.trigger('geometryChanged', this); // TODO: do we need this?
	      callback();
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _get(Object.getPrototypeOf(PrimitiveGeometryAsset.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      if (reason !== 'init') {
	        // Currently, any property changes cause the runtimeData to be re-created.
	        this.reloadBase();

	        // Keeping the return here in case we add additional property handling below.
	        return;
	      }
	    }

	    /**
	     * Create and register a THREE.Geometry with the base class.
	     * @method createPrimitiveGeometry
	     * @private
	     * @returns {void}
	     */

	  }, {
	    key: 'createPrimitiveGeometry',
	    value: function createPrimitiveGeometry() {
	      var type = this.getProperty('type'),
	          geometry;

	      switch (type) {
	        case 'box':
	          geometry = new _three2.default.BoxGeometry(this.getProperty('sizeX'), this.getProperty('sizeY'), this.getProperty('sizeZ'), this.getProperty('segmentsX'), this.getProperty('segmentsY'), this.getProperty('segmentsZ'), this.getProperty('flipSided'));
	          break;

	        case 'cylinder':
	          geometry = new _three2.default.CylinderGeometry(this.getProperty('radiusTop'), this.getProperty('radiusBottom'), this.getProperty('height'), this.getProperty('segmentsV'), this.getProperty('segmentsU'), this.getProperty('open'));
	          break;

	        case 'plane':
	          geometry = new _three2.default.PlaneGeometry(this.getProperty('sizeX'), this.getProperty('sizeY'), this.getProperty('segmentsX'), this.getProperty('segmentsY'));
	          geometry.applyMatrix(new _three2.default.Matrix4().makeRotationX(-Math.PI / 2));
	          break;

	        case 'sphere':
	          geometry = new _three2.default.SphereGeometry(this.getProperty('radius'), this.getProperty('segmentsU'), this.getProperty('segmentsV'));
	          break;

	        case 'torus':
	          geometry = new _three2.default.TorusGeometry(this.getProperty('radius'), 2 * this.getProperty('tubeRadius'), this.getProperty('segmentsV'), this.getProperty('segmentsU'), this.getProperty('arcAngle'));
	          break;

	        default:
	          _log2.default.error(this.box3DRuntime.engineName + ' - PrimitiveGeometryAsset: Unrecognized geometry type, "' + type + '"');
	          break;
	      }

	      if (geometry) {
	        geometry.groupsNeedUpdate = true;
	        geometry.computeBoundingBox();
	        geometry.computeBoundingSphere();
	        this.setGeometry(_BaseGeometryAsset3.default.PrimitiveType.TRIANGLES, geometry);
	      }
	    }
	  }]);

	  return PrimitiveGeometryAsset;
	}(_BaseGeometryAsset3.default);

	PrimitiveGeometryAsset.schema = _lodash2.default.extend({}, _BaseGeometryAsset3.default.schema, {
	  type: {
	    type: 'string',
	    description: '',
	    default: 'sphere'
	  },
	  radius: {
	    type: 'float',
	    description: '',
	    default: 100
	  },
	  segmentsU: {
	    type: 'integer',
	    description: '',
	    default: 12
	  },
	  segmentsV: {
	    type: 'integer',
	    description: '',
	    default: 12
	  },
	  sizeX: {
	    type: 'float',
	    description: '',
	    default: 100
	  },
	  sizeY: {
	    type: 'float',
	    description: '',
	    default: 100
	  },
	  sizeZ: {
	    type: 'float',
	    description: '',
	    default: 100
	  },
	  segmentsX: {
	    type: 'integer',
	    description: '',
	    default: 1
	  },
	  segmentsY: {
	    type: 'integer',
	    description: '',
	    default: 1
	  },
	  segmentsZ: {
	    type: 'integer',
	    description: '',
	    default: 1
	  },
	  radiusTop: {
	    type: 'float',
	    description: '',
	    default: 50
	  },
	  radiusBottom: {
	    type: 'float',
	    description: '',
	    default: 50
	  },
	  height: {
	    type: 'float',
	    description: '',
	    default: 100
	  },
	  open: {
	    type: 'boolean',
	    description: '',
	    default: false
	  },
	  tubeRadius: {
	    type: 'float',
	    description: '',
	    default: 20
	  },
	  arcAngle: {
	    type: 'float',
	    description: '',
	    default: Math.PI * 2.0
	  }
	});

	window.Box3D.PrimitiveGeometryAsset = PrimitiveGeometryAsset;
	exports.default = PrimitiveGeometryAsset;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class PrefabAsset
	 * @constructor
	 */

	var PrefabAsset = function (_Box3DAsset) {
	  _inherits(PrefabAsset, _Box3DAsset);

	  function PrefabAsset(json) {
	    _classCallCheck(this, PrefabAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(PrefabAsset).call(this, json));
	  }

	  _createClass(PrefabAsset, [{
	    key: 'verifyProperty',
	    value: function verifyProperty(propertyName, valueObj) {
	      if (_get(Object.getPrototypeOf(PrefabAsset.prototype), 'verifyProperty', this).call(this, propertyName, valueObj)) {
	        return true;
	      }
	      var originalType = this.get('originalType') || 'node';
	      var objectClass = this.getObjectClass(originalType);
	      // return objectClass.verifyProperty.call(this, propertyName, valueObj);
	      // TODO: this doesn't actually verify that the property is valid. It only checks
	      // that it exists.
	      return !!objectClass.schema[propertyName];
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      this.runtimeData = new _three2.default.Object3D();
	      callback();
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'getDefaultProperty',
	    value: function getDefaultProperty(propertyName) {
	      var originalType = this.get('originalType') || 'node';
	      var objectClass = this.getObjectClass(originalType);
	      var value = undefined;
	      var schemaDef = objectClass.schema[propertyName];
	      value = schemaDef ? schemaDef.default : undefined;

	      if (value instanceof Object) {
	        return _lodash2.default.clone(value);
	      } else {
	        return value;
	      }
	    }
	  }]);

	  return PrefabAsset;
	}(_Box3DAsset3.default);

	window.Box3D.PrefabAsset = PrefabAsset;
	exports.default = PrefabAsset;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseTextureAsset2 = __webpack_require__(19);

	var _BaseTextureAsset3 = _interopRequireDefault(_BaseTextureAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * An asset that holds geometry.
	 * @class BaseGeometryAsset
	 * @constructor
	 */

	var RenderTexture2DAsset = function (_BaseTextureAsset) {
	  _inherits(RenderTexture2DAsset, _BaseTextureAsset);

	  function RenderTexture2DAsset(json) {
	    _classCallCheck(this, RenderTexture2DAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(RenderTexture2DAsset).call(this, json));
	  }

	  _createClass(RenderTexture2DAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      this.loadComponents = true;
	      _get(Object.getPrototypeOf(RenderTexture2DAsset.prototype), 'initialize', this).call(this, properties);
	    }
	  }, {
	    key: 'createRTTextureData',
	    value: function createRTTextureData() {
	      var width = this.getWidth();
	      var height = this.getHeight();

	      this.runtimeData = new _three2.default.WebGLRenderTarget(width, height, {
	        wrapS: _BaseTextureAsset3.default.ADDRESS_MODE[this.getProperty('uMapping')],
	        wrapT: _BaseTextureAsset3.default.ADDRESS_MODE[this.getProperty('vMapping')],
	        minFilter: _three2.default.LinearFilter,
	        magFilter: _three2.default.LinearFilter,
	        format: _BaseTextureAsset3.default.FORMAT[this.getProperty('format')],
	        type: _BaseTextureAsset3.default.TYPE[this.getProperty('type')],
	        stencilBuffer: this.getProperty('stencilBuffer')
	      });

	      this.runtimeData.name = this.getName();
	      this.runtimeData.flipY = false;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      this.createRTTextureData();
	      this.trigger('loadProgress', this); // TODO: do we need this?
	      callback();
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _get(Object.getPrototypeOf(RenderTexture2DAsset.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      // If something changed that necessitates the texture being recreated, do so.
	      if (changes.hasOwnProperty('format') || changes.hasOwnProperty('type') || changes.hasOwnProperty('width') || changes.hasOwnProperty('height')) {
	        if (this.runtimeData.__webglFramebuffer) {
	          this.runtimeData.dispose();
	          delete this.runtimeData.__webglFramebuffer;
	        }

	        this.runtimeData.texture.format = _BaseTextureAsset3.default.FORMAT[this.getProperty('format')];
	        this.runtimeData.texture.type = _BaseTextureAsset3.default.TYPE[this.getProperty('type')];
	        this.runtimeData.texture.height = this.getHeight();
	        this.runtimeData.texture.width = this.getWidth();
	      }
	    }
	  }, {
	    key: 'setUserData',
	    value: function setUserData(width, height, color) {
	      var size = width * height,
	          textureData = new Uint8Array(3 * size),
	          r = Math.floor(color.r * 255),
	          g = Math.floor(color.g * 255),
	          b = Math.floor(color.b * 255),
	          idx;

	      for (idx = 0; idx < size; idx += 1) {
	        textureData[idx * 3] = r;
	        textureData[idx * 3 + 1] = g;
	        textureData[idx * 3 + 2] = b;
	      }

	      if (this.runtimeData) {
	        this.runtimeData.image = {
	          data: textureData,
	          width: width,
	          height: height
	        };

	        this.runtimeData.needsUpdate = true;
	      }
	    }
	  }]);

	  return RenderTexture2DAsset;
	}(_BaseTextureAsset3.default);

	RenderTexture2DAsset.schema = _lodash2.default.extend({}, _BaseTextureAsset3.default.schema, {
	  width: {
	    type: 'integer',
	    description: '',
	    default: 256
	  },
	  height: {
	    type: 'integer',
	    description: '',
	    default: 256
	  },
	  stencilBuffer: {
	    type: 'boolean',
	    description: '',
	    default: false
	  },
	  depthBuffer: {
	    type: 'boolean',
	    description: '',
	    default: false
	  },
	  generateMipmaps: {
	    type: 'boolean',
	    description: _BaseTextureAsset3.default.schema.generateMipmaps.description,
	    default: false
	  }
	});

	window.Box3D.RenderTexture2DAsset = RenderTexture2DAsset;
	exports.default = RenderTexture2DAsset;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	// TODO: this class and RenderTexture2D contain duplicate code that should be
	// refactored.
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseTextureAsset2 = __webpack_require__(19);

	var _BaseTextureAsset3 = _interopRequireDefault(_BaseTextureAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class RenderTextureCubeAsset
	 * @constructor
	 */

	var RenderTextureCubeAsset = function (_BaseTextureAsset) {
	  _inherits(RenderTextureCubeAsset, _BaseTextureAsset);

	  function RenderTextureCubeAsset(json) {
	    _classCallCheck(this, RenderTextureCubeAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(RenderTextureCubeAsset).call(this, json));
	  }

	  _createClass(RenderTextureCubeAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      this.loadComponents = true;
	      _get(Object.getPrototypeOf(RenderTextureCubeAsset.prototype), 'initialize', this).call(this, properties);
	    }
	  }, {
	    key: '_createRTTexture',
	    value: function _createRTTexture() {
	      var width = this.getWidth();
	      var height = this.getHeight();

	      this.runtimeData = new _three2.default.WebGLRenderTargetCube(width, height, {
	        wrapS: _BaseTextureAsset3.default.ADDRESS_MODE[this.getProperty('uMapping')],
	        wrapT: _BaseTextureAsset3.default.ADDRESS_MODE[this.getProperty('vMapping')],
	        minFilter: _three2.default.LinearFilter,
	        magFilter: _three2.default.LinearFilter,
	        format: _BaseTextureAsset3.default.FORMAT[this.getProperty('format')],
	        type: _BaseTextureAsset3.default.TYPE[this.getProperty('type')],
	        stencilBuffer: this.getProperty('stencilBuffer')
	      });

	      this.runtimeData.name = this.getName();
	      this.runtimeData.flipY = false;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      this._createRTTexture();
	      callback();
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _get(Object.getPrototypeOf(RenderTextureCubeAsset.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      // If something changed that necessitates the texture being recreated, do so.
	      if (changes.hasOwnProperty('format') || changes.hasOwnProperty('type') || changes.hasOwnProperty('width') || changes.hasOwnProperty('height')) {
	        if (this.runtimeData.__webglFramebuffer) {
	          this.runtimeData.dispose();
	          delete this.runtimeData.__webglFramebuffer;
	        }

	        this.runtimeData.texture.format = _BaseTextureAsset3.default.FORMAT[this.getProperty('format')];
	        this.runtimeData.texture.type = _BaseTextureAsset3.default.TYPE[this.getProperty('type')];
	        this.runtimeData.texture.width = this.getWidth();
	        this.runtimeData.texture.height = this.runtimeData.width;
	      }
	    }

	    /**
	     * Returns the total amount of GPU memory occupied by this texture.
	     * @method getDataSizeTextureInMemory
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeInMemory',
	    value: function getDataSizeInMemory() {
	      var oneFaceSize = _get(Object.getPrototypeOf(RenderTextureCubeAsset.prototype), 'getDataSizeInMemory', this).call(this);
	      return oneFaceSize * 6;
	    }

	    /**
	     * Returns the width of the texture. Specify filters to query the desired
	     * texture. If no filters are specified, the default texture for the current
	     * device will be queried.
	     * @param {Object} filters Filters for selecting a texture
	     * @return {Integer} The texture width.
	     */

	  }, {
	    key: 'getWidth',
	    value: function getWidth() {
	      var maxTextureSize = this.box3DRuntime.getGPUCapability('MAX_CUBE_MAP_TEXTURE_SIZE'),
	          width = this.getProperty('width');

	      if (width > maxTextureSize) {
	        width = maxTextureSize;
	      }

	      return width;
	    }

	    /**
	     * Returns the height of the texture. Specify filters to query the desired
	     * texture. If no filters are specified, the default texture for the current
	     * device will be queried.
	     * @param {Object} filters Filters for selecting a texture
	     * @return {Integer} The texture height.
	     */

	  }, {
	    key: 'getHeight',
	    value: function getHeight() {
	      var maxTextureSize = this.box3DRuntime.getGPUCapability('MAX_CUBE_MAP_TEXTURE_SIZE'),
	          height = this.getProperty('height');

	      if (height > maxTextureSize) {
	        height = maxTextureSize;
	      }

	      return height;
	    }
	  }]);

	  return RenderTextureCubeAsset;
	}(_BaseTextureAsset3.default);

	RenderTextureCubeAsset.schema = _lodash2.default.extend({}, _BaseTextureAsset3.default.schema, {
	  width: {
	    type: 'integer',
	    description: '',
	    default: 256
	  },
	  height: {
	    type: 'integer',
	    description: '',
	    default: 256
	  },
	  stencilBuffer: {
	    type: 'boolean',
	    description: '',
	    default: false
	  },
	  depthBuffer: {
	    type: 'boolean',
	    description: '',
	    default: false
	  },
	  generateMipmaps: {
	    type: 'boolean',
	    description: _BaseTextureAsset3.default.schema.generateMipmaps.description,
	    default: false
	  }
	});

	window.Box3D.RenderTextureCubeAsset = RenderTextureCubeAsset;
	exports.default = RenderTextureCubeAsset;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _uuid = __webpack_require__(9);

	var _uuid2 = _interopRequireDefault(_uuid);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class SceneAsset
	 * @constructor
	 */

	var SceneAsset = function (_Box3DAsset) {
	  _inherits(SceneAsset, _Box3DAsset);

	  function SceneAsset(json) {
	    _classCallCheck(this, SceneAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(SceneAsset).call(this, json));
	  }

	  _createClass(SceneAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      this.loadComponents = true;
	      _get(Object.getPrototypeOf(SceneAsset.prototype), 'initialize', this).call(this, properties);
	      this.box3DRuntime.on('prefabDeleted', this.onPrefabDeleted, this);
	      this.on('load', this._sceneLoaded, this);
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize(properties) {
	      this.box3DRuntime.off('prefabDeleted', this.onPrefabDeleted, this);
	      this.off('load', this._sceneLoaded, this);
	      _get(Object.getPrototypeOf(SceneAsset.prototype), 'uninitialize', this).call(this, properties);
	    }
	  }, {
	    key: '_sceneLoaded',
	    value: function _sceneLoaded() {
	      this.box3DRuntime.needsRender = true;
	    }

	    /**
	     * Create an instance of a prefab/model asset and register it inside the scene asset.
	     * Note that this function does not add the new instance as a child of anything. This must be
	     * done after successful creation of the instance. i.e. Include a 'success' callback
	     * in the options structure and then call scene.addChild( instance ).
	     * @public
	     * @method createInstanceById
	     * @param  {Object} prefabObject
	     * @param {String} id An ID for the new instance. If the one specified is not unique or
	     * not given, a new one will be generated.
	     * @return {Object} The new instance object
	     */

	  }, {
	    key: 'createInstanceById',
	    value: function createInstanceById(prefabId, id) {
	      return this.createInstance(this.getAssetById(prefabId), id);
	    }

	    /**
	     * Create an instance of a prefab asset and register it inside the scene asset.
	     * Note that this function does not add the new instance as a child of anything. This must be
	     * done after creation of the instance. i.e. Call scene.addChild( instance ).
	     * @public
	     * @method createInstance
	     * @param  {Object} prefabAsset
	     * @param {String} id An ID for the new instance. If the one specified is not unique or
	     * not given, a new one will be generated.
	     * @return {Object} The new instance object
	     */

	  }, {
	    key: 'createInstance',
	    value: function createInstance(prefab, id) {
	      if (!prefab) {
	        _log2.default.error('Please specify a prefab to create an instance of.');
	        return;
	      }
	      if (prefab.type !== 'prefab') {
	        _log2.default.error('You can only create an instance of a prefab asset.');
	        return;
	      }

	      var instanceMap = {};
	      var newTopObjectId = id || (0, _uuid2.default)();
	      var topInstanceJson = {
	        id: newTopObjectId,
	        name: prefab.getName(),
	        parentAssetId: this.id,
	        prefabObjectId: prefab.id,
	        prefabAssetId: prefab.id,
	        prefabInstanceId: newTopObjectId,
	        type: prefab.get('originalType') || 'model',
	        properties: {},
	        components: _lodash2.default.extend({}, prefab.componentRegistry.getDescriptors())
	      };
	      var that = this;

	      // Create the top-level instance object
	      var topInst = this.createObject(topInstanceJson);
	      instanceMap[prefab.id] = topInst;

	      // Create child instance objects
	      _lodash2.default.each(prefab.objects, function (prefabObject) {
	        var instanceJSON = {
	          id: (0, _uuid2.default)(),
	          name: prefabObject.getName(),
	          parentAssetId: that.id,
	          prefabObjectId: prefabObject.id,
	          prefabAssetId: prefab.id,
	          prefabInstanceId: topInst.id,
	          type: prefabObject.type,
	          properties: {},
	          components: _lodash2.default.extend({}, prefabObject.componentRegistry.getDescriptors())
	        };
	        var inst = that.createObject(instanceJSON);
	        instanceMap[prefabObject.id] = inst;
	      }, this);

	      // For each object, set 'parentId' and 'children' on the instance using
	      // the mapping created above.
	      _lodash2.default.each(prefab.objects, function (prefabObject) {
	        var instChildren = [];
	        var childIds = prefabObject.getChildIds();
	        var instance = instanceMap[prefabObject.id];
	        if (childIds.length) {
	          for (var i = 0; i < childIds.length; i++) {
	            if (instanceMap[childIds[i]]) {
	              instChildren.push(instanceMap[childIds[i]].id);
	              instanceMap[childIds[i]].set('parentId', instance.id);
	            }
	          }
	          instance.setChildIds(instChildren);
	        }
	      }, this);

	      // Add top-level instance children
	      var instChildren = [];
	      var childIds = prefab.getChildIds();
	      for (var i = 0; i < childIds.length; i++) {
	        if (instanceMap[childIds[i]]) {
	          instChildren.push(instanceMap[childIds[i]].id);
	          instanceMap[childIds[i]].set('parentId', topInst.id);
	        }
	      }
	      topInst.setChildIds(instChildren);
	      return topInst;
	    }
	  }, {
	    key: 'getDataSizeGeometryDownload',
	    value: function getDataSizeGeometryDownload() {
	      var totalSize = 0;
	      totalSize = _get(Object.getPrototypeOf(SceneAsset.prototype), 'getDataSizeGeometryDownload', this).call(this);

	      return totalSize;
	    }
	  }, {
	    key: 'getDataSizeGeometryInMemory',
	    value: function getDataSizeGeometryInMemory() {
	      var totalSize = 0;
	      totalSize = _get(Object.getPrototypeOf(SceneAsset.prototype), 'getDataSizeGeometryInMemory', this).call(this);
	      return totalSize;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      this.runtimeData = new _three2.default.Scene();
	      this.runtimeData.childIDs = {};
	      this.runtimeData.matrixAutoUpdate = false;
	      this.runtimeData.name = this.getName();

	      // TODO: Separate this logic into another function so that we can
	      // enable/disable rendering of the scene.
	      var renderer = this.box3DRuntime.getRenderer();
	      if (renderer) {
	        var scenePass = new _three2.default.RenderPass();
	        scenePass.clear = false;
	        renderer.addRenderPass(scenePass);
	      }

	      callback();
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _get(Object.getPrototypeOf(SceneAsset.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      if (!this.getProperty('fogEnabled')) {
	        this.runtimeData.fog = null;
	      } else {
	        if (!this.runtimeData.fog || changes.hasOwnProperty('fogType')) {

	          if (this.getProperty('fogType') === 'FogExp2') {
	            this.runtimeData.fog = new _three2.default.FogExp2(this.getProperty('fogColor'), this.getProperty('fogDensity'));
	          } else {
	            _log2.default.info('SceneAsset: Invalid fog type, ' + this.getProperty('fogType') + ', in scene!');
	          }
	        }

	        if (changes.hasOwnProperty('fogColor')) {
	          this.runtimeData.fog.color.setHex(this.getProperty('fogColor'));
	        }

	        if (changes.hasOwnProperty('fogDensity')) {
	          this.runtimeData.fog.density = this.getProperty('fogDensity');
	        }
	      }

	      if (changes.hasOwnProperty('fogEnabled')) {
	        this.box3DRuntime.trigger('rebuildMaterials');
	        this.box3DRuntime.needsRender = true;
	      }
	    }
	  }, {
	    key: 'unload',
	    value: function unload(options) {
	      if (this.runtimeData) {
	        _log2.default.info('Unloading scene, ' + this.getName());

	        _get(Object.getPrototypeOf(SceneAsset.prototype), 'unload', this).call(this, options);
	      }
	    }
	  }, {
	    key: 'onPrefabDeleted',
	    value: function onPrefabDeleted(modelID) {
	      if (this.runtimeData) {

	        _lodash2.default.each(this.objects, function (obj) {
	          if (obj) {
	            var prefabObjectId = obj.get('prefabObjectId');
	            if (prefabObjectId === modelID) {
	              obj.breakPrefabLink();
	            }
	          }
	        }, this);
	      }
	    }
	  }]);

	  return SceneAsset;
	}(_Box3DAsset3.default);

	SceneAsset.schema = _lodash2.default.extend({}, _Box3DAsset3.default.schema, {
	  fogEnabled: {
	    type: 'boolean',
	    default: false
	  },
	  fogType: {
	    type: 'string',
	    default: 'FogExp2'
	  },
	  fogColor: {
	    type: 'color',
	    default: 0xbbbbbb
	  },
	  fogDensity: {
	    type: 'float',
	    default: 0.0004
	  }
	});

	window.Box3D.SceneAsset = SceneAsset;
	exports.default = SceneAsset;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	var _Box3DShaderPBR_MetalRoughness = __webpack_require__(127);

	var _Box3DShaderPBR_MetalRoughness2 = _interopRequireDefault(_Box3DShaderPBR_MetalRoughness);

	var _Box3DShaderPBR_SpecGloss = __webpack_require__(131);

	var _Box3DShaderPBR_SpecGloss2 = _interopRequireDefault(_Box3DShaderPBR_SpecGloss);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ShaderAsset = function (_Box3DAsset) {
	  _inherits(ShaderAsset, _Box3DAsset);

	  function ShaderAsset(json) {
	    _classCallCheck(this, ShaderAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(ShaderAsset).call(this, json));
	  }

	  _createClass(ShaderAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(ShaderAsset.prototype), 'initialize', this).call(this, properties);
	      this._buildParamDependencies();
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      this.runtimeData = {};
	      this.runtimeData.vertexShader = this.getProperty('vertexShader');
	      this.runtimeData.fragmentShader = this.getProperty('fragmentShader');
	      this._buildUniformList();
	      this._buildRenderParamList();
	      callback();
	    }
	  }, {
	    key: '_buildUniformList',
	    value: function _buildUniformList() {
	      var parameters = this.getProperty('parameters');
	      var uniforms = this.getProperty('uniforms');
	      var uniform;
	      this.runtimeData.uniforms = _three2.default.UniformsUtils.clone(uniforms);
	      _lodash2.default.each(parameters, function (param, paramName) {
	        uniform = {};

	        if (!param || param.isRenderParam || !param.isUniform) {
	          return;
	        }
	        switch (param.type) {
	          case 'opt':
	            uniform.type = 'i';
	            uniform.value = param.default;
	            break;
	          case 'b':
	            uniform.type = 'i';
	            uniform.value = param.default ? 1 : 0;
	            break;
	          case 't':
	            uniform.type = 't';
	            uniform.value = param.default;
	            break;
	          case 'c':
	            uniform.type = param.type;
	            uniform.value = new _three2.default.Color(param.default);
	            // uniform.value.copy(param.default);
	            uniform.value.copyGammaToLinear(uniform.value);
	            break;
	          case 'v2':
	            uniform.type = param.type;
	            uniform.value = new _three2.default.Vector2();
	            uniform.value.set(param.default.x, param.default.y);
	            break;
	          case 'v3':
	            uniform.type = param.type;
	            uniform.value = new _three2.default.Vector3();
	            uniform.value.set(param.default.x, param.default.y, param.default.z);
	            break;
	          case 'v4':
	            uniform.type = param.type;
	            uniform.value = new _three2.default.Vector4();
	            uniform.value.set(param.default.x, param.default.y, param.default.z, param.default.w);
	            break;
	          default:
	            uniform.type = param.type;
	            uniform.value = param.default;
	        }
	        this.runtimeData.uniforms[paramName] = uniform;
	      }, this);
	    }
	  }, {
	    key: '_buildRenderParamList',
	    value: function _buildRenderParamList() {
	      var parameters = this.getProperty('parameters');
	      var renderParams = this.getProperty('renderParams');
	      this.runtimeData.renderParams = renderParams || {};
	      _lodash2.default.each(parameters, function (param, paramName) {

	        if (!param || param.isUniform || !param.isRenderParam) {
	          return;
	        }
	        switch (param.type) {
	          case 'b':
	            this.runtimeData.renderParams[paramName] = !!param.default;
	            break;
	          default:
	            this.runtimeData.renderParams[paramName] = param.default;
	        }
	      }, this);
	    }

	    /**
	     * Build a mapping from a parameter name to a list of all parameters
	     * that are dependent on it.
	     */

	  }, {
	    key: '_buildParamDependencies',
	    value: function _buildParamDependencies() {
	      var parameters = this.getProperty('parameters');
	      this.paramDependencyMap = {};
	      _lodash2.default.each(parameters, function (param, name) {
	        // Add this param to the list for each dependency that it has.
	        var deps = this.getParameterDependencies(name);
	        _lodash2.default.each(deps, function (paramName) {
	          if (!this.paramDependencyMap[paramName]) {
	            this.paramDependencyMap[paramName] = [];
	          }
	          if (this.paramDependencyMap[paramName].indexOf(name) === -1) {
	            this.paramDependencyMap[paramName].push(name);
	          }
	        }, this);
	        // Make sure that there is at least an empty array for each param.
	        if (!this.paramDependencyMap[name]) {
	          this.paramDependencyMap[name] = [];
	        }
	      }, this);
	    }

	    /**
	     * Return a list of all parameters that are dependent on the specified one.
	     * @param  {String} paramName The name of the dependency to check for.
	     * @return {Array}           An array of parameters that are dependent on the
	     *  given one.
	     */

	  }, {
	    key: 'getDependentParameters',
	    value: function getDependentParameters(paramName) {
	      if (this.paramDependencyMap[paramName]) {
	        return this.paramDependencyMap[paramName];
	      }
	    }

	    /**
	     * Get a list of all parameters that the given parameter is dependent on.
	     * @param  {String} paramName The name of the parameter to get dependencies for.
	     * @return {Array}           An array of parameter names.
	     */

	  }, {
	    key: 'getParameterDependencies',
	    value: function getParameterDependencies(paramName) {

	      function _getLogicalAndDependencies(conditions, deps) {
	        deps = deps || [];
	        _lodash2.default.each(conditions, function (cond, key) {
	          if (key === 'or') {
	            deps = _getLogicalOrDependencies(cond, deps);
	          } else if (deps.indexOf(key) === -1) {
	            deps = deps.concat([key]);
	          }
	        }, this);
	        return deps;
	      }

	      function _getLogicalOrDependencies(conditions, deps) {
	        deps = deps || [];
	        _lodash2.default.each(conditions, function (cond) {
	          deps = _getLogicalAndDependencies(cond, deps);
	        }, this);
	        return deps;
	      }

	      var parameters = this.getProperty('parameters');
	      if (parameters[paramName] && parameters[paramName].enabledWhen) {
	        return _getLogicalAndDependencies(parameters[paramName].enabledWhen, []);
	      } else {
	        return [];
	      }
	    }
	  }]);

	  return ShaderAsset;
	}(_Box3DAsset3.default);

	ShaderAsset.schema = _lodash2.default.extend({}, _Box3DAsset3.default.schema, {
	  features: {
	    type: 'object',
	    description: '',
	    default: {}
	  },
	  parameters: {
	    type: 'object',
	    description: '',
	    default: {}
	  },
	  uniforms: {
	    type: 'object',
	    description: '',
	    default: {}
	  },
	  vertexShader: {
	    type: 'string',
	    default: ''
	  },
	  fragmentShader: {
	    type: 'string',
	    default: ''
	  }
	});
	ShaderAsset.builtInAssetDescriptors = {
	  PBR_Metalness: _Box3DShaderPBR_MetalRoughness2.default,
	  PBR_Specular: _Box3DShaderPBR_SpecGloss2.default
	};

	window.Box3D.ShaderAsset = ShaderAsset;
	exports.default = ShaderAsset;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(128), __webpack_require__(129), __webpack_require__(130)], __WEBPACK_AMD_DEFINE_RESULT__ = function (THREE, shaderParams, uberPBRVertexShader, uberPBRFragmentShader) {
	  'use strict';

	  var Box3DShaderPBR = {
	    id: 'box3d_pbr_metal_rough_shader',
	    type: 'shader',
	    name: 'PBR Metalness/Roughness',
	    properties: {
	      vertexShader: uberPBRVertexShader,
	      fragmentShader: uberPBRFragmentShader,
	      features: {
	        albedo: {
	          displayName: 'Albedo',
	          defaultEnabled: true,
	          parameters: ['baseAlbedo', 'albedoCombine', 'albedoMap', 'blending', 'blendEquation', 'blendSrc', 'blendDst', 'useSeparateAlphaBlend', 'blendEquationAlpha', 'blendSrcAlpha', 'blendDstAlpha']
	        },
	        transparency: {
	          displayName: 'Transparency',
	          defaultEnabled: false,
	          parameters: ['opacity', 'alphaBlendMode', 'useAlphaFromAlbedoMap', 'alphaMap']
	        },
	        specular: {
	          displayName: 'Specular',
	          defaultEnabled: false,
	          parameters: ['roughness', 'roughnessMap', 'useRoughnessFromMetalnessMap', 'metalness', 'metalnessMap', 'reflectivityF0']
	        },
	        normals: {
	          displayName: 'Bump/Normals',
	          defaultEnabled: false,
	          parameters: ['useBump', 'normalMap', 'normalScale', 'flipNormalX', 'flipNormalY', 'bumpMap', 'bumpScale']
	        },
	        emissive: {
	          displayName: 'Emissive',
	          defaultEnabled: false,
	          parameters: ['emissiveColor', 'emissiveCombine', 'emissiveMap', 'emissiveIntensity']
	        },
	        environment: {
	          displayName: 'Environment',
	          defaultEnabled: true,
	          parameters: ['useSceneLights', 'useEnvironmentMap', 'environmentMapProjection', 'environmentMapCube_0', 'environmentMapCube_1', 'environmentMapCube_2', 'environmentMap2D_0', 'environmentMap2D_1', 'environmentMap2D_2', 'aoMap']
	        },
	        rendering: {
	          displayName: 'Render Parameters',
	          alwaysEnabled: true,
	          parameters: ['fog', 'side', 'depthWrite', 'depthTest', 'depthFunc', 'alphaTest', 'polygonOffset', 'polygonOffsetFactor', 'polygonOffsetUnits']
	        }
	      },
	      parameters: shaderParams,
	      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, {
	        time: {
	          type: 'f',
	          value: 1.0
	        }
	      }])
	    }
	  };
	  return Box3DShaderPBR;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (THREE) {
	  'use strict';

	  var Box3DShaderParams = {
	    // Diffuse
	    baseAlbedo: {
	      displayName: 'Base Albedo',
	      description: 'A color to tint the material with.',
	      type: 'c',
	      default: { r: 1.0, g: 1.0, b: 1.0 },
	      min: 0.0,
	      max: 1.0,
	      isUniform: true,
	      enabledWhen: {
	        or: [{
	          albedoCombine: {
	            equal: true
	          },
	          albedoMap: {
	            notEqualDefault: true
	          }
	        }, {
	          albedoMap: {
	            equalDefault: true
	          }
	        }]
	      }
	    },
	    albedoCombine: {
	      displayName: 'Combine',
	      description: 'Combine color with diffuse texture color.',
	      type: 'b',
	      default: false
	    },
	    albedoMap: {
	      displayName: 'Albedo Map',
	      description: 'A texture that modifies the diffuse color of the material.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        albedoMap: {
	          notEqualDefault: true
	        }
	      },
	      advancedProperties: {
	        albedoMapUVChannel: {
	          displayName: 'UV Channel',
	          description: 'Which UV channel to use with the albedo map.',
	          type: 'opt',
	          options: {
	            uv0: 0,
	            uv1: 1
	          },
	          default: 'uv0',
	          enabledWhen: {
	            albedoMapUVChannel: {
	              notEqualDefault: true
	            }
	          },
	          betaFlag: false
	        },
	        albedoMapOffset: {
	          displayName: 'Offset',
	          description: 'Shift the texture mapping by the specified amount.',
	          type: 'v2',
	          default: {
	            x: 0,
	            y: 0
	          },
	          min: -1.000,
	          max: 1.000,
	          stepSize: 0.001,
	          enabledWhen: {
	            albedoMapOffset: {
	              notEqualDefault: true
	            }
	          }
	        },
	        albedoMapScale: {
	          displayName: 'Tiling',
	          description: 'Scale the texture mapping. A higher number results in the texture ' + 'displaying smaller on the models.',
	          type: 'v2',
	          default: {
	            x: 1,
	            y: 1
	          },
	          min: 0.00001,
	          max: 200.000,
	          stepSize: 0.001,
	          enabledWhen: {
	            albedoMapScale: {
	              notEqualDefault: true
	            }
	          }
	        },
	        albedoMapPan: {
	          displayName: 'Panning',
	          description: 'The panning rate of the color texture. Higher is faster.',
	          type: 'v2',
	          default: {
	            x: 0,
	            y: 0
	          },
	          min: -16.000,
	          max: 16.000,
	          stepSize: 0.001,
	          enabledWhen: {
	            albedoMapPan: {
	              notEqualDefault: true
	            }
	          },
	          needsTimeUpdate: true
	        }
	      }
	    },
	    // Transparency
	    opacity: {
	      displayName: 'Opacity',
	      description: 'This option controls the total opacity of the material.',
	      type: 'f',
	      default: 1.0,
	      min: 0.0,
	      max: 1.0,
	      isUniform: true,
	      transparency: 'LessThanOne'
	    },
	    alphaBlendMode: {
	      displayName: 'Alpha Mode',
	      description: 'This option controls whether the alpha channel of the color texture is' + ' used for transparency or just to blend with the Base Color (default).',
	      type: 'opt',
	      options: {
	        alphaTransparency: 0,
	        maskedTransparency: 2,
	        colorBlend: 1
	      },
	      default: 'colorBlend',
	      transparency: 'LessThanOne'
	    },
	    useAlphaFromAlbedoMap: {
	      displayName: 'Use Alpha Channel of Albedo Map',
	      description: 'This option controls whether the alpha channel of the albedo texture is' + ' used for transparency or just to blend with the Base Color (default).',
	      type: 'b',
	      default: false,
	      enabledWhen: {
	        albedoMap: {
	          notEqualDefault: true
	        },
	        useAlphaFromAlbedoMap: {
	          equal: true
	        }
	      }
	    },
	    alphaMap: {
	      displayName: 'Alpha Map',
	      description: 'A texture that stores the transparency info of the material.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        useAlphaFromAlbedoMap: {
	          notEqual: true
	        },
	        alphaMap: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        useAlphaFromAlbedoMap: {
	          notEqual: true
	        }
	      }
	    },
	    // Specular
	    specularColor: {
	      displayName: 'Specular Color',
	      description: 'A color to tint the material with.',
	      type: 'c',
	      default: { r: 1.0, g: 1.0, b: 1.0 },
	      min: 0.0,
	      max: 1.0,
	      isUniform: true,
	      enabledWhen: {
	        or: [{
	          specularCombine: {
	            equal: true
	          },
	          specularMap: {
	            notEqualDefault: true
	          }
	        }, {
	          specularMap: {
	            equalDefault: true
	          }
	        }]
	      }
	    },
	    specularCombine: {
	      displayName: 'Combine',
	      description: 'Combine specular color with specular texture color.',
	      type: 'b',
	      default: false
	    },
	    specularMap: {
	      displayName: 'Specular Map',
	      description: 'A texture that contains the specular color of the material.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        specularMap: {
	          notEqualDefault: true
	        }
	      },
	      advancedProperties: {
	        specularMapUVChannel: {
	          displayName: 'UV Channel',
	          description: 'Which UV channel to use with the specular map.',
	          type: 'opt',
	          options: {
	            uv0: 0,
	            uv1: 1
	          },
	          default: 'uv0',
	          enabledWhen: {
	            specularMapUVChannel: {
	              notEqualDefault: true
	            }
	          },
	          betaFlag: false
	        },
	        specularMapOffset: {
	          displayName: 'Offset',
	          description: 'Shift the texture mapping by the specified amount.',
	          type: 'v2',
	          default: {
	            x: 0,
	            y: 0
	          },
	          min: -1.000,
	          max: 1.000,
	          stepSize: 0.001,
	          enabledWhen: {
	            specularMapOffset: {
	              notEqualDefault: true
	            }
	          }
	        },
	        specularMapScale: {
	          displayName: 'Tiling',
	          description: 'Scale the texture mapping. A higher number results in the texture' + ' displaying smaller on the models.',
	          type: 'v2',
	          default: {
	            x: 1,
	            y: 1
	          },
	          min: 0.00001,
	          max: 200.000,
	          stepSize: 0.001,
	          enabledWhen: {
	            specularMapScale: {
	              notEqualDefault: true
	            }
	          }
	        },
	        specularMapPan: {
	          displayName: 'Panning',
	          description: 'The panning rate of the color texture. Higher is faster.',
	          type: 'v2',
	          default: {
	            x: 0,
	            y: 0
	          },
	          min: -16.000,
	          max: 16.000,
	          stepSize: 0.001,
	          enabledWhen: {
	            specularMapPan: {
	              notEqualDefault: true
	            }
	          },
	          needsTimeUpdate: true
	        }
	      }
	    },
	    metalness: {
	      displayName: 'Metalness',
	      description: 'How metallic the surface appears (multiplied by the metalness texture).',
	      type: 'f',
	      min: 0.0,
	      max: 1.0,
	      default: 0.0,
	      isUniform: true
	    },
	    metalnessMap: {
	      displayName: 'Metalness Map',
	      description: 'A texture that contains the metalness of the material.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        metalnessMap: {
	          notEqualDefault: true
	        }
	      },
	      advancedProperties: {
	        metalnessMapUVChannel: {
	          displayName: 'UV Channel',
	          description: 'Which UV channel to use with the metalness map.',
	          type: 'opt',
	          options: {
	            uv0: 0,
	            uv1: 1
	          },
	          default: 'uv0',
	          enabledWhen: {
	            metalnessMapUVChannel: {
	              notEqualDefault: true
	            }
	          },
	          betaFlag: false
	        },
	        metalnessMapOffset: {
	          displayName: 'Offset',
	          description: 'Shift the texture mapping by the specified amount.',
	          type: 'v2',
	          default: {
	            x: 0,
	            y: 0
	          },
	          min: -1.000,
	          max: 1.000,
	          stepSize: 0.001,
	          enabledWhen: {
	            metalnessMapOffset: {
	              notEqualDefault: true
	            }
	          }
	        },
	        metalnessMapScale: {
	          displayName: 'Tiling',
	          description: 'Scale the texture mapping. A higher number results in the texture' + ' displaying smaller on the models.',
	          type: 'v2',
	          default: {
	            x: 1,
	            y: 1
	          },
	          min: 0.00001,
	          max: 200.000,
	          stepSize: 0.001,
	          enabledWhen: {
	            metalnessMapScale: {
	              notEqualDefault: true
	            }
	          }
	        },
	        metalnessMapPan: {
	          displayName: 'Panning',
	          description: 'The panning rate of the color texture. Higher is faster.',
	          type: 'v2',
	          default: {
	            x: 0,
	            y: 0
	          },
	          min: -16.000,
	          max: 16.000,
	          stepSize: 0.001,
	          enabledWhen: {
	            metalnessMapPan: {
	              notEqualDefault: true
	            }
	          },
	          needsTimeUpdate: true
	        }
	      }
	    },
	    gloss: {
	      displayName: 'Glossiness',
	      description: 'How glossy the surface appears.',
	      type: 'f',
	      min: 0.0,
	      max: 1.0,
	      default: 0.95,
	      isUniform: true
	    },
	    useGlossFromSpecularMap: {
	      displayName: 'Use Alpha of Specular Map for Gloss',
	      description: 'This option controls whether the alpha channel of the specular texture' + ' is used for gloss info rather than a dedicated texture.',
	      type: 'b',
	      default: false,
	      enabledWhen: {
	        specularMap: {
	          notEqualDefault: true
	        },
	        useGlossFromSpecularMap: {
	          equal: true
	        }
	      }
	    },
	    glossMap: {
	      displayName: 'Gloss Map',
	      description: 'A texture that stores the gloss info of the material.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        glossMap: {
	          notEqualDefault: true
	        },
	        useGlossFromSpecularMap: {
	          equal: false
	        }
	      },
	      displayWhen: {
	        useGlossFromSpecularMap: {
	          equal: false
	        }
	      }
	    },
	    roughness: {
	      displayName: 'Roughness',
	      description: 'How rough the surface appears.',
	      type: 'f',
	      min: 0.0,
	      max: 1.0,
	      default: 0.0,
	      isUniform: true
	    },
	    useRoughnessFromMetalnessMap: {
	      displayName: 'Use Alpha of Metalness Map for Roughness',
	      description: 'This option controls whether the alpha channel of the metalness texture' + ' is used for roughness info rather than a dedicated texture.',
	      type: 'b',
	      default: false,
	      enabledWhen: {
	        metalnessMap: {
	          notEqualDefault: true
	        },
	        useRoughnessFromMetalnessMap: {
	          equal: true
	        }
	      }
	    },
	    roughnessMap: {
	      displayName: 'Roughness Map',
	      description: 'A texture that stores the roughness info of the material.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        roughnessMap: {
	          notEqualDefault: true
	        },
	        useRoughnessFromMetalnessMap: {
	          equal: false
	        }
	      },
	      displayWhen: {
	        useRoughnessFromMetalnessMap: {
	          equal: false
	        }
	      }
	    },
	    reflectivityF0: {
	      displayName: 'Reflectivity',
	      description: 'Reflectivity at normal incidence. i.e. when viewing the surface directly.',
	      type: 'f',
	      min: 0.0,
	      max: 1.0,
	      default: 0.02,
	      isUniform: true
	    },
	    useBump: {
	      displayName: 'Use Bump Map',
	      description: 'Use a greyscale bump map instead of a normal map.',
	      type: 'b',
	      default: false,
	      isUniform: false
	    },
	    normalMap: {
	      displayName: 'Normal Map',
	      description: '',
	      type: 't',
	      default: null,
	      isUniform: true,
	      derivatives: true,
	      textureUsage: 'normal',
	      enabledWhen: {
	        useBump: {
	          equal: false
	        },
	        normalMap: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        useBump: {
	          equal: false
	        }
	      }
	    },
	    normalScale: {
	      displayName: 'Normal Scale',
	      description: 'blah',
	      type: 'f',
	      min: 0.0,
	      max: 5.0,
	      default: 1.0,
	      isUniform: true,
	      enabledWhen: {
	        useBump: {
	          equal: false
	        },
	        normalMap: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        useBump: {
	          equal: false
	        }
	      }
	    },
	    flipNormalX: {
	      displayName: 'Flip Normal X',
	      description: 'Interpret the normal with an opposite x direction.',
	      type: 'b',
	      default: false,
	      isUniform: true,
	      enabledWhen: {
	        useBump: {
	          equal: false
	        },
	        normalMap: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        useBump: {
	          equal: false
	        }
	      }
	    },
	    flipNormalY: {
	      displayName: 'Flip Normal Y',
	      description: 'Interpret the normal with an opposite y direction.',
	      type: 'b',
	      default: false,
	      isUniform: true,
	      enabledWhen: {
	        useBump: {
	          equal: false
	        },
	        normalMap: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        useBump: {
	          equal: false
	        }
	      }
	    },
	    bumpMap: {
	      displayName: 'Bump Map',
	      description: '',
	      type: 't',
	      default: null,
	      isUniform: true,
	      derivatives: true,
	      textureUsage: 'bump',
	      enabledWhen: {
	        useBump: {
	          equal: true
	        },
	        bumpMap: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        useBump: {
	          equal: true
	        }
	      }
	    },
	    bumpScale: {
	      displayName: 'Bump Scale',
	      description: 'blah',
	      type: 'f',
	      min: 0.0,
	      max: 20.0,
	      default: 1.0,
	      isUniform: true,
	      enabledWhen: {
	        useBump: {
	          equal: true
	        },
	        bumpMap: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        useBump: {
	          equal: true
	        }
	      }
	    },
	    useSceneLights: {
	      displayName: 'Use Scene Lights',
	      description: 'You can prevent scene lights from affecting materials by turning this off.',
	      type: 'b',
	      default: true,
	      isUniform: false,
	      enabledWhen: {
	        useSceneLights: {
	          equal: true
	        }
	      }
	    },
	    useEnvironmentMap: {
	      displayName: 'Use Lighting from Texture',
	      description: 'This can be used for diffuse lighting and/or specular reflections.',
	      type: 'b',
	      default: false,
	      enabledWhen: {
	        useEnvironmentMap: {
	          equal: true
	        },
	        or: [{
	          environmentMapProjection: {
	            notEqual: 'cubeMap'
	          },
	          environmentMap2D_0: {
	            notEqualDefault: true
	          }
	        }, {
	          environmentMapProjection: {
	            equal: 'cubeMap'
	          },
	          environmentMapCube_0: {
	            notEqualDefault: true
	          }
	        }]
	      }
	    },
	    environmentMapProjection: {
	      displayName: 'Specular Light Map Type',
	      description: 'This controls how the lighting textures will map to the surface. "Panorama"' + ' is also known as an "equirectangular" map.',
	      type: 'opt',
	      default: 'panorama',
	      options: {
	        cubeMap: 3,
	        sphereMap: 4,
	        planar: 6,
	        panorama: 5
	      },
	      forceUpdate: true,
	      displayWhen: {
	        useEnvironmentMap: {
	          equal: true
	        }
	      }
	    },
	    environmentMapCube_0: {
	      displayName: 'Specular Light Map',
	      description: 'A cube-map that represents the surrounding environment. Used for' + ' reflections.',
	      type: 't',
	      textureType: 'Cube',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        useEnvironmentMap: {
	          equal: true
	        },
	        environmentMapProjection: {
	          equal: 'cubeMap'
	        },
	        environmentMapCube_0: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        useEnvironmentMap: {
	          equal: true
	        },
	        environmentMapProjection: {
	          equal: 'cubeMap'
	        }
	      }
	    },
	    environmentMapCube_1: {
	      displayName: 'Specular Light Map',
	      description: 'A cube-map that represents the surrounding environment. Used for' + ' reflections.',
	      type: 't',
	      textureType: 'Cube',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        environmentMapCube_0: {
	          notEqualDefault: true
	        },
	        environmentMapCube_1: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        environmentMapCube_0: {
	          notEqualDefault: true
	        }
	      }
	    },
	    environmentMapCube_2: {
	      displayName: 'Specular Light Map',
	      description: 'A cube-map that represents the surrounding environment. Used for' + ' reflections.',
	      type: 't',
	      textureType: 'Cube',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        environmentMapCube_1: {
	          notEqualDefault: true
	        },
	        environmentMapCube_2: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        environmentMapCube_1: {
	          notEqualDefault: true
	        }
	      }
	    },
	    environmentMap2D_0: {
	      displayName: 'Specular Light Map',
	      description: 'A texture that represents the surrounding environment. Used for reflections.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        useEnvironmentMap: {
	          equal: true
	        },
	        environmentMapProjection: {
	          notEqual: 'cubeMap'
	        },
	        environmentMap2D_0: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        useEnvironmentMap: {
	          equal: true
	        },
	        environmentMapProjection: {
	          notEqual: 'cubeMap'
	        }
	      }
	    },
	    environmentMap2D_1: {
	      displayName: 'Specular Light Map',
	      description: 'A texture that represents the surrounding environment. Used for reflections.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        environmentMap2D_0: {
	          notEqualDefault: true
	        },
	        environmentMap2D_1: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        environmentMap2D_0: {
	          notEqualDefault: true
	        }
	      }
	    },
	    environmentMap2D_2: {
	      displayName: 'Specular Light Map',
	      description: 'A texture that represents the surrounding environment. Used for reflections.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        environmentMap2D_1: {
	          notEqualDefault: true
	        },
	        environmentMap2D_2: {
	          notEqualDefault: true
	        }
	      },
	      displayWhen: {
	        environmentMap2D_1: {
	          notEqualDefault: true
	        }
	      }
	    },
	    emissiveColor: {
	      displayName: 'Emissive Color',
	      description: 'A color that represents the light emitted by the material.',
	      type: 'c',
	      default: { r: 0.0, g: 0.0, b: 0.0 },
	      isUniform: true,
	      enabledWhen: {
	        or: [{
	          emissiveCombine: {
	            equal: true
	          },
	          emissiveMap: {
	            notEqualDefault: true
	          }
	        }, {
	          emissiveMap: {
	            equalDefault: true
	          }
	        }]
	      }
	    },
	    emissiveCombine: {
	      displayName: 'Combine',
	      description: 'Combine color with emissive texture color.',
	      type: 'b',
	      isUniform: false,
	      default: false
	    },
	    emissiveMap: {
	      displayName: 'Emissive Map',
	      description: 'A texture that modifies the emissive color of the material.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        emissiveMap: {
	          notEqualDefault: true
	        }
	      }
	    },
	    emissiveIntensity: {
	      displayName: 'Emissive Brightness',
	      description: 'This controls the brightness of emissive color.',
	      type: 'f',
	      min: 0.0,
	      max: 10.0,
	      default: 1.0,
	      isUniform: true
	    },
	    aoMap: {
	      displayName: 'AO Map',
	      description: 'The ambient occlusion of the material.',
	      type: 't',
	      default: null,
	      isUniform: true,
	      enabledWhen: {
	        aoMap: {
	          notEqualDefault: true
	        }
	      }
	    },
	    side: {
	      displayName: 'Cull Mode',
	      description: 'This controls which side of the geometry will be visible.',
	      type: 'opt',
	      isRenderParam: true,
	      options: {
	        frontOnly: THREE.FrontSide,
	        backOnly: THREE.BackSide,
	        doubleSided: THREE.DoubleSide
	      },
	      default: 'doubleSided'
	    },
	    fog: {
	      displayName: 'Enable Fog',
	      description: 'This controls whether this material is affected by fog or not.',
	      isRenderParam: true,
	      forceUpdate: true,
	      type: 'b',
	      default: true
	    },
	    depthFunc: {
	      displayName: 'Depth Function',
	      description: '',
	      isRenderParam: true,
	      type: 'opt',
	      options: {
	        never: THREE.NeverDepth,
	        always: THREE.AlwaysDepth,
	        lessThan: THREE.LessDepth,
	        lessThanOrEqual: THREE.LessEqualDepth,
	        equal: THREE.EqualDepth,
	        greaterThanOrEqual: THREE.GreaterEqualDepth,
	        greaterThan: THREE.GreaterDepth,
	        notEqual: THREE.NotEqualDepth
	      },
	      default: 'lessThanOrEqual'
	    },
	    depthWrite: {
	      displayName: 'Enable Depth Write',
	      description: 'This controls whether the depth values of a mesh rendered with this' + ' material are recorded.',
	      isRenderParam: true,
	      type: 'b',
	      default: true
	    },
	    depthTest: {
	      displayName: 'Enable Depth Test',
	      description: 'This controls whether a depth check is done before this material is' + ' rendered so that it can be occluded.',
	      isRenderParam: true,
	      type: 'b',
	      default: true
	    },
	    blending: {
	      displayName: 'Blending Mode',
	      description: 'This controls how the material will be blended with the color behind it.',
	      isRenderParam: true,
	      type: 'opt',
	      options: {
	        none: THREE.NoBlending,
	        normal: THREE.NormalBlending,
	        additive: THREE.AdditiveBlending,
	        subtractive: THREE.SubtractiveBlending,
	        multiplicative: THREE.MultiplyBlending,
	        custom: THREE.CustomBlending
	      },
	      default: 'normal',
	      transparency: 'GreaterThanOne'
	    },
	    blendEquation: {
	      displayName: 'Blending Equation',
	      description: 'TODO.',
	      isRenderParam: true,
	      type: 'opt',
	      options: {
	        add: THREE.AddEquation,
	        subtract: THREE.SubtractEquation,
	        reverseSubtract: THREE.ReverseSubtractEquation,
	        minimum: THREE.MinEquation,
	        maximum: THREE.MaxEquation
	      },
	      default: 'add',
	      displayWhen: {
	        blending: {
	          equal: 'custom'
	        }
	      }
	    },
	    blendSrc: {
	      displayName: 'Blend Source',
	      description: 'TODO.',
	      isRenderParam: true,
	      type: 'opt',
	      options: {
	        zero: THREE.ZeroFactor,
	        one: THREE.OneFactor,
	        sourceColor: THREE.SrcColorFactor,
	        oneMinusSourceColor: THREE.OneMinusSrcColorFactor,
	        sourceAlpha: THREE.SrcAlphaFactor,
	        oneMinusSourceAlpha: THREE.OneMinusSrcAlphaFactor,
	        destinationAlpha: THREE.DstAlphaFactor,
	        oneMinusDestinationAlpha: THREE.OneMinusDstAlphaFactor
	      },
	      default: 'sourceAlpha',
	      displayWhen: {
	        blending: {
	          equal: 'custom'
	        }
	      }
	    },
	    blendDst: {
	      displayName: 'Blend Destination',
	      description: 'TODO.',
	      isRenderParam: true,
	      type: 'opt',
	      options: {
	        zero: THREE.ZeroFactor,
	        one: THREE.OneFactor,
	        sourceColor: THREE.SrcColorFactor,
	        oneMinusSourceColor: THREE.OneMinusSrcColorFactor,
	        sourceAlpha: THREE.SrcAlphaFactor,
	        oneMinusSourceAlpha: THREE.OneMinusSrcAlphaFactor,
	        destinationAlpha: THREE.DstAlphaFactor,
	        oneMinusDestinationAlpha: THREE.OneMinusDstAlphaFactor,
	        destinationColor: THREE.DstColorFactor,
	        oneMinusDestinationColor: THREE.OneMinusDstColorFactor,
	        sourceAlphaSaturate: THREE.SrcAlphaSaturateFactor
	      },
	      default: 'one',
	      displayWhen: {
	        blending: {
	          equal: 'custom'
	        }
	      }
	    },
	    useSeparateAlphaBlend: {
	      displayName: 'Separate Blend for Alpha',
	      description: 'TODO',
	      type: 'b',
	      default: false,
	      displayWhen: {
	        blending: {
	          equal: 'custom'
	        }
	      }
	    },
	    blendEquationAlpha: {
	      displayName: 'Alpha Blend Equation',
	      description: 'TODO',
	      isRenderParam: true,
	      type: 'opt',
	      options: {
	        add: THREE.AddEquation,
	        subtract: THREE.SubtractEquation,
	        reverseSubtract: THREE.ReverseSubtractEquation,
	        minimum: THREE.MinEquation,
	        maximum: THREE.MaxEquation
	      },
	      default: 'add',
	      displayWhen: {
	        blending: {
	          equal: 'custom'
	        },
	        useSeparateAlphaBlend: {
	          equal: true
	        }
	      },
	      enabledWhen: {
	        useSeparateAlphaBlend: {
	          equal: true
	        }
	      }
	    },
	    blendSrcAlpha: {
	      displayName: 'Alpha Blend Source',
	      description: 'TODO.',
	      isRenderParam: true,
	      type: 'opt',
	      options: {
	        zero: THREE.ZeroFactor,
	        one: THREE.OneFactor,
	        sourceColor: THREE.SrcColorFactor,
	        oneMinusSourceColor: THREE.OneMinusSrcColorFactor,
	        sourceAlpha: THREE.SrcAlphaFactor,
	        oneMinusSourceAlpha: THREE.OneMinusSrcAlphaFactor,
	        destinationAlpha: THREE.DstAlphaFactor,
	        oneMinusDestinationAlpha: THREE.OneMinusDstAlphaFactor
	      },
	      default: 'sourceAlpha',
	      displayWhen: {
	        blending: {
	          equal: 'custom'
	        },
	        useSeparateAlphaBlend: {
	          equal: true
	        }
	      },
	      enabledWhen: {
	        useSeparateAlphaBlend: {
	          equal: true
	        }
	      }
	    },
	    blendDstAlpha: {
	      displayName: 'Alpha Blend Destination',
	      description: 'TODO.',
	      isRenderParam: true,
	      type: 'opt',
	      options: {
	        zero: THREE.ZeroFactor,
	        one: THREE.OneFactor,
	        sourceColor: THREE.SrcColorFactor,
	        oneMinusSourceColor: THREE.OneMinusSrcColorFactor,
	        sourceAlpha: THREE.SrcAlphaFactor,
	        oneMinusSourceAlpha: THREE.OneMinusSrcAlphaFactor,
	        destinationAlpha: THREE.DstAlphaFactor,
	        oneMinusDestinationAlpha: THREE.OneMinusDstAlphaFactor,
	        destinationColor: THREE.DstColorFactor,
	        oneMinusDestinationColor: THREE.OneMinusDstColorFactor,
	        sourceAlphaSaturate: THREE.SrcAlphaSaturateFactor
	      },
	      default: 'one',
	      displayWhen: {
	        blending: {
	          equal: 'custom'
	        },
	        useSeparateAlphaBlend: {
	          equal: true
	        }
	      },
	      enabledWhen: {
	        useSeparateAlphaBlend: {
	          equal: true
	        }
	      }
	    },
	    polygonOffset: {
	      displayName: 'Polygon Offset',
	      description: 'Turns on rendering with polygon offsets. This can be used to work' + ' around z-fighting.',
	      isRenderParam: true,
	      type: 'b',
	      default: false
	    },
	    polygonOffsetFactor: {
	      displayName: 'Polygon Offset Factor',
	      description: 'Scales the maximum Z slope, with respect to X or Y of the polygon.',
	      isRenderParam: true,
	      type: 'f',
	      default: 1.0
	    },
	    polygonOffsetUnits: {
	      displayName: 'Polygon Offset Units',
	      description: 'Scales the minimum resolvable depth buffer value.',
	      isRenderParam: true,
	      type: 'f',
	      default: 1.0
	    },
	    alphaTest: {
	      displayName: 'Alpha Test',
	      description: 'Pixels with an alpha value below the given value will not be rendered.' + ' This value will only be used when this material\'s Transparency blending mode' + ' is set to "Masked"',
	      isRenderParam: true,
	      forceUpdate: true,
	      type: 'f',
	      default: 0.2,
	      min: 0.0,
	      max: 1.0,
	      step: 0.001
	    }
	  };

	  return Box3DShaderParams;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 129 */
/***/ function(module, exports) {

	module.exports = "\r\n/**\r\n * Shader used as a Box3D material type\r\n *\r\n * Written by Mike Bond\r\n */\r\n#if defined(NORMAL_MAP) && defined(USE_TANGENTS)\r\n\tattribute vec4 tangent;\r\n#endif\r\n\r\nattribute vec2 uv2;\r\n\r\nuniform float time;\r\n\r\n#ifdef USE_LOGDEPTHBUF\r\n\t#ifdef USE_LOGDEPTHBUF_EXT\r\n\t\tvarying float vFragDepth;\r\n\t#endif\r\n\tuniform float logDepthBufFC;\r\n#endif\r\n\r\n#ifdef DISPLACEMENT_MAP_RGBA\r\n\tuniform float displacementMag;\r\n\tuniform float displacementBias;\r\n\tuniform sampler2D displacementTexture;\r\n\tuniform int displacementUVChannel;\r\n\tuniform vec2 displacementTextureOffset;\r\n\tuniform vec2 displacementTextureScale;\r\n\tuniform vec2 displacementTexturePan;\r\n#endif\r\n\r\nvarying vec4 vNormal_VS;\r\n\r\n#if ( defined(NORMAL_MAP) && defined(USE_TANGENTS) || defined( DISPLACEMENT_MAP_RGBA ) ) && !defined( DEPTH_PASS )\r\nvarying vec4 vTangent_VS;\r\nvarying vec4 vBinormal_VS;\r\n#endif\r\n\r\n#if defined(ALBEDO_MAP) || defined(ALPHA_MAP) || defined(GLOSS_MAP) || defined(SPECULAR_MAP) || defined(METALNESS_MAP) || defined(NORMAL_MAP) || defined(BUMP_MAP) || defined( EMISSIVE_MAP ) || defined( SSS_MAP ) || defined( DISPLACEMENT_MAP_RGBA ) || defined( AO_MAP )\r\n\tvarying vec4 vUv;\r\n#endif\r\n\r\nvarying vec4 vPosition_VS;\r\n\r\n#if !defined( DEPTH_PASS )\r\n\r\n\t#if defined( USE_COLOR ) && defined( ALBEDO )\r\n\t\tvarying vec3 vColor;\r\n\t#endif\r\n\r\n\t#if defined( USE_SHADOWMAP ) && defined( USE_SCENE_LIGHTS )\r\n\t\t#if NUM_SHADOWS > 0\r\n\t\t\tvarying vec4 vShadowCoord[ NUM_SHADOWS ];\r\n\t\t\tuniform mat4 shadowMatrix[ NUM_SHADOWS ];\r\n\t\t#endif\r\n\t#endif\r\n#endif\r\n\r\n#ifdef USE_SKINNING\r\n\r\n\tuniform mat4 bindMatrix;\r\n\tuniform mat4 bindMatrixInverse;\r\n\r\n\t#ifdef BONE_TEXTURE\r\n\r\n\t\tuniform sampler2D boneTexture;\r\n\t\tuniform int boneTextureWidth;\r\n\t\tuniform int boneTextureHeight;\r\n\r\n\t\tmat4 getBoneMatrix( const in float i ) {\r\n\r\n\t\t\tfloat j = i * 4.0;\r\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\r\n\t\t\tfloat y = floor( j / float( boneTextureHeight ) );\r\n\r\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\r\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\r\n\r\n\t\t\ty = dy * ( y + 0.5 );\r\n\r\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\r\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\r\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\r\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\r\n\r\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\r\n\r\n\t\t\treturn bone;\r\n\t\t}\r\n\t#else\r\n\r\n\t\tuniform mat4 boneGlobalMatrices[ NUM_BONES ];\r\n\t\tmat4 getBoneMatrix( const in float i ) {\r\n\r\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\r\n\t\t\treturn bone;\r\n\t\t}\r\n\r\n\t#endif\r\n#endif\r\n\r\n//Only for m * v (not v * m!)\r\nvec3 mulVectorByMatrix4x4( in vec3 v, in mat4 m ) {\r\n\treturn (v.x * m[0] + ( v.y * m[1] + ( v.z * m[2] ) )).xyz;\r\n}\r\n\r\n//Only for m * p (not p * m!)\r\nvec4 mulPointByMatrix4x4( in vec3 v, in mat4 m ) {\r\n\treturn v.x * m[0] + ( v.y * m[1] + ( v.z * m[2] + m[3] ) );\r\n}\r\n\r\n\r\n\r\nvoid main() {\r\n\r\n#if defined(ALBEDO_MAP) || defined(ALPHA_MAP) || defined(GLOSS_MAP) || defined(SPECULAR_MAP) || defined(METALNESS_MAP) || defined(NORMAL_MAP) || defined(BUMP_MAP) || defined( EMISSIVE_MAP ) || defined( SSS_MAP ) || defined( DISPLACEMENT_MAP_RGBA ) || defined( AO_MAP )\r\n\tvUv.xy = uv;\r\n\tvUv.y = 1.0 - vUv.y;\r\n\tvUv.zw = uv2;\r\n\tvUv.w = 1.0 - vUv.w;\r\n#endif\r\n\r\n#if defined( DISPLACEMENT_MAP_RGBA )\r\n\tfloat texDisplacement = 0.0;\r\n\t#if ( DISPLACEMENT_MAP_RGBA == 0 )\r\n\r\n\t\tvec2 displacementUV = vUv.xy * displacementTextureScale + displacementTextureOffset + displacementTexturePan * time;\r\n\r\n\t\tvec4 displacementMap = texture2D( displacementTexture, displacementUV );\r\n\t\ttexDisplacement = displacementMag * displacementMap.x + displacementMag * (displacementBias * 0.5 - 0.5);\r\n\r\n\t#elif ( DISPLACEMENT_MAP_RGBA == 1 )\r\n\t\t#define DISPLACEMENT_WITH_NORMAL\r\n\t\tvec2 displacementUV = vUv.xy * displacementTextureScale + displacementTextureOffset + displacementTexturePan * time;\r\n\t\tvec4 displacementMap = texture2D( displacementTexture, displacementUV );\r\n\r\n\t\ttexDisplacement = displacementMag * displacementMap.a + displacementMag * (displacementBias * 0.5 - 0.5);\r\n\t#endif\r\n\tvec4 displacedPosition = vec4( (normal * texDisplacement ) + position.xyz, 1.0 );\r\n#else\r\n\tvec4 displacedPosition = vec4( position, 1.0 );\r\n\r\n#endif\r\n\r\n\r\nhighp vec3 vNormal = normal;\r\n#if ( defined( NORMAL_MAP ) && defined(USE_TANGENTS) || defined( DISPLACEMENT_MAP_RGBA ) ) && !defined( DEPTH_PASS )\r\n\thighp vec3 vTangent = tangent.xyz;\r\n#endif\r\n\r\n#ifdef USE_SKINNING\r\n\r\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\r\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\r\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\r\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\r\n\r\n\tmat4 skinMatrix = mat4( 0.0 );\r\n        skinMatrix += skinWeight.x * boneMatX;\r\n\tskinMatrix += skinWeight.y * boneMatY;\r\n\tskinMatrix += skinWeight.z * boneMatZ;\r\n\tskinMatrix += skinWeight.w * boneMatW;\r\n        skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\r\n\r\n\tvNormal = (skinMatrix * vec4( vNormal, 0.0 )).xyz;\r\n\t#if ( defined( NORMAL_MAP ) && defined(USE_TANGENTS) || defined( DISPLACEMENT_MAP_RGBA ) ) && !defined( DEPTH_PASS )\r\n\t\tvTangent = (skinMatrix * vec4( vTangent, 0.0 )).xyz;\r\n\t#endif\r\n\r\n\tvec4 skinVertex    = bindMatrix * displacedPosition;\r\n\tdisplacedPosition  = boneMatX * skinVertex * skinWeight.x;\r\n\tdisplacedPosition += boneMatY * skinVertex * skinWeight.y;\r\n\tdisplacedPosition += boneMatZ * skinVertex * skinWeight.z;\r\n\tdisplacedPosition += boneMatW * skinVertex * skinWeight.w;\r\n\tdisplacedPosition  = bindMatrixInverse * displacedPosition;\r\n#endif\r\n\r\nvPosition_VS = modelViewMatrix * displacedPosition;\r\n\r\n#ifdef USE_BILLBOARDING\r\n\tgl_Position = projectionMatrix * (viewMatrix * vec4(0.0, 0.0, 0.0, 1.0) + modelViewMatrix * displacedPosition );\r\n#else\r\n\tgl_Position = projectionMatrix * modelViewMatrix * displacedPosition;\r\n#endif\r\n\r\n#if defined( USE_LOGDEPTHBUF ) && !defined(DEPTH_PASS)\r\n\tgl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC;\r\n\t#ifdef USE_LOGDEPTHBUF_EXT\r\n\t\tvFragDepth = 1.0 + gl_Position.w;\r\n\t#else\r\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\r\n\t#endif\r\n#endif\r\n\r\n#if !defined( DEPTH_PASS )\r\n\r\n\t#if defined( USE_COLOR )\r\n\t\t#if defined( ALBEDO )\r\n\t\t\t#ifdef GAMMA_INPUT\r\n\t\t\t\tvColor = color * color;\r\n\t\t\t#else\r\n\t\t\t\tvColor = color;\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\r\n\tvNormal_VS.xyz = normalMatrix * vNormal;\r\n\r\n\t#ifdef FLIP_SIDED\r\n\t\tvNormal_VS = -vNormal_VS;\r\n\t#endif\r\n\r\n\t#ifdef USE_SCENE_LIGHTS\r\n\r\n\r\n\t\t#if defined( NORMAL_MAP ) && defined(USE_TANGENTS)\r\n\t\t\tvTangent_VS.xyz = normalMatrix * vTangent.xyz;\r\n\t\t\tvBinormal_VS.xyz = cross( vNormal_VS.xyz, vTangent_VS.xyz ) * tangent.w;\r\n\t\t#endif\r\n\r\n\t\t#ifdef USE_SHADOWMAP\r\n\t\t \t#if NUM_SHADOWS > 0\r\n\r\n\t\t\t\tfor( int i = 0; i < NUM_SHADOWS; i ++ ) {\r\n\r\n\t\t\t\t\t#ifdef USE_MORPHTARGETS\r\n\r\n\t\t\t\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * modelMatrix * vec4( morphed, 1.0 );\r\n\r\n\t\t\t\t\t#else\r\n\r\n\t\t\t\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * modelMatrix * displacedPosition;\r\n\r\n\t\t\t\t\t\t// vShadowCoord[ i ].z = log2(max(1e-6, 1.0 + vShadowCoord[ i ].w)) * logDepthBufFC - 1.0;\r\n\t\t\t\t\t\t// vShadowCoord[ i ].z *= vShadowCoord[ i ].w;\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\r\n\t#endif\r\n#endif\r\n}"

/***/ },
/* 130 */
/***/ function(module, exports) {

	module.exports = "/**\r\n * Box3D Uber Shader\r\n *\r\n * Written by Mike Bond\r\n * August 2015\r\n */\r\n\r\nuniform float time;\r\nuniform int renderModeNormals;\r\nuniform float opacity;\r\n#define PI 3.14159265359\r\n\r\n#ifdef USE_LOGDEPTHBUF\r\n\tuniform float logDepthBufFC;\r\n\t#ifdef USE_LOGDEPTHBUF_EXT\r\n\t\tvarying float vFragDepth;\r\n\t#endif\r\n#endif\r\n\r\n#ifdef ALBEDO\r\nuniform vec3 baseAlbedo;\r\n#else\r\nconst vec3 baseAlbedo = vec3(0.0);\r\n#endif\r\n\r\n#ifdef ALBEDO_MAP\r\n\tuniform sampler2D albedoMap;\r\n#endif\r\n#ifdef ALBEDO_MAP_UV_CHANNEL\r\n\tuniform int albedoMapUVChannel;\r\n#endif\r\n#ifdef ALBEDO_MAP_OFFSET\r\n\tuniform vec2 albedoMapOffset;\r\n#endif\r\n#ifdef ALBEDO_MAP_SCALE\r\n\tuniform vec2 albedoMapScale;\r\n#endif\r\n#ifdef ALBEDO_MAP_PAN\r\n\tuniform vec2 albedoMapPan;\r\n#endif\r\n\r\n#ifdef ALPHA_MAP\r\n\tuniform sampler2D alphaMap;\r\n#endif\r\n#ifdef ALPHA_MAP_UV_CHANNEL\r\n\tuniform int alphaMapUVChannel;\r\n#endif\r\n#ifdef ALPHA_MAP_OFFSET\r\n\tuniform vec2 alphaMapOffset;\r\n#endif\r\n#ifdef ALPHA_MAP_SCALE\r\n\tuniform vec2 alphaMapScale;\r\n#endif\r\n#ifdef ALPHA_MAP_PAN\r\n\tuniform vec2 alphaMapPan;\r\n#endif\r\n\r\n#ifdef SPECULAR_COLOR\r\n\tuniform vec3 specularColor;\r\n#endif\r\n#ifdef SPECULAR_MAP\r\n\tuniform sampler2D specularMap;\r\n#endif\r\n\r\n#ifdef METALNESS\r\nuniform float metalness;\r\n#endif\r\n#ifdef METALNESS_MAP\r\n\tuniform sampler2D metalnessMap;\r\n#endif\r\n\r\n#ifdef GLOSS\r\n\tuniform float gloss;\r\n#endif\r\n#ifdef GLOSS_MAP\r\n\tuniform sampler2D glossMap;\r\n#endif\r\n\r\n#ifdef ROUGHNESS\r\n\tuniform float roughness;\r\n#endif\r\n\r\n#ifdef SPECULAR\r\n\tuniform float reflectivityF0;\r\n#endif\r\n\r\n#ifdef ROUGHNESS_MAP\r\n\tuniform sampler2D roughnessMap;\r\n#endif\r\n\r\n#if !defined( DEPTH_PASS )\r\n\t#ifdef AO_MAP\r\n\tuniform sampler2D aoMap;\r\n\tuniform int aoUVChannel;\r\n\tuniform vec2 aoMapOffset;\r\n\tuniform vec2 aoMapScale;\r\n\tuniform vec2 aoMapPan;\r\n\t#endif\r\n\r\n#endif\r\n\r\n\r\n#if !defined( DEPTH_PASS )\r\n\r\n\tuniform vec4 screenDimensions;\r\n\r\n\t#ifdef USE_ENVIRONMENT_MAP\r\n\t\tuniform float reflectionFresnel;\r\n\t\t#ifdef ENVIRONMENT_MAP_CUBE_0\r\n\t\t\tuniform samplerCube environmentMapCube_0;\r\n\t\t\tuniform samplerCube environmentMapCube_1;\r\n\t\t\tuniform samplerCube environmentMapCube_2;\r\n\t\t#elif defined(ENVIRONMENT_MAP_2D_0)\r\n\t\t\tuniform sampler2D environmentMap2D_0;\r\n\t\t\tuniform sampler2D environmentMap2D_1;\r\n\t\t\tuniform sampler2D environmentMap2D_2;\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#if defined(USE_COLOR) && defined(ALBEDO)\r\n\t\tvarying vec3 vColor;\r\n\t#endif\r\n\r\n\t#ifdef NORMAL_MAP\r\n\t\tuniform float normalScale;\r\n\t\tuniform sampler2D normalMap;\r\n\t\tuniform int normalUVChannel;\r\n\t\tuniform vec2 normalMapOffset;\r\n\t\tuniform vec2 normalMapScale;\r\n\t\tuniform vec2 normalMapPan;\r\n\t\tuniform bool flipNormalY;\r\n\t\tuniform bool flipNormalX;\r\n\t\t#ifdef PARALLAX_MAPPING\r\n\t\t\tuniform float parallaxScale;\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#ifdef BUMP_MAP\r\n\t\tuniform float bumpScale;\r\n\t\tuniform sampler2D bumpMap;\r\n\t\tuniform int bumpUVChannel;\r\n\t\tuniform vec2 bumpMapOffset;\r\n\t\tuniform vec2 bumpMapScale;\r\n\t\tuniform vec2 bumpMapPan;\r\n\t#endif\r\n\r\n\t#ifdef EMISSIVE\r\n\t\tuniform float emissiveIntensity;\r\n\t\t#ifdef EMISSIVE_COLOR\r\n\t\tuniform vec3 emissiveColor;\r\n\t\t#endif\r\n\t\t#ifdef EMISSIVE_MAP\r\n\t\tuniform sampler2D emissiveMap;\r\n\t\tuniform int emissiveUVChannel;\r\n\t\tuniform vec2 emissiveMapOffset;\r\n\t\tuniform vec2 emissiveMapScale;\r\n\t\tuniform vec2 emissiveMapPan;\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#ifdef SCATTERING\r\n\t\t#ifdef TRANSLUCENT_SCATTERING\r\n\t\tuniform vec3 scatterColor;\r\n\t\tuniform float scatterScale;\r\n\t\t#elif defined( LOCAL_SCATTERING )\r\n\t\tuniform vec3 scatterColor;\r\n\t\tuniform float scatterLocalScale;\r\n\t\t#endif\r\n\r\n\t\t#ifdef SSS_TEXTURE\r\n\t\tuniform sampler2D sssTexture;\r\n\t\tuniform int sssUVChannel;\r\n\t\tuniform vec2 sssTextureOffset;\r\n\t\tuniform vec2 sssTextureScale;\r\n\t\tuniform vec2 sssTexturePan;\r\n\t\t#endif\r\n\t#endif\r\n\r\n#endif\r\n\r\n#if defined(ALBEDO_MAP) || defined(ALPHA_MAP) || defined(GLOSS_MAP) || defined(SPECULAR_MAP) || defined(NORMAL_MAP) || defined(BUMP_MAP) ||defined( EMISSIVE_MAP ) || defined( SSS_TEXTURE ) || defined( DISPLACEMENT_WITH_NORMAL ) || defined( AO_MAP )\r\n\tvarying vec4 vUv;\r\n#endif\r\n\r\nvarying vec4 vPosition_VS;\r\n\r\n#if !defined( DEPTH_PASS )\r\n\t#if defined(NORMAL_MAP) && defined(USE_TANGENTS)\r\n\t\tvarying vec4 vTangent_VS;\r\n\t\tvarying vec4 vBinormal_VS;\r\n\r\n\t#endif\r\n\r\n\tvarying vec4 vNormal_VS;\r\n\r\n\tuniform vec3 ambientLightColor;\r\n\r\n\t#ifdef USE_SCENE_LIGHTS\r\n\r\n\t\t#if NUM_DIR_LIGHTS > 0\r\n\t\t\tuniform vec3 directionalLightColor[ NUM_DIR_LIGHTS ];\r\n\t\t\tuniform vec3 directionalLightDirection[ NUM_DIR_LIGHTS ];\r\n\t\t#endif\r\n\r\n\t\t#if NUM_POINT_LIGHTS > 0\r\n\t\t\tuniform vec3 pointLightPosition[ NUM_POINT_LIGHTS ];\r\n\t\t\tuniform float pointLightDistance[ NUM_POINT_LIGHTS ];\r\n\t\t\tuniform vec3 pointLightColor[ NUM_POINT_LIGHTS ];\r\n\t\t#endif\r\n\r\n\t\t#ifdef USE_SHADOWMAP\r\n\t\t\t#if NUM_SHADOWS > 0\r\n\t\t\t\tuniform sampler2D shadowMap[ NUM_SHADOWS ];\r\n\t\t\t\tuniform vec2 shadowMapSize[ NUM_SHADOWS ];\r\n\t\t\t\tuniform float shadowBias[ NUM_SHADOWS ];\r\n\t\t\t\tvarying vec4 vShadowCoord[ NUM_SHADOWS ];\r\n\t\t\t#endif\r\n\r\n\t\t\tfloat unpackDepth( const in vec4 rgba_depth ) {\r\n\t\t\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\r\n\t\t\t\tfloat depth = dot( rgba_depth, bit_shift );\r\n\t\t\t\treturn depth;\r\n\t\t\t}\r\n\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#ifdef USE_FOG\r\n\t\tuniform lowp vec3 fogColor;\r\n\t\tuniform highp float fogDensity;\r\n\t#endif\r\n\r\n\t#ifdef USE_SCENE_LIGHTS\r\n\r\n\t\t// From http://www.filmicworlds.com/2014/04/21/optimizing-ggx-shaders-with-dotlh/\r\n\t\tvec2 LightingFuncGGX_FV(float dotLH, float roughness)\r\n\t\t{\r\n\t\t\tfloat alpha = roughness*roughness;\r\n\r\n\t\t\t// F\r\n\t\t\tfloat F_a, F_b;\r\n\t\t\tfloat dotLH5 = pow(1.0-dotLH,5.0);\r\n\t\t\tF_a = 1.0;\r\n\t\t\tF_b = dotLH5;\r\n\r\n\t\t\t// V\r\n\t\t\tfloat vis;\r\n\t\t\tfloat k = alpha/2.0;\r\n\t\t\tfloat k2 = k*k;\r\n\t\t\tfloat invK2 = 1.0-k2;\r\n\t\t\tvis = 1.0 / (dotLH*dotLH*invK2 + k2);\r\n\r\n\t\t\treturn vec2(F_a*vis,F_b*vis);\r\n\t\t}\r\n\r\n\t\tfloat LightingFuncGGX_D(float dotNH, float roughness)\r\n\t\t{\r\n\t\t\tfloat alpha = roughness*roughness;\r\n\t\t\tfloat alphaSqr = alpha*alpha;\r\n\t\t\tfloat pi = 3.14159;\r\n\t\t\tfloat denom = dotNH * dotNH *(alphaSqr-1.0) + 1.0;\r\n\r\n\t\t\tfloat D = alphaSqr/(pi * denom * denom);\r\n\t\t\treturn D;\r\n\t\t}\r\n\r\n\t\tfloat SpecularFuncGGX( in float roughness, in float dotNH, in float dotLH, in float dotNL, in float F0 )\r\n\t\t{\r\n\t\t\tdotNH = clamp( dotNH, 0.0, 1.0 );\r\n\t\t  dotLH = clamp( dotLH, 0.0, 1.0 );\r\n\t\t  dotNL = clamp( dotNL, 0.0, 1.0 );\r\n\r\n\t\t\tfloat D = LightingFuncGGX_D(dotNH,roughness);\r\n\t\t\tvec2 FV_helper = LightingFuncGGX_FV(dotLH,roughness);\r\n\t\t\tfloat FV = F0*FV_helper.x + (1.0-F0)*FV_helper.y;\r\n\t\t\tfloat specular = dotNL * D * FV;\r\n\r\n\t\t\treturn specular;\r\n\t\t}\r\n\r\n\r\n\t#endif\r\n\r\n\t#ifdef NORMAL_MAP\r\n\t\t// Per-Pixel Tangent Space Normal Mapping\r\n\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n\t\tmat3 getTSMatrix( vec3 eye_pos, vec3 surf_norm ) {\r\n\r\n\t\t\tvec3 q0 = dFdx( eye_pos.xyz );\r\n\t\t\tvec3 q1 = dFdy( eye_pos.xyz );\r\n\t\t\tvec2 st0 = dFdx( vUv.st );\r\n\t\t\tvec2 st1 = dFdy( vUv.st );\r\n\r\n\t\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\r\n\t\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\r\n\t\t\tvec3 N = surf_norm;\r\n\r\n\t\t\tmat3 tsn = mat3( T, S, N );\r\n\t\t\treturn tsn;\r\n\r\n\t\t}\r\n\t#elif defined(BUMP_MAP)\r\n\r\n\t\tvec3 perturbNormal( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\r\n\r\n\t\t\tvec3 vSigmaX = dFdx( surf_pos );\r\n\t\t\tvec3 vSigmaY = dFdy( surf_pos );\r\n\t\t\tvec3 vN = surf_norm;\t\t// normalized\r\n\r\n\t\t\tvec3 R1 = cross( vSigmaY, vN );\r\n\t\t\tvec3 R2 = cross( vN, vSigmaX );\r\n\r\n\t\t\tfloat fDet = dot( vSigmaX, R1 );\r\n\r\n\t\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\r\n\t\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\r\n\r\n\t\t}\r\n\t#endif\r\n\r\n\t#ifdef LOCAL_SCATTERING\r\n\t\tvoid calculateLocalScattering( \tin vec3 lightDirection, in float NdotL,\tout float albedoWeight, in vec3 normal_Scatter, out float scatterWeight ) {\r\n\r\n\t\t\tfloat NdotL_Scatter = dot( normal_Scatter, lightDirection );\r\n\t\t\tfloat albedoWeightHalf = clamp( 0.5 * NdotL_Scatter + 0.5, 0.0, 1.0 );\r\n\r\n\t\t\tscatterWeight = albedoWeightHalf;\r\n\r\n\t\t\talbedoWeight = clamp( mix( NdotL_Scatter, NdotL, 0.15 ), 0.0, 1.0 );\r\n\t\t}\r\n\t#endif\r\n#endif\r\n\r\n#ifdef DEPTH_PASS\r\n\tvec4 pack_depth( const in float depth ) {\r\n\r\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\r\n\tconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\r\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\r\n\tres = res.xxyz * -bit_mask + res;\r\n\treturn res;\r\n\r\n}\r\n#endif\r\n\r\n#ifdef USE_ENVIRONMENT_MAP\r\nvec3 getReflectionFromRoughness(in vec3 ref0, in vec3 ref1, in vec3 ref2, in float roughness) {\r\n\tvec3 colour1, colour2;\r\n\tfloat interp = roughness * 2.0;\r\n\tif (roughness <= 0.5) {\r\n\t\tcolour1 = ref0;\r\n\t\tcolour2 = ref1;\r\n\t} else {\r\n\t\tinterp -= 1.0;\r\n\t\tcolour1 = ref1;\r\n\t\tcolour2 = ref2;\r\n\t}\r\n\treturn mix(colour1, colour2, interp);\r\n}\r\n#endif\r\n\r\nvoid main() {\r\n\r\n\t#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\r\n\t\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\r\n\t#endif\r\n\r\n\tvec2 uvOffset = vec2(0.0, 0.0);\r\n\tvec3 eyeVector_VS = normalize(vPosition_VS.xyz);\r\n\r\n\t#if !defined( DEPTH_PASS )\r\n\r\n\t\t#if defined(NORMAL_MAP)\r\n\t\t\tvec2 vNormalUv = vUv.xy;\r\n\t\t\tvec3 normalTex = texture2D( normalMap, vNormalUv + uvOffset ).xyz;\r\n\t\t#elif defined(BUMP_MAP)\r\n\t\t\tvec2 vBumpUv = vUv.xy;\r\n\t\t\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\r\n\t\t\t// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\r\n\r\n\t\t\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\n\t\t\tvec2 dSTdx = dFdx(vBumpUv);\r\n\t\t\tvec2 dSTdy = dFdy(vBumpUv);\r\n\r\n\t\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpUv ).x;\r\n\t\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpUv + dSTdx ).x - Hll;\r\n\t\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpUv + dSTdy ).x - Hll;\r\n\r\n\t\t\tvec2 dHdxy = vec2( dBx, dBy );\r\n\r\n\t\t#endif\r\n\t#endif\r\n\t#if defined( ALBEDO_MAP )\r\n\t\t#ifdef ALBEDO_MAP_UV_CHANNEL\r\n\t\t\t#if (ALBEDO_MAP_UV_CHANNEL == 0)\r\n\t\t\t\tvec2 vDiffuseUv = vUv.xy;\r\n\t\t\t#else\r\n\t\t\t\tvec2 vDiffuseUv = vUv.zw;\r\n\t\t\t#endif\r\n\t\t#else\r\n\t\t\tvec2 vDiffuseUv = vUv.xy;\r\n\t\t#endif\r\n\t\t// TODO\r\n\t\t// vDiffuseUv = vDiffuseUv * albedoMapScale + albedoMapOffset + uvOffset + albedoMapPan * time;\r\n\t\tvec4 albedoTex = texture2D( albedoMap, vDiffuseUv );\r\n\t\t#ifdef GAMMA_INPUT\r\n\t\t  albedoTex.xyz *= albedoTex.xyz;\r\n\t\t#endif\r\n\r\n\t#endif\r\n\tvec3 baseColor = vec3(0.0);\r\n\t#if !defined( DEPTH_PASS )\r\n\r\n\t\tvec3 totalDiffuse = vec3( 0.0, 0.0, 0.0 );\r\n\t\tvec3 totalSpecular = vec3( 0.0 );\r\n\t\tvec3 totalScatter = vec3( 0.0 );\r\n\r\n\t\t#ifdef SPECULAR\r\n\t\t\tfloat r0Value = reflectivityF0;\r\n\t\t#endif\r\n\t\t#if defined(SPECULAR_MAP)\r\n\t\t  #ifdef SPECULAR_MAP_UV_CHANNEL\r\n\t\t\t\t#if (SPECULAR_MAP_UV_CHANNEL == 0)\r\n\t\t\t\t\tvec2 vSpecularUv = vUv.xy;\r\n\t\t\t\t#else\r\n\t\t\t\t\tvec2 vSpecularUv = vUv.zw;\r\n\t\t\t\t#endif\r\n\t\t\t#else\r\n\t\t\t\tvec2 vSpecularUv = vUv.xy;\r\n\t\t\t#endif\r\n\t\t\tvec4 specularTex = texture2D(specularMap, vSpecularUv);\r\n\t\t#endif\r\n\t\t#if defined(METALNESS_MAP)\r\n\t\t  #ifdef METALNESS_MAP_UV_CHANNEL\r\n\t\t\t\t#if (METALNESS_MAP_UV_CHANNEL == 0)\r\n\t\t\t\t\tvec2 vMetalnessUv = vUv.xy;\r\n\t\t\t\t#else\r\n\t\t\t\t\tvec2 vMetalnessUv = vUv.zw;\r\n\t\t\t\t#endif\r\n\t\t\t#else\r\n\t\t\t\tvec2 vMetalnessUv = vUv.xy;\r\n\t\t\t#endif\r\n\t\t\tvec4 metalnessTex = texture2D(metalnessMap, vMetalnessUv);\r\n\t\t\t#ifdef METALNESS\r\n\t\t\tfloat metalnessValue = metalnessTex.x * metalness;\r\n\t\t\t#else\r\n\t\t\tfloat metalnessValue = metalnessTex.x;\r\n\t\t\t#endif\r\n\t\t#elif defined(METALNESS)\r\n\t\t\tfloat metalnessValue = metalness;\r\n\t\t#else\r\n\t\t\tfloat metalnessValue = 0.0;\r\n\t\t#endif\r\n\r\n\t\t#if defined( EMISSIVE_MAP )\r\n\t\t\t// vec2 vEmissiveUv = mix( vUv.xy, vUv.zw, float(emissiveUVChannel) );\r\n\t\t\t// vEmissiveUv = vEmissiveUv * emissiveMapScale + emissiveMapOffset + uvOffset + emissiveMapPan * time;\r\n\t\t\tvec3 emissiveTex = texture2D( emissiveMap, vUv.xy ).xyz;\r\n\t\t\t#ifdef GAMMA_INPUT\r\n\t\t\t  emissiveTex *= emissiveTex;\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t\t#if defined( AO_MAP )\r\n\t\t\t// vec2 vAOUv = mix( vUv.xy, vUv.zw, float(aoUVChannel) );\r\n\t\t\t// vAOUv = vAOUv * aoMapScale + aoMapOffset + uvOffset + aoMapPan * time;\r\n\t\t\tvec3 aoTex = texture2D( aoMap, vUv.xy).xyz;\r\n\t\t#endif\r\n\t\t#if defined( SCATTERING ) && defined( SSS_TEXTURE )\r\n\t\t\tvec2 vSSSUv = mix( vUv.xy, vUv.zw, float(sssUVChannel) );\r\n\t\t\tvSSSUv = vSSSUv * sssTextureScale + sssTextureOffset + uvOffset + sssTexturePan * time;\r\n\t\t\tvec3 sssTex = texture2D( sssTexture, vSSSUv).xyz;\r\n\t\t\t#ifdef GAMMA_INPUT\r\n\t\t\t  sssTex *= sssTex;\r\n\t\t\t#endif\r\n\t\t#endif\r\n\r\n\t\tvec3 normal_VS = normalize(vNormal_VS.xyz);\r\n\t\t#if defined( NORMAL_MAP )\r\n\t\t\tnormalTex.xy = normalTex.xy * 2.0 - 1.0;\r\n\r\n\t\t\tif ( flipNormalY ) {\r\n\t\t  \tnormalTex *= vec3( 1.0, -1.0, 1.0 );\r\n\t\t  }\r\n\t\t  if ( flipNormalX ) {\r\n\t\t  \tnormalTex *= vec3( -1.0, 1.0, 1.0 );\r\n\t\t  }\r\n\r\n\t\t\tnormalTex.xy *= normalScale;\r\n\r\n\t\t\t//Transform the normal to view space so that we can do lighting calculations, sample the environment map, etc.\r\n\t\t\t#if defined(NORMAL_MAP) && defined(USE_TANGENTS)\r\n\t\t\t\tmat3 T2V_Transform = mat3(normalize(vTangent_VS.xyz), normalize(vBinormal_VS.xyz), normal_VS);\r\n\t\t\t#elif defined(NORMAL_MAP)\r\n\t\t\t\tmat3 T2V_Transform = getTSMatrix(eyeVector_VS, normal_VS);\r\n\t\t\t#endif\r\n\t\t\tnormal_VS = T2V_Transform * normalTex;\r\n\r\n\t\t#elif defined(BUMP_MAP)\r\n\t\t\tnormal_VS = perturbNormal(vPosition_VS.xyz, normal_VS, dHdxy);\r\n\t\t#endif\r\n\t\t#ifdef LOCAL_SCATTERING\r\n\t\t\tvec3 normal_Scatter = normal_VS;\r\n\t\t#endif\r\n\r\n\t\t#ifdef DOUBLE_SIDED\r\n\t\t\tnormal_VS = normal_VS * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\r\n\t\t#endif\r\n\t\tfloat NdotV = dot(-eyeVector_VS, normal_VS);\r\n\r\n\r\n\t\tfloat roughnessValue = 0.0;\r\n\t\t#ifdef GLOSS\r\n\t\t\troughnessValue = 1.0 - gloss;\r\n\t\t#elif defined(ROUGHNESS)\r\n\t\t\troughnessValue = roughness;\r\n\t\t#endif\r\n\t\t// float finalAlpha = opacity;\r\n\t\t#ifdef USE_GLOSS_FROM_SPECULAR_MAP\r\n\t\t\troughnessValue = 1.0 - gloss * specularTex.a;\r\n\t\t#elif defined(GLOSS_MAP)\r\n\t\t\t#ifdef GLOSS_MAP_UV_CHANNEL\r\n\t\t\t\t#if (GLOSS_MAP_UV_CHANNEL == 0)\r\n\t\t\t\t\tvec2 vGlossUv = vUv.xy;\r\n\t\t\t\t#else\r\n\t\t\t\t\tvec2 vGlossUv = vUv.zw;\r\n\t\t\t\t#endif\r\n\t\t\t#else\r\n\t\t\t\tvec2 vGlossUv = vUv.xy;\r\n\t\t\t#endif\r\n\t\t\tfloat roughnessTex = texture2D(glossMap, vGlossUv).x;\r\n\t\t\troughnessValue = 1.0 - gloss * roughnessTex;\r\n\t\t#elif defined(USE_ROUGHNESS_FROM_METALNESS_MAP)\r\n\t\t\tfloat roughnessTex = metalnessTex.a;\r\n\t\t\troughnessValue = min(roughnessValue + roughnessTex, 1.0);\r\n\t\t#elif defined(ROUGHNESS_MAP)\r\n\t\t\t#ifdef ROUGHNESS_MAP_UV_CHANNEL\r\n\t\t\t\t#if (ROUGHNESS_MAP_UV_CHANNEL == 0)\r\n\t\t\t\t\tvec2 vRoughnessUv = vUv.xy;\r\n\t\t\t\t#else\r\n\t\t\t\t\tvec2 vRoughnessUv = vUv.zw;\r\n\t\t\t\t#endif\r\n\t\t\t#else\r\n\t\t\t\tvec2 vRoughnessUv = vUv.xy;\r\n\t\t\t#endif\r\n\t\t\tfloat roughnessTex = texture2D(roughnessMap, vRoughnessUv).x;\r\n\t\t\troughnessValue = min(roughnessValue + roughnessTex, 1.0);\r\n\t\t#endif\r\n\r\n\t\t#ifdef USE_ENVIRONMENT_MAP\r\n\t\t\tfloat mipBias = 0.0;\r\n\t\t\tvec3 envMapReflectedColor;\r\n\t\t\tvec3 envMapDiffuseColor;\r\n\r\n\t\t\t#if defined(ENVIRONMENT_MAP_CUBE_0) || defined(ENVIRONMENT_MAP_2D_0)\r\n\t\t\t\tvec3 reflectedColor0 = vec3(0.0);\r\n\t\t\t\tvec3 reflectedColor1 = vec3(0.0);\r\n\t\t\t\tvec3 reflectedColor2 = vec3(0.0);\r\n\t\t\t\tvec3 vEyeReflect_VS = reflect(eyeVector_VS, normal_VS );\r\n\t\t\t\t//Cube map reflection\r\n\t\t\t\t#if ( ENVIRONMENT_MAP_PROJECTION == 3 )\r\n\t\t\t\t\tvec3 sampleUV;\r\n\t\t\t\t\tvec3 vReflect_WS = (vec4(vEyeReflect_VS, 0.0) * viewMatrix).xyz;\r\n\t\t\t\t\tsampleUV = vec3( vReflect_WS.x, vReflect_WS.yz);\r\n\t\t\t\t\tmipBias = roughnessValue * 6.0;\r\n\t\t\t\t\treflectedColor0 = textureCube( environmentMapCube_0, sampleUV, mipBias).xyz;\r\n\t\t\t\t\tmipBias = max(mipBias - 3.0, 0.0);\r\n\t\t\t\t\treflectedColor1 = textureCube( environmentMapCube_1, sampleUV, mipBias).xyz;\r\n\t\t\t\t\treflectedColor2 = textureCube( environmentMapCube_2, sampleUV).xyz;\r\n\t\t\t\t#else\r\n\t\t\t\t\tvec2 sampleUV;\r\n\t\t\t\t\t//Sphere map reflection\r\n\t\t\t\t\t#if ( ENVIRONMENT_MAP_PROJECTION == 4 )\r\n\t\t\t\t\t\tvec3 reflect_SS = vEyeReflect_VS;\r\n\t\t\t\t\t\treflect_SS.z += 1.0;\r\n\t\t\t\t\t\tfloat temp = 2.0 * sqrt(dot(reflect_SS, reflect_SS));\r\n\t\t\t\t\t\treflect_SS.xy = reflect_SS.xy / vec2(temp) + vec2(0.5);\r\n\t\t\t\t\t\treflect_SS.y = 1.0 - reflect_SS.y;\r\n\t\t\t\t\t\tsampleUV.xy = reflect_SS.xy;\r\n\t\t\t\t\t//Equirectangular reflection\r\n\t\t\t\t\t#elif ( ENVIRONMENT_MAP_PROJECTION == 5 )\r\n\t\t\t\t\t\tvec3 vReflect_WS = (vec4(vEyeReflect_VS, 0.0) * viewMatrix).xyz;\r\n\t\t\t\t\t\tsampleUV.y = clamp( vReflect_WS.y * -0.5 + 0.5, 0.0, 1.0);\r\n\t\t      \tsampleUV.x = atan( vReflect_WS.z, vReflect_WS.x ) * 0.15915494309189533576888376337251 + 0.5; // reciprocal( 2 PI ) + 0.5\r\n\t\t\t\t\t//Planar reflection\r\n\t\t\t\t\t#elif ( ENVIRONMENT_MAP_PROJECTION == 6 )\r\n\t\t\t\t\t\tvec2 distort = vec4( normal_VS - vNormal_VS.xyz, 0.0 ).xy * -0.01;\r\n\t\t\t\t\t\tsampleUV.xy = vec2(-1.0, 1.0) * (gl_FragCoord.xy - screenDimensions.xy) / screenDimensions.zw + distort;\r\n\t\t\t\t\t#endif\r\n\t\t\t\t\tmipBias = roughnessValue * 10.0;\r\n\t\t\t\t\treflectedColor0 = texture2D( environmentMap2D_0, sampleUV.xy, mipBias).xyz;\r\n\t\t\t\t\tmipBias = max(mipBias - 5.0, 0.0);\r\n\t\t\t\t\treflectedColor1 = texture2D( environmentMap2D_1, sampleUV.xy, mipBias).xyz;\r\n\t\t\t\t\treflectedColor2 = texture2D( environmentMap2D_2, sampleUV.xy).xyz;\r\n\t\t\t\t#endif\r\n\r\n\t\t\t\tenvMapReflectedColor = getReflectionFromRoughness(reflectedColor0, reflectedColor1, reflectedColor2, roughnessValue);\r\n\r\n\t\t\t\t//Cube map diffuse illumination\r\n\t\t\t\t#if ( ENVIRONMENT_MAP_PROJECTION == 3 )\r\n\t\t\t\t\tvec3 normal_WS = (vec4(normal_VS, 0.0) * viewMatrix).xyz;\r\n\t\t\t\t\tsampleUV = vec3( normal_WS.x, normal_WS.yz);\r\n\t\t\t\t\tenvMapDiffuseColor = textureCube( environmentMapCube_2, sampleUV).xyz;\r\n\t\t\t\t#else\r\n\t\t\t\t\t// Diffuse illumination from classic light map\r\n\t\t\t\t\t#if ( ENVIRONMENT_MAP_PROJECTION == 1)\r\n\t\t\t\t\t\tsampleUV.xy = vUv.xy;\r\n\t\t\t\t\t#elif ( ENVIRONMENT_MAP_PROJECTION == 2)\r\n\t\t\t\t\t\tsampleUV.xy = vUv.zw;\r\n\t\t\t\t\t//Equirectangular diffuse illumination\r\n\t\t\t\t\t#elif ( ENVIRONMENT_MAP_PROJECTION == 5)\r\n\t\t\t\t\t\tvec3 normal_WS = (vec4(normal_VS, 0.0) * viewMatrix).xyz;\r\n\t\t\t\t\t\tsampleUV.y = clamp( normal_WS.y * -0.5 + 0.5, 0.0, 1.0);\r\n\t\t      \tsampleUV.x = atan( normal_WS.z, normal_WS.x ) * 0.15915494309189533576888376337251 + 0.5; // reciprocal( 2 PI ) + 0.5\r\n\r\n\t\t\t\t\t#endif\r\n\t\t\t\t\tenvMapDiffuseColor = texture2D( environmentMap2D_2, sampleUV.xy).xyz;\r\n\t\t\t\t#endif\r\n\t\t\t#endif\r\n\t\t#endif\r\n\r\n\t\tbaseColor = baseAlbedo;\r\n\r\n\t\t#if defined(USE_COLOR) && defined(ALBEDO)\r\n\t\t\tbaseColor *= vColor;\r\n\t\t#endif\r\n\r\n\t\t#if defined(SPECULAR_COLOR) && defined(SPECULAR_MAP)\r\n\t\tvec3 specularColorValue = specularTex.xyz * specularColor;\r\n\t\t#elif defined(SPECULAR_MAP)\r\n\t\t\tvec3 specularColorValue = specularTex.xyz;\r\n\t\t#elif defined(SPECULAR_COLOR)\r\n\t\t\tvec3 specularColorValue = specularColor;\r\n\t\t#else\r\n\t\t\tvec3 specularColorValue = vec3(1.0);\r\n\t\t#endif\r\n\r\n\t#endif //(#if !defined( DEPTH_PASS ))\r\n\t#if defined(BASE_ALBEDO) && defined(ALBEDO_MAP)\r\n\t\tvec3 albedoColorValue = albedoTex.xyz * baseColor;\r\n\t#elif defined(ALBEDO_MAP)\r\n\t\tvec3 albedoColorValue = albedoTex.xyz;\r\n\t#else\r\n\t\tvec3 albedoColorValue = baseColor;\r\n\t#endif\r\n\t#ifdef ALPHA_BLEND_MODE\r\n\t\tfloat finalAlpha = opacity;\r\n\t\t#ifdef USE_ALPHA_FROM_ALBEDO_MAP\r\n\t\t\tfloat textureAlpha = albedoTex.a;\r\n\t\t#elif defined(ALPHA_MAP)\r\n\t\t\t#ifdef ALPHA_MAP_UV_CHANNEL\r\n\t\t\t\t#if (ALPHA_MAP_UV_CHANNEL == 0)\r\n\t\t\t\t\tvec2 vAlphaUv = vUv.xy;\r\n\t\t\t\t#else\r\n\t\t\t\t\tvec2 vAlphaUv = vUv.zw;\r\n\t\t\t\t#endif\r\n\t\t\t#else\r\n\t\t\t\tvec2 vAlphaUv = vUv.xy;\r\n\t\t\t#endif\r\n\t\t\tfloat textureAlpha = texture2D(alphaMap, vAlphaUv).x;\r\n\t\t#else\r\n\t\t\tfloat textureAlpha = 1.0;\r\n\t\t#endif\r\n\t\t#if (ALPHA_BLEND_MODE == 0)\r\n\t\t\tfinalAlpha *= textureAlpha;\r\n\t\t#elif (ALPHA_BLEND_MODE == 1)\r\n\t\t\talbedoColorValue = mix(baseColor, albedoColorValue.xyz, textureAlpha);\r\n\t\t#elif (ALPHA_BLEND_MODE == 2)\r\n\t\t\tfinalAlpha *= textureAlpha;\r\n\t\t\t#if defined(ALPHATEST)\r\n\t\t\t\tif ( finalAlpha < float(ALPHATEST) ) discard;\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#else\r\n\t\tfloat finalAlpha = 1.0;\r\n\t#endif\r\n\t#if defined(DEPTH_PASS )\r\n\t\tgl_FragColor = pack_depth( gl_FragCoord.z );\r\n\r\n\t#else\r\n\r\n\t\t#ifdef SCATTERING\r\n\t\t\t#ifdef SSS_TEXTURE\r\n\t\t\t\tvec3 scatterColorValue = scatterColor * sssTex;\r\n\t\t\t#else\r\n\t\t\t\tvec3 scatterColorValue = scatterColor;\r\n\t\t\t#endif\r\n\t\t\t#ifdef LOCAL_SCATTERING\r\n\t\t\t\tscatterColorValue *= scatterLocalScale * 0.5;\r\n\t\t\t#endif\r\n\t\t#endif\r\n\r\n\t\t#ifdef METALNESS\r\n\t\t\t#ifdef SPECULAR\r\n\t\t\t\tr0Value = mix(r0Value, 1.0, metalnessValue);\r\n\t\t\t#endif\r\n\t\t\tspecularColorValue = mix(specularColorValue, albedoColorValue, metalnessValue);\r\n\t\t\talbedoColorValue *= 1.0 - metalnessValue;\r\n\t\t#endif\r\n\r\n\t\t#ifdef USE_SCENE_LIGHTS\r\n\r\n\t\t\t#ifdef USE_SHADOWMAP\r\n\t\t\t\t#if NUM_SHADOWS > 0 && ( defined(ALBEDO) || defined(SPECULAR) )\r\n\t\t\t\t\tfloat shadowValues[ NUM_DIR_LIGHTS ];\r\n\t\t\t\t\t#ifdef TRANSLUCENT_SCATTERING\r\n\t\t\t\t\t\tfloat shadowValuesScatter[ NUM_DIR_LIGHTS ];\r\n\t\t\t\t\t#endif\r\n\t\t\t\t\t#ifdef SHADOWMAP_DEBUG\r\n\t\t\t\t\t\tvec3 shadowColour = vec3(1.0);\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\tfor( int s = 0; s < NUM_DIR_LIGHTS; s ++ ) {\r\n\t\t\t\t\t\tshadowValues[ s ] = 1.0;\r\n\t\t\t\t\t\t#ifdef TRANSLUCENT_SCATTERING\r\n\t\t\t\t\t\t\tshadowValuesScatter[ s ] = 1.0;\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t#ifdef SHADOWMAP_DEBUG\r\n\r\n\t\t\t\t\t\tvec3 frustumColors[3];\r\n\t\t\t\t\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\r\n\t\t\t\t\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\r\n\t\t\t\t\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t#ifdef SHADOWMAP_CASCADE\r\n\r\n\t\t\t\t\t\tint inFrustumCount = 0;\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\tfloat fDepth;\r\n\t\t\t\t\t//int lightIndex = 0;\r\n\t\t\t\t\tint frustumIndex = 0;\r\n\r\n\t\t\t\t\tfor( int s = 0; s < NUM_SHADOWS; s ++ ) {\r\n\r\n\t\t\t\t\t\tvec3 shadowCoord = vShadowCoord[ s ].xyz / vShadowCoord[ s ].w;\r\n\t\t\t\t\t\t// \"if ( something && something )\" \t\t breaks ATI OpenGL shader compiler\r\n\t\t\t\t\t\t// \"if ( all( something, something ) )\"  using this instead\r\n\r\n\t\t\t\t\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\r\n\t\t\t\t\t\tbool inFrustum = all( inFrustumVec );\r\n\r\n\t\t\t\t\t\t// don't shadow pixels outside of light frustum\r\n\t\t\t\t\t\t// use just first frustum (for cascades)\r\n\t\t\t\t\t\t// don't shadow pixels behind far plane of light frustum\r\n\r\n\t\t\t\t\t\t#ifdef SHADOWMAP_CASCADE\r\n\r\n\t\t\t\t\t\t\tinFrustumCount += int( inFrustum );\r\n\t\t\t\t\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\r\n\r\n\t\t\t\t\t\t#else\r\n\r\n\t\t\t\t\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\r\n\r\n\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\tbool frustumTest = all( frustumTestVec );\r\n\r\n\t\t\t\t\t\tif ( frustumTest ) {\r\n\r\n\t\t\t\t\t\t\tshadowCoord.z += shadowBias[ s ];\r\n\r\n\t\t\t\t\t\t\t#ifdef SHADOWMAP_TYPE_PCF_SOFT\r\n\r\n\t\t\t\t\t\t\t\t// Percentage-close filtering\r\n\t\t\t\t\t\t\t\t// (9 pixel kernel)\r\n\t\t\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\r\n\r\n\t\t\t\t\t\t\t\tfloat shadow = 0.0;\r\n\r\n\r\n\t\t\t\t\t\t\t\t//const float shadowDelta = 1.0 / 9.0;\r\n\t\t\t\t\t\t\t\t//const float kernelCornerWeight = 1.0 / 16.0;\r\n\t\t\t\t\t\t\t\t//const float kernelEdgeWeight = 1.0 / 8.0;\r\n\r\n\t\t\t\t\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ s ].x;\r\n\t\t\t\t\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ s ].y;\r\n\r\n\t\t\t\t\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\r\n\t\t\t\t\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\r\n\t\t\t\t\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\r\n\t\t\t\t\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\r\n\r\n\t\t\t\t\t\t\t\tmat3 shadowKernel;\r\n\t\t\t\t\t\t\t\tmat3 depthKernel;\r\n\r\n\t\t\t\t\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\r\n\t\t\t\t\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\r\n\t\t\t\t\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\r\n\t\t\t\t\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\r\n\t\t\t\t\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy ) );\r\n\t\t\t\t\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\r\n\t\t\t\t\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\r\n\t\t\t\t\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\r\n\t\t\t\t\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\r\n\r\n\t\t\t\t\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\r\n\t\t\t\t\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\r\n\t\t\t\t\t\t\t\tshadowKernel[0] *= vec3(0.25);\r\n\r\n\t\t\t\t\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\r\n\t\t\t\t\t\t\t\tshadowKernel[1] *= vec3(0.25);\r\n\r\n\t\t\t\t\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\r\n\t\t\t\t\t\t\t\tshadowKernel[2] *= vec3(0.25);\r\n\r\n\t\t\t\t\t\t\t\tvec2 fractionalCoord = 1.0 - fract(shadowCoord.xy * shadowMapSize[s].xy );\r\n\r\n\r\n\t\t\t\t\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\r\n\t\t\t\t\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\r\n\r\n\t\t\t\t\t\t\t\tvec4 shadowValueVector;\r\n\t\t\t\t\t\t\t\tshadowValueVector.x = mix(shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\r\n\t\t\t\t\t\t\t\tshadowValueVector.y = mix(shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\r\n\t\t\t\t\t\t\t\tshadowValueVector.z = mix(shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\r\n\t\t\t\t\t\t\t\tshadowValueVector.w = mix(shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\r\n\r\n\t\t\t\t\t\t\t\tshadow = dot(shadowValueVector, vec4(1.0));\r\n\r\n\t\t\t\t\t\t\t\t#ifdef SHADOWMAP_CASCADE\r\n\t\t\t\t\t\t\t\t\tshadowValues[ 0 ] *= (1.0 - shadow);\r\n\t\t\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\t\t\tshadowValues[ s ] = (1.0 - shadow);\r\n\t\t\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t\t\t#ifdef TRANSLUCENT_SCATTERING\r\n\t\t\t\t\t\t\t\t\tdepthKernel[0] = mix( depthKernel[1], depthKernel[0], fractionalCoord.x );\r\n\t\t\t\t\t\t\t\t\tdepthKernel[1] = mix( depthKernel[2], depthKernel[1], fractionalCoord.x );\r\n\r\n\t\t\t\t\t\t\t\t\tvec4 depthValues;\r\n\t\t\t\t\t\t\t\t\tdepthValues.x = mix(depthKernel[0][1], depthKernel[0][0], fractionalCoord.y );\r\n\t\t\t\t\t\t\t\t\tdepthValues.y = mix(depthKernel[0][2], depthKernel[0][1], fractionalCoord.y );\r\n\t\t\t\t\t\t\t\t\tdepthValues.z = mix(depthKernel[1][1], depthKernel[1][0], fractionalCoord.y );\r\n\t\t\t\t\t\t\t\t\tdepthValues.w = mix(depthKernel[1][2], depthKernel[1][1], fractionalCoord.y );\r\n\t\t\t\t\t\t\t\t\tfloat totalDepth = dot(depthValues, vec4(1.0));// + dot(depthKernel[1], vec3(1.0)) + dot(depthKernel[2], vec3(1.0));\r\n\t\t\t\t\t\t\t\t\tfloat depthAvg = totalDepth / 4.0;\r\n\t\t\t\t\t\t\t\t\tfloat exponent = (shadowCoord.z - depthAvg ) * shadow;\r\n\t\t\t\t\t\t\t\t\t// exponent = clamp(exponent, 0.0, 100.0);\r\n\t\t\t\t\t\t\t\t\t// exponent = -pow(exponent * (1.0 - scatterScale) * 1000.0, 2.0);\r\n\t\t\t\t\t\t\t\t\t// shadowValuesScatter[ s ] = exp2( exponent );\r\n\t\t\t\t\t\t\t\t\texponent = clamp(exponent, 0.0, 1000.0) * 1000.0;\r\n\t\t\t\t\t\t\t\t\tshadowValuesScatter[ s ] = exp( (scatterScale - 1.0) * exponent );\r\n\t\t\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t\t#elif defined( SHADOWMAP_TYPE_PCF )\r\n\r\n\t\t\t\t\t\t\t\tfloat shadow = 0.0;\r\n\t\t\t\t\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\r\n\r\n\t\t\t\t\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ s ].x;\r\n\t\t\t\t\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ s ].y;\r\n\r\n\t\t\t\t\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\r\n\t\t\t\t\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\r\n\t\t\t\t\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\r\n\t\t\t\t\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\r\n\r\n\t\t\t\t\t\t\t\tfloat totalDepth = 0.0;\r\n\r\n\t\t\t\t\t\t\t\tfDepth = unpackDepth( texture2DProj( shadowMap[ s ], vec4( shadowCoord.xy + vShadowCoord[ s ].w * vec2( dx0, dy0 ), 0.05, vShadowCoord[ s ].w ) ) );\r\n\t\t\t\t\t\t\t\t// fDepth = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\t\t\t\t\t\t\t\ttotalDepth += fDepth;\r\n\r\n\t\t\t\t\t\t\t\tfDepth = unpackDepth( texture2DProj( shadowMap[ s ], vec4( shadowCoord.xy + vShadowCoord[ s ].w * vec2( 0.0, dy0 ), 0.05, vShadowCoord[ s ].w ) ) );\r\n\t\t\t\t\t\t\t\t// fDepth = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\t\t\t\t\t\t\t\ttotalDepth += fDepth;\r\n\r\n\t\t\t\t\t\t\t\tfDepth = unpackDepth( texture2DProj( shadowMap[ s ], vec4( shadowCoord.xy + vShadowCoord[ s ].w * vec2( dx1, dy0 ), 0.05, vShadowCoord[ s ].w ) ) );\r\n\t\t\t\t\t\t\t\t// fDepth = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\t\t\t\t\t\t\t\ttotalDepth += fDepth;\r\n\r\n\t\t\t\t\t\t\t\tfDepth = unpackDepth( texture2DProj( shadowMap[ s ], vec4( shadowCoord.xy + vShadowCoord[ s ].w * vec2( dx0, 0.0 ), 0.05, vShadowCoord[ s ].w ) ) );\r\n\t\t\t\t\t\t\t\t// fDepth = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\t\t\t\t\t\t\t\ttotalDepth += fDepth;\r\n\r\n\t\t\t\t\t\t\t\tfDepth = unpackDepth( texture2DProj( shadowMap[ s ], vec4( shadowCoord.xy, 0.05, vShadowCoord[ s ].w ) ) );\r\n\t\t\t\t\t\t\t\t// fDepth = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy ) );\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\t\t\t\t\t\t\t\ttotalDepth += fDepth;\r\n\r\n\t\t\t\t\t\t\t\tfDepth = unpackDepth( texture2DProj( shadowMap[ s ], vec4( shadowCoord.xy + vShadowCoord[ s ].w * vec2( dx1, 0.0 ), 0.05, vShadowCoord[ s ].w ) ) );\r\n\t\t\t\t\t\t\t\t// fDepth = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\t\t\t\t\t\t\t\ttotalDepth += fDepth;\r\n\r\n\t\t\t\t\t\t\t\tfDepth = unpackDepth( texture2DProj( shadowMap[ s ], vec4( shadowCoord.xy + vShadowCoord[ s ].w * vec2( dx0, dy1 ), 0.05, vShadowCoord[ s ].w ) ) );\r\n\t\t\t\t\t\t\t\t// fDepth = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\t\t\t\t\t\t\t\ttotalDepth += fDepth;\r\n\r\n\t\t\t\t\t\t\t\tfDepth = unpackDepth( texture2DProj( shadowMap[ s ], vec4( shadowCoord.xy + vShadowCoord[ s ].w * vec2( 0.0, dy1 ), 0.05, vShadowCoord[ s ].w ) ) );\r\n\t\t\t\t\t\t\t\t// fDepth = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\t\t\t\t\t\t\t\ttotalDepth += fDepth;\r\n\r\n\t\t\t\t\t\t\t\tfDepth = unpackDepth( texture2DProj( shadowMap[ s ], vec4( shadowCoord.xy + vShadowCoord[ s ].w * vec2( dx1, dy1 ), 0.05, vShadowCoord[ s ].w ) ) );\r\n\t\t\t\t\t\t\t\t// fDepth = unpackDepth( texture2D( shadowMap[ s ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\t\t\t\t\t\t\t\ttotalDepth += fDepth;\r\n\r\n\t\t\t\t\t\t\t\t#ifdef SHADOWMAP_CASCADE\r\n\t\t\t\t\t\t\t\t\tshadowValues[ 0 ] *= (1.0 - shadow);\r\n\t\t\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\t\t\tshadowValues[ s ] = (1.0 - shadow);\r\n\t\t\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t\t\t#ifdef TRANSLUCENT_SCATTERING\r\n\r\n\t\t\t\t\t\t\t\t\tfloat depthAvg = totalDepth / 9.0;\r\n\t\t\t\t\t\t\t\t\tfloat exponent = (shadowCoord.z - depthAvg ) * shadow;\r\n\t\t\t\t\t\t\t\t\t// exponent = clamp(exponent, 0.0, 10000.0);\r\n\t\t\t\t\t\t\t\t\t// exponent = -pow(exponent * (1.0 - scatterScale) * 100.0, 2.0);\r\n\t\t\t\t\t\t\t\t\t// shadowValuesScatter[ s ] = exp2( exponent );\r\n\t\t\t\t\t\t\t\t\texponent = clamp(exponent, 0.0, 1000.0) * 1000.0;\r\n\t\t\t\t\t\t\t\t\tshadowValuesScatter[ s ] = exp( (scatterScale - 1.0) * exponent );\r\n\r\n\t\t\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t\t#else\r\n\r\n\t\t\t\t\t\t\t\tvec4 rgbaDepth = texture2DProj( shadowMap[ s ], vec4( vShadowCoord[ s ].w * ( shadowCoord.xy ), 0.05, vShadowCoord[ s ].w ) );\r\n\t\t\t\t\t\t\t\t// vec4 rgbaDepth = texture2D( shadowMap[ s ], shadowCoord.xy );\r\n\t\t\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\r\n\r\n\t\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z ) {\r\n\r\n\t\t\t\t\t\t\t\t\t#ifdef SHADOWMAP_CASCADE\r\n\t\t\t\t\t\t\t\t\t\tshadowValues[ 0 ] *= 0.0;\r\n\t\t\t\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\t\t\t\tshadowValues[ s ] = 0.0;\r\n\t\t\t\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tshadowValues[ s ] = 1.0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t#ifdef TRANSLUCENT_SCATTERING\r\n\r\n\t\t\t\t\t\t\t\t\tfloat exponent = (shadowCoord.z - fDepth );\r\n\t\t\t\t\t\t\t\t\texponent = clamp(exponent, 0.0, 1000.0) * 1000.0;\r\n\t\t\t\t\t\t\t\t\tshadowValuesScatter[ s ] = exp( (scatterScale - 1.0) * exponent );\r\n\r\n\t\t\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tshadowValues[ s ] = 1.0;\r\n\t\t\t\t\t\t\t#ifdef TRANSLUCENT_SCATTERING\r\n\t\t\t\t\t\t\t\tshadowValuesScatter[ s ] = 1.0;\r\n\t\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t#ifdef SHADOWMAP_DEBUG\r\n\r\n\t\t\t\t\t\t\t#ifdef SHADOWMAP_CASCADE\r\n\r\n\t\t\t\t\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) shadowColour = frustumColors[ s ];\r\n\r\n\t\t\t\t\t\t\t#else\r\n\r\n\t\t\t\t\t\t\t\tif ( inFrustum ) shadowColour = frustumColors[ s ];\r\n\r\n\t\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t//frustumIndex ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t#endif\r\n\t\t\t#endif\r\n\t\t\t// point lights\r\n\r\n\t\t\t#if NUM_POINT_LIGHTS > 0\r\n\r\n\t\t\t\tvec3 pointDiffuse;\r\n\r\n\t\t\t\tfor ( int p = 0; p < NUM_POINT_LIGHTS; p ++ ) {\r\n\r\n\t\t\t\t\tvec3 pointVector_VS = pointLightPosition[ p ] - vPosition_VS.xyz;\r\n\t\t\t\t\tfloat pointVecLength = length( pointVector_VS );\r\n\t\t\t\t\tfloat pointDistance = pow( saturate( -pointVecLength / pointLightDistance[p] + 1.0 ), 2.0 );\r\n\r\n\t\t\t\t\tpointDiffuse = vec3( 0.0 );\r\n\t\t\t\t\tfloat albedoWeight;\r\n\r\n\t\t\t\t\tfloat NdotL = dot( normal_VS, pointVector_VS );\r\n\t\t\t\t\tfloat NdotL_sat = clamp( NdotL, 0.0, 1.0);\r\n\t\t\t\t\t//CALC DIFFUSE\r\n\t\t\t\t\t#ifdef LOCAL_SCATTERING\r\n\t\t\t\t\t\tfloat scatterWeight;\r\n\t\t\t\t\t\tcalculateLocalScattering( pointVector_VS, NdotL, albedoWeight, normal_Scatter, scatterWeight );\r\n\t\t\t\t\t#elif defined( TRANSLUCENT_SCATTERING )\r\n\t\t\t\t\t\tfloat scatterWeight = 1.0;//scatterScale;\r\n\t\t\t\t\t\talbedoWeight = clamp( NdotL, 0.0, 1.0 );\r\n\t\t\t\t\t#else\r\n\t\t\t\t\t\talbedoWeight = clamp( NdotL, 0.0, 1.0 );\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t    #if defined( PHONG_SPECULAR )\r\n\t\t\t   \t\tvec3 h = pointVector_VS + eyeVector_VS;\r\n\t\t\t\t\t\tvec3 H = normalize( h );\r\n\t\t\t\t\t\tfloat NdotH = dot( normal_VS, H );\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t#ifdef ALBEDO\r\n\t\t    \t\tpointDiffuse = albedoWeight;\r\n\t\t    \t#endif\r\n\r\n\t\t\t\t\t#if defined( SCATTERING )\r\n\t\t\t\t\t\ttotalScatter += scatterWeight * scatterColorValue + pointDiffuse;\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t#if defined(SPECULAR)\r\n\t\t\t\t\t\tfloat HdotL = dot( H, pointVector_VS );\r\n\t\t\t\t\t\tvec3 specWeight = specularColorValue * SpecularFuncGGX( roughnessValue, NdotH, HdotL, NdotL, r0Value );\r\n\t\t\t\t\t\ttotalSpecular = pointLightColor[ p ] * specWeight * pointDistance + totalSpecular;\r\n\t\t\t\t\t\t#ifdef ALBEDO\r\n\t\t\t\t\t\t\tpointDiffuse *= (1.0 - r0Value);\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t#endif\r\n\r\n\t\t    \tpointDiffuse *= pointDistance * pointLightColor[ p ];\r\n\r\n\t\t    \ttotalDiffuse += pointDiffuse;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t#endif\r\n\r\n\r\n\t\t\t// directional lights\r\n\r\n\t\t\t#if NUM_DIR_LIGHTS > 0\r\n\r\n\t\t    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n\t\t\t\t\tvec3 lightDirection_VS = directionalLightDirection[ i ].xyz;\r\n\t\t\t\t\tfloat shadowValue = 1.0;\r\n\t\t\t\t\tfloat shadowValueScatter = 1.0;\r\n\r\n\t\t\t\t\t#if defined( USE_SHADOWMAP ) && (NUM_SHADOWS > 0) && ( defined(ALBEDO) || defined(SPECULAR) )\r\n\r\n\t\t\t\t\t\tshadowValue = shadowValues[ i ];\r\n\t\t\t\t\t#endif\r\n\t\t\t\t\t#if defined( USE_SHADOWMAP ) && (NUM_SHADOWS > 0)\r\n\t\t\t\t\t\t#ifdef TRANSLUCENT_SCATTERING\r\n\t\t\t\t\t\t\tshadowValueScatter = shadowValuesScatter[ i ];\r\n\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\tfloat albedoWeight;\r\n\r\n\t\t\t\t\tfloat NdotL = dot( normal_VS, lightDirection_VS );\r\n\t\t\t\t\tfloat NdotL_sat = clamp( NdotL, 0.0, 1.0);\r\n\r\n\t\t\t\t\t//CALC DIFFUSE\r\n\t\t\t\t\t#ifdef LOCAL_SCATTERING\r\n\t\t\t\t\t\tfloat scatterWeight;\r\n\t\t\t\t\t\tcalculateLocalScattering( lightDirection_VS, NdotL, albedoWeight, normal_Scatter, scatterWeight );\r\n\r\n\t\t\t\t\t#else\r\n\t\t\t\t\t\talbedoWeight = NdotL_sat;\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t#if defined( LOCAL_SCATTERING )\r\n\t\t\t\t\t\ttotalScatter += scatterWeight * scatterColorValue * directionalLightColor[ i ];\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\tvec3 h = lightDirection_VS - eyeVector_VS;\r\n\t\t\t\t\tvec3 H = normalize( h );\r\n\t\t\t\t\tfloat NdotH = dot( normal_VS, H );\r\n\r\n\t\t\t\t\t#if defined(SPECULAR)\r\n\r\n\t\t\t\t\t\tfloat HdotL = dot( H, lightDirection_VS );\r\n\t\t\t\t\t\tvec3 specWeight = specularColorValue * SpecularFuncGGX( roughnessValue, NdotH, HdotL, NdotL, r0Value );\r\n\r\n\t\t\t\t\t\ttotalSpecular = (directionalLightColor[ i ]) * (specWeight * shadowValue) + totalSpecular;\r\n\t\t\t\t\t\t#ifdef ALBEDO\r\n\t\t\t\t\t\t\talbedoWeight *= (1.0 - r0Value);\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t#ifdef ALBEDO\r\n\t\t\t\t\t\tvec3 albedo = albedoWeight * shadowValue * directionalLightColor[ i ];\r\n\r\n\t\t\t\t\t\ttotalDiffuse += albedo;\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t#if defined( USE_SHADOWMAP ) && defined( SHADOWMAP_DEBUG )\r\n\t\t\t\t\t\t#ifdef ALBEDO\r\n\t\t\t\t\t\t\ttotalDiffuse *= shadowColour;\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t#ifdef SPECULAR_COLOR\r\n\t\t\t\t\t\t\ttotalSpecular *= shadowColour;\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t#endif\r\n\r\n\t\t    }\r\n\r\n\t\t\t#endif\r\n\r\n\t\t#endif//USE_SCENE_LIGHTS\r\n\r\n\t\t// TODO implement AO for IBL (blend to unblurred lightmap where AO is dark)\r\n\t\t#if defined(AO_MAP) && defined(USE_SCENE_LIGHTS)\r\n\t\t\ttotalDiffuse += ambientLightColor * aoTex;\r\n\t\t#elif defined(USE_SCENE_LIGHTS)\r\n\t\t\ttotalDiffuse += ambientLightColor;\r\n\t\t#endif\r\n\r\n\t\t// Apply specular environment mapping\r\n\t\t#if defined(USE_ENVIRONMENT_MAP) && (defined(ENVIRONMENT_MAP_CUBE_0) || defined(ENVIRONMENT_MAP_2D_0))\r\n\t\t\t#if defined(SPECULAR)\r\n\t\t\t\t//Schlick-Fresnel - Reflectance Function\r\n\t\t\t\tfloat fresnel = clamp( (pow( 1.0 - NdotV, 5.0 )), 0.0, 1.0 ) * (1.0 - r0Value);\r\n\t\t\t\tfresnel = min(fresnel + r0Value, 1.0);\r\n\t\t\t\tvec3 reflectance_term = envMapReflectedColor.xyz * fresnel;\r\n\t\t\t\t#if !defined(METALNESS)\r\n\t\t\t\t\treflectance_term *= (1.0 - roughnessValue);\r\n\t\t\t\t#endif\r\n\t\t\t\ttotalSpecular += reflectance_term * specularColorValue;\r\n\r\n\t\t\t\t#ifdef ALPHA_BLEND_MODE\r\n\t\t\t\t\t#if (ALPHA_BLEND_MODE == 0)\r\n\t\t\t\t\t\ttotalDiffuse *= finalAlpha;\r\n\t\t\t\t\t\tfinalAlpha = clamp(finalAlpha + fresnel, 0.0, 1.0);\r\n\t\t\t\t\t#endif\r\n\t\t\t\t#endif\r\n\t\t\t#endif\r\n\t\t\t#if defined(ALBEDO)\r\n\t\t\ttotalDiffuse += envMapDiffuseColor;\r\n\t\t\t#endif\r\n\t\t#endif\r\n\r\n\t\ttotalDiffuse *= albedoColorValue;\r\n\r\n\r\n\t\tvec3 finalColor = totalDiffuse;\r\n\r\n\t\t// Energy conservation. Whatever light is being reflected isn't being diffused\r\n\t\t#if defined(SPECULAR)\r\n\t\t\t#if defined(ALBEDO)\r\n\t\t\t\tfinalColor = totalDiffuse * max(vec3(1.0) - totalSpecular, 0.0) + totalSpecular;\r\n\t\t\t#else\r\n\t\t\t\tfinalColor = totalSpecular;\r\n\t\t\t#endif\r\n\t\t#endif\r\n\r\n\t\t#if defined( TRANSLUCENT_SCATTERING ) || defined( LOCAL_SCATTERING )\r\n\t\t\tfinalColor += totalScatter;\r\n\t\t#endif\r\n\r\n\t\t#ifdef EMISSIVE\r\n\t\t\tvec3 emissiveValue = vec3(emissiveIntensity);\r\n\t\t\t#ifdef EMISSIVE_MAP\r\n\t\t\t \temissiveValue *= emissiveTex.xyz;\r\n\t\t\t#endif\r\n\t\t\t#ifdef EMISSIVE_COLOR\r\n\t\t\t \temissiveValue *= emissiveColor;\r\n\t\t\t#endif\r\n\t\t\tfinalColor += emissiveValue;\r\n\t\t#endif\r\n\t\t#ifdef GAMMA_OUTPUT\r\n\t\t\tfinalColor = sqrt( finalColor );\r\n\t\t#endif\r\n\t\tgl_FragColor = vec4( finalColor, finalAlpha );\r\n\r\n\t\t#if defined( USE_FOG )\r\n\t\t\t#ifdef USE_LOGDEPTHBUF_EXT\r\n\t\t\t\thighp float depth = gl_FragDepthEXT / gl_FragCoord.w;\r\n\t\t\t#else\r\n\t\t\t\thighp float depth = gl_FragCoord.z / gl_FragCoord.w;\r\n\t\t\t#endif\r\n\t\t\t#ifdef FOG_EXP2\r\n\t\t\t\tconst highp float LOG2 = 1.442695;\r\n\t\t\t\thighp float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\r\n\t\t\t\t// float fogFactor = exp2( - depth * LOG2 );\r\n\t\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\r\n\t\t\t#else\r\n\t\t\t\thighp float fogFactor = smoothstep( fogNear, fogFar, depth );\r\n\t\t\t#endif\r\n\t\t\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\r\n\t\t#endif\r\n\r\n\t#endif //#if !defined( DEPTH_PASS )\r\n}"

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(128), __webpack_require__(129), __webpack_require__(130)], __WEBPACK_AMD_DEFINE_RESULT__ = function (THREE, shaderParams, uberPBRVertexShader, uberPBRFragmentShader) {
	  'use strict';

	  var Box3DShaderPBR = {
	    id: 'box3d_pbr_spec_gloss_shader',
	    type: 'shader',
	    name: 'PBR Specular/Gloss',
	    properties: {
	      vertexShader: uberPBRVertexShader,
	      fragmentShader: uberPBRFragmentShader,
	      features: {
	        albedo: {
	          displayName: 'Albedo',
	          defaultEnabled: true,
	          parameters: ['baseAlbedo', 'albedoCombine', 'albedoMap']
	        },
	        transparency: {
	          displayName: 'Transparency',
	          defaultEnabled: false,
	          parameters: ['opacity', 'alphaBlendMode', 'useAlphaFromAlbedoMap', 'alphaMap', 'blending', 'blendEquation', 'blendSrc', 'blendDst', 'useSeparateAlphaBlend', 'blendEquationAlpha', 'blendSrcAlpha', 'blendDstAlpha']
	        },
	        specular: {
	          displayName: 'Specular',
	          defaultEnabled: false,
	          parameters: ['specularColor', 'specularCombine', 'specularMap', 'gloss', 'glossMap', 'useGlossFromSpecularMap', 'reflectivityF0']
	        },
	        normals: {
	          displayName: 'Bump/Normals',
	          defaultEnabled: false,
	          parameters: ['useBump', 'normalMap', 'normalScale', 'flipNormalX', 'flipNormalY', 'bumpMap', 'bumpScale']
	        },
	        emissive: {
	          displayName: 'Emissive',
	          defaultEnabled: false,
	          parameters: ['emissiveColor', 'emissiveCombine', 'emissiveMap', 'emissiveIntensity']
	        },
	        environment: {
	          displayName: 'Environment',
	          defaultEnabled: true,
	          parameters: ['useSceneLights', 'useEnvironmentMap', 'environmentMapProjection', 'environmentMapCube_0', 'environmentMapCube_1', 'environmentMapCube_2', 'environmentMap2D_0', 'environmentMap2D_1', 'environmentMap2D_2', 'aoMap']
	        },
	        rendering: {
	          displayName: 'Render Parameters',
	          alwaysEnabled: true,
	          parameters: ['fog', 'side', 'depthWrite', 'depthTest', 'depthFunc', 'alphaTest', 'polygonOffset', 'polygonOffsetFactor', 'polygonOffsetUnits']
	        }
	      },
	      parameters: shaderParams,
	      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, {
	        time: {
	          type: 'f',
	          value: 1.0
	        }
	      }])
	    }
	  };
	  return Box3DShaderPBR;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W061 */
	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Box3DEntity = __webpack_require__(13);

	var _Box3DEntity2 = _interopRequireDefault(_Box3DEntity);

	var _Box3DAsset2 = __webpack_require__(12);

	var _Box3DAsset3 = _interopRequireDefault(_Box3DAsset2);

	var _APIUtilities = __webpack_require__(133);

	var _APIUtilities2 = _interopRequireDefault(_APIUtilities);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ScriptAsset = function (_Box3DAsset) {
	  _inherits(ScriptAsset, _Box3DAsset);

	  function ScriptAsset(json) {
	    _classCallCheck(this, ScriptAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(ScriptAsset).call(this, json));
	  }

	  _createClass(ScriptAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(ScriptAsset.prototype), 'initialize', this).call(this, properties);
	      var category = this.getProperty('category');
	      if (!category) {
	        this.setProperty('category', 'User Defined');
	      }
	      this.markState(_Box3DEntity2.default.STATE_TYPE.CHILDREN, _Box3DEntity2.default.STATE.SUCCEEDED);
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      _get(Object.getPrototypeOf(ScriptAsset.prototype), 'uninitialize', this).apply(this, arguments);
	    }
	  }, {
	    key: 'initializeComponents',
	    value: function initializeComponents() {
	      this.markState(_Box3DEntity2.default.STATE_TYPE.COMPONENTS, _Box3DEntity2.default.STATE.SUCCEEDED);
	      return;
	    }
	  }, {
	    key: 'getDefaultComponentData',
	    value: function getDefaultComponentData() {
	      return ScriptAsset.getDefaultComponentData(this.getProperty('attributes'));
	    }
	  }, {
	    key: 'loadBase',
	    value: function loadBase() {
	      if (this.isBaseLoaded()) {
	        this.markState(_Box3DEntity2.default.STATE_TYPE.BASE, _Box3DEntity2.default.STATE.SUCCEEDED);
	      } else {
	        var externalDependencies = [];

	        _lodash2.default.each(this.getProperty('externalDependencies'), function (dependency) {
	          externalDependencies.push(dependency);
	        }, this);

	        _APIUtilities2.default.loadExtensions(externalDependencies, _lodash2.default.bind(function () {
	          this.markState(_Box3DEntity2.default.STATE_TYPE.BASE, _Box3DEntity2.default.STATE.SUCCEEDED);
	        }, this));
	      }
	    }
	  }], [{
	    key: 'getDefaultComponentData',
	    value: function getDefaultComponentData(attrs) {
	      var attributes = {};

	      if (attrs) {
	        _lodash2.default.each(attrs, function (attr, idx) {
	          if (typeof attr.default !== 'undefined') {
	            attributes[idx] = attr.default;
	          } else if (attr.type === 'custom') {
	            attributes[idx] = ScriptAsset.getDefaultComponentData(attr.attributes);
	          } else if (attr.type === 'a') {
	            attributes[idx] = [];
	          }
	        }, this);
	      }

	      return _lodash2.default.cloneDeep(attributes);
	    }
	  }]);

	  return ScriptAsset;
	}(_Box3DAsset3.default);

	ScriptAsset.schema = _lodash2.default.extend({}, _Box3DAsset3.default.schema, {
	  attributes: {
	    type: 'object',
	    description: '',
	    default: {}
	  },
	  description: {
	    type: 'string',
	    default: ''
	  },
	  attributesOrder: {
	    type: 'array',
	    default: []
	  },
	  events: {
	    type: 'object',
	    description: '',
	    default: {}
	  },
	  externalDependencies: {
	    type: 'array',
	    default: []
	  },
	  filter: {
	    type: 'array',
	    default: []
	  },
	  category: {
	    type: 'string',
	    default: ''
	  },
	  parsedComments: {
	    type: 'boolean',
	    default: true
	  },
	  flags: {
	    type: 'object',
	    description: '',
	    default: {}
	  },
	  path: {
	    type: 'string',
	    default: ''
	  }
	});

	window.Box3D.ScriptAsset = ScriptAsset;
	exports.default = ScriptAsset;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	/**
	 * @module Box3D
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	  'use strict';

	  var Box3D = window.Box3D = window.Box3D || {};
	  var define = window.define;

	  var extensions = {};
	  var nLoading = 0;

	  Box3D.loadExtensions = function (paths, fn) {
	    if (!_.isArray(paths) || !_.size(paths)) {
	      return fn();
	    }
	    Promise.all(paths.map(function (path) {
	      return new Promise(function (resolve) {
	        Box3D.loadExtension(path, resolve);
	      });
	    })).then(fn);
	  };

	  Box3D.loadExtension = function (path, fn) {
	    var script;

	    if (extensions[path] && extensions[path].state === 'loaded') {
	      return fn();
	    } else if (extensions[path] && extensions[path].state !== 'loaded') {
	      script = extensions[path].script;

	      if (typeof fn === 'function') {
	        script.addEventListener('load', function () {
	          setTimeout(fn, 0);
	        });
	      }
	    } else {
	      // backup define
	      window.define = undefined;
	      var body = document.getElementsByTagName('body')[0];
	      script = document.createElement('script');
	      script.type = 'text/javascript';
	      script.src = path;
	      script.async = false;
	      body.appendChild(script);
	      extensions[path] = {
	        script: script,
	        state: 'loading'
	      };

	      nLoading++;

	      script.addEventListener('load', function () {
	        extensions[path].state = 'loaded';
	        nLoading--;
	        if (nLoading === 0) {
	          window.define = define;
	        }
	        if (typeof fn === 'function') {
	          fn();
	        }
	      });
	    }
	  };

	  return Box3D;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DEntity = __webpack_require__(13);

	var _Box3DEntity2 = _interopRequireDefault(_Box3DEntity);

	var _BaseTextureAsset2 = __webpack_require__(19);

	var _BaseTextureAsset3 = _interopRequireDefault(_BaseTextureAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class Texture2DAsset
	 * @constructor
	 */

	var Texture2DAsset = function (_BaseTextureAsset) {
	  _inherits(Texture2DAsset, _BaseTextureAsset);

	  function Texture2DAsset(json) {
	    _classCallCheck(this, Texture2DAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Texture2DAsset).call(this, json));
	  }

	  _createClass(Texture2DAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(Texture2DAsset.prototype), 'initialize', this).call(this, properties);
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      var _this2 = this;

	      var onTexture2DLoaded = function onTexture2DLoaded(data) {
	        _this2.onTexture2DLoad(data);
	        callback();
	      };

	      var onTexture2DLoadError = function onTexture2DLoadError(err) {
	        _log2.default.debug('There was an error loading the texture, ' + _this2.getName(), err);
	        // Only set the missing texture if there isn't loaded data already present.
	        // This allows streamed textures to continue to be used, even if a higher-res
	        // mip failed to load.
	        if (!_this2.runtimeData) {
	          _this2.runtimeData = _this2.registry.getMissingTexture();
	          _this2.markState(_Box3DEntity2.default.STATE_TYPE.BASE, _Box3DEntity2.default.STATE.FAILED);
	        }
	        _this2.loadedBytes = _this2.getDataSizeDownload();
	        _this2.trigger('loadProgress', _this2);
	        callback();
	      };

	      var onTexture2DLoadProgress = function onTexture2DLoadProgress(progressObj) {
	        _this2.loadedBytes = progressObj.loaded;
	        if (!_this2.get('bufferSize')) {
	          _this2.set('bufferSize', progressObj.total);
	        }
	        _this2.trigger('loadProgress', _this2);
	      };

	      // Disabling this temporarily as we only have the "2048" representation in Preview SDK.
	      // const width = this.getProperty('originalWidth');
	      // const height = this.getProperty('originalHeight');
	      // const stream = this.getProperty('stream');

	      // if (!stream || (width < 1024 && height < 1024)) {
	      this._directLoad(onTexture2DLoaded, onTexture2DLoadError, onTexture2DLoadProgress);
	      // } else {
	      //   this._streamingLoad(onTexture2DLoaded, onTexture2DLoadError, onTexture2DLoadProgress);
	      // }
	    }
	  }, {
	    key: 'createTextureData',
	    value: function createTextureData(image) {
	      var texture = new _three2.default.Texture(undefined);
	      texture.image = image;
	      texture.needsUpdate = true;
	      texture.sourceFile = image.src;
	      return texture;
	    }
	  }, {
	    key: '_directLoad',
	    value: function _directLoad(onSuccess, onFailure, onProgress) {
	      var width = this.getProperty('originalWidth');
	      var height = this.getProperty('originalHeight');

	      this.box3DRuntime.resourceLoader.load(this, {
	        width: width > this.getMaxTextureSize() ? this.getMaxTextureSize() : width,
	        height: height > this.getMaxTextureSize() ? this.getMaxTextureSize() : height,
	        maxWidth: this.getMaxTextureSize(),
	        maxHeight: this.getMaxTextureSize(),
	        packingFormat: this.isHdr() ? 'rgbe' : 'none',
	        compression: this.getCompressionFormat(),
	        xhrKey: this.id
	      }, onProgress).then(function onFinalTextureLoad(data) {
	        onSuccess.call(this, data);
	      }.bind(this)).catch(function (err) {
	        onFailure.call(this, err);
	      }.bind(this));
	    }
	  }, {
	    key: '_streamingLoad',
	    value: function _streamingLoad(onSuccess, onFailure, onProgress) {
	      this.box3DRuntime.resourceLoader.load(this, {
	        width: 32,
	        height: 32,
	        packingFormat: this.isHdr() ? 'rgbe' : 'none',
	        compression: 'none',
	        xhrKey: this.id
	      }).then(function onLowMipLoad(data) {
	        this.onTexture2DLoad(data);
	        this._directLoad(onSuccess, onFailure, onProgress);
	      }.bind(this)).catch(function onLowMipFailure() {
	        this._directLoad(onSuccess, onFailure);
	      }.bind(this));
	    }
	  }, {
	    key: 'onTexture2DLoad',
	    value: function onTexture2DLoad(data) {
	      // If there was a previous texture loaded, dispose of it.
	      if (this.runtimeData) {
	        this.runtimeData.dispose();
	      }
	      // Depending on the data returned, handle as an image tag or a compressed texture
	      if (data.properties.compression === 'none') {
	        this.runtimeData = this.createTextureData(data.data);
	      } else {
	        this.runtimeData = this.createCompressedTextureData(data.data, data.properties.compression);
	      }

	      if (this.isHdr() && data.properties.packingFormat) {
	        //Store the packing format on this asset because it specific to this downloaded
	        //representation. Other runtime instances and applications may download a different
	        //representation of the image.
	        this.packingFormat = data.properties.packingFormat;
	        if (this.hdrSource) {
	          this.hdrSource.dispose();
	        }
	        this.hdrSource = this.runtimeData;
	        this.hdrSourceFormat = data.properties.packingFormat;
	        this.runtimeData = new _three2.default.WebGLRenderTarget(data.properties.width, data.properties.height, {
	          minFilter: _three2.default.LinearFilter,
	          magFilter: _three2.default.LinearFilter,
	          format: _three2.default.RGBAFormat,
	          type: _three2.default.FloatType,
	          stencilBuffer: false
	        });
	      }

	      this.runtimeData.name = this.getName();
	      this.runtimeData.box3DEntityId = this.id;
	      this.loadedBytes = this.getDataSizeDownload();
	      this.trigger('loadProgress', this);
	    }

	    /**
	     * Unpack this texture into a 16-bit floating point colour texture.
	     * @return {[type]} [description]
	     */

	  }, {
	    key: '_unpackToHdr',
	    value: function _unpackToHdr() {
	      var renderer;
	      var extensions;
	      var packingDefines = {};

	      switch (this.hdrSourceFormat) {
	        case 'rgbe':
	          packingDefines.HDR_RGBE = 0;
	          packingDefines.FLIP_Y = 0;
	          break;
	        default:
	          packingDefines.HDR_RGBE = 0;
	          packingDefines.FLIP_Y = 0;
	      }

	      renderer = this.box3DRuntime.getThreeRenderer();
	      extensions = renderer.extensions;

	      // Only unpack the HDR data if we can create a float texture on this
	      // hardware AND we actually have valid source data (it may have failed to
	      // download).
	      if (extensions.get('OES_texture_float')) {
	        if (!this.hdrSource) {
	          _log2.default.warn('Unable to unpack HDR texture because the source data is missing.');
	          return;
	        }
	        this.hdrSource.minFilter = _three2.default.NearestFilter;
	        this.hdrSource.maxFilter = _three2.default.NearestFilter;
	        if (!this.unpackHdrPass) {
	          this.unpackHdrPass = new _three2.default.ShaderPass(_three2.default.UnpackHDRShader);
	        }
	        this.unpackHdrPass.material.defines = packingDefines;
	        this.unpackHdrPass.render(renderer, this.runtimeData, this.hdrSource);
	      } else {
	        _log2.default.warn('Unable to unpack HDR texture due to lack of FP texture support.');
	      }
	    }
	  }, {
	    key: 'unload',
	    value: function unload(options) {
	      if (this.hdrSource) {
	        this.hdrSource.dispose();
	        this.hdrSource = undefined;
	      }
	      _get(Object.getPrototypeOf(Texture2DAsset.prototype), 'unload', this).call(this, options);
	    }
	  }]);

	  return Texture2DAsset;
	}(_BaseTextureAsset3.default);

	window.Box3D.Texture2DAsset = Texture2DAsset;
	exports.default = Texture2DAsset;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseTextureAsset2 = __webpack_require__(19);

	var _BaseTextureAsset3 = _interopRequireDefault(_BaseTextureAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class TextureCubeAsset
	 * @constructor
	 */

	var TextureCubeAsset = function (_BaseTextureAsset) {
	  _inherits(TextureCubeAsset, _BaseTextureAsset);

	  function TextureCubeAsset(json) {
	    _classCallCheck(this, TextureCubeAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(TextureCubeAsset).call(this, json));
	  }

	  /** @inheritdoc */

	  _createClass(TextureCubeAsset, [{
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      var _this2 = this;

	      var width = this.getProperty('originalWidth');
	      var height = this.getProperty('originalHeight');

	      this.box3DRuntime.resourceLoader.load(this, {
	        width: width > this.getMaxTextureSize() ? this.getMaxTextureSize() : width,
	        height: height > this.getMaxTextureSize() ? this.getMaxTextureSize() : height,
	        pixelFormat: this.getPixelFormat(),
	        compression: this.getCompressionFormat(),
	        xhrKey: this.id
	      }).then(function (data) {
	        // Depending on the data returned, handle as an image tag or a compressed texture.
	        if (data.properties.compression === 'none') {
	          _this2.runtimeData = _this2.createTextureData(data.data);
	        } else {
	          _this2.runtimeData = _this2.createCompressedTextureData(data.data, data.properties.compression);
	        }

	        _this2.runtimeData.name = _this2.getName();
	        _this2.runtimeData.box3DEntityId = _this2.id;
	        _this2.loadedBytes = _this2.getDataSizeDownload();
	        _this2.trigger('loadProgress', _this2);
	        callback();
	      }).catch(function (err) {
	        _log2.default.debug('There was an error loading the texture, ' + _this2.getName(), err);
	        _this2.runtimeData = _this2.registry.getMissingTextureCube();
	        _this2.failure = true;
	        _this2.trigger('loadProgress', _this2);
	        callback();
	      });
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _get(Object.getPrototypeOf(TextureCubeAsset.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      // TODO: handle reloading the texture here.
	      // if (changes.hasOwnProperty('useHardwareCompression')) {
	      // }
	    }
	  }, {
	    key: 'createTextureData',
	    value: function createTextureData(images) {
	      var texture = new _three2.default.CubeTexture(images, _three2.default.CubeReflectionMapping);
	      texture.needsUpdate = true;
	      return texture;
	    }

	    /** Returns the maximum texture size supported by the device.
	     * @return {Integer} The maximum texture size.
	     */

	  }, {
	    key: 'getMaxTextureSize',
	    value: function getMaxTextureSize() {
	      return this.box3DRuntime.getGPUCapability('MAX_CUBE_MAP_TEXTURE_SIZE');
	    }
	  }]);

	  return TextureCubeAsset;
	}(_BaseTextureAsset3.default);

	window.Box3D.TextureCubeAsset = TextureCubeAsset;
	exports.default = TextureCubeAsset;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseTextureAsset2 = __webpack_require__(19);

	var _BaseTextureAsset3 = _interopRequireDefault(_BaseTextureAsset2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class TextureVideoAsset
	 * @constructor
	 */

	var TextureVideoAsset = function (_BaseTextureAsset) {
	  _inherits(TextureVideoAsset, _BaseTextureAsset);

	  function TextureVideoAsset(json) {
	    _classCallCheck(this, TextureVideoAsset);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(TextureVideoAsset).call(this, json));
	  }

	  _createClass(TextureVideoAsset, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(TextureVideoAsset.prototype), 'initialize', this).call(this, properties);
	      this.box3DRuntime.on('update', this.onUpdate, this);
	      this.on('pause', this.pause, this);
	      this.on('play', this.play, this);
	      this.on('stop', this.stop, this);
	      this.on('toggle', this.toggle, this);
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      this.box3DRuntime.off('update', this.onUpdate, this);
	      this.off('pause', this.pause, this);
	      this.off('play', this.play, this);
	      this.off('stop', this.stop, this);
	      this.off('toggle', this.toggle, this);

	      if (this.runtimeData && this.runtimeData.image) {
	        // TODO: should we be doing more here?
	        this.runtimeData.image.pause();
	      }

	      _get(Object.getPrototypeOf(TextureVideoAsset.prototype), 'uninitialize', this).call(this);
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      var _this2 = this;

	      var onVideoReady = function onVideoReady(videoEl) {
	        if (videoEl) {
	          _this2.runtimeData = new _three2.default.VideoTexture(videoEl);
	          videoEl.style.display = 'none';
	          videoEl.loop = _this2.getProperty('loop');
	          videoEl.autoplay = _this2.getProperty('autoPlay');
	        }
	        callback();
	      };

	      var onVideoFail = function onVideoFail(err) {
	        _log2.default.debug('There was an error loading the video, ' + _this2.getName(), err);
	        _this2.failure = true;
	        callback();
	      };

	      var parentEl = this.box3DRuntime.getRenderer().getCanvas().parentElement;
	      var cssSelector = this.getProperty('querySelector');
	      if (cssSelector) {
	        var videoEl = parentEl.querySelector(cssSelector);
	        onVideoReady(videoEl);
	      } else {
	        this.box3DRuntime.resourceLoader.load(this, { xhrKey: this.id }).then(function (data) {
	          parentEl.appendChild(data.data);
	          onVideoReady(data.data);
	        }).catch(onVideoFail);
	      }
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _get(Object.getPrototypeOf(TextureVideoAsset.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      if (this.runtimeData.image) {

	        if (changes.hasOwnProperty('loop')) {
	          this.runtimeData.image.loop = this.getProperty('loop');
	        }

	        if (changes.hasOwnProperty('autoPlay')) {
	          this.runtimeData.image.autoplay = this.getProperty('autoPlay');
	        }
	      }
	    }
	  }, {
	    key: 'onUpdate',
	    value: function onUpdate() {
	      if (this.runtimeData) {
	        var video = this.runtimeData.image;

	        if (video && !video.paused && !video.error && video.readyState >= video.HAVE_CURRENT_DATA) {
	          this.box3DRuntime.needsRender = true;
	        }
	      }
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	      if (this.runtimeData) {
	        this.runtimeData.image.pause();
	      }
	    }
	  }, {
	    key: 'play',
	    value: function play(seek, seekTime) {
	      if (this.runtimeData) {
	        if (seek) {
	          this.runtimeData.image.currentTime = seekTime;
	        }

	        this.runtimeData.image.play();
	      }
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      if (this.runtimeData) {
	        this.runtimeData.image.pause();
	        this.runtimeData.image.currentTime = 0;
	      }
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle() {
	      if (this.runtimeData) {
	        if (this.runtimeData.image.paused) {
	          this.play();
	        } else {
	          this.pause();
	        }
	      }
	    }
	  }]);

	  return TextureVideoAsset;
	}(_BaseTextureAsset3.default);

	TextureVideoAsset.schema = _lodash2.default.extend({}, _BaseTextureAsset3.default.schema, {
	  uMapping: {
	    type: 'string',
	    description: _BaseTextureAsset3.default.schema.uMapping.description,
	    default: 'clamp'
	  },
	  vMapping: {
	    type: 'string',
	    description: _BaseTextureAsset3.default.schema.vMapping.description,
	    default: 'clamp'
	  },
	  generateMipmaps: {
	    type: 'boolean',
	    description: _BaseTextureAsset3.default.schema.generateMipmaps.description,
	    default: false
	  },
	  autoPlay: {
	    type: 'boolean',
	    description: '',
	    default: true
	  },
	  state: {
	    type: 'string',
	    description: '',
	    default: 'play'
	  },
	  loop: {
	    type: 'boolean',
	    description: '',
	    default: true
	  }
	});
	TextureVideoAsset.events = {
	  pause: {
	    params: [],
	    action: true,
	    category: ''
	  },
	  play: {
	    params: [{
	      name: 'seek',
	      type: 'b',
	      description: '',
	      default: false
	    }, {
	      name: 'seekTime',
	      type: 'f',
	      description: '',
	      default: 0
	    }],
	    action: true,
	    category: ''
	  },
	  stop: {
	    params: [],
	    action: true,
	    category: ''
	  },
	  toggle: {
	    params: [],
	    action: true,
	    category: ''
	  }
	};

	window.Box3D.TextureVideoAsset = TextureVideoAsset;
	exports.default = TextureVideoAsset;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DEntity2 = __webpack_require__(13);

	var _Box3DEntity3 = _interopRequireDefault(_Box3DEntity2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Box3D = window.Box3D;

	var Box3DObject = function (_Box3DEntity) {
	  _inherits(Box3DObject, _Box3DEntity);

	  function Box3DObject(json) {
	    _classCallCheck(this, Box3DObject);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Box3DObject).call(this, json));

	    _this._workVector3 = new _three2.default.Vector3();
	    return _this;
	  }

	  _createClass(Box3DObject, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _Box3DEntity3.default.prototype.initialize.call(this, properties);
	      this.on('setVisible', this.setVisible, this);
	      this.on('setInvisible', this.setInvisible, this);
	      this.on('toggleVisibility', this.toggleVisibility, this);
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize(properties) {
	      _Box3DEntity3.default.prototype.uninitialize.call(this, properties);
	      this.off('setVisible', this.setVisible, this);
	      this.off('setInvisible', this.setInvisible, this);
	      this.off('toggleVisibility', this.toggleVisibility, this);
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      if (this.runtimeData) {
	        this.runtimeData.position.copy(this.getPosition());
	        this.runtimeData.quaternion.copy(this.getQuaternion());
	        this.runtimeData.scale.copy(this.getScale());
	      }
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      // Default implementation creates a THREE.Object3D.
	      this.runtimeData = new _three2.default.Object3D();
	      this.runtimeData.name = this.getName();
	      callback();
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _Box3DEntity3.default.prototype._applyPropertiesLoaded.call(this, changes, reason);

	      if (changes.hasOwnProperty('static')) {
	        var isStatic = this.getProperty('static');
	        this.runtimeData.matrixAutoUpdate = !isStatic;
	        this.runtimeData.rotationAutoUpdate = !isStatic;

	        if (isStatic) {
	          this.runtimeData.matrixWorldNeedsUpdate = true;
	          this.runtimeData.updateMatrix();
	        }
	      }

	      if (changes.hasOwnProperty('visible')) {
	        this.runtimeData.visible = this.getProperty('visible');
	      }

	      if (changes.hasOwnProperty('castShadow')) {
	        this.runtimeData.castShadow = this.getProperty('castShadow');
	      }

	      if (changes.hasOwnProperty('receiveShadow')) {
	        this.runtimeData.receiveShadow = this.getProperty('receiveShadow');
	      }

	      if (changes.hasOwnProperty('frustumCulled')) {
	        this.runtimeData.frustumCulled = this.getProperty('frustumCulled');
	      }

	      // Transform updates
	      if (changes.hasOwnProperty('position')) {
	        var position = this.getPosition();
	        this.runtimeData.position.set(position.x, position.y, position.z);
	      }

	      if (changes.hasOwnProperty('quaternion')) {
	        var quaternion = this.getQuaternion();
	        this.runtimeData.quaternion.set(quaternion.x, quaternion.y, quaternion.z, quaternion.w);
	      }

	      if (changes.hasOwnProperty('scale')) {
	        var scale = this.getScale();
	        this.runtimeData.scale.set(scale.x, scale.y, scale.z);
	      }
	    }

	    /**
	     * Position and orient this object identically with the one provided.
	     * @method alignToObject
	     * @param  {String} objectId The ID of the object to match alignment to.
	     * @param  {Object} options Standard options object.
	     */

	  }, {
	    key: 'alignToObject',
	    value: function alignToObject(objectId, options) {
	      var object;
	      if (!_lodash2.default.isString(objectId)) {
	        if (objectId instanceof Box3D.Box3DObject) {
	          object = objectId;
	        } else {
	          _log2.default.warn('Box3DObject.alignToObject - You must pass this method either a valid object ' + 'ID or a reference to a Box3DObject');
	          return;
	        }
	      } else {
	        object = this.box3DRuntime.getEntityById(objectId);
	      }

	      if (object) {
	        //Figure out new position by transforming the target object's world space position into
	        //the space of this object's parent.
	        var worldPosition = object.getPositionInWorldSpace();
	        var newPosition;
	        var parentObj = this.getParentObject();
	        if (parentObj && parentObj.runtimeData) {
	          if (parentObj.runtimeData.matrixWorldInverse) {
	            newPosition = worldPosition.applyMatrix4(parentObj.runtimeData.matrixWorldInverse);
	          } else {
	            var matrixWorldInverse = new _three2.default.Matrix4();
	            matrixWorldInverse.getInverse(parentObj.runtimeData.matrixWorld);
	            newPosition = worldPosition.applyMatrix4(matrixWorldInverse);
	          }
	        } else {
	          newPosition = worldPosition;
	        }

	        var newQuaternion = object.getQuaternionInWorldSpace();

	        if (parentObj && parentObj.runtimeData && parentObj instanceof Box3D.Box3DObject) {
	          var parentQuat = parentObj.getQuaternionInWorldSpace();
	          newQuaternion.multiply(parentQuat.inverse());
	        }

	        this.setProperties({
	          position: {
	            x: newPosition.x,
	            y: newPosition.y,
	            z: newPosition.z
	          },
	          quaternion: {
	            x: newQuaternion.x,
	            y: newQuaternion.y,
	            z: newQuaternion.z,
	            w: newQuaternion.w
	          }
	        }, options);
	      }
	    }

	    /**
	     * Align an object relative to a position. This uses the object's bounding box.
	     * @method alignToPosition
	     * @param  {vector3} newPosition The position to work relative to.
	     * @param  {vector3} alignment   An object of the form { x: x, y: y, z: z} where the
	     * values for x, y and z are between -1 and +1 and specify how the object is aligned to
	     * the edges of the model. e.g. { x: 0, y: -1, z: 0 } will align the bottom, centre of the
	     * object to the specified position.
	     * @param  {Object} options     Options object. You can pass in 'success' and 'failure'
	     * callbacks that will be called when the action finishes.
	     */

	  }, {
	    key: 'alignToPosition',
	    value: function alignToPosition(newPosition, alignment, options) {

	      var quaternion = this.getQuaternion();
	      var scale = this.getScale();
	      var center = this.getCenter();
	      var rotation = new _three2.default.Quaternion();
	      rotation.set(quaternion.x, quaternion.y, quaternion.z, quaternion.w);

	      var bounds = this.getBounds();
	      if (!bounds) {
	        _log2.default.warn('No bounds for ' + this.type + ' ' + this.id + ' so we\'ll compute it from the heirarchy. This could be slow.');
	        bounds = this.computeBounds();
	      }

	      var aabb = {};
	      aabb.min = new _three2.default.Vector3(bounds.min.x, bounds.min.y, bounds.min.z);
	      aabb.max = new _three2.default.Vector3(bounds.max.x, bounds.max.y, bounds.max.z);
	      aabb.min.applyQuaternion(rotation);
	      aabb.max.applyQuaternion(rotation);

	      var offset = new _three2.default.Vector3(center.x, center.y, center.z);
	      offset.applyQuaternion(rotation);

	      aabb.min.multiply(scale);
	      aabb.max.multiply(scale);
	      offset.multiply(scale);

	      if (alignment) {
	        _lodash2.default.each(alignment, function (value, x) {
	          var newMin = Math.min(aabb.min[x], aabb.max[x]);
	          var newMax = Math.max(aabb.min[x], aabb.max[x]);
	          var align = alignment[x] * 0.5 + 0.5;
	          newPosition[x] -= (1.0 - align) * newMin + align * newMax;
	        }, this);
	      }

	      this.setProperty('position', newPosition, options);
	    }

	    /**
	     * Get the position of the object
	     * @method getPosition
	     * @param  {Vector3} outVector Optional vector to write the result to. Passing this in will
	     * avoid another THREE.Vector3 from being created.
	     * @return {Vector3} position of the object
	     */

	  }, {
	    key: 'getPosition',
	    value: function getPosition(outVector) {
	      var returnVector = outVector;
	      if (!outVector) {
	        returnVector = new _three2.default.Vector3();
	      }
	      var position = this.getProperty('position');
	      if (position) {
	        returnVector.copy(position);
	      }
	      return returnVector;
	    }

	    /**
	     * set the position of the object
	     * @method setPosition
	     * @param {float} x       : x axis position
	     * @param {float} y       : y axis position
	     * @param {float} z       : z axis position
	     * @param {Object} options :    Options object.
	     */

	  }, {
	    key: 'setPosition',
	    value: function setPosition(x, y, z, options) {
	      if (z === undefined) {
	        _log2.default.warn('Calling setPosition with invalid arguments. Expected ' + 'setPosition( x, y, z, options ).');
	      }
	      this.setProperty('position', {
	        x: x,
	        y: y,
	        z: z
	      }, options);
	    }

	    /**
	     * get the quaternion for the object
	     * @method getQuaternion
	     * @return {Quaternion} object's quaternion
	     */

	  }, {
	    key: 'getQuaternion',
	    value: function getQuaternion() {
	      var quaternion = this.getProperty('quaternion');
	      if (quaternion) {
	        return new _three2.default.Quaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w);
	      } else {
	        return new _three2.default.Quaternion();
	      }
	    }

	    /**
	     * set the quaternion for the object
	     * @method setQuaternion
	     * @param {float} x       : x component
	     * @param {float} y       : y component
	     * @param {float} z       : z component
	     * @param {float} w       : w component
	     * @param {Object} options    Options object.
	     */

	  }, {
	    key: 'setQuaternion',
	    value: function setQuaternion(x, y, z, w, options) {
	      if (w === undefined) {
	        _log2.default.warn('Calling setQuaternion with invalid arguments. Expected ' + 'setQuaternion( x, y, z, w ).');
	      }
	      this.setProperty('quaternion', {
	        x: x,
	        y: y,
	        z: z,
	        w: w
	      }, options);
	    }

	    /**
	     * get the current scale of the object
	     * @method getScale
	     * @return {Vector3} the axis scales
	     */

	  }, {
	    key: 'getScale',
	    value: function getScale(outVector) {
	      var returnScale = outVector;
	      if (!outVector) {
	        returnScale = new _three2.default.Vector3();
	      }
	      var scale = this.getProperty('scale');
	      if (scale) {
	        returnScale.copy(scale);
	      } else {
	        returnScale.set(1, 1, 1);
	      }
	      return returnScale;
	    }

	    /**
	     * Set the scale on each axis
	     * @method setScale
	     * @param {float} x :     value to scale the x axis
	     * @param {float} y :     value to scale the y axis
	     * @param {float} z :     value to scale the z axis
	     * @param {Object} options :    Options object.
	     */

	  }, {
	    key: 'setScale',
	    value: function setScale(x, y, z, options) {
	      if (z === undefined) {
	        _log2.default.warn('Calling setScale with invalid arguments. Expected setScale( x, y, z, options ).');
	      }
	      this.setProperty('scale', {
	        x: x,
	        y: y,
	        z: z
	      }, options);
	    }

	    /**
	     * Return the position of this object in world space
	     * @method getPositionInWorldSpace
	     * @param  {Vector3} outVector Optional vector to write the result to. Passing this in will
	     * avoid another THREE.Vector3 from being created.
	     * @return {Vector3}           Reference to the resulting position vector.
	     */

	  }, {
	    key: 'getPositionInWorldSpace',
	    value: function getPositionInWorldSpace(outVector) {
	      var returnPosition = outVector;
	      if (!outVector) {
	        returnPosition = new _three2.default.Vector3();
	      }
	      if (this.runtimeData) {
	        this.runtimeData.updateMatrixWorld();
	        returnPosition.setFromMatrixPosition(this.runtimeData.matrixWorld);
	        return returnPosition;
	      } else {
	        _log2.default.warn('getPositionInWorldSpace called before runtimeData has been loaded. ' + 'Three.js data is currently required for world position to be calculated.');
	        return returnPosition;
	      }
	    }

	    /**
	     * Return the euler rotation of this object in world space
	     * @method getQuaternionInWorldSpace
	     * @param  {Quaternion} outQuaternion Optional quaternion to write the result to. Passing this
	     * in will avoid another THREE.Quaternion from being created.
	     * @return {Quaternion}           Reference to the resulting quaternion
	     */

	  }, {
	    key: 'getQuaternionInWorldSpace',
	    value: function getQuaternionInWorldSpace(outQuaternion) {
	      var tempMatrix = new _three2.default.Matrix4();
	      var returnQuaternion = outQuaternion;
	      if (!outQuaternion) {
	        returnQuaternion = new _three2.default.Quaternion();
	      }
	      if (this.runtimeData) {
	        this.runtimeData.updateMatrixWorld();
	        tempMatrix.extractRotation(this.runtimeData.matrixWorld);
	        returnQuaternion.setFromRotationMatrix(tempMatrix);
	        return returnQuaternion;
	      } else {
	        _log2.default.warn('getRotationInWorldSpace called before runtimeData has been loaded. ' + 'Three.js data is currently required for world position to be calculated.');
	        return returnQuaternion;
	      }
	    }

	    /**
	     * Return the center of this object in world space (using any bounding boxes found in its
	     * descendents)
	     * @method getCenterInWorldSpace
	     * @param  {Vector3} outVector Optional vector to write the result to. Passing this in will
	     * avoid another THREE.Vector3 from being created.
	     * @return {Vector3}           Reference to the resulting center vector.
	     */

	  }, {
	    key: 'getCenterInWorldSpace',
	    value: function getCenterInWorldSpace(outVector) {
	      var returnVector = outVector;
	      if (!outVector) {
	        returnVector = new _three2.default.Vector3();
	      }
	      this.getCenter(returnVector);
	      this.transformLocalToWorldSpace(returnVector, returnVector);

	      return returnVector;
	    }

	    /**
	     * Get the center point of the object
	     * @method getCenter
	     * @param  {Vector3} outVector Optional vector to write the result to. Passing this in will
	     * avoid another THREE.Vector3 from being created.
	     * @return {Vector3} the center point of the object. if the object has no center, it uses the
	     * center of the bounding box
	     */

	  }, {
	    key: 'getCenter',
	    value: function getCenter(outVector) {
	      var returnVector = outVector;
	      if (!outVector) {
	        returnVector = new _three2.default.Vector3();
	      }

	      var bb = this.getBounds();
	      if (bb) {
	        returnVector.copy(bb.min);
	        returnVector.add(bb.max);
	        returnVector.multiplyScalar(0.5);
	      } else {
	        returnVector.set(0.0, 0.0, 0.0);
	      }

	      return returnVector;
	    }

	    /**
	     * get the center point relative to the parent's position
	     * @return {Vector3} the center point in the parent's space
	     */

	  }, {
	    key: 'getCenterInParentSpace',
	    value: function getCenterInParentSpace() {
	      var center = this.getCenter();
	      var quaternion = this.getQuaternion();
	      var scale = this.getScale();
	      var position = this.getPosition();
	      center.multiply(scale);
	      center.applyQuaternion(quaternion);
	      center.add(position);
	      return center;
	    }

	    /**
	     * Return the provided vector (defined in local space) after converting it to world space
	     * @method transformLocalToWorldSpace
	     * @param  {Vector3} inVector Local vector.
	     * @param  {Vector3} outVector Optional vector to write the result to. Passing this in
	     * will avoid another THREE.Vector3 from being created.
	     * @return {Vector3}           Reference to the resulting transformed vector.
	     */

	  }, {
	    key: 'transformLocalToWorldSpace',
	    value: function transformLocalToWorldSpace(inVector, outVector) {

	      if (!inVector) {
	        _log2.default.warn('transformLocalToWorldSpace called without an local vector as input.');
	        return;
	      }
	      var returnVector = outVector;
	      if (!outVector) {
	        returnVector = new _three2.default.Vector3();
	      }
	      returnVector.copy(inVector);
	      if (this.runtimeData) {
	        this.runtimeData.updateMatrixWorld();
	        returnVector.applyMatrix4(this.runtimeData.matrixWorld);
	        return returnVector;
	      } else {
	        _log2.default.warn('transformLocalToWorldSpace called before runtimeData has been loaded. ' + 'Three.js data is currently required for world position to be calculated.');
	        return returnVector;
	      }
	    }

	    /**
	     * Returns the object with the provided Id, if it exists in this object's hierarchy.
	     * @method getObjectById
	     * @param  {String} objectId The ID of the object
	     * @return {Object} The object or null if not found.
	     */

	  }, {
	    key: 'getObjectById',
	    value: function getObjectById(objectId) {
	      var asset = this.getParentAsset();
	      return asset.getObjectById(objectId);
	    }

	    /**
	     * Returns the byte size of the data of the specified type for this object and all
	     * objects beneath it. This function is used by
	     * the public functions, getDataSizeDownload, getDataSizeInMemory, etc.
	     * @private
	     * @method getDataSize
	     * @param {String} sizeType One of 'download', 'inMemory' or 'loaded'
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSize',
	    value: function getDataSize(sizeType, dependencyType) {
	      var totalSize = 0;
	      var dependencyTypes = [];
	      if (dependencyType) {
	        dependencyTypes.push(dependencyType);
	      } else {
	        dependencyTypes = ['textures', 'animations', 'geometries'];
	      }
	      dependencyTypes.forEach(function (type) {
	        var dependencies = this.getChildDependencies(type);
	        _lodash2.default.each(dependencies, function (dep, id) {
	          var asset = this.box3DRuntime.getEntityById(id);
	          if (asset) {
	            switch (sizeType) {
	              case 'loaded':
	                totalSize += asset.getDataSizeLoaded(type);
	                break;
	              case 'download':
	                totalSize += asset.getDataSizeDownload(type);
	                break;
	              default:
	                totalSize += asset.getDataSizeInMemory(type);
	            }
	          }
	        }, this);
	      }, this);
	      return totalSize;
	    }

	    /**
	     * Returns the byte size of the data that has already been loaded by this object and its
	     * hierarchy.
	     * @public
	     * @method getDataSizeLoaded
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeLoaded',
	    value: function getDataSizeLoaded(dependencyType) {
	      return this.getDataSize('loaded', dependencyType);
	    }

	    /**
	     * Returns the total amount of data to be downloaded for all the dependencies of the type
	     * specified that are referenced by this object and all of its children.
	     * @public
	     * @method getDataSizeDownload
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeDownload',
	    value: function getDataSizeDownload(dependencyType) {
	      return this.getDataSize('download', dependencyType);
	    }

	    /**
	     * Returns the total amount of memory taken up for all the dependencies of the type
	     * specified that are referenced by this object and all of its children.
	     * @public
	     * @method getDataSizeInMemory
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @return {Integer} The number of bytes of data.
	     */

	  }, {
	    key: 'getDataSizeInMemory',
	    value: function getDataSizeInMemory(dependencyType) {
	      return this.getDataSize('inMemory', dependencyType);
	    }

	    /**
	     * Set this object as visible. Any rendered object in its hierarchy will become visible.
	     * @method setVisible
	     */

	  }, {
	    key: 'setVisible',
	    value: function setVisible() {
	      this.setProperty('visible', true);
	      this.box3DRuntime.needsRender = true;
	    }

	    /**
	     * Set this object as invisible. Any rendered object in its hierarchy will become invisible.
	     * @method setInvisible
	     */

	  }, {
	    key: 'setInvisible',
	    value: function setInvisible() {
	      this.setProperty('visible', false);
	      this.box3DRuntime.needsRender = true;
	    }

	    /**
	     * Toggle the objet's visibility. If it was invisible, it will become visible, etc.
	     * @method toggleVisibility
	     */

	  }, {
	    key: 'toggleVisibility',
	    value: function toggleVisibility() {
	      var visible = this.getProperty('visible') ? false : true;
	      this.setProperty('visible', visible);
	      this.box3DRuntime.needsRender = true;
	    }
	  }]);

	  return Box3DObject;
	}(_Box3DEntity3.default);

	Box3DObject.schema = _lodash2.default.extend({}, _Box3DEntity3.default.schema, {
	  position: {
	    type: 'vector3',
	    description: '',
	    default: { x: 0, y: 0, z: 0 }
	  },
	  quaternion: {
	    type: 'vector4',
	    description: '',
	    default: { x: 0, y: 0, z: 0, w: 1 }
	  },
	  scale: {
	    type: 'vector3',
	    description: '',
	    default: { x: 1, y: 1, z: 1 }
	  },
	  castShadow: {
	    type: 'boolean',
	    description: '',
	    default: true
	  },
	  receiveShadow: {
	    type: 'boolean',
	    description: '',
	    default: true
	  },
	  visible: {
	    type: 'boolean',
	    description: '',
	    default: true
	  },
	  bounds: {
	    type: 'object',
	    description: '',
	    default: null
	  }
	});
	Box3DObject.events = {
	  toggleVisibility: {
	    params: [],
	    action: true,
	    category: 'Rendering'
	  },
	  setVisible: {
	    params: [],
	    action: true,
	    category: 'Rendering'
	  },
	  setInvisible: {
	    params: [],
	    action: true,
	    category: 'Rendering'
	  }
	};

	window.Box3D.Box3DObject = Box3DObject;
	exports.default = Box3DObject;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DObject2 = __webpack_require__(137);

	var _Box3DObject3 = _interopRequireDefault(_Box3DObject2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class CameraObject
	 * @constructor
	 */

	var CameraObject = function (_Box3DObject) {
	  _inherits(CameraObject, _Box3DObject);

	  function CameraObject(json) {
	    _classCallCheck(this, CameraObject);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(CameraObject).call(this, json));
	  }

	  _createClass(CameraObject, [{
	    key: 'createRuntimeData',

	    /** @inheritdoc */
	    value: function createRuntimeData(callback) {
	      var type = this.getProperty('cameraType');

	      if (type === 'orthographic') {
	        this.runtimeData = new _three2.default.OrthographicCamera();
	      } else {
	        // default to a perspective camera
	        this.runtimeData = new _three2.default.PerspectiveCamera();
	      }

	      this.runtimeData.name = this.getName();
	      callback(this);
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      _get(Object.getPrototypeOf(CameraObject.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      // If the camera type changed, we need to re-create runtimeData.
	      if (changes.hasOwnProperty('cameraType') && reason !== 'init') {
	        this.reloadBase();
	        return;
	      }

	      var type = this.getProperty('cameraType');

	      if (type === 'perspective') {
	        // If any of the camera properties have changed, we'll need to update the
	        // projection matrix for the camera.
	        if (changes.hasOwnProperty('fov') || changes.hasOwnProperty('aspect') || changes.hasOwnProperty('near') || changes.hasOwnProperty('far')) {
	          this.runtimeData.fov = this.getProperty('fov');
	          this.runtimeData.aspect = this.getProperty('aspect');
	          this.runtimeData.near = this.getProperty('near');
	          this.runtimeData.far = this.getProperty('far');
	          this.runtimeData.updateProjectionMatrix();
	        }
	      } else if (type === 'orthographic') {
	        // If any of the shadow camera properties have changed, we'll need to update the
	        // projection matrix for the camera.
	        if (changes.hasOwnProperty('left') || changes.hasOwnProperty('right') || changes.hasOwnProperty('top') || changes.hasOwnProperty('bottom') || changes.hasOwnProperty('near') || changes.hasOwnProperty('far')) {
	          this.runtimeData.left = this.getProperty('left');
	          this.runtimeData.right = this.getProperty('right');
	          this.runtimeData.top = this.getProperty('top');
	          this.runtimeData.bottom = this.getProperty('bottom');
	          this.runtimeData.near = this.getProperty('near');
	          this.runtimeData.far = this.getProperty('far');
	          this.runtimeData.updateProjectionMatrix();
	        }
	      }
	    }
	  }]);

	  return CameraObject;
	}(_Box3DObject3.default);

	CameraObject.schema = _lodash2.default.extend({}, _Box3DObject3.default.schema, {
	  cameraType: {
	    type: 'string',
	    description: '',
	    default: 'perspective'
	  },
	  fov: {
	    type: 'float',
	    description: '',
	    default: 50
	  },
	  aspect: {
	    type: 'float',
	    description: '',
	    default: 16.0 / 9.0
	  },
	  near: {
	    type: 'float',
	    description: '',
	    default: 1.0
	  },
	  far: {
	    type: 'float',
	    description: '',
	    default: 120000.0
	  },
	  right: {
	    type: 'float',
	    description: '',
	    default: 100.0
	  },
	  left: {
	    type: 'float',
	    description: '',
	    default: -100.0
	  },
	  top: {
	    type: 'float',
	    description: '',
	    default: 100.0
	  },
	  bottom: {
	    type: 'float',
	    description: '',
	    default: -100.0
	  }
	});
	CameraObject.events = {};

	window.Box3D.CameraObject = CameraObject;
	exports.default = CameraObject;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DObject2 = __webpack_require__(137);

	var _Box3DObject3 = _interopRequireDefault(_Box3DObject2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class LightObject
	 * @constructor
	 */

	var LightObject = function (_Box3DObject) {
	  _inherits(LightObject, _Box3DObject);

	  function LightObject(json) {
	    _classCallCheck(this, LightObject);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(LightObject).call(this, json));
	  }

	  _createClass(LightObject, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(LightObject.prototype), 'initialize', this).call(this, properties);

	      this.on('setColor', this.setColor, this);
	      this.on('setIntensity', this.setIntensity, this);
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize() {
	      this.off('setColor', this.setColor, this);
	      this.off('setIntensity', this.setIntensity, this);
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      var type = this.getProperty('lightType');
	      var colour = new _three2.default.Color(this.getProperty('color'));

	      if (type === 'directional') {
	        this.runtimeData = new _three2.default.DirectionalLight(colour);
	      } else if (type === 'ambient') {
	        this.runtimeData = new _three2.default.AmbientLight(colour);
	      } else if (type === 'spot') {
	        this.runtimeData = new _three2.default.SpotLight(colour);
	      } else if (type === 'hemisphere') {
	        this.runtimeData = new _three2.default.HemisphereLight(colour);
	      } else {
	        // default case is a point light
	        this.runtimeData = new _three2.default.PointLight(colour);
	      }

	      this.runtimeData.name = this.getName();
	      callback(this);
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      var _this2 = this;

	      _get(Object.getPrototypeOf(LightObject.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      // If the light type changed, we need to re-create the runtimeData.
	      if (changes.hasOwnProperty('lightType') && reason !== 'init') {
	        this.reloadBase();
	        return;
	      }

	      if (changes.hasOwnProperty('intensity')) {
	        this.runtimeData.intensity = this.getProperty('intensity');
	      }

	      if (changes.hasOwnProperty('color')) {
	        this.runtimeData.color.setHex(this.getProperty('color'));
	      }

	      var type = this.getProperty('lightType');

	      if (type === 'directional') {
	        // If any of the shadow camera properties have changed, we'll need to update the
	        // projection matrix for the camera.
	        if (changes.hasOwnProperty('shadowCameraNear') || changes.hasOwnProperty('shadowCameraFar') || changes.hasOwnProperty('shadowCameraLeft') || changes.hasOwnProperty('shadowCameraRight') || changes.hasOwnProperty('shadowCameraTop') || changes.hasOwnProperty('shadowCameraBottom')) {
	          if (this.runtimeData.shadowCamera) {
	            this.runtimeData.shadowCamera.near = this.getProperty('shadowCameraNear');
	            this.runtimeData.shadowCamera.far = this.getProperty('shadowCameraFar');
	            this.runtimeData.shadowCamera.left = this.getProperty('shadowCameraLeft');
	            this.runtimeData.shadowCamera.right = this.getProperty('shadowCameraRight');
	            this.runtimeData.shadowCamera.top = this.getProperty('shadowCameraTop');
	            this.runtimeData.shadowCamera.bottom = this.getProperty('shadowCameraBottom');
	            this.runtimeData.shadowCamera.updateProjectionMatrix();
	          }
	        }

	        if (changes.hasOwnProperty('shadowBias')) {
	          this.runtimeData.shadowBias = this.getProperty('shadowBias');
	        }

	        if (changes.hasOwnProperty('shadowMapWidth') || changes.hasOwnProperty('shadowMapHeight')) {
	          var maxSize = this.box3DRuntime.getGPUCapability('MAX_TEXTURE_SIZE');
	          this.runtimeData.shadowMapWidth = Math.min(maxSize, this.getProperty('shadowMapWidth'));
	          this.runtimeData.shadowMapHeight = Math.min(maxSize, this.getProperty('shadowMapHeight'));
	          this.disposeShadowMap();
	        }

	        if (changes.hasOwnProperty('castShadow')) {
	          this.runtimeData.castShadow = this.getProperty('castShadow');
	          if (!this.runtimeData.castShadow) {
	            this.disposeShadowMap();
	          }
	        }

	        if (changes.hasOwnProperty('target')) {
	          (function () {
	            var targetObj = _this2.getObjectById(_this2.getProperty('target'));
	            if (targetObj) {
	              targetObj.when('loadBase', function () {
	                _this2.runtimeData.target = targetObj.runtimeData;
	              }, _this2);

	              if (!targetObj.isLoading()) {
	                targetObj.load();
	              }
	            }
	          })();
	        }
	      } else if (type === 'point') {
	        if (changes.hasOwnProperty('scale')) {
	          this.runtimeData.distance = 100 * this.getProperty('scale').x;
	        }
	      }
	    }
	  }, {
	    key: 'disposeShadowMap',
	    value: function disposeShadowMap() {
	      if (this.runtimeData.shadowMap) {
	        this.runtimeData.shadowMap.dispose();
	        this.runtimeData.shadowMap = undefined;
	        if (this.runtimeData.cameraHelper && this.runtimeData.cameraHelper.parent) {
	          this.runtimeData.cameraHelper.parent.remove(this.runtimeData.cameraHelper);
	        }
	        if (this.runtimeData.shadowCamera && this.runtimeData.shadowCamera.parent) {
	          this.runtimeData.shadowCamera.parent.remove(this.runtimeData.shadowCamera);
	        }
	        this.runtimeData.shadowCamera = undefined;
	        this.runtimeData.cameraHelper = undefined;
	      }
	    }
	  }, {
	    key: 'unload',
	    value: function unload(options) {
	      if (this.runtimeData) {
	        if (this.runtimeData.shadowMap) {
	          _log2.default.info(this.box3DRuntime.engineName + ' - Deallocating shadow map texture for light ' + this.getName());
	          this.disposeShadowMap();
	        }
	      }

	      _get(Object.getPrototypeOf(LightObject.prototype), 'unload', this).call(this, options);
	    }
	  }, {
	    key: 'setColor',
	    value: function setColor(newValue, animationTime) {
	      var that = this;
	      var ellapsedTime = 0.0;
	      var newR, newG, newB, oldR, oldG, oldB;
	      var oldValue;

	      function animateValue(delta) {
	        ellapsedTime += delta;
	        if (ellapsedTime > animationTime) {
	          that.box3DRuntime.off('update', animateValue, this);
	          that.setProperty('color', newValue);
	        } else {
	          //Interpolate
	          var interp = Math.min(ellapsedTime / animationTime, 1.0);
	          var interpR = (1.0 - interp) * oldR + interp * newR;
	          var interpG = (1.0 - interp) * oldG + interp * newG;
	          var interpB = (1.0 - interp) * oldB + interp * newB;
	          that.runtimeData.color.setRGB(interpR, interpG, interpB);
	          // that.setUniform( attribute, interpValue );
	        }
	      }
	      if (animationTime) {
	        oldValue = that.getProperty('color');
	        oldR = (oldValue >> 16 & 255) / 255;
	        oldG = (oldValue >> 8 & 255) / 255;
	        oldB = (oldValue & 255) / 255;
	        newR = (newValue >> 16 & 255) / 255;
	        newG = (newValue >> 8 & 255) / 255;
	        newB = (newValue & 255) / 255;
	        this.box3DRuntime.on('update', animateValue, this);
	      } else {
	        this.setProperty('color', newValue);
	      }
	    }
	  }, {
	    key: 'setIntensity',
	    value: function setIntensity(newValue, animationTime) {
	      var that = this;
	      var ellapsedTime = 0.0;
	      var oldValue;

	      function animateValue(delta) {
	        ellapsedTime += delta;
	        if (ellapsedTime > animationTime) {
	          that.box3DRuntime.off('update', animateValue, this);
	          that.setProperty('intensity', newValue);
	        } else {
	          //Interpolate
	          var interp = Math.min(ellapsedTime / animationTime, 1.0);
	          var interpValue = (1.0 - interp) * oldValue + interp * newValue;
	          that.runtimeData.intensity = interpValue;
	        }
	      }
	      if (animationTime) {
	        oldValue = that.getProperty('intensity');
	        this.box3DRuntime.on('update', animateValue, this);
	      } else {
	        this.setProperty('intensity', newValue);
	      }
	    }
	  }]);

	  return LightObject;
	}(_Box3DObject3.default);

	LightObject.schema = _lodash2.default.extend({}, _Box3DObject3.default.schema, {
	  lightType: {
	    type: 'string',
	    description: '',
	    default: 'directional'
	  },
	  color: {
	    type: 'color',
	    description: '',
	    default: { r: 0.7333, g: 0.7333, b: 0.7333 }
	  },
	  intensity: {
	    type: 'float',
	    description: '',
	    default: 1.0
	  },
	  target: {
	    type: 'id',
	    description: '',
	    default: null
	  },
	  distance: {
	    type: 'float',
	    description: '',
	    default: 1000.0
	  },
	  castShadow: {
	    type: 'boolean',
	    description: '',
	    default: false
	  },
	  shadowCameraNear: {
	    type: 'float',
	    description: '',
	    default: 1.4
	  },
	  shadowCameraFar: {
	    type: 'float',
	    description: '',
	    default: 50.0
	  },
	  shadowCameraLeft: {
	    type: 'float',
	    description: '',
	    default: -12.0
	  },
	  shadowCameraRight: {
	    type: 'float',
	    description: '',
	    default: 12.0
	  },
	  shadowCameraTop: {
	    type: 'float',
	    description: '',
	    default: 12.0
	  },
	  shadowCameraBottom: {
	    type: 'float',
	    description: '',
	    default: -12.0
	  },
	  shadowBias: {
	    type: 'float',
	    description: '',
	    default: -0.0015
	  },
	  shadowDarkness: {
	    type: 'float',
	    description: '',
	    default: 0.5
	  },
	  shadowMapWidth: {
	    type: 'integer',
	    description: '',
	    default: 1024
	  },
	  shadowMapHeight: {
	    type: 'integer',
	    description: '',
	    default: 102
	  }
	});
	LightObject.events = {
	  setColor: {
	    scope: 'local',
	    action: true,
	    category: 'Materials',
	    params: [{
	      name: 'value',
	      type: 'c',
	      description: 'The colour to set.',
	      default: 0xff0000
	    }, {
	      name: 'animationTime',
	      type: 'f',
	      description: 'The length of time that the change will take. ' + 'i.e. this lets you animate the change.',
	      default: 0.0,
	      min: 0.0
	    }]
	  },
	  setIntensity: {
	    scope: 'local',
	    action: true,
	    category: 'Materials',
	    params: [{
	      name: 'value',
	      type: 'f',
	      description: 'The intensity to set.',
	      default: 1.0
	    }, {
	      name: 'animationTime',
	      type: 'f',
	      description: 'The length of time that the change will take. ' + 'i.e. this lets you animate the change.',
	      default: 0.0,
	      min: 0.0
	    }]
	  }
	};

	window.Box3D.LightObject = LightObject;
	exports.default = LightObject;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseMeshObject2 = __webpack_require__(141);

	var _BaseMeshObject3 = _interopRequireDefault(_BaseMeshObject2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class SkinnedMeshObject
	 * @constructor
	 */

	var SkinnedMeshObject = function (_BaseMeshObject) {
	  _inherits(SkinnedMeshObject, _BaseMeshObject);

	  function SkinnedMeshObject(json) {
	    _classCallCheck(this, SkinnedMeshObject);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(SkinnedMeshObject).call(this, json));
	  }

	  _createClass(SkinnedMeshObject, [{
	    key: '_allocateMesh',
	    value: function _allocateMesh(geometry) {
	      var mesh, useVertexTexture;

	      useVertexTexture = this.getProperty('useVertexTexture') && this.box3DRuntime.getGPUCapability('MAX_VERTEX_TEXTURE_IMAGE_UNITS') > 0;

	      mesh = new _three2.default.SkinnedMesh(geometry, undefined, // material
	      useVertexTexture);

	      // TODO - fix skinned mesh bounding boxes so this isn't necessary!
	      mesh.frustumCulled = false;

	      return mesh;
	    }
	  }, {
	    key: '_getMaterialType',
	    value: function _getMaterialType() {
	      var geometry = this.getGeometry();
	      if (geometry && geometry.hasTangents) {
	        return 'skinnedTangents';
	      }
	      return 'skinned';
	    }

	    /**
	     * Bind this skinned mesh to the specified object hierarchy.
	     * @method bindToHierarchy
	     * @param {Object} root The root object of the hierarchy
	     * @returns {Boolean} true if successful; otherwise false
	     */

	  }, {
	    key: 'bindToHierarchy',
	    value: function bindToHierarchy(root) {
	      function getBindMatrix(bindPose, obj) {
	        var objPose,
	            parentXform = new _three2.default.Matrix4(),
	            position = new _three2.default.Vector3(),
	            quaternion = new _three2.default.Quaternion(),
	            scale = new _three2.default.Vector3(),
	            xform = new _three2.default.Matrix4();

	        if (!obj) {
	          return xform;
	        }

	        objPose = bindPose ? bindPose[obj.name] : null;

	        if (objPose) {
	          position.set(objPose.position[0], objPose.position[1], objPose.position[2]);

	          quaternion.set(objPose.quaternion[0], objPose.quaternion[1], objPose.quaternion[2], objPose.quaternion[3]);

	          scale.set(objPose.scale[0], objPose.scale[1], objPose.scale[2]);

	          xform.compose(position, quaternion, scale);
	        } else {
	          xform.compose(obj.position, obj.quaternion, obj.scale);
	        }

	        parentXform = getBindMatrix(bindPose, obj.parent);
	        xform.multiplyMatrices(parentXform, xform);

	        return xform;
	      }

	      if (!root || !this.runtimeData || !this.runtimeData.geometry || !this.runtimeData.geometry.bindPose || !this.runtimeData.geometry.boneNames) {
	        return false;
	      }

	      var bindPose = this.runtimeData.geometry.bindPose,
	          boneInverses,
	          boneNames = this.runtimeData.geometry.boneNames,
	          bones,
	          meshBindMatrix,
	          objectMap = root.getDescendants(),
	          objectsByName,
	          skeleton;

	      // Create a map from object name -> object.
	      objectsByName = _lodash2.default.indexBy(_lodash2.default.values(objectMap), function (object) {
	        return object.getName();
	      });

	      objectsByName[root.getName()] = root;

	      // Create an array of THREE.js objects (bones) in the same order as
	      // boneNames.
	      bones = _lodash2.default.map(boneNames, function (boneName) {
	        var object = objectsByName[boneName];
	        return object ? object.runtimeData : null;
	      });

	      // Compute an inverse bind pose matrix for each bone.
	      boneInverses = _lodash2.default.map(bones, function (bone) {
	        var xform = getBindMatrix(bindPose, bone);
	        return new _three2.default.Matrix4().getInverse(xform);
	      });

	      // Get the mesh's bind matrix.
	      meshBindMatrix = getBindMatrix(bindPose, this.runtimeData);

	      // Create a skeleton and bind the mesh to it.
	      skeleton = new _three2.default.Skeleton(bones, boneInverses, this.runtimeData.skeleton.useVertexTexture);

	      this.runtimeData.bind(skeleton, meshBindMatrix);

	      return true;
	    }
	  }]);

	  return SkinnedMeshObject;
	}(_BaseMeshObject3.default);

	SkinnedMeshObject.schema = _lodash2.default.extend({}, _BaseMeshObject3.default.schema, {
	  useVertexTexture: {
	    type: 'boolean',
	    description: '',
	    default: true
	  }
	});

	window.Box3D.SkinnedMeshObject = SkinnedMeshObject;
	exports.default = SkinnedMeshObject;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _log = __webpack_require__(6);

	var _log2 = _interopRequireDefault(_log);

	var _lodash = __webpack_require__(2);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _Box3DObject2 = __webpack_require__(137);

	var _Box3DObject3 = _interopRequireDefault(_Box3DObject2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/* global Box3D */
	/**
	 * @class BaseMeshObject
	 * @constructor
	 */

	var BaseMeshObject = function (_Box3DObject) {
	  _inherits(BaseMeshObject, _Box3DObject);

	  function BaseMeshObject(json) {
	    _classCallCheck(this, BaseMeshObject);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(BaseMeshObject).call(this, json));
	  }

	  _createClass(BaseMeshObject, [{
	    key: 'initialize',
	    value: function initialize(properties) {
	      _get(Object.getPrototypeOf(BaseMeshObject.prototype), 'initialize', this).call(this, properties);
	      this.box3DRuntime.on('materialDeleted', this.onMaterialDeleted, this);
	      this.on('setMaterial', this.setMaterial, this);
	      this.on('castShadowsEnable', this.castShadowsEnable, this);
	      this.on('castShadowsDisable', this.castShadowsDisable, this);
	      this.on('castShadowsToggle', this.castShadowsToggle, this);
	    }
	  }, {
	    key: 'uninitialize',
	    value: function uninitialize(properties) {
	      this.off('setMaterial', this.setMaterial, this);
	      this.off('castShadowsEnable', this.castShadowsEnable, this);
	      this.off('castShadowsDisable', this.castShadowsDisable, this);
	      this.off('castShadowsToggle', this.castShadowsToggle, this);
	      this.box3DRuntime.off('materialDeleted', this.onMaterialDeleted, this);
	      _get(Object.getPrototypeOf(BaseMeshObject.prototype), 'uninitialize', this).call(this, properties);
	    }
	  }, {
	    key: 'unload',
	    value: function unload(options) {
	      var parentAsset = this.getParentAsset();

	      if (this.runtimeData) {
	        // TODO: is this line needed?
	        this.runtimeData.material = null;

	        // TODO: perhaps listeners should listen for "unload" instead?
	        parentAsset.trigger('meshUnloaded', this);

	        // TODO: is this line needed?
	        this.runtimeData.geometry = null;
	      }

	      _get(Object.getPrototypeOf(BaseMeshObject.prototype), 'unload', this).call(this, options);
	    }

	    /**
	     * Load a MaterialAsset and assign its runtimeData to the specified property.
	     * @method loadAndAssignMaterial
	     * @private
	     * @param {Object} obj the object that receives the material assignment
	     * @param {String} property the property that receives the material assignment
	     * @param {String} materialId the ID of the MaterialAsset
	     * @param {String} materialType the type of material to use
	     * @returns {void}
	     */

	  }, {
	    key: 'loadAndAssignMaterial',
	    value: function loadAndAssignMaterial(obj, property, materialId, materialType) {
	      var materialRegistry = this.box3DRuntime.assetRegistry.Materials,
	          missingMaterial = materialRegistry.getMissingMaterial(),
	          materialAsset;

	      if (missingMaterial.getRuntimeData()) {
	        // Assign the missing material while the real material loads.
	        obj[property] = missingMaterial.getRuntimeData()[materialType];
	      } else {
	        _log2.default.error(this.box3DRuntime.engineName + ' - BaseMeshObject: "Missing" material needed, but not loaded.');
	      }

	      // Load and assign the real material.
	      if (materialId) {
	        materialAsset = this.box3DRuntime.assetRegistry.getAssetById(materialId);

	        if (materialAsset) {
	          materialAsset.when('loadBase', function () {
	            obj[property] = materialAsset.getRuntimeData()[materialType];
	          });

	          if (materialAsset.isUnloaded()) {
	            materialAsset.load();
	          }
	        }
	      }
	    }

	    /**
	     * Start or stop listening for changes to a Box3DAsset.
	     * @method registerChangeListener
	     * @private
	     * @param {String} assetId the ID of the Box3DAsset to listen to
	     * @param {Function} callback the function to be called when properties change
	     * @param {Boolean} enabled indicates whether to start or stop listening
	     * @returns {void}
	     */

	  }, {
	    key: 'registerChangeListener',
	    value: function registerChangeListener(assetId, callback, enabled) {
	      // TODO: move this functionality into Box3DEntity.
	      var asset;

	      if (assetId) {
	        asset = this.box3DRuntime.assetRegistry.getAssetById(assetId);
	        if (asset) {
	          if (enabled) {
	            asset.on('propertyChanges', callback, this);
	          } else {
	            asset.off('propertyChanges', callback, this);
	          }
	        }
	      }
	    }

	    /**
	     * Get the depth material type.
	     * @method getDepthMaterialType
	     * @private
	     * @returns {String} either 'depthSkinned' or 'depthStatic'
	     */

	  }, {
	    key: 'getDepthMaterialType',
	    value: function getDepthMaterialType() {
	      var materialType = this._getMaterialType();

	      if (Box3D.MaterialRegistry.materialObjectTypes[materialType].skinning) {
	        return 'depthSkinned';
	      }

	      return 'depthStatic';
	    }

	    /**
	     * Return the GeometryAsset.
	     * @method getGeometryAsset
	     * @public
	     * @returns {Object} the GeometryAsset
	     */

	  }, {
	    key: 'getGeometryAsset',
	    value: function getGeometryAsset() {
	      var geometryRegistry = this.box3DRuntime.assetRegistry.Geometries,
	          geometryId = this.getProperty('geometryId');

	      return geometryId ? geometryRegistry.getAssetById(geometryId) : undefined;
	    }

	    /**
	     * Return the Three.js geometry object.
	     * @method getGeometry
	     * @public
	     * @returns {Object} the Three.js geometry object
	     */

	  }, {
	    key: 'getGeometry',
	    value: function getGeometry() {
	      var geometryAsset = this.getGeometryAsset();
	      if (geometryAsset) {
	        return geometryAsset.getGeometry(Box3D.BaseGeometryAsset.PrimitiveType.TRIANGLES);
	      }
	      return null;
	    }

	    /**
	     * Return the MaterialAsset assigned to this mesh.
	     * @method getMaterial
	     * @public
	     * @param {Integer} [index] the material index (default is 0)
	     * @param {Boolean} [placeholder] return a placeholder MaterialAsset when a
	     * material is missing (default is true)
	     * @returns {Object} a MaterialAsset or undefined
	     */

	  }, {
	    key: 'getMaterial',
	    value: function getMaterial(index, placeholder) {
	      var materialIds = this.getMaterialIds(),
	          materialAsset;

	      // Validate the index parameter.
	      index = index || 0;

	      if (index < 0 || index >= materialIds.length) {
	        _log2.default.error(this.box3DRuntime.engineName + ' - BaseMeshObject: Invalid index parameter passed to setMaterial.');
	        return;
	      }

	      // placeholder defaults to true.
	      placeholder = placeholder === undefined ? true : placeholder;

	      // Get the material asset.
	      if (materialIds[index]) {
	        materialAsset = this.box3DRuntime.assetRegistry.getAssetById(materialIds[index]);
	      }

	      // Get the placeholder material
	      if (!materialAsset && placeholder) {
	        materialAsset = this.box3DRuntime.assetRegistry.Materials.getMissingMaterial();
	      }

	      // Return the material asset or undefined.
	      return materialAsset;
	    }

	    /**
	     * Return an array of MaterialAssets that are assigned to this mesh.
	     * @method getMaterials
	     * @public
	     * @param {Boolean} [placeholder] use a placeholder MaterialAsset when a
	     * material is missing (default is true)
	     * @returns {Array} an array of MaterialAssets
	     */

	  }, {
	    key: 'getMaterials',
	    value: function getMaterials(placeholder) {
	      var materialIds = this.getMaterialIds();
	      var materialRegistry = this.box3DRuntime.assetRegistry.Materials;
	      var materials = [];
	      // placeholder defaults to true.
	      placeholder = placeholder === undefined ? true : placeholder;

	      materialIds.forEach(function (id) {
	        var material = this.box3DRuntime.assetRegistry.getAssetById(id);
	        if (material) {
	          materials.push(material);
	        } else if (placeholder) {
	          materials.push(materialRegistry.getMissingMaterial());
	        } else {
	          materials.push(null);
	        }
	      }, this);
	      return materials;
	    }

	    /**
	     * Return an array of MaterialAsset IDs that were previously assigned to this mesh.
	     * @method getPreviousMaterialIds
	     * @private
	     * @returns {Array} an array of MaterialAsset IDs
	     */

	  }, {
	    key: 'getPreviousMaterialIds',
	    value: function getPreviousMaterialIds() {
	      var prefabObj = this.getPrefabObject();
	      var materialRegistry = this.box3DRuntime.assetRegistry.Materials;
	      var prefabMats;
	      var myMats = this.getPreviousProperty('materials');
	      var returnMats;
	      var i;
	      if (prefabObj) {
	        prefabMats = prefabObj.getPreviousProperty('materials');
	        returnMats = new Array(Math.max(prefabMats.length, myMats.length));
	        for (i = 0; i < returnMats.length; i++) {
	          returnMats[i] = myMats[i] ? myMats[i] : prefabMats[i];
	        }
	      } else {
	        returnMats = myMats.slice();
	      }
	      for (i = 0; i < returnMats.length; i++) {
	        if (!returnMats[i]) {
	          returnMats[i] = materialRegistry.getMissingMaterial().id;
	        }
	      }
	      return returnMats;
	    }

	    /**
	     * Return an array of MaterialAsset IDs that are assigned to this mesh.
	     * @method getMaterialIds
	     * @private
	     * @returns {Array} an array of MaterialAsset IDs
	     */

	  }, {
	    key: 'getMaterialIds',
	    value: function getMaterialIds() {
	      var prefabObj = this.getPrefabObject();
	      var materialRegistry = this.box3DRuntime.assetRegistry.Materials;
	      var prefabMats;
	      var myMats = this.getProperty('materials');
	      var returnMats;
	      var i;
	      if (prefabObj) {
	        prefabMats = prefabObj.getProperty('materials');
	        returnMats = new Array(Math.max(prefabMats.length, myMats.length));
	        for (i = 0; i < returnMats.length; i++) {
	          returnMats[i] = myMats[i] ? myMats[i] : prefabMats[i];
	        }
	      } else {
	        returnMats = myMats.slice();
	      }
	      for (i = 0; i < returnMats.length; i++) {
	        if (!returnMats[i]) {
	          returnMats[i] = materialRegistry.getMissingMaterial().id;
	        }
	      }
	      return returnMats;
	    }

	    /**
	     * Return the number of materials assigned to this mesh.
	     * @method getMaterialCount
	     * @public
	     * @returns {Integer} the number of materials assigned to this mesh
	     */

	  }, {
	    key: 'getMaterialCount',
	    value: function getMaterialCount() {
	      return this.getMaterialIds().length;
	    }

	    /**
	     * Return a list of all unique dependencies of the specified type that are
	     * referenced by this entity.
	     * @public
	     * @param {String} dependencyType One of 'textures', 'geometries', 'animations'
	     * @return {[type]}                [description]
	     */

	  }, {
	    key: 'buildListOfReferencedDependencies',
	    value: function buildListOfReferencedDependencies(dependencyType) {
	      var ref = {};
	      var geometryRegistry;
	      var geometryId;
	      var geometryAsset;
	      var materials;

	      // If we're asking for geometries or everything, get our referenced geometry asset.
	      if (!dependencyType || dependencyType === 'geometries') {
	        geometryRegistry = this.box3DRuntime.assetRegistry.Geometries;
	        geometryId = this.getProperty('geometryId');
	        geometryAsset = geometryRegistry.getAssetById(geometryId);

	        if (geometryAsset) {
	          ref[geometryId] = geometryAsset;
	        }
	      }

	      // If we're asking for materials or everything, get our referenced materials
	      if (!dependencyType || dependencyType === 'materials') {
	        materials = this.getMaterialIds();

	        materials.forEach(function (materialId) {
	          var material = this.box3DRuntime.getEntityById(materialId);
	          if (material) {
	            ref[materialId] = material;
	          }
	        });
	      }

	      // If we're asking for textures or everything, get our referenced textures from our
	      // referenced materials.
	      if (!dependencyType || dependencyType === 'textures') {
	        materials = this.getMaterials();

	        materials.forEach(function (material) {
	          if (material) {
	            _lodash2.default.extend(ref, material.buildListOfReferencedDependencies(dependencyType));
	          }
	        });
	      }

	      return ref;
	    }

	    /**
	     * Register dependencies with the parent asset.
	     * @method registerDependencies
	     * @private
	     * @param {String} type the type of assets to register
	     * @returns {void}
	     */

	  }, {
	    key: 'registerDependencies',
	    value: function registerDependencies() {
	      var geometryId = this.getProperty('geometryId');
	      var materialIds = this.getMaterialIds();

	      if (geometryId) {
	        this.registerDependency(geometryId);
	      }

	      materialIds.forEach(function (materialId) {
	        this.registerMaterialDependency(materialId);
	      }, this);
	    }

	    /**
	     * Register material dependency with the parent asset. If the given material
	     * ID isn't valid, the 'missing material' will be registered.
	     * @method registerMaterialDependency
	     * @private
	     * @param  {String} materialId The ID of the material to register
	     * @returns {void}
	     */

	  }, {
	    key: 'registerMaterialDependency',
	    value: function registerMaterialDependency(materialId) {
	      var materialRegistry = this.box3DRuntime.assetRegistry.Materials;
	      var missingMaterial = materialRegistry.getMissingMaterial();
	      if (materialRegistry.getAssetById(materialId)) {
	        this.registerDependency(materialId);
	      } else {
	        this.registerDependency(missingMaterial.id);
	      }
	    }

	    /**
	     * Unregister material dependency with the parent asset. If the given material
	     * ID isn't valid, the 'missing material' will be unregistered.
	     * @method unregisterMaterialDependency
	     * @private
	     * @param  {String} materialId The ID of the material to unregister
	     * @returns {void}
	     */

	  }, {
	    key: 'unregisterMaterialDependency',
	    value: function unregisterMaterialDependency(materialId) {
	      var materialRegistry = this.box3DRuntime.assetRegistry.Materials;
	      var missingMaterial = materialRegistry.getMissingMaterial();
	      if (materialRegistry.getAssetById(materialId)) {
	        this.unregisterDependency(materialId);
	      } else {
	        this.unregisterDependency(missingMaterial.id);
	      }
	    }

	    /**
	     * Returns a promise that resolves when a THREE.Mesh or THREE.SkinnedMesh has
	     * been created for this object.
	     * @method createMesh
	     * @private
	     * @returns {Promise} The promise that resolves when the mesh has been created.
	     */

	  }, {
	    key: 'createMesh',
	    value: function createMesh() {
	      var _this2 = this;

	      var geometryAsset = this.getGeometryAsset();
	      if (!geometryAsset) {
	        return Promise.reject(new Error('No geometry asset found for mesh, ' + this.id));
	      }

	      return new Promise(function (resolve) {
	        geometryAsset.when('loadBase', function () {
	          var geometry = _this2.getGeometry();
	          if (!_this2.runtimeData) {
	            _this2.runtimeData = _this2._allocateMesh(geometry);
	            _this2.runtimeData.castShadow = true;
	            _this2.runtimeData.receiveShadow = true;
	            _this2.runtimeData.material = null;
	          } else {
	            _this2.runtimeData.geometry = geometry;
	          }

	          // Check if the number of materials in the geometry doesn't match with the
	          // materials for this mesh. If they don't match, adjust this meshes material
	          // array.
	          var materialIds = _this2.getProperty('materials');
	          var maxMaterialIndex = geometryAsset ? geometryAsset.getMaxMaterialIndex('triangles') : -1;
	          var nMaterials = Math.max(maxMaterialIndex + 1, materialIds.length);
	          var extraMaterialIds = Array(nMaterials - materialIds.length);
	          // Fill out the array (note: not using Array.prototype.fill because IE11 lacks support)
	          for (var i = 0; i < extraMaterialIds.length; i++) {
	            extraMaterialIds[i] = null;
	          }
	          _this2.setProperty('materials', materialIds.concat(extraMaterialIds));

	          // Inform anyone who cares that a new mesh has been loaded.
	          // TODO: do we still need this? Can they listen to 'loadBase' instead?
	          var parentAsset = _this2.getParentAsset();
	          parentAsset.trigger('meshLoaded', _this2);

	          resolve();
	        });

	        if (geometryAsset.isBaseUnloaded()) {
	          geometryAsset.load();
	        }
	      });
	    }

	    /**
	     * Returns a promise that resolves when the "missing" material is loaded.
	     * @method loadMissingMaterial
	     * @private
	     * @returns {Promise} The promise that resolves when the material is loaded.
	     */

	  }, {
	    key: 'loadMissingMaterial',
	    value: function loadMissingMaterial() {
	      var _this3 = this;

	      return new Promise(function (resolve) {
	        var materialRegistry = _this3.box3DRuntime.assetRegistry.Materials;
	        var missingMaterial = materialRegistry.getMissingMaterial();

	        if (!missingMaterial || missingMaterial.isLoaded()) {
	          return resolve();
	        }

	        missingMaterial.load(function () {
	          return resolve();
	        });
	      });
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'createRuntimeData',
	    value: function createRuntimeData(callback) {
	      var _this4 = this;

	      Promise.all([this.createMesh(), this.loadMissingMaterial()]).then(callback).catch(function (err) {
	        _log2.default.error(_this4.box3DRuntime.engineName + ' - BaseMeshObject: ' + err.toString());
	        callback();
	      });
	    }

	    /** @inheritdoc */

	  }, {
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      var _this5 = this;

	      _get(Object.getPrototypeOf(BaseMeshObject.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      if (changes.hasOwnProperty('geometryId')) {
	        var prevGeometryId = this.getPreviousProperty('geometryId');
	        var newGeometryId = this.getProperty('geometryId');

	        // Stop listening to the old geometry, start listening to the new one.
	        this.registerChangeListener(prevGeometryId, this.onGeometryChanged, false);
	        this.registerChangeListener(newGeometryId, this.onGeometryChanged, true);

	        // Reload the runtime data.
	        if (reason !== 'init') {
	          this.reloadBase();
	          return;
	        }
	      }

	      if (changes.hasOwnProperty('materials')) {
	        (function () {
	          var materialType = _this5._getMaterialType();
	          var prevMaterialIds = _this5.getPreviousProperty('materials') || [];
	          var newMaterialIds = _this5.getMaterialIds();

	          // Stop listening for changes to the previous materials.
	          prevMaterialIds.forEach(function (materialId) {
	            this.registerChangeListener(materialId, this.onMaterialChanged, false);
	          }, _this5);

	          // Allocate the MeshFaceMaterial (container for other materials).
	          if (!(_this5.runtimeData.material instanceof _three2.default.MeshFaceMaterial)) {
	            _this5.runtimeData.material = new _three2.default.MeshFaceMaterial();
	          }

	          // Reset the MeshFaceMaterial's material list.
	          _this5.runtimeData.material.materials = [];

	          // Assign the new materials and listen for changes.
	          newMaterialIds.forEach(function (materialId, index) {
	            this.registerChangeListener(materialId, this.onMaterialChanged, true);
	            this.loadAndAssignMaterial(this.runtimeData.material.materials, index, materialId, materialType);
	          }, _this5);
	        })();
	      }

	      if (changes.hasOwnProperty('customDepthMaterial')) {
	        var prevDepthMaterialId = this.getPreviousProperty('customDepthMaterial');
	        var newDepthMaterialId = this.getProperty('customDepthMaterial');

	        // Stop listening to the old material, start listening to the new one.
	        this.registerChangeListener(prevDepthMaterialId, this.onMaterialChanged, false);
	        this.registerChangeListener(newDepthMaterialId, this.onMaterialChanged, true);

	        // Assign the new depth material.
	        this.loadAndAssignMaterial(this.runtimeData, 'customDepthMaterial', newDepthMaterialId, this.getDepthMaterialType());
	      }
	    }

	    /**
	     * Called in response to property changes when runtimeData might not be available.
	     * @method _applyPropertiesUnloaded
	     * @protected
	     * @param {Object} changes the properties that have changed
	     * @returns {void}
	     */

	  }, {
	    key: '_applyPropertiesUnloaded',
	    value: function _applyPropertiesUnloaded(changes) {
	      var parentAsset = this.getParentAsset(),
	          prevMaterialIds,
	          newMaterialIds,
	          prevDepthMaterialId,
	          newDepthMaterialId,
	          prevGeometryId,
	          newGeometryId;

	      // If the parent asset doesn't exist, this object is in the process of being
	      // cleaned up so ignore the changes.
	      if (!parentAsset) {
	        return;
	      }

	      if (changes && changes.hasOwnProperty('materials')) {
	        prevMaterialIds = this.getPreviousMaterialIds() || [];
	        newMaterialIds = this.getMaterialIds();

	        if (_lodash2.default.isArray(prevMaterialIds)) {
	          // Unregister previous materials.
	          prevMaterialIds.forEach(function (materialId) {
	            this.unregisterMaterialDependency(materialId);
	          }, this);
	        }

	        // Register new materials.
	        newMaterialIds.forEach(function (materialId) {
	          this.registerMaterialDependency(materialId);
	        }, this);
	      }

	      if (changes && changes.hasOwnProperty('customDepthMaterial')) {
	        prevDepthMaterialId = this.getPreviousProperty('customDepthMaterial');
	        newDepthMaterialId = this.getProperty('customDepthMaterial');

	        // Unregister previous material.
	        this.unregisterMaterialDependency(prevDepthMaterialId);

	        // Register new material.
	        this.registerMaterialDependency(newDepthMaterialId);
	      }

	      if (changes && changes.hasOwnProperty('geometryId')) {
	        prevGeometryId = this.getPreviousProperty('geometryId');
	        newGeometryId = this.getProperty('geometryId');

	        // Unregister previous geometry.
	        if (prevGeometryId) {
	          this.unregisterDependency(prevGeometryId);
	        }

	        // Register new geometry.
	        if (newGeometryId) {
	          this.registerDependency(newGeometryId);
	        }
	      }
	    }

	    /**
	     * Called in response to MaterialAsset property changes.
	     * @method onMaterialChanged
	     * @public
	     * @returns {void}
	     */

	  }, {
	    key: 'onMaterialChanged',
	    value: function onMaterialChanged() {
	      // TODO: Update runtimeData.customDepthMaterial
	      return;
	    }

	    /**
	     * Called in response to GeometryAsset property changes.
	     * @method onGeometryChanged
	     * @public
	     * @returns {void}
	     */

	  }, {
	    key: 'onGeometryChanged',
	    value: function onGeometryChanged() {
	      this.createRuntimeData();
	    }

	    /**
	     * Called when a material asset is deleted.
	     * @method onMaterialDeleted
	     * @public
	     * @param materialId {String} the ID of the material being unloaded
	     * @returns {void}
	     */

	  }, {
	    key: 'onMaterialDeleted',
	    value: function onMaterialDeleted(unloadedMaterialId) {
	      var materialIds = this.getMaterialIds(),
	          removed = false;

	      // Remove the unloaded material from the list of materials.
	      materialIds.forEach(function (materialId, index) {
	        if (materialId === unloadedMaterialId) {
	          materialIds[index] = undefined;
	          removed = true;
	        }
	      });

	      // If the material was in-use, issue a warning and save the material list.
	      if (removed) {
	        _log2.default.warn(this.box3DRuntime.engineName + ' - BaseMeshObject: Material, ' + unloadedMaterialId + ', referenced by mesh, ' + this.id + ', has been deleted.');

	        this.setProperty('materials', materialIds);
	      }
	    }

	    /**
	     * Get the bounds of this object, but not its children.
	     * @method getLocalBounds
	     * @public
	     * @returns {THREE.Box3} The bounds of this object.
	     */

	  }, {
	    key: 'getLocalBounds',
	    value: function getLocalBounds() {
	      var geometryAsset = this.getGeometryAsset();

	      if (geometryAsset) {
	        return geometryAsset.getBounds();
	      }

	      return new _three2.default.Box3();
	    }

	    /**
	     * Set the given material to be used by this mesh.
	     * @method setMaterial
	     * @public
	     * @param {String|Object} material the ID of the material asset, a MaterialAsset or null/undefined
	     * @param {Integer} [index] the index to assign the material to (default is 0)
	     * @returns {void}
	     */

	  }, {
	    key: 'setMaterial',
	    value: function setMaterial(material, index) {
	      var materialIds = _lodash2.default.clone(this.getOwnProperty('materials'));
	      var prefabMatIds;
	      var i;
	      if (!materialIds) {
	        prefabMatIds = this.getPrefabProperty('materials');
	        if (prefabMatIds) {
	          //Populate the instance material array with nulls rather than undefined.
	          materialIds = new Array(prefabMatIds.length);
	          for (i = 0; i < materialIds.length; i++) {
	            materialIds[i] = null;
	          }
	        } else {
	          materialIds = [null];
	        }
	      }

	      // If material is a MaterialAsset, get the ID.
	      material = _lodash2.default.isObject(material) ? material.id : material;

	      // Change undefined -> null.
	      material = material === undefined ? null : material;

	      // Validate the material parameter.
	      if (material !== null && !_lodash2.default.isString(material)) {
	        _log2.default.error(this.box3DRuntime.engineName + ' - BaseMeshObject: Invalid material parameter passed to setMaterial.');
	        return;
	      }

	      // Validate the index parameter.
	      index = index || 0;

	      if (index < 0 || index >= materialIds.length) {
	        _log2.default.error(this.box3DRuntime.engineName + ' - BaseMeshObject: Invalid index parameter passed to setMaterial.');
	        return;
	      }

	      // Assign the material to the index.
	      if (materialIds[index] !== material) {
	        materialIds[index] = material;
	        this.setProperty('materials', materialIds);
	      }
	    }
	  }, {
	    key: 'revertMaterial',
	    value: function revertMaterial(index) {
	      this.setMaterial(null, index);
	    }

	    /**
	     * Set this mesh to cast shadows.
	     * @method castShadowsEnable
	     * @public
	     * @returns {void}
	     */

	  }, {
	    key: 'castShadowsEnable',
	    value: function castShadowsEnable() {
	      this.setProperty('castShadow', true);
	      this.box3DRuntime.needsRender = true;
	    }

	    /**
	     * Set this mesh to not cast shadows.
	     * @method castShadowsDisable
	     * @public
	     * @returns {void}
	     */

	  }, {
	    key: 'castShadowsDisable',
	    value: function castShadowsDisable() {
	      this.setProperty('castShadow', false);
	      this.box3DRuntime.needsRender = true;
	    }

	    /**
	     * Toggle the mesh's shadow-casting setting.
	     * @method castShadowsToggle
	     * @public
	     * @returns {void}
	     */

	  }, {
	    key: 'castShadowsToggle',
	    value: function castShadowsToggle() {
	      var castShadow = this.getProperty('castShadow') ? false : true;
	      this.setProperty('castShadow', castShadow);
	      this.box3DRuntime.needsRender = true;
	    }
	  }]);

	  return BaseMeshObject;
	}(_Box3DObject3.default);

	BaseMeshObject.schema = _lodash2.default.extend({}, _Box3DObject3.default.schema, {
	  customDepthMaterial: {
	    type: 'id',
	    description: '',
	    default: null
	  },
	  materials: {
	    type: 'array',
	    description: '',
	    default: ['missingMaterial']
	  },
	  geometryId: {
	    type: 'id',
	    description: '',
	    default: null
	  }
	});
	BaseMeshObject.events = {
	  setMaterial: {
	    scope: 'local',
	    action: true,
	    category: 'Materials',
	    params: [{
	      name: 'material',
	      type: 'asset',
	      filter: {
	        material: true
	      }
	    }, {
	      name: 'index',
	      type: 'i',
	      description: 'Optional - the index of the material (default is 0).',
	      default: 0
	    }]
	  },
	  castShadowsEnable: {
	    params: [],
	    action: true,
	    category: 'Rendering'
	  },
	  castShadowsDisable: {
	    params: [],
	    action: true,
	    category: 'Rendering'
	  },
	  castShadowsToggle: {
	    params: [],
	    action: true,
	    category: 'Rendering'
	  }
	};

	window.Box3D.BaseMeshObject = BaseMeshObject;
	exports.default = BaseMeshObject;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _three = __webpack_require__(8);

	var _three2 = _interopRequireDefault(_three);

	var _BaseMeshObject2 = __webpack_require__(141);

	var _BaseMeshObject3 = _interopRequireDefault(_BaseMeshObject2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/* global Box3D */
	/**
	 * @class StaticMeshObject
	 * @constructor
	 */

	var StaticMeshObject = function (_BaseMeshObject) {
	  _inherits(StaticMeshObject, _BaseMeshObject);

	  function StaticMeshObject(json) {
	    _classCallCheck(this, StaticMeshObject);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(StaticMeshObject).call(this, json));
	  }

	  _createClass(StaticMeshObject, [{
	    key: '_allocateMesh',
	    value: function _allocateMesh(geometry) {
	      return new _three2.default.Mesh(geometry);
	    }
	  }, {
	    key: '_getMaterialType',
	    value: function _getMaterialType() {
	      var geometry = this.getGeometry();
	      if (geometry && geometry.hasTangents) {
	        return 'staticTangents';
	      }
	      return 'static';
	    }
	  }]);

	  return StaticMeshObject;
	}(_BaseMeshObject3.default);

	Box3D.StaticMeshObject = StaticMeshObject;
	exports.default = StaticMeshObject;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Box3DObject2 = __webpack_require__(137);

	var _Box3DObject3 = _interopRequireDefault(_Box3DObject2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @class ModelObject
	 * @constructor
	 */

	var ModelObject = function (_Box3DObject) {
	  _inherits(ModelObject, _Box3DObject);

	  function ModelObject(json) {
	    _classCallCheck(this, ModelObject);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ModelObject).call(this, json));

	    _this.bound = false;
	    return _this;
	  }

	  /** @inheritdoc */

	  _createClass(ModelObject, [{
	    key: '_applyPropertiesLoaded',
	    value: function _applyPropertiesLoaded(changes, reason) {
	      var _this2 = this;

	      _get(Object.getPrototypeOf(ModelObject.prototype), '_applyPropertiesLoaded', this).call(this, changes, reason);

	      if (this.bound) {
	        this.trigger('updated', this);
	        return;
	      }

	      this.when('loadChildren', function () {
	        _this2.bindChildMeshes();
	        _this2.trigger('updated', _this2);
	      });
	    }

	    /**
	     * Bind SkinnedMeshObject children to this model's hierarchy.
	     * @method bindChildMeshes
	     */

	  }, {
	    key: 'bindChildMeshes',
	    value: function bindChildMeshes() {
	      var _this3 = this;

	      this.traverse(function (obj) {
	        if (obj.type === 'skinnedMesh') {
	          obj.bindToHierarchy(_this3);
	        }
	      });

	      this.bound = true;
	    }
	  }]);

	  return ModelObject;
	}(_Box3DObject3.default);

	window.Box3D.ModelObject = ModelObject;
	exports.default = ModelObject;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	  'use strict';

	  var Box3D = window.Box3D = window.Box3D || {};

	  // http://stackoverflow.com/a/6660151
	  Box3D.safeHTML = function safeHTML(s) {
	    var div = document.createElement('div');
	    div.innerHTML = s;
	    var scripts = div.getElementsByTagName('script');
	    var i = scripts.length;
	    while (i--) {
	      scripts[i].parentNode.removeChild(scripts[i]);
	    }
	    return div.innerHTML;
	  };

	  return Box3D;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	  'use strict';

	  var Box3D = window.Box3D = window.Box3D || {},
	      requests = {},
	      requestCount = 0,
	      //for aborting XHR requests
	  promiseCache = {},
	      progressListeners = {},
	      baseUrl;

	  /**
	   * Development environment resource loader implementation
	   * @constructor
	   */
	  function DevResourceLoader(baseUrl) {
	    baseUrl = baseUrl || '/';
	  }

	  // Attach to global Box3D object
	  Box3D.DevResourceLoader = DevResourceLoader;

	  /**
	   * Loads the specified asset
	   * @param  {VeroldAsset} asset      The asset
	   * @param  {Object} params          Type specific parameters such as
	   *                                    compression type, max size, etc...
	   * @param  {Function} progressFn    Callback for progress during load
	   * @return {Promise}                An asynchronous promise which will be
	   *                                    resolved on resource load
	   */
	  DevResourceLoader.prototype.load = function (asset, params, progressFn) {
	    switch (asset.type) {
	      case 'texture2D':
	      case 'textureCube':
	        return loadTexture(asset, params, progressFn);

	      case 'meshGeometry':
	      case 'animation':
	        return loadArrayBuffer(asset, params, progressFn);
	    }

	    return Promise.reject(new Error('Unkown type: ' + asset.type));
	  };

	  //interface for request abortion
	  DevResourceLoader.prototype.abortRequests = function () {
	    abortRequests();
	  };

	  //another interface for request abortion
	  DevResourceLoader.prototype.abortRequest = function (key) {
	    abortRequest(key);
	  };

	  //match other resource loader. Halt requests, etc
	  DevResourceLoader.prototype.destroy = function () {
	    abortRequests();
	  };

	  /**
	  * Abort all XHR requests
	  * @return void
	  */
	  function abortRequests() {
	    for (var reqKey in requests) {
	      abortRequest(reqKey);
	    }
	  }

	  /**
	  * All XHR requests will be tracked by their URL
	  * @param {object} xhr The XHR object that we want to track
	  * @param {string} url The url of the request, we'll use this to construct a key
	  * @param {string | null} key Optional key to store the xhr request at.
	  *                             Used for explicit xhr abortion
	  * @return {string} The key at which the request is stored
	  *
	  */
	  function addRequest(xhr, url, key) {
	    if (key === undefined) {
	      do {
	        key = url + '-' + requestCount;
	        requestCount++;
	      } while (requests.hasOwnProperty(key));
	    }

	    //check uniqueness
	    if (requests.hasOwnProperty(key)) {
	      throw new Error('Non-unique XHR Key');
	    }

	    requests[key] = xhr;
	    return key;
	  }

	  /**
	  * Remove an xhr from the request object, on completion
	  * @param {string} key The key at qhich to remove the request
	  * @return {void}
	  */
	  function removeRequest(key) {
	    delete requests[key];
	  }

	  /**
	  * Abort a single request, by key
	  * @param {string} key The key that the xhr has been stored at
	  * @return void
	  */
	  function abortRequest(key) {
	    var xhr = requests[key];
	    if (!xhr) {
	      return;
	    }
	    removeRequest(key);
	    xhr.abort();
	  }

	  /**
	   * Strategy for loading textures
	   * @param  {VeroldAsset} asset      The asset
	   * @param  {Object} params          Type specific parameters such as compression
	   *                                    type, max size, etc...
	   * @param  {Function} progressFn    Callback for progress during load
	   * @return {Promise}                An asynchronous promise which will be
	   *                                    resolved on resource load]
	   */
	  function loadTexture(asset, params, progressFn) {
	    var xhrKey, result, path, properties;

	    params = params || {};

	    result = getResourceForTexture(asset, params);
	    if (!result) {
	      return Promise.reject(new Error('Failed to find suitable resource for texture, ' + asset.id));
	    }
	    path = getResourcePathPrefix(asset) + result.path;
	    properties = result.properties;
	    if (result.contentType === 'application/unknown') {
	      return Promise.reject(new Error('Texture file has unknown content type.'));
	    }

	    if (!promiseCache[path]) {
	      promiseCache[path] = new Promise(function (resolve, reject) {
	        var xhr = new XMLHttpRequest(),
	            total = 0,
	            loaded = 0;

	        xhrKey = addRequest(xhr, path, params.xhrKey);

	        xhr.open('GET', path, true);

	        xhr.responseType = 'arraybuffer';

	        var progress = function progress(ev) {
	          if (ev.lengthComputable) {
	            loaded = ev.loaded;
	            total = ev.total;
	          } else {
	            loaded = ev.loaded;
	            if (!total) {
	              total = parseInt(xhr.getResponseHeader('x-goog-meta-uncompressed-size'));
	            }
	          }

	          if (progressListeners[path]) {
	            progressListeners[path].forEach(function (listener) {
	              listener.call(this, {
	                loaded: loaded,
	                total: total
	              });
	            });
	          }
	        };

	        xhr.addEventListener('progress', progress);

	        xhr.onreadystatechange = function () {
	          if (this.readyState === 4) {
	            xhr.removeEventListener('progress', progress);
	            progressListeners[path] = undefined;

	            /* File protocol returns status == 0 */
	            if (this.status === 200 || this.status === 0) {
	              if (result.contentType === 'image/x-dds') {
	                transformArrayBuffer(xhr, properties, resolve);
	              } else {
	                transformImage(xhr, properties, resolve);
	              }
	            } else {
	              return reject(new Error('Failed to load texture, ' + path));
	            }
	            removeRequest(xhrKey);
	          }
	        };

	        xhr.send();
	      });
	    }

	    if (_.isFunction(progressFn)) {
	      if (!progressListeners[path]) {
	        progressListeners[path] = [];
	      }
	      progressListeners[path].push(progressFn);
	    }

	    return promiseCache[path];
	  }

	  /**
	  * Strategy for loading array buffers
	  * @param  {VeroldAsset} asset     The asset
	  * @param  {Object} params         Type specific parameters such as compression type,
	  *                                 max size, etc...
	  * @param  {Function} progressFn   Callback for progress during load
	  * @return {Promise}               An asynchronous promise which will be resolved
	  *                                 on resource load]]
	  */
	  function loadArrayBuffer(asset, params, progressFn) {
	    var xhrKey, result, path;

	    result = getResources(asset)[0];
	    path = getResourcePathPrefix(asset) + result.path;

	    params = params || {};

	    if (!promiseCache[path]) {
	      promiseCache[path] = new Promise(function (resolve) {
	        var xhr = new XMLHttpRequest(),
	            loaded = 0,
	            total = 0;

	        xhrKey = addRequest(xhr, path, params.xhrKey);

	        xhr.open('GET', path, true);

	        xhr.responseType = 'arraybuffer';

	        var progress = function progress(ev) {
	          if (ev.lengthComputable) {
	            loaded = ev.loaded;
	            total = ev.total;
	          } else {
	            loaded = ev.loaded;
	            if (!total) {
	              total = parseInt(xhr.getResponseHeader('x-goog-meta-uncompressed-size'));
	            }
	          }

	          if (progressListeners[path]) {
	            progressListeners[path].forEach(function (listener) {
	              listener.call(this, {
	                loaded: loaded,
	                total: total
	              });
	            });
	          }
	        };

	        xhr.addEventListener('progress', progress);

	        xhr.onreadystatechange = function () {
	          if (this.readyState === 4) {
	            xhr.removeEventListener('progress', progress);
	            progressListeners[path] = undefined;

	            /* File protocol returns status == 0 */
	            if (this.status === 200 || this.status === 0) {
	              transformArrayBuffer(xhr, {}, resolve);
	            }
	            removeRequest(xhrKey);
	          }
	        };

	        xhr.send();
	      });
	    }

	    if (_.isFunction(progressFn)) {
	      if (!progressListeners[path]) {
	        progressListeners[path] = [];
	      }
	      progressListeners[path].push(progressFn);
	    }

	    return promiseCache[path];
	  }

	  /**
	   * Get the resources object on the asset, defaulting to empty array if not
	   * specified.
	   * @param  {VeroldAsset} asset  The asset
	   * @return {Array}              An array of available resources
	   */
	  function getResources(asset) {
	    return asset.get('resources') || [];
	  }

	  /**
	   * [getResourcePathPrefix description]
	   * @param  {VeroldAsset} asset  The asset
	   * @return {String}             The path prefix as a string
	   */
	  function getResourcePathPrefix(asset) {
	    if (asset.getOwnProperties().isLocal) {
	      return '/';
	    } else {
	      return baseUrl;
	    }
	  }

	  /**
	   * Choose the best texture resource from an asset given query params
	   * @param  {VeroldAsset} asset  The asset
	   * @param  {Object} params      The query params
	   * @return {Object}             A descriptor used to load the texture data
	   */
	  function getResourceForTexture(asset, params) {
	    var results;

	    results = getTextureResources(asset, {
	      compression: params.compression,
	      maxWidth: params.maxWidth,
	      maxHeight: params.maxHeight,
	      width: params.width,
	      height: params.height,
	      pixelFormat: params.pixelFormat,
	      packingFormat: params.packingFormat,
	      bestMatch: true
	    });

	    if (!results.length) {
	      // Try again without compression.
	      results = getTextureResources(asset, {
	        maxWidth: params.maxWidth,
	        maxHeight: params.maxHeight,
	        width: params.width,
	        height: params.height,
	        pixelFormat: params.pixelFormat,
	        packingFormat: params.packingFormat,
	        bestMatch: true
	      });
	    }

	    if (!results.length) {
	      // Try again without compression or pixelFormat
	      results = getTextureResources(asset, {
	        maxWidth: params.maxWidth,
	        maxHeight: params.maxHeight,
	        width: params.width,
	        height: params.height,
	        bestMatch: true
	      });
	    }

	    return results[0];
	  }

	  /**
	   * Get the texture resources matching the provided filters
	   * @param  {VeroldAsset} asset  The asset
	   * @param  {Object} filters     An object containing properties to filter on
	   * @return {Array}              An array of matching assets
	   */
	  function getTextureResources(asset, filters) {
	    var resources = getResources(asset);

	    filters = filters || {};

	    if (filters.compression !== undefined) {
	      resources = _.filter(resources, function (resource) {
	        return resource.properties && resource.properties.compression === filters.compression;
	      });
	    }

	    if (filters.maxWidth !== undefined || filters.maxHeight !== undefined) {
	      resources = _.filter(resources, function (resource) {
	        return resource.properties && (!filters.maxWidth || resource.properties.width <= filters.maxWidth && !filters.maxHeight || resource.properties.height <= filters.maxHeight);
	      });
	    }

	    if (filters.pixelFormat !== undefined) {
	      resources = _.filter(resources, function (resource) {
	        return resource.properties && resource.properties.pixelFormat === filters.pixelFormat;
	      });
	    }

	    if (filters.packingFormat !== undefined) {
	      resources = _.filter(resources, function (resource) {
	        return resource.properties && resource.properties.packingFormat === filters.packingFormat;
	      });
	    }

	    if (filters.bestMatch) {
	      var currentBest;
	      if (resources.length > 1) {
	        _.each(resources, function (res) {
	          var widthDiff = 0;
	          if (filters.width) {
	            widthDiff = Math.abs(filters.width - res.properties.width);
	          }
	          if (!currentBest || filters.width && widthDiff < Math.abs(currentBest.properties.width - res.properties.width)) {
	            currentBest = res;
	          } else if (!filters.width && res.properties.width > currentBest.properties.width) {
	            currentBest = res;
	          }
	        });
	        resources = [currentBest];
	      }
	    }

	    return resources;
	  }

	  /**
	   * Transforms the XHR result into an image tag and returns the result
	   * @param  {XMLHttpRequest} xhr   The XMLHttpRequest object
	   * @param  {Object} properties    An object with properties to be returned along with the result
	   * @param  {Function} fn          The callback function which will receive the result
	   */
	  function transformImage(xhr, properties, fn) {
	    var data, raw, b64, dataURI, img, i;

	    data = new Uint8Array(xhr.response);

	    // A loop is used here instead of fromCharCode.apply(null, data) to avoid stack overflows
	    // on certain platforms (e.g. iOS) when image size is of a certain size.
	    raw = '';
	    for (i = 0; i < data.length; i++) {
	      raw += String.fromCharCode(data[i]);
	    }

	    b64 = btoa(raw);
	    dataURI = 'data:' + xhr.getResponseHeader('Content-Type') + ';base64,' + b64;

	    img = document.createElement('img');

	    img.src = dataURI;

	    fn({
	      type: 'image',
	      data: img,
	      properties: properties
	    });
	  }

	  /**
	  * Transforms the XHR result into an array buffer and returns the result
	  * @param  {XMLHttpRequest} xhr   The XMLHttpRequest object
	  * @param  {Object} properties    An object with properties to be returned along with the result
	  * @param  {Function} fn          The callback function which will receive the result
	   */
	  function transformArrayBuffer(xhr, properties, fn) {
	    fn({
	      properties: properties || {},
	      data: xhr.response
	    });
	  }

	  return DevResourceLoader;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }
/******/ ]);