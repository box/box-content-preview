import React from 'react';
import { fireEvent, render, screen } from '@testing-library/react';
import { userEvent } from '@testing-library/user-event';
import DashControls, { Props } from '../DashControls';
import subtitles from '../../controls/media/__mocks__/subtitles';
import { Quality } from '../../controls/media/MediaSettingsMenuQuality';
import { SUBTITLES_OFF } from '../../../constants';

describe('DashControls', () => {
    describe('render', () => {
        function CustomBadge(): JSX.Element {
            return <div className="custom-badge">custom</div>;
        }

        const getDefaults = (): Props => ({
            audioTrack: 1,
            audioTracks: [],
            autoplay: false,
            isPlaying: false,
            isPlayingHD: false,
            onAudioTrackChange: jest.fn(),
            onAutoplayChange: jest.fn(),
            onFullscreenToggle: jest.fn(),
            onMuteChange: jest.fn(),
            onPlayPause: jest.fn(),
            onQualityChange: jest.fn(),
            onRateChange: jest.fn(),
            onTimeChange: jest.fn(),
            onVolumeChange: jest.fn(),
            quality: Quality.AUTO,
            rate: '1.0',
        });
        const renderView = (props = {}) => render(<DashControls {...getDefaults()} {...props} />);

        test('should return a valid wrapper', async () => {
            const onAudioTrackChange = jest.fn();
            const onAutoplayChange = jest.fn();
            const onFullscreenToggle = jest.fn();
            const onMuteChange = jest.fn();
            const onQualityChange = jest.fn();
            const onRateChange = jest.fn();
            const onPlayPause = jest.fn();
            const onTimeChange = jest.fn();
            const onVolumeChange = jest.fn();
            renderView({
                onAudioTrackChange,
                onAutoplayChange,
                onFullscreenToggle,
                onMuteChange,
                onPlayPause,
                onQualityChange,
                onRateChange,
                onTimeChange,
                onVolumeChange,
            });

            await userEvent.click(screen.getByTitle('Enter fullscreen'));
            expect(onFullscreenToggle).toHaveBeenCalledTimes(1);

            await userEvent.click(screen.getByTitle('Play'));
            expect(onPlayPause).toHaveBeenCalledTimes(1);

            fireEvent.mouseDown(screen.getByLabelText('Media Slider'));
            expect(onTimeChange).toHaveBeenCalledTimes(1);

            await userEvent.click(screen.getByTitle('Mute'));
            expect(onMuteChange).toHaveBeenCalledTimes(1);

            fireEvent.mouseDown(screen.getByLabelText('Volume Slider'));
            expect(onVolumeChange).toHaveBeenCalledTimes(1);
        });

        test.each([true, false])('should set isHDSupported prop on MediaSettings as %s', async isHDSupported => {
            renderView({ isHDSupported });

            await userEvent.click(screen.getByTitle('Settings'));

            expect(screen.getByTestId('bp-media-settings-quality')).toHaveAttribute(
                'aria-disabled',
                `${!isHDSupported}`,
            );
        });

        test('should not pass along badge if not playing HD', () => {
            renderView({ badge: <CustomBadge /> });

            expect(screen.queryByTestId('bp-media-controls-hd')).not.toBeInTheDocument();
        });

        test('should pass along badge if playing HD', () => {
            renderView({ isPlayingHD: true });

            expect(screen.queryByTestId('bp-media-controls-hd')).toBeInTheDocument();
        });

        test('should render SubtitlesToggle if subtitles exist', async () => {
            const onSubtitlesToggle = jest.fn();
            renderView({ isAutoGeneratedSubtitles: true, onSubtitlesToggle, subtitles });

            expect(screen.queryByTitle('Subtitles/Closed Captions')).not.toBeInTheDocument();
            expect(screen.queryByTitle('Auto-Generated Captions')).toBeInTheDocument();
            expect(screen.queryByTitle('Auto-Generated Captions')).toHaveAttribute('aria-pressed', 'true');

            await userEvent.click(screen.getByTitle('Auto-Generated Captions'));

            expect(onSubtitlesToggle).toHaveBeenCalledTimes(1);
        });

        test('should render with isShowingSubtitles as false if subtitle is SUBTITLES_OFF', () => {
            renderView({ subtitle: SUBTITLES_OFF, subtitles });

            expect(screen.queryByTitle('Auto-Generated Captions')).not.toBeInTheDocument();
            expect(screen.queryByTitle('Subtitles/Closed Captions')).toBeInTheDocument();
            expect(screen.queryByTitle('Subtitles/Closed Captions')).toHaveAttribute('aria-pressed', 'false');
        });
    });
});
