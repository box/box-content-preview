import React from 'react';
import classNames from 'classnames';
import { Props as DurationLabelsProps } from '../controls/media/DurationLabels';

import HDBadge from '../controls/media/HDBadge';
import MediaFullscreenToggle, { Props as MediaFullscreenToggleProps } from '../controls/media/MediaFullscreenToggle';
import MediaSettings, { Props as MediaSettingsProps } from '../controls/media/MediaSettings';
import PlayPauseToggle, { Props as PlayControlsProps } from '../controls/media/PlayPauseToggle';
import SubtitlesToggle, { Props as SubtitlesToggleProps } from '../controls/media/SubtitlesToggle';
import TimeControls, { Props as TimeControlsProps } from '../controls/media/TimeControls';
import VolumeControls, { Props as VolumeControlsProps } from '../controls/media/VolumeControls';
import { VIDEO_PLAYER_CONTROL_BAR_HEIGHT, SUBTITLES_OFF } from '../../constants';
import './DashControls.scss';
import AnnotationsControls from '../controls/annotations/AnnotationsControls';
import { AnnotationMode } from '../../types/annotations';

import DrawingControls from '../controls/annotations/DrawingControls';
import ExperiencesProvider, { Props as ExperiencesProviderProps } from '../controls/experiences';
import { Experiences } from '../../types/targeting';

export type Props = DurationLabelsProps &
    MediaFullscreenToggleProps &
    ExperiencesProviderProps &
    MediaSettingsProps &
    PlayControlsProps &
    SubtitlesToggleProps &
    TimeControlsProps &
    VolumeControlsProps & {
        isPlayingHD?: boolean;
        movePlayback: (isForward: boolean, duration: number) => void;
        annotationColor?: string;
        annotationMode?: AnnotationMode;
        hasDrawing?: boolean;
        hasRegion?: boolean;
        experiences?: Experiences;
        onAnnotationModeClick: ({ mode }: { mode: AnnotationMode }) => void;
        onAnnotationModeEscape: () => void;
        videoAnnotationsEnabled?: boolean;
        onAnnotationColorChange: (color: string) => void | undefined;
    };

export default function DashControls({
    audioTrack,
    audioTracks,
    autoplay,
    aspectRatio,
    bufferedRange,
    currentTime,
    durationTime,
    experiences,
    filmstripInterval,
    filmstripUrl,
    hasDrawing,
    hasRegion,
    isAutoGeneratedSubtitles,
    isHDSupported,
    isPlaying,
    isPlayingHD,
    onAudioTrackChange,
    onAutoplayChange,
    onFullscreenToggle,
    onMuteChange,
    onPlayPause,
    onQualityChange,
    onRateChange,
    onSubtitleChange,
    onSubtitlesToggle,
    onTimeChange,
    onVolumeChange,
    movePlayback,
    quality,
    rate,
    subtitle,
    subtitles = [],
    volume,
    annotationColor,
    annotationMode,
    onAnnotationModeClick,
    onAnnotationModeEscape,
    videoAnnotationsEnabled = false,
    onAnnotationColorChange,
}: Props): JSX.Element {
    return (
        <ExperiencesProvider experiences={experiences}>
            <div
                className={classNames('bp-DashControls')}
                data-testid="media-controls-wrapper"
                style={{ height: VIDEO_PLAYER_CONTROL_BAR_HEIGHT }}
            >
                <TimeControls
                    aspectRatio={aspectRatio}
                    bufferedRange={bufferedRange}
                    currentTime={currentTime}
                    durationTime={durationTime}
                    filmstripInterval={filmstripInterval}
                    filmstripUrl={filmstripUrl}
                    onTimeChange={onTimeChange}
                />

                <div
                    className={classNames('bp-DashControls-bar', {
                        'bp-DashControls-bar--two-groups': !videoAnnotationsEnabled,
                        'bp-DashControls-bar--three-groups': videoAnnotationsEnabled,
                    })}
                >
                    <div className="bp-DashControls-group">
                        {videoAnnotationsEnabled && (
                            <>
                                <AnnotationsControls
                                    annotationColor={annotationColor}
                                    annotationMode={annotationMode}
                                    hasDrawing={hasDrawing}
                                    hasRegion={hasRegion}
                                    onAnnotationModeClick={onAnnotationModeClick}
                                    onAnnotationModeEscape={onAnnotationModeEscape}
                                />
                                <DrawingControls
                                    annotationColor={annotationColor}
                                    annotationMode={annotationMode}
                                    onAnnotationColorChange={onAnnotationColorChange}
                                />
                            </>
                        )}
                    </div>
                    <div className="bp-DashControls-group bp-DashControls-group--play-pause">
                        <PlayPauseToggle isPlaying={isPlaying} movePlayback={movePlayback} onPlayPause={onPlayPause} />
                    </div>

                    <div className="bp-DashControls-group">
                        <VolumeControls onMuteChange={onMuteChange} onVolumeChange={onVolumeChange} volume={volume} />
                        <SubtitlesToggle
                            isAutoGeneratedSubtitles={isAutoGeneratedSubtitles}
                            isShowingSubtitles={subtitle !== SUBTITLES_OFF}
                            onSubtitlesToggle={onSubtitlesToggle}
                            subtitles={subtitles}
                        />
                        <MediaSettings
                            audioTrack={audioTrack}
                            audioTracks={audioTracks}
                            autoplay={autoplay}
                            badge={isPlayingHD ? <HDBadge /> : undefined}
                            className="bp-DashControls-settings"
                            isHDSupported={isHDSupported}
                            onAudioTrackChange={onAudioTrackChange}
                            onAutoplayChange={onAutoplayChange}
                            onQualityChange={onQualityChange}
                            onRateChange={onRateChange}
                            onSubtitleChange={onSubtitleChange}
                            quality={quality}
                            rate={rate}
                            subtitle={subtitle}
                            subtitles={subtitles}
                        />
                        <MediaFullscreenToggle onFullscreenToggle={onFullscreenToggle} />
                    </div>
                </div>
            </div>
        </ExperiencesProvider>
    );
}
