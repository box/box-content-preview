import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import SubtitlesToggle from '../SubtitlesToggle';
import subtitles from '../__mocks__/subtitles';

describe('SubtitlesToggle', () => {
    const getWrapper = (props = {}) =>
        render(<SubtitlesToggle isShowingSubtitles onSubtitlesToggle={jest.fn()} subtitles={subtitles} {...props} />);

    const getToggle = async () => screen.findByTestId('bp-media-cc-button');

    describe('event handlers', () => {
        test('should toggle isShowingSubtitles when clicked', async () => {
            const onSubtitlesToggle = jest.fn();
            getWrapper({ isShowingSubtitles: false, onSubtitlesToggle });
            const toggle = await getToggle();

            await userEvent.click(toggle);

            expect(onSubtitlesToggle).toHaveBeenCalledWith(true);
        });
    });

    describe('render', () => {
        test('should return a valid wrapper', async () => {
            getWrapper();
            const toggle = await getToggle();

            expect(toggle).toBeInTheDocument();
        });

        test('should return null if no subtitles are passed in', () => {
            getWrapper({ subtitles: [] });
            const toggle = screen.queryByTestId('bp-media-cc-button');

            expect(toggle).toBeNull();
        });

        test.each([true, false])(
            'should set the aria-pressed attribute correspondingly when isShowingSubtitles is %s',
            async isShowingSubtitles => {
                getWrapper({ isShowingSubtitles });
                const toggle = await getToggle();

                if (isShowingSubtitles) {
                    expect(toggle).toHaveAttribute('aria-pressed', 'true');
                } else {
                    expect(toggle).toHaveAttribute('aria-pressed', 'false');
                }
            },
        );

        test.each`
            isAutoGeneratedSubtitles | title
            ${true}                  | ${__('media_auto_generated_captions')}
            ${false}                 | ${__('media_subtitles_cc')}
        `(
            'should set the title accordingly when isAutoGeneratedSubtitles is $isAutoGeneratedSubtitles',
            async ({ isAutoGeneratedSubtitles, title }) => {
                getWrapper({ isAutoGeneratedSubtitles, title });
                const toggle = await screen.findByTitle(title);

                expect(toggle).toBeInTheDocument();
            },
        );
    });
});
