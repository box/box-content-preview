!(function(t) {
    if (typeof exports === 'object' && typeof module !== 'undefined') module.exports = t();
    else if (typeof define === 'function' && define.amd) define([], t);
    else {
        let i;
        (i = typeof window !== 'undefined'
            ? window
            : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this), (i.rbush = t());
    }
})(() => {
    return (function t(i, n, e) {
        function r(h, o) {
            if (!n[h]) {
                if (!i[h]) {
                    const s = typeof require === 'function' && require;
                    if (!o && s) return s(h, !0);
                    if (a) return a(h, !0);
                    const f = new Error(`Cannot find module '${h}'`);
                    throw ((f.code = 'MODULE_NOT_FOUND'), f);
                }
                const l = (n[h] = { exports: {} });
                i[h][0].call(
                    l.exports,
                    (t) => {
                        const n = i[h][1][t];
                        return r(n || t);
                    },
                    l,
                    l.exports,
                    t,
                    i,
                    n,
                    e
                );
            }
            return n[h].exports;
        }
        for (var a = typeof require === 'function' && require, h = 0; h < e.length; h++)
            r(e[h]);
        return r;
    })(
        {
            1: [
                function(t, i, n) {
                    function e(t, i) {
                        if (!(this instanceof e)) return new e(t, i);
                        (this._maxEntries = Math.max(4, t || 9)), (this._minEntries = Math.max(
                            2,
                            Math.ceil(0.4 * this._maxEntries)
                        )), i && this._initFormat(i), this.clear();
                    }
                    function r(t, i, n) {
                        if (!n) return i.indexOf(t);
                        for (let e = 0; e < i.length; e++)
                            if (n(t, i[e])) return e;
                        return -1;
                    }
                    function a(t, i) {
                        h(t, 0, t.children.length, i, t);
                    }
                    function h(t, i, n, e, r) {
                        r || (r = p(null)), (r.minX = 1 / 0), (r.minY = 1 / 0), (r.maxX = -1 / 0), (r.maxY = -1 / 0);
                        for (var a, h = i; h < n; h++)
                            (a = t.children[h]), o(r, t.leaf ? e(a) : a);
                        return r;
                    }
                    function o(t, i) {
                        return (t.minX = Math.min(t.minX, i.minX)), (t.minY = Math.min(
                            t.minY,
                            i.minY
                        )), (t.maxX = Math.max(t.maxX, i.maxX)), (t.maxY = Math.max(t.maxY, i.maxY)), t;
                    }
                    function s(t, i) {
                        return t.minX - i.minX;
                    }
                    function f(t, i) {
                        return t.minY - i.minY;
                    }
                    function l(t) {
                        return (t.maxX - t.minX) * (t.maxY - t.minY);
                    }
                    function u(t) {
                        return t.maxX - t.minX + (t.maxY - t.minY);
                    }
                    function c(t, i) {
                        return (
                            (Math.max(i.maxX, t.maxX) - Math.min(i.minX, t.minX)) *
                            (Math.max(i.maxY, t.maxY) - Math.min(i.minY, t.minY))
                        );
                    }
                    function m(t, i) {
                        let n = Math.max(t.minX, i.minX),
                            e = Math.max(t.minY, i.minY),
                            r = Math.min(t.maxX, i.maxX),
                            a = Math.min(t.maxY, i.maxY);
                        return Math.max(0, r - n) * Math.max(0, a - e);
                    }
                    function d(t, i) {
                        return t.minX <= i.minX && t.minY <= i.minY && i.maxX <= t.maxX && i.maxY <= t.maxY;
                    }
                    function x(t, i) {
                        return i.minX <= t.maxX && i.minY <= t.maxY && i.maxX >= t.minX && i.maxY >= t.minY;
                    }
                    function p(t) {
                        return {
                            children: t,
                            height: 1,
                            leaf: !0,
                            minX: 1 / 0,
                            minY: 1 / 0,
                            maxX: -1 / 0,
                            maxY: -1 / 0
                        };
                    }
                    function M(t, i, n, e, r) {
                        for (var a, h = [i, n]; h.length; )
                            (n = h.pop()), (i = h.pop()), n - i <= e ||
                                ((a = i + Math.ceil((n - i) / e / 2) * e), g(t, a, i, n, r), h.push(i, a, a, n));
                    }
                    i.exports = e;
                    var g = t('quickselect');
                    e.prototype = {
                        all() {
                            return this._all(this.data, []);
                        },
                        search(t) {
                            let i = this.data, n = [], e = this.toBBox;
                            if (!x(t, i)) return n;
                            for (var r, a, h, o, s = []; i; ) {
                                for ((r = 0), (a = i.children.length); r < a; r++)
                                    (h = i.children[r]), (o = i.leaf ? e(h) : h), x(t, o) &&
                                        (i.leaf ? n.push(h) : d(t, o) ? this._all(h, n) : s.push(h));
                                i = s.pop();
                            }
                            return n;
                        },
                        collides(t) {
                            let i = this.data, n = this.toBBox;
                            if (!x(t, i)) return !1;
                            for (var e, r, a, h, o = []; i; ) {
                                for ((e = 0), (r = i.children.length); e < r; e++)
                                    if (((a = i.children[e]), (h = i.leaf ? n(a) : a), x(t, h))) {
                                        if (i.leaf || d(t, h)) return !0;
                                        o.push(a);
                                    }
                                i = o.pop();
                            }
                            return !1;
                        },
                        load(t) {
                            if (!t || !t.length) return this;
                            if (t.length < this._minEntries) {
                                for (let i = 0, n = t.length; i < n; i++)
                                    this.insert(t[i]);
                                return this;
                            }
                            let e = this._build(t.slice(), 0, t.length - 1, 0);
                            if (this.data.children.length)
                                if (this.data.height === e.height) this._splitRoot(this.data, e);
                                else {
                                    if (this.data.height < e.height) {
                                        const r = this.data;
                                        (this.data = e), (e = r);
                                    }
                                    this._insert(e, this.data.height - e.height - 1, !0);
                                }
                            else this.data = e;
                            return this;
                        },
                        insert(t) {
                            return t && this._insert(t, this.data.height - 1), this;
                        },
                        clear() {
                            return (this.data = p([])), this;
                        },
                        remove(t, i) {
                            if (!t) return this;
                            for (var n, e, a, h, o = this.data, s = this.toBBox(t), f = [], l = []; o || f.length; ) {
                                if (
                                    (o || ((o = f.pop()), (e = f[f.length - 1]), (n = l.pop()), (h = !0)), o.leaf &&
                                        (a = r(t, o.children, i)) !== -1)
                                )
                                    return o.children.splice(a, 1), f.push(o), this._condense(f), this;
                                h || o.leaf || !d(o, s)
                                    ? e ? (n++, (o = e.children[n]), (h = !1)) : (o = null)
                                    : (f.push(o), l.push(n), (n = 0), (e = o), (o = o.children[0]));
                            }
                            return this;
                        },
                        toBBox(t) {
                            return t;
                        },
                        compareMinX: s,
                        compareMinY: f,
                        toJSON() {
                            return this.data;
                        },
                        fromJSON(t) {
                            return (this.data = t), this;
                        },
                        _all(t, i) {
                            for (let n = []; t; )
                                t.leaf ? i.push(...t.children) : n.push(...t.children), (t = n.pop());
                            return i;
                        },
                        _build(t, i, n, e) {
                            let r, h = n - i + 1, o = this._maxEntries;
                            if (h <= o) return (r = p(t.slice(i, n + 1))), a(r, this.toBBox), r;
                            e ||
                                ((e = Math.ceil(Math.log(h) / Math.log(o))), (o = Math.ceil(
                                    h / Math.pow(o, e - 1)
                                ))), (r = p([])), (r.leaf = !1), (r.height = e);
                            let s, f, l, u, c = Math.ceil(h / o), m = c * Math.ceil(Math.sqrt(o));
                            for (M(t, i, n, m, this.compareMinX), (s = i); s <= n; s += m)
                                for (
                                    (l = Math.min(s + m - 1, n)), M(t, s, l, c, this.compareMinY), (f = s);
                                    f <= l;
                                    f += c
                                )
                                    (u = Math.min(f + c - 1, l)), r.children.push(this._build(t, f, u, e - 1));
                            return a(r, this.toBBox), r;
                        },
                        _chooseSubtree(t, i, n, e) {
                            for (var r, a, h, o, s, f, u, m; ; ) {
                                if ((e.push(i), i.leaf || e.length - 1 === n)) break;
                                for ((u = m = 1 / 0), (r = 0), (a = i.children.length); r < a; r++)
                                    (h = i.children[r]), (s = l(h)), (f = c(t, h) - s), f < m
                                        ? ((m = f), (u = s < u ? s : u), (o = h))
                                        : f === m && s < u && ((u = s), (o = h));
                                i = o || i.children[0];
                            }
                            return i;
                        },
                        _insert(t, i, n) {
                            let e = this.toBBox, r = n ? t : e(t), a = [], h = this._chooseSubtree(r, this.data, i, a);
                            for (h.children.push(t), o(h, r); i >= 0 && a[i].children.length > this._maxEntries; )
                                this._split(a, i), i--;
                            this._adjustParentBBoxes(r, a, i);
                        },
                        _split(t, i) {
                            let n = t[i], e = n.children.length, r = this._minEntries;
                            this._chooseSplitAxis(n, r, e);
                            let h = this._chooseSplitIndex(n, r, e), o = p(n.children.splice(h, n.children.length - h));
                            (o.height = n.height), (o.leaf = n.leaf), a(n, this.toBBox), a(o, this.toBBox), i
                                ? t[i - 1].children.push(o)
                                : this._splitRoot(n, o);
                        },
                        _splitRoot(t, i) {
                            (this.data = p([t, i])), (this.data.height = t.height + 1), (this.data.leaf = !1), a(
                                this.data,
                                this.toBBox
                            );
                        },
                        _chooseSplitIndex(t, i, n) {
                            let e, r, a, o, s, f, u, c;
                            for ((f = u = 1 / 0), (e = i); e <= n - i; e++)
                                (r = h(t, 0, e, this.toBBox)), (a = h(t, e, n, this.toBBox)), (o = m(r, a)), (s =
                                    l(r) + l(a)), o < f
                                    ? ((f = o), (c = e), (u = s < u ? s : u))
                                    : o === f && s < u && ((u = s), (c = e));
                            return c;
                        },
                        _chooseSplitAxis(t, i, n) {
                            let e = t.leaf ? this.compareMinX : s, r = t.leaf ? this.compareMinY : f;
                            this._allDistMargin(t, i, n, e) < this._allDistMargin(t, i, n, r) && t.children.sort(e);
                        },
                        _allDistMargin(t, i, n, e) {
                            t.children.sort(e);
                            let r, a, s = this.toBBox, f = h(t, 0, i, s), l = h(t, n - i, n, s), c = u(f) + u(l);
                            for (r = i; r < n - i; r++)
                                (a = t.children[r]), o(f, t.leaf ? s(a) : a), (c += u(f));
                            for (r = n - i - 1; r >= i; r--)
                                (a = t.children[r]), o(l, t.leaf ? s(a) : a), (c += u(l));
                            return c;
                        },
                        _adjustParentBBoxes(t, i, n) {
                            for (let e = n; e >= 0; e--)
                                o(i[e], t);
                        },
                        _condense(t) {
                            for (var i, n = t.length - 1; n >= 0; n--)
                                t[n].children.length === 0
                                    ? n > 0 ? ((i = t[n - 1].children), i.splice(i.indexOf(t[n]), 1)) : this.clear()
                                    : a(t[n], this.toBBox);
                        },
                        _initFormat(t) {
                            const i = ['return a', ' - b', ';'];
                            (this.compareMinX = new Function('a', 'b', i.join(t[0]))), (this.compareMinY = new Function(
                                'a',
                                'b',
                                i.join(t[1])
                            )), (this.toBBox = new Function(
                                'a',
                                `return {minX: a${t[0]}, minY: a${t[1]}, maxX: a${t[2]}, maxY: a${t[3]}};`
                            ));
                        }
                    };
                },
                { quickselect: 2 }
            ],
            2: [
                function(t, i, n) {
                    function e(t, i, n, h, o) {
                        for ((n = n || 0), (h = h || t.length - 1), (o = o || a); h > n; ) {
                            if (h - n > 600) {
                                let s = h - n + 1,
                                    f = i - n + 1,
                                    l = Math.log(s),
                                    u = 0.5 * Math.exp(2 * l / 3),
                                    c = 0.5 * Math.sqrt(l * u * (s - u) / s) * (f - s / 2 < 0 ? -1 : 1);
                                e(
                                    t,
                                    i,
                                    Math.max(n, Math.floor(i - f * u / s + c)),
                                    Math.min(h, Math.floor(i + (s - f) * u / s + c)),
                                    o
                                );
                            }
                            let m = t[i], d = n, x = h;
                            for (r(t, n, i), o(t[h], m) > 0 && r(t, n, h); d < x; ) {
                                for (r(t, d, x), d++, x--; o(t[d], m) < 0; )
                                    d++;
                                for (; o(t[x], m) > 0; )
                                    x--;
                            }
                            o(t[n], m) === 0 ? r(t, n, x) : (x++, r(t, x, h)), x <= i && (n = x + 1), i <= x &&
                                (h = x - 1);
                        }
                    }
                    function r(t, i, n) {
                        const e = t[i];
                        (t[i] = t[n]), (t[n] = e);
                    }
                    function a(t, i) {
                        return t < i ? -1 : t > i ? 1 : 0;
                    }
                    i.exports = e;
                },
                {}
            ]
        },
        {},
        [1]
    )(1);
});
